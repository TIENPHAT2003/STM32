
DAMH 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c148  0800c148  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800c148  0800c148  0001c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c150  0800c150  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800c158  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020280  2**0
                  CONTENTS
 10 .bss          000045dc  20000280  20000280  00020280  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000485c  2000485c  00020280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017cbe  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000381d  00000000  00000000  00037fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001630  00000000  00000000  0003b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001154  00000000  00000000  0003ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024beb  00000000  00000000  0003df54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b104  00000000  00000000  00062b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8e1d  00000000  00000000  0007dc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007024  00000000  00000000  00156a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0015da84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc84 	.word	0x0800bc84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	0800bc84 	.word	0x0800bc84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6178      	str	r0, [r7, #20]
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	60fa      	str	r2, [r7, #12]
 8000f50:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f98:	441a      	add	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000fbe:	f7ff fc45 	bl	800084c <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	461d      	mov	r5, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faa7 	bl	8000524 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff fc35 	bl	800084c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SpeedReadNonReset+0x118>)
 8000ff0:	f7ff fb02 	bl	80005f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001004:	a31e      	add	r3, pc, #120	; (adr r3, 8001080 <SpeedReadNonReset+0x108>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4614      	mov	r4, r2
 8001014:	461d      	mov	r5, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800101c:	a31a      	add	r3, pc, #104	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f92d 	bl	800028c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4614      	mov	r4, r2
 8001038:	461d      	mov	r5, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001040:	a311      	add	r3, pc, #68	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fad7 	bl	80005f8 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff f91b 	bl	800028c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	f3af 8000 	nop.w
 8001080:	ced91687 	.word	0xced91687
 8001084:	3feb53f7 	.word	0x3feb53f7
 8001088:	532617c2 	.word	0x532617c2
 800108c:	3fb2a305 	.word	0x3fb2a305
 8001090:	404e0000 	.word	0x404e0000

08001094 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010be:	441a      	add	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e1b      	ldrb	r3, [r3, #24]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <CountRead+0x52>
	{
		return enc->count_X4;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa22 	bl	8000524 <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e033      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da00      	bge.n	80010f8 <CountRead+0x64>
 80010f6:	3303      	adds	r3, #3
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa0d 	bl	8000524 <__aeabi_i2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e01e      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d116      	bne.n	8001146 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001120:	fb03 f202 	mul.w	r2, r3, r2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9f8 	bl	8000524 <__aeabi_i2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001144:	e003      	b.n	800114e <CountRead+0xba>
	}else {
		return 0;
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
	}
}
 800114e:	ec43 2b17 	vmov	d7, r2, r3
 8001152:	eeb0 0a47 	vmov.f32	s0, s14
 8001156:	eef0 0a67 	vmov.f32	s1, s15
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <checkNull>:

char txLogBuffer[150] = {0};
bool isTransmitComplete = true;
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <checkNull+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <checkNull+0x10>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <checkNull+0x12>
	return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000334 	.word	0x20000334

08001180 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <log_Init+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000334 	.word	0x20000334

080011a0 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <log_TransmitCompleteHandle+0x34>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d10c      	bne.n	80011cc <log_TransmitCompleteHandle+0x2c>
	isTransmitComplete = true;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <log_TransmitCompleteHandle+0x38>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
	memset(txLogBuffer,0,strlen(txLogBuffer));
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <log_TransmitCompleteHandle+0x3c>)
 80011ba:	f7ff f859 	bl	8000270 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <log_TransmitCompleteHandle+0x3c>)
 80011c6:	f008 f8e4 	bl	8009392 <memset>
 80011ca:	e000      	b.n	80011ce <log_TransmitCompleteHandle+0x2e>
	if(huart != targetUART) return;
 80011cc:	bf00      	nop

}
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000334 	.word	0x20000334
 80011d8:	20000000 	.word	0x20000000
 80011dc:	2000029c 	.word	0x2000029c

080011e0 <log_SendString>:

void log_SendString(){
 80011e0:	b598      	push	{r3, r4, r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK && isTransmitComplete) return;
 80011e4:	f7ff ffbc 	bl	8001160 <checkNull>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <log_SendString+0x16>
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <log_SendString+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d114      	bne.n	8001220 <log_SendString+0x40>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <log_SendString+0x48>)
 80011f8:	f7ff f83a 	bl	8000270 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <log_SendString+0x48>)
 8001202:	210a      	movs	r1, #10
 8001204:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <log_SendString+0x4c>)
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <log_SendString+0x48>)
 800120c:	f7ff f830 	bl	8000270 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4904      	ldr	r1, [pc, #16]	; (8001228 <log_SendString+0x48>)
 8001218:	4620      	mov	r0, r4
 800121a:	f005 f9e7 	bl	80065ec <HAL_UART_Transmit_IT>
 800121e:	e000      	b.n	8001222 <log_SendString+0x42>
	if(checkNull() != HAL_OK && isTransmitComplete) return;
 8001220:	bf00      	nop
}
 8001222:	bd98      	pop	{r3, r4, r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	2000029c 	.word	0x2000029c
 800122c:	20000334 	.word	0x20000334

08001230 <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f008 f920 	bl	8009492 <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <log_AddHeaderArgumentToBuffer+0x48>)
 8001254:	f7ff f80c 	bl	8000270 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <log_AddHeaderArgumentToBuffer+0x48>)
 800125c:	4413      	add	r3, r2
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	4906      	ldr	r1, [pc, #24]	; (800127c <log_AddHeaderArgumentToBuffer+0x4c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f008 f831 	bl	80092cc <siprintf>
	isTransmitComplete = false;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <log_AddHeaderArgumentToBuffer+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000029c 	.word	0x2000029c
 800127c:	0800bca0 	.word	0x0800bca0
 8001280:	20000000 	.word	0x20000000

08001284 <log_AddArgumentToBuffer>:

void log_AddArgumentToBuffer(void *data, DataType type){
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	switch(type){
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d84b      	bhi.n	800132e <log_AddArgumentToBuffer+0xaa>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <log_AddArgumentToBuffer+0x18>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012d5 	.word	0x080012d5
 80012a0:	080012f3 	.word	0x080012f3
 80012a4:	080012ad 	.word	0x080012ad
 80012a8:	08001311 	.word	0x08001311
	case TYPE_FLOAT:
		float *fData = (float*)data;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	613b      	str	r3, [r7, #16]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%.2f,",*fData);
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012b2:	f7fe ffdd 	bl	8000270 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012ba:	189c      	adds	r4, r3, r2
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f941 	bl	8000548 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	491d      	ldr	r1, [pc, #116]	; (8001340 <log_AddArgumentToBuffer+0xbc>)
 80012cc:	4620      	mov	r0, r4
 80012ce:	f007 fffd 	bl	80092cc <siprintf>
		break;
 80012d2:	e02c      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT8:
		uint8_t *uData = (uint8_t*)data;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60bb      	str	r3, [r7, #8]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%u,",*uData);
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012da:	f7fe ffc9 	bl	8000270 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012e2:	1898      	adds	r0, r3, r2
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4916      	ldr	r1, [pc, #88]	; (8001344 <log_AddArgumentToBuffer+0xc0>)
 80012ec:	f007 ffee 	bl	80092cc <siprintf>
		break;
 80012f0:	e01d      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_INT:
		int *iData = (int*)data;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%d,",*iData);
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012f8:	f7fe ffba 	bl	8000270 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 8001300:	1898      	adds	r0, r3, r2
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <log_AddArgumentToBuffer+0xc4>)
 800130a:	f007 ffdf 	bl	80092cc <siprintf>
		break;
 800130e:	e00e      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT32:
		uint32_t *u32Data = (uint32_t*)data;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	617b      	str	r3, [r7, #20]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%ld,",*u32Data);
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 8001316:	f7fe ffab 	bl	8000270 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 800131e:	1898      	adds	r0, r3, r2
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4909      	ldr	r1, [pc, #36]	; (800134c <log_AddArgumentToBuffer+0xc8>)
 8001328:	f007 ffd0 	bl	80092cc <siprintf>
		break;
 800132c:	bf00      	nop
	}
	isTransmitComplete = false;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <log_AddArgumentToBuffer+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	2000029c 	.word	0x2000029c
 8001340:	0800bca4 	.word	0x0800bca4
 8001344:	0800bcac 	.word	0x0800bcac
 8001348:	0800bcb0 	.word	0x0800bcb0
 800134c:	0800bcb4 	.word	0x0800bcb4
 8001350:	20000000 	.word	0x20000000

08001354 <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	615a      	str	r2, [r3, #20]

	if(Input<0){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da4d      	bge.n	8001424 <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <Drive+0x48>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
 800139a:	e018      	b.n	80013ce <Drive+0x7a>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d105      	bne.n	80013b0 <Drive+0x5c>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38
 80013ae:	e00e      	b.n	80013ce <Drive+0x7a>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d105      	bne.n	80013c4 <Drive+0x70>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013c2:	e004      	b.n	80013ce <Drive+0x7a>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <Drive+0x90>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	89da      	ldrh	r2, [r3, #14]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80013e2:	e0b7      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <Drive+0xa8>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	89d9      	ldrh	r1, [r3, #14]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	6393      	str	r3, [r2, #56]	; 0x38
 80013fa:	e0ab      	b.n	8001554 <Drive+0x200>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d107      	bne.n	8001414 <Drive+0xc0>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	89d9      	ldrh	r1, [r3, #14]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001412:	e09f      	b.n	8001554 <Drive+0x200>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	89d9      	ldrh	r1, [r3, #14]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001422:	e097      	b.n	8001554 <Drive+0x200>
	else if(Input>0){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	dd4d      	ble.n	80014c6 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <Drive+0xec>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	89da      	ldrh	r2, [r3, #14]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	e01e      	b.n	800147e <Drive+0x12a>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <Drive+0x104>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	89d9      	ldrh	r1, [r3, #14]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	6393      	str	r3, [r2, #56]	; 0x38
 8001456:	e012      	b.n	800147e <Drive+0x12a>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d107      	bne.n	8001470 <Drive+0x11c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	89d9      	ldrh	r1, [r3, #14]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	460b      	mov	r3, r1
 800146c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800146e:	e006      	b.n	800147e <Drive+0x12a>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	89d9      	ldrh	r1, [r3, #14]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	460b      	mov	r3, r1
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <Drive+0x13e>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001490:	e060      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d105      	bne.n	80014a6 <Drive+0x152>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	6393      	str	r3, [r2, #56]	; 0x38
 80014a4:	e056      	b.n	8001554 <Drive+0x200>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d105      	bne.n	80014ba <Drive+0x166>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014b8:	e04c      	b.n	8001554 <Drive+0x200>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014c4:	e046      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <Drive+0x186>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
 80014d8:	e018      	b.n	800150c <Drive+0x1b8>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d105      	bne.n	80014ee <Drive+0x19a>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
 80014ec:	e00e      	b.n	800150c <Drive+0x1b8>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d105      	bne.n	8001502 <Drive+0x1ae>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001500:	e004      	b.n	800150c <Drive+0x1b8>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <Drive+0x1cc>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800151e:	e019      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d105      	bne.n	8001534 <Drive+0x1e0>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001532:	e00f      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d105      	bne.n	8001548 <Drive+0x1f4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001546:	e005      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001552:	e7ff      	b.n	8001554 <Drive+0x200>
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	ed87 0a02 	vstr	s0, [r7, #8]
 800156c:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edd3 7a01 	vldr	s15, [r3, #4]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	ed93 7a05 	vldr	s14, [r3, #20]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	edd3 7a02 	vldr	s15, [r3, #8]
 800159e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd06      	ble.n	80015fc <Pid_Cal+0x9c>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	e002      	b.n	8001602 <Pid_Cal+0xa2>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	ed93 7a08 	vldr	s14, [r3, #32]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	d506      	bpl.n	8001632 <Pid_Cal+0xd2>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	e002      	b.n	8001638 <Pid_Cal+0xd8>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 7a08 	vldr	s15, [r3, #32]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 6a02 	vldr	s13, [r3, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001650:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001654:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	ed93 7a04 	vldr	s14, [r3, #16]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd02      	ble.n	80016ee <Pid_Cal+0x18e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	e001      	b.n	80016f2 <Pid_Cal+0x192>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d502      	bpl.n	8001712 <Pid_Cal+0x1b2>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	e001      	b.n	8001716 <Pid_Cal+0x1b6>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <vApplicationGetIdleTaskMemory+0x2c>)
 8001738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <vApplicationGetIdleTaskMemory+0x30>)
 800173e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000338 	.word	0x20000338
 8001758:	2000038c 	.word	0x2000038c

0800175c <Kalman_getAngle>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};
int Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0
 8001762:	61f8      	str	r0, [r7, #28]
 8001764:	ed87 0b04 	vstr	d0, [r7, #16]
 8001768:	ed87 1b02 	vstr	d1, [r7, #8]
 800176c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800177a:	f7fe fd85 	bl	8000288 <__aeabi_dsub>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800178c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	69f9      	ldr	r1, [r7, #28]
 80017aa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017d0:	f7fe fd5a 	bl	8000288 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017e2:	f7fe fd51 	bl	8000288 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fd4a 	bl	800028c <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001804:	f7fe fef8 	bl	80005f8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe fd3c 	bl	800028c <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	69f9      	ldr	r1, [r7, #28]
 800181a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800182a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fd25 	bl	8000288 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	69f9      	ldr	r1, [r7, #28]
 8001844:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001858:	f7fe fece 	bl	80005f8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd10 	bl	8000288 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	69f9      	ldr	r1, [r7, #28]
 800186e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800187e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fcfd 	bl	800028c <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	69f9      	ldr	r1, [r7, #28]
 8001898:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018a8:	f7fe fcf0 	bl	800028c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018be:	f7fe ffc5 	bl	800084c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80018d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ea:	f7fe fccd 	bl	8000288 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcbc 	bl	800028c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	69f9      	ldr	r1, [r7, #28]
 800191a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001924:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fca8 	bl	800028c <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	69f9      	ldr	r1, [r7, #28]
 8001942:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800194c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001956:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001960:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001968:	f7fe fe46 	bl	80005f8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc88 	bl	8000288 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001988:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800198c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001990:	f7fe fe32 	bl	80005f8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fc74 	bl	8000288 <__aeabi_dsub>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	69f9      	ldr	r1, [r7, #28]
 80019a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80019b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019b8:	f7fe fe1e 	bl	80005f8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc60 	bl	8000288 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	69f9      	ldr	r1, [r7, #28]
 80019ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80019d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019e0:	f7fe fe0a 	bl	80005f8 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fc4c 	bl	8000288 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	69f9      	ldr	r1, [r7, #28]
 80019f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8a8 	bl	8000b58 <__aeabi_d2iz>
 8001a08:	4603      	mov	r3, r0
};
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3758      	adds	r7, #88	; 0x58
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	0000      	movs	r0, r0
 8001a14:	0000      	movs	r0, r0
	...

08001a18 <MPU6050_Read_All>:
        return 0;
    }
    return 1;
}
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b094      	sub	sp, #80	; 0x50
 8001a1e:	af04      	add	r7, sp, #16
 8001a20:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	230e      	movs	r3, #14
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	223b      	movs	r2, #59	; 0x3b
 8001a34:	21d0      	movs	r1, #208	; 0xd0
 8001a36:	488e      	ldr	r0, [pc, #568]	; (8001c70 <MPU6050_Read_All+0x258>)
 8001a38:	f002 fa5c 	bl	8003ef4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	7a7b      	ldrb	r3, [r7, #9]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001a80:	7c3b      	ldrb	r3, [r7, #16]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001a92:	7cbb      	ldrb	r3, [r7, #18]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001aa4:	7d3b      	ldrb	r3, [r7, #20]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	7d7b      	ldrb	r3, [r7, #21]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd31 	bl	8000524 <__aeabi_i2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <MPU6050_Read_All+0x25c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd21 	bl	8000524 <__aeabi_i2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <MPU6050_Read_All+0x25c>)
 8001ae8:	f7fe feb0 	bl	800084c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd11 	bl	8000524 <__aeabi_i2d>
 8001b02:	a355      	add	r3, pc, #340	; (adr r3, 8001c58 <MPU6050_Read_All+0x240>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fea0 	bl	800084c <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001b16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b22:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001c78 <MPU6050_Read_All+0x260>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001c7c <MPU6050_Read_All+0x264>
 8001b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcf0 	bl	8000524 <__aeabi_i2d>
 8001b44:	a346      	add	r3, pc, #280	; (adr r3, 8001c60 <MPU6050_Read_All+0x248>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fe7f 	bl	800084c <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fce0 	bl	8000524 <__aeabi_i2d>
 8001b64:	a33e      	add	r3, pc, #248	; (adr r3, 8001c60 <MPU6050_Read_All+0x248>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fe6f 	bl	800084c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcd0 	bl	8000524 <__aeabi_i2d>
 8001b84:	a336      	add	r3, pc, #216	; (adr r3, 8001c60 <MPU6050_Read_All+0x248>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fe5f 	bl	800084c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001b98:	f001 fd4c 	bl	8003634 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <MPU6050_Read_All+0x268>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcad 	bl	8000504 <__aeabi_ui2d>
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <MPU6050_Read_All+0x26c>)
 8001bb0:	f7fe fe4c 	bl	800084c <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001bbc:	f001 fd3a 	bl	8003634 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <MPU6050_Read_All+0x268>)
 8001bc4:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	fb03 f202 	mul.w	r2, r3, r2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bde:	4619      	mov	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc99 	bl	8000524 <__aeabi_i2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	ec43 2b10 	vmov	d0, r2, r3
 8001bfa:	f009 fccd 	bl	800b598 <sqrt>
 8001bfe:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c0e:	f7fe ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d137      	bne.n	8001c88 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc80 	bl	8000524 <__aeabi_i2d>
 8001c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c28:	f7fe fe10 	bl	800084c <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	ec43 2b17 	vmov	d7, r2, r3
 8001c34:	eeb0 0a47 	vmov.f32	s0, s14
 8001c38:	eef0 0a67 	vmov.f32	s1, s15
 8001c3c:	f009 fcd8 	bl	800b5f0 <atan>
 8001c40:	ec51 0b10 	vmov	r0, r1, d0
 8001c44:	a308      	add	r3, pc, #32	; (adr r3, 8001c68 <MPU6050_Read_All+0x250>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001c56:	e01d      	b.n	8001c94 <MPU6050_Read_All+0x27c>
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40cc2900 	.word	0x40cc2900
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40606000 	.word	0x40606000
 8001c68:	1a63c1f8 	.word	0x1a63c1f8
 8001c6c:	404ca5dc 	.word	0x404ca5dc
 8001c70:	2000058c 	.word	0x2000058c
 8001c74:	40d00000 	.word	0x40d00000
 8001c78:	43aa0000 	.word	0x43aa0000
 8001c7c:	42121eb8 	.word	0x42121eb8
 8001c80:	200007f8 	.word	0x200007f8
 8001c84:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc41 	bl	8000524 <__aeabi_i2d>
 8001ca2:	4682      	mov	sl, r0
 8001ca4:	468b      	mov	fp, r1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc39 	bl	8000524 <__aeabi_i2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	ec43 2b11 	vmov	d1, r2, r3
 8001cba:	ec4b ab10 	vmov	d0, sl, fp
 8001cbe:	f009 fc69 	bl	800b594 <atan2>
 8001cc2:	ec51 0b10 	vmov	r0, r1, d0
 8001cc6:	a34a      	add	r3, pc, #296	; (adr r3, 8001df0 <MPU6050_Read_All+0x3d8>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc94 	bl	80005f8 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <MPU6050_Read_All+0x3c8>)
 8001cde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce2:	f7fe fefb 	bl	8000adc <__aeabi_dcmplt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <MPU6050_Read_All+0x2ea>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <MPU6050_Read_All+0x3cc>)
 8001cf8:	f7fe ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d114      	bne.n	8001d2c <MPU6050_Read_All+0x314>
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <MPU6050_Read_All+0x3cc>)
 8001d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d0c:	f7fe ff04 	bl	8000b18 <__aeabi_dcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <MPU6050_Read_All+0x32a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <MPU6050_Read_All+0x3c8>)
 8001d22:	f7fe fedb 	bl	8000adc <__aeabi_dcmplt>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <MPU6050_Read_All+0x32a>
    {
        KalmanY.angle = pitch;
 8001d2c:	492e      	ldr	r1, [pc, #184]	; (8001de8 <MPU6050_Read_All+0x3d0>)
 8001d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d32:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001d40:	e016      	b.n	8001d70 <MPU6050_Read_All+0x358>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001d48:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001d4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001d50:	eef0 1a67 	vmov.f32	s3, s15
 8001d54:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d58:	4823      	ldr	r0, [pc, #140]	; (8001de8 <MPU6050_Read_All+0x3d0>)
 8001d5a:	f7ff fcff 	bl	800175c <Kalman_getAngle>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbdf 	bl	8000524 <__aeabi_i2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001d76:	4690      	mov	r8, r2
 8001d78:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MPU6050_Read_All+0x3cc>)
 8001d82:	4640      	mov	r0, r8
 8001d84:	4649      	mov	r1, r9
 8001d86:	f7fe fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <MPU6050_Read_All+0x38a>
        DataStruct->Gx = -DataStruct->Gx;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d96:	4614      	mov	r4, r2
 8001d98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001da8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001dac:	eeb0 1a47 	vmov.f32	s2, s14
 8001db0:	eef0 1a67 	vmov.f32	s3, s15
 8001db4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <MPU6050_Read_All+0x3d4>)
 8001dba:	f7ff fccf 	bl	800175c <Kalman_getAngle>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001dd0:	bf00      	nop
 8001dd2:	3740      	adds	r7, #64	; 0x40
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	c0568000 	.word	0xc0568000
 8001de4:	40568000 	.word	0x40568000
 8001de8:	20000050 	.word	0x20000050
 8001dec:	20000008 	.word	0x20000008
 8001df0:	1a63c1f8 	.word	0x1a63c1f8
 8001df4:	404ca5dc 	.word	0x404ca5dc

08001df8 <gettheta>:

float leftvolt = 0, rightvolt = 0;

float PWM_L = 0,PWM_R = 0;

float gettheta(int enc_l, int enc_r){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	float angle =(0.5*360/370)*(enc_l+ enc_r);
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb8b 	bl	8000524 <__aeabi_i2d>
 8001e0e:	a30a      	add	r3, pc, #40	; (adr r3, 8001e38 <gettheta+0x40>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fec2 	bl	8000ba8 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
	return angle;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	ee07 3a90 	vmov	s15, r3
}
 8001e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	3759f22a 	.word	0x3759f22a
 8001e3c:	3fdf2298 	.word	0x3fdf2298

08001e40 <getphi>:

float getphi(int enc_l, int enc_r){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	float angle = (3.2/22.5)*(enc_l - enc_r)*(360/370);
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	a310      	add	r3, pc, #64	; (adr r3, 8001e98 <getphi+0x58>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe fbc2 	bl	80005f8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe94 	bl	8000ba8 <__aeabi_d2f>
 8001e80:	4603      	mov	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
	return angle;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	ee07 3a90 	vmov	s15, r3
}
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f3af 8000 	nop.w
 8001e98:	789abcdf 	.word	0x789abcdf
 8001e9c:	3fc23456 	.word	0x3fc23456

08001ea0 <map>:
float map(float x, float in_max, float in_min, float out_max, float out_min){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001eaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001eae:	ed87 1a03 	vstr	s2, [r7, #12]
 8001eb2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001eb6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x-in_min)*(out_max-out_min)/(in_max-in_min) + out_min;
 8001eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ece:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ed6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <constrain>:
float constrain(float x, float a, float b){
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(x<a) 			return a;
 8001f0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	d501      	bpl.n	8001f24 <constrain+0x28>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	e00b      	b.n	8001f3c <constrain+0x40>

	else if(x>b) 		return b;
 8001f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dd01      	ble.n	8001f3a <constrain+0x3e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e000      	b.n	8001f3c <constrain+0x40>

	else 			 	return x;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <StopandReset>:

//LQR function
void StopandReset(MPU6050_t *DataStruct){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
	Drive(&Motor_R, &htim3, 0, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f58:	2304      	movs	r3, #4
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <StopandReset+0x4c>)
 8001f62:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <StopandReset+0x50>)
 8001f64:	f7ff f9f6 	bl	8001354 <Drive>
	Drive(&Motor_L, &htim3, 0, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001f68:	230c      	movs	r3, #12
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	490a      	ldr	r1, [pc, #40]	; (8001f9c <StopandReset+0x4c>)
 8001f72:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <StopandReset+0x54>)
 8001f74:	f7ff f9ee 	bl	8001354 <Drive>
	enc_l    = 0;
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <StopandReset+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
	enc_r	 = 0;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <StopandReset+0x5c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
	DataStruct->KalmanAngleY=-2;
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001f8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000628 	.word	0x20000628
 8001fa0:	20000900 	.word	0x20000900
 8001fa4:	200008e8 	.word	0x200008e8
 8001fa8:	20000918 	.word	0x20000918
 8001fac:	2000091c 	.word	0x2000091c

08001fb0 <LQR_Init>:
void LQR_Init(){
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

	 k1 =	-1;						// k1*theta
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LQR_Init+0x38>)
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <LQR_Init+0x3c>)
 8001fb8:	601a      	str	r2, [r3, #0]
	 k2 =	-100;					// k2*thetadot
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <LQR_Init+0x40>)
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LQR_Init+0x44>)
 8001fbe:	601a      	str	r2, [r3, #0]
	 k3 =	-80000;					// k3*psi
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <LQR_Init+0x48>)
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <LQR_Init+0x4c>)
 8001fc4:	601a      	str	r2, [r3, #0]
	 k4 =	-8000;					// k4*psidot
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <LQR_Init+0x50>)
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <LQR_Init+0x54>)
 8001fca:	601a      	str	r2, [r3, #0]
	 k5 =	-0.5;					// k5*phi
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <LQR_Init+0x58>)
 8001fce:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001fd2:	601a      	str	r2, [r3, #0]
	 k6 =	-0.5;					// k6*phidot
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <LQR_Init+0x5c>)
 8001fd6:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001fda:	601a      	str	r2, [r3, #0]

}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000944 	.word	0x20000944
 8001fec:	bf800000 	.word	0xbf800000
 8001ff0:	20000948 	.word	0x20000948
 8001ff4:	c2c80000 	.word	0xc2c80000
 8001ff8:	2000094c 	.word	0x2000094c
 8001ffc:	c79c4000 	.word	0xc79c4000
 8002000:	20000950 	.word	0x20000950
 8002004:	c5fa0000 	.word	0xc5fa0000
 8002008:	20000954 	.word	0x20000954
 800200c:	20000958 	.word	0x20000958

08002010 <getLQR>:
void getLQR(float theta_,float thetadot_,float psi_,float psidot_,float phi_,float phidot_){
 8002010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002014:	ed2d 8b02 	vpush	{d8}
 8002018:	b087      	sub	sp, #28
 800201a:	af00      	add	r7, sp, #0
 800201c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002020:	edc7 0a04 	vstr	s1, [r7, #16]
 8002024:	ed87 1a03 	vstr	s2, [r7, #12]
 8002028:	edc7 1a02 	vstr	s3, [r7, #8]
 800202c:	ed87 2a01 	vstr	s4, [r7, #4]
 8002030:	edc7 2a00 	vstr	s5, [r7]
	leftvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ - k5*phi_ - k6*phidot_;
 8002034:	4b88      	ldr	r3, [pc, #544]	; (8002258 <getLQR+0x248>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	edd7 7a05 	vldr	s15, [r7, #20]
 800203e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002042:	4b86      	ldr	r3, [pc, #536]	; (800225c <getLQR+0x24c>)
 8002044:	edd3 6a00 	vldr	s13, [r3]
 8002048:	edd7 7a04 	vldr	s15, [r7, #16]
 800204c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002054:	4b82      	ldr	r3, [pc, #520]	; (8002260 <getLQR+0x250>)
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	edd7 7a03 	vldr	s15, [r7, #12]
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <getLQR+0x254>)
 8002068:	edd3 6a00 	vldr	s13, [r3]
 800206c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	4b7b      	ldr	r3, [pc, #492]	; (8002268 <getLQR+0x258>)
 800207a:	edd3 6a00 	vldr	s13, [r3]
 800207e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <getLQR+0x25c>)
 800208c:	edd3 6a00 	vldr	s13, [r3]
 8002090:	edd7 7a00 	vldr	s15, [r7]
 8002094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	4b74      	ldr	r3, [pc, #464]	; (8002270 <getLQR+0x260>)
 800209e:	edc3 7a00 	vstr	s15, [r3]
	rightvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ + k5*phi_ + k6*phidot_;
 80020a2:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <getLQR+0x248>)
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b0:	4b6a      	ldr	r3, [pc, #424]	; (800225c <getLQR+0x24c>)
 80020b2:	edd3 6a00 	vldr	s13, [r3]
 80020b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <getLQR+0x250>)
 80020c4:	edd3 6a00 	vldr	s13, [r3]
 80020c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <getLQR+0x254>)
 80020d6:	edd3 6a00 	vldr	s13, [r3]
 80020da:	edd7 7a02 	vldr	s15, [r7, #8]
 80020de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e6:	4b60      	ldr	r3, [pc, #384]	; (8002268 <getLQR+0x258>)
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <getLQR+0x25c>)
 80020fa:	edd3 6a00 	vldr	s13, [r3]
 80020fe:	edd7 7a00 	vldr	s15, [r7]
 8002102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <getLQR+0x264>)
 800210c:	edc3 7a00 	vstr	s15, [r3]
	PWM_L = map(leftvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);		//Limit 15 deg.
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <getLQR+0x260>)
 8002112:	ed93 8a00 	vldr	s16, [r3]
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <getLQR+0x250>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa14 	bl	8000548 <__aeabi_f2d>
 8002120:	a34b      	add	r3, pc, #300	; (adr r3, 8002250 <getLQR+0x240>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fa67 	bl	80005f8 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4690      	mov	r8, r2
 8002130:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <getLQR+0x268>)
 800213a:	4640      	mov	r0, r8
 800213c:	4649      	mov	r1, r9
 800213e:	f7fe fb85 	bl	800084c <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd2d 	bl	8000ba8 <__aeabi_d2f>
 800214e:	4606      	mov	r6, r0
 8002150:	4b43      	ldr	r3, [pc, #268]	; (8002260 <getLQR+0x250>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	a33d      	add	r3, pc, #244	; (adr r3, 8002250 <getLQR+0x240>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa4a 	bl	80005f8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <getLQR+0x268>)
 8002172:	f7fe fb6b 	bl	800084c <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fd13 	bl	8000ba8 <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
 8002184:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 800227c <getLQR+0x26c>
 8002188:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002280 <getLQR+0x270>
 800218c:	ee01 3a10 	vmov	s2, r3
 8002190:	ee00 6a90 	vmov	s1, r6
 8002194:	eeb0 0a48 	vmov.f32	s0, s16
 8002198:	f7ff fe82 	bl	8001ea0 <map>
 800219c:	eef0 7a40 	vmov.f32	s15, s0
 80021a0:	4b38      	ldr	r3, [pc, #224]	; (8002284 <getLQR+0x274>)
 80021a2:	edc3 7a00 	vstr	s15, [r3]
	PWM_R = map(rightvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <getLQR+0x264>)
 80021a8:	ed93 8a00 	vldr	s16, [r3]
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <getLQR+0x250>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	a326      	add	r3, pc, #152	; (adr r3, 8002250 <getLQR+0x240>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <getLQR+0x268>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe fb3a 	bl	800084c <__aeabi_ddiv>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fce2 	bl	8000ba8 <__aeabi_d2f>
 80021e4:	4604      	mov	r4, r0
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <getLQR+0x250>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9ac 	bl	8000548 <__aeabi_f2d>
 80021f0:	a317      	add	r3, pc, #92	; (adr r3, 8002250 <getLQR+0x240>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9ff 	bl	80005f8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <getLQR+0x268>)
 8002208:	f7fe fb20 	bl	800084c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fcc8 	bl	8000ba8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	ed9f 2a18 	vldr	s4, [pc, #96]	; 800227c <getLQR+0x26c>
 800221e:	eddf 1a18 	vldr	s3, [pc, #96]	; 8002280 <getLQR+0x270>
 8002222:	ee01 3a10 	vmov	s2, r3
 8002226:	ee00 4a90 	vmov	s1, r4
 800222a:	eeb0 0a48 	vmov.f32	s0, s16
 800222e:	f7ff fe37 	bl	8001ea0 <map>
 8002232:	eef0 7a40 	vmov.f32	s15, s0
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <getLQR+0x278>)
 8002238:	edc3 7a00 	vstr	s15, [r3]
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	ecbd 8b02 	vpop	{d8}
 8002246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	54442d18 	.word	0x54442d18
 8002254:	400921fb 	.word	0x400921fb
 8002258:	20000944 	.word	0x20000944
 800225c:	20000948 	.word	0x20000948
 8002260:	2000094c 	.word	0x2000094c
 8002264:	20000950 	.word	0x20000950
 8002268:	20000954 	.word	0x20000954
 800226c:	20000958 	.word	0x20000958
 8002270:	2000095c 	.word	0x2000095c
 8002274:	20000960 	.word	0x20000960
 8002278:	402e0000 	.word	0x402e0000
 800227c:	447a0000 	.word	0x447a0000
 8002280:	c47a0000 	.word	0xc47a0000
 8002284:	20000964 	.word	0x20000964
 8002288:	20000968 	.word	0x20000968
 800228c:	00000000 	.word	0x00000000

08002290 <getfunctionLQR>:
void getfunctionLQR(MPU6050_t *DataStruct){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - timerloop) > 6) {									//Set time loop update and control motor
 8002298:	f001 f9cc 	bl	8003634 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <getfunctionLQR+0x228>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	f240 80fc 	bls.w	80024a2 <getfunctionLQR+0x212>
	    theta = gettheta(enc_l, enc_r)*DEG_TO_RAD; 							//Read theta value and convert to Rad
 80022aa:	4b84      	ldr	r3, [pc, #528]	; (80024bc <getfunctionLQR+0x22c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a84      	ldr	r2, [pc, #528]	; (80024c0 <getfunctionLQR+0x230>)
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fd9f 	bl	8001df8 <gettheta>
 80022ba:	ee10 3a10 	vmov	r3, s0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f942 	bl	8000548 <__aeabi_f2d>
 80022c4:	a37a      	add	r3, pc, #488	; (adr r3, 80024b0 <getfunctionLQR+0x220>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f995 	bl	80005f8 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc67 	bl	8000ba8 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <getfunctionLQR+0x234>)
 80022de:	6013      	str	r3, [r2, #0]
	    psi = (DataStruct->KalmanAngleY + 2)*DEG_TO_RAD;    				//Read psi value and convert to Rad
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ee:	f7fd ffcd 	bl	800028c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a36d      	add	r3, pc, #436	; (adr r3, 80024b0 <getfunctionLQR+0x220>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f97a 	bl	80005f8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc4c 	bl	8000ba8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	4a6d      	ldr	r2, [pc, #436]	; (80024c8 <getfunctionLQR+0x238>)
 8002314:	6013      	str	r3, [r2, #0]
	    phi =  getphi(enc_l, enc_r)*DEG_TO_RAD;    							//Read phi value and convert to Rad
 8002316:	4b69      	ldr	r3, [pc, #420]	; (80024bc <getfunctionLQR+0x22c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <getfunctionLQR+0x230>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fd8d 	bl	8001e40 <getphi>
 8002326:	ee10 3a10 	vmov	r3, s0
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	a35f      	add	r3, pc, #380	; (adr r3, 80024b0 <getfunctionLQR+0x220>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fe f95f 	bl	80005f8 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fc31 	bl	8000ba8 <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4a60      	ldr	r2, [pc, #384]	; (80024cc <getfunctionLQR+0x23c>)
 800234a:	6013      	str	r3, [r2, #0]
	    if(abs(DataStruct->KalmanAngleY) <=2) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fbff 	bl	8000b58 <__aeabi_d2iz>
 800235a:	4603      	mov	r3, r0
 800235c:	f113 0f02 	cmn.w	r3, #2
 8002360:	db11      	blt.n	8002386 <getfunctionLQR+0xf6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fbf4 	bl	8000b58 <__aeabi_d2iz>
 8002370:	4603      	mov	r3, r0
 8002372:	2b02      	cmp	r3, #2
 8002374:	dc07      	bgt.n	8002386 <getfunctionLQR+0xf6>
	    	PWM_L = 0;
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <getfunctionLQR+0x240>)
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
	    	PWM_R = 0;
 800237e:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <getfunctionLQR+0x244>)
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
	    }
	    //Update time compare with timeloop
	    float dt = (float)(HAL_GetTick() - timer) / 100;
 8002386:	f001 f955 	bl	8003634 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <getfunctionLQR+0x248>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239a:	eddf 6a50 	vldr	s13, [pc, #320]	; 80024dc <getfunctionLQR+0x24c>
 800239e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a2:	edc7 7a03 	vstr	s15, [r7, #12]
	    timerloop = HAL_GetTick();
 80023a6:	f001 f945 	bl	8003634 <HAL_GetTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <getfunctionLQR+0x228>)
 80023ae:	6013      	str	r3, [r2, #0]

	    //Update input angle value
	    thetadot 	= (theta - theta_old)/dt;
 80023b0:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <getfunctionLQR+0x234>)
 80023b2:	ed93 7a00 	vldr	s14, [r3]
 80023b6:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <getfunctionLQR+0x250>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <getfunctionLQR+0x254>)
 80023ca:	edc3 7a00 	vstr	s15, [r3]
	    psidot 		= (psi - psi_old)/dt;
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <getfunctionLQR+0x238>)
 80023d0:	ed93 7a00 	vldr	s14, [r3]
 80023d4:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <getfunctionLQR+0x258>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023de:	ed97 7a03 	vldr	s14, [r7, #12]
 80023e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <getfunctionLQR+0x25c>)
 80023e8:	edc3 7a00 	vstr	s15, [r3]
	    phidot 		= (phi - phi_old)/dt;
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <getfunctionLQR+0x23c>)
 80023ee:	ed93 7a00 	vldr	s14, [r3]
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <getfunctionLQR+0x260>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <getfunctionLQR+0x264>)
 8002406:	edc3 7a00 	vstr	s15, [r3]

	    //Update old angle value
	    theta_old = theta;
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <getfunctionLQR+0x234>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <getfunctionLQR+0x250>)
 8002410:	6013      	str	r3, [r2, #0]
	    psi_old = psi;
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <getfunctionLQR+0x238>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <getfunctionLQR+0x258>)
 8002418:	6013      	str	r3, [r2, #0]
	    phi_old = phi;
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <getfunctionLQR+0x23c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <getfunctionLQR+0x260>)
 8002420:	6013      	str	r3, [r2, #0]

	    getLQR(theta, thetadot, psi, psidot, phi, phidot);
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <getfunctionLQR+0x234>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <getfunctionLQR+0x254>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <getfunctionLQR+0x238>)
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <getfunctionLQR+0x25c>)
 8002436:	ed93 6a00 	vldr	s12, [r3]
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <getfunctionLQR+0x23c>)
 800243c:	edd3 5a00 	vldr	s11, [r3]
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <getfunctionLQR+0x264>)
 8002442:	ed93 5a00 	vldr	s10, [r3]
 8002446:	eef0 2a45 	vmov.f32	s5, s10
 800244a:	eeb0 2a65 	vmov.f32	s4, s11
 800244e:	eef0 1a46 	vmov.f32	s3, s12
 8002452:	eeb0 1a66 	vmov.f32	s2, s13
 8002456:	eef0 0a47 	vmov.f32	s1, s14
 800245a:	eeb0 0a67 	vmov.f32	s0, s15
 800245e:	f7ff fdd7 	bl	8002010 <getLQR>
	    PWM_L = constrain(PWM_L, -200, 200);
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <getfunctionLQR+0x240>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80024f8 <getfunctionLQR+0x268>
 800246c:	eddf 0a23 	vldr	s1, [pc, #140]	; 80024fc <getfunctionLQR+0x26c>
 8002470:	eeb0 0a67 	vmov.f32	s0, s15
 8002474:	f7ff fd42 	bl	8001efc <constrain>
 8002478:	eef0 7a40 	vmov.f32	s15, s0
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <getfunctionLQR+0x240>)
 800247e:	edc3 7a00 	vstr	s15, [r3]
		PWM_R = constrain(PWM_R, -200, 200);
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <getfunctionLQR+0x244>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80024f8 <getfunctionLQR+0x268>
 800248c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80024fc <getfunctionLQR+0x26c>
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	f7ff fd32 	bl	8001efc <constrain>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <getfunctionLQR+0x244>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	f3af 8000 	nop.w
 80024b0:	a2529d39 	.word	0xa2529d39
 80024b4:	3f91df46 	.word	0x3f91df46
 80024b8:	200007fc 	.word	0x200007fc
 80024bc:	20000918 	.word	0x20000918
 80024c0:	2000091c 	.word	0x2000091c
 80024c4:	20000920 	.word	0x20000920
 80024c8:	20000924 	.word	0x20000924
 80024cc:	20000928 	.word	0x20000928
 80024d0:	20000964 	.word	0x20000964
 80024d4:	20000968 	.word	0x20000968
 80024d8:	200007f8 	.word	0x200007f8
 80024dc:	42c80000 	.word	0x42c80000
 80024e0:	20000938 	.word	0x20000938
 80024e4:	2000092c 	.word	0x2000092c
 80024e8:	2000093c 	.word	0x2000093c
 80024ec:	20000930 	.word	0x20000930
 80024f0:	20000940 	.word	0x20000940
 80024f4:	20000934 	.word	0x20000934
 80024f8:	43480000 	.word	0x43480000
 80024fc:	c3480000 	.word	0xc3480000

08002500 <PID_Init>:
//--------------------------------LQR-------------------------------------------------//
void PID_Init()
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
	PID_DC_SPEED_L.kP = 1;
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <PID_Init+0x88>)
 8002506:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800250a:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_L.kI = 30;
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <PID_Init+0x88>)
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <PID_Init+0x8c>)
 8002510:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_L.kD = 0.001;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <PID_Init+0x88>)
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <PID_Init+0x90>)
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_L.alpha = 0;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <PID_Init+0x88>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_L.deltaT = 0.01;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <PID_Init+0x88>)
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <PID_Init+0x94>)
 8002524:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_L.uI_AboveLimit = 1000;
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <PID_Init+0x88>)
 8002528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_L.uI_BelowLimit = -1000;
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <PID_Init+0x88>)
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <PID_Init+0x98>)
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_L.u_AboveLimit  = 1000;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <PID_Init+0x88>)
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <PID_Init+0x9c>)
 8002538:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_L.u_BelowLimit  = -1000;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <PID_Init+0x88>)
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <PID_Init+0xa0>)
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_SPEED_R.kP = 1;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <PID_Init+0xa4>)
 8002542:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002546:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_R.kI = 30;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <PID_Init+0xa4>)
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <PID_Init+0x8c>)
 800254c:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_R.kD = 0.001;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <PID_Init+0xa4>)
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <PID_Init+0x90>)
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_R.alpha = 0;
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <PID_Init+0xa4>)
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_R.deltaT = 0.01;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <PID_Init+0xa4>)
 800255e:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <PID_Init+0x94>)
 8002560:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_R.uI_AboveLimit = 1000;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <PID_Init+0xa4>)
 8002564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_R.uI_BelowLimit = -1000;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <PID_Init+0xa4>)
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <PID_Init+0x98>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_R.u_AboveLimit  = 1000;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <PID_Init+0xa4>)
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <PID_Init+0x9c>)
 8002574:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_R.u_BelowLimit  = -1000;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <PID_Init+0xa4>)
 8002578:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <PID_Init+0xa0>)
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000758 	.word	0x20000758
 800258c:	41f00000 	.word	0x41f00000
 8002590:	3a83126f 	.word	0x3a83126f
 8002594:	3c23d70a 	.word	0x3c23d70a
 8002598:	fffffc18 	.word	0xfffffc18
 800259c:	447a0000 	.word	0x447a0000
 80025a0:	c47a0000 	.word	0xc47a0000
 80025a4:	200007a8 	.word	0x200007a8

080025a8 <PID_Cal_Left>:
void PID_Cal_Left(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	ed2d 8b02 	vpush	{d8}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_L);
 80025b2:	4814      	ldr	r0, [pc, #80]	; (8002604 <PID_Cal_Left+0x5c>)
 80025b4:	f7fe fce0 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_L, PWM_L, ENC_L.vel_Real);
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <PID_Cal_Left+0x60>)
 80025ba:	ed93 8a00 	vldr	s16, [r3]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <PID_Cal_Left+0x5c>)
 80025c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe faee 	bl	8000ba8 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	ee00 3a90 	vmov	s1, r3
 80025d2:	eeb0 0a48 	vmov.f32	s0, s16
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <PID_Cal_Left+0x64>)
 80025d8:	f7fe ffc2 	bl	8001560 <Pid_Cal>
	Drive(&Motor_L, &htim3, PID_DC_SPEED_L.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <PID_Cal_Left+0x64>)
 80025de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e6:	230c      	movs	r3, #12
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2308      	movs	r3, #8
 80025ec:	ee17 2a90 	vmov	r2, s15
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <PID_Cal_Left+0x68>)
 80025f2:	4808      	ldr	r0, [pc, #32]	; (8002614 <PID_Cal_Left+0x6c>)
 80025f4:	f7fe feae 	bl	8001354 <Drive>
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	ecbd 8b02 	vpop	{d8}
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000858 	.word	0x20000858
 8002608:	20000964 	.word	0x20000964
 800260c:	20000758 	.word	0x20000758
 8002610:	20000628 	.word	0x20000628
 8002614:	200008e8 	.word	0x200008e8

08002618 <PID_Cal_Right>:
void PID_Cal_Right(){
 8002618:	b580      	push	{r7, lr}
 800261a:	ed2d 8b02 	vpush	{d8}
 800261e:	b082      	sub	sp, #8
 8002620:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_R);
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <PID_Cal_Right+0x5c>)
 8002624:	f7fe fca8 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_R, PWM_R, ENC_R.vel_Real);
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <PID_Cal_Right+0x60>)
 800262a:	ed93 8a00 	vldr	s16, [r3]
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <PID_Cal_Right+0x5c>)
 8002630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fab6 	bl	8000ba8 <__aeabi_d2f>
 800263c:	4603      	mov	r3, r0
 800263e:	ee00 3a90 	vmov	s1, r3
 8002642:	eeb0 0a48 	vmov.f32	s0, s16
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <PID_Cal_Right+0x64>)
 8002648:	f7fe ff8a 	bl	8001560 <Pid_Cal>
	Drive(&Motor_R, &htim3, PID_DC_SPEED_R.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <PID_Cal_Right+0x64>)
 800264e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002656:	2304      	movs	r3, #4
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	ee17 2a90 	vmov	r2, s15
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <PID_Cal_Right+0x68>)
 8002662:	4808      	ldr	r0, [pc, #32]	; (8002684 <PID_Cal_Right+0x6c>)
 8002664:	f7fe fe76 	bl	8001354 <Drive>
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	ecbd 8b02 	vpop	{d8}
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200008a0 	.word	0x200008a0
 8002678:	20000968 	.word	0x20000968
 800267c:	200007a8 	.word	0x200007a8
 8002680:	20000628 	.word	0x20000628
 8002684:	20000900 	.word	0x20000900

08002688 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_UART_TxCpltCallback+0x20>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d102      	bne.n	80026a0 <HAL_UART_TxCpltCallback+0x18>
		log_TransmitCompleteHandle(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fd80 	bl	80011a0 <log_TransmitCompleteHandle>
	}

}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40011000 	.word	0x40011000
 80026ac:	00000000 	.word	0x00000000

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b096      	sub	sp, #88	; 0x58
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b6:	f000 ff87 	bl	80035c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ba:	f000 f8a9 	bl	8002810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026be:	f000 fad7 	bl	8002c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80026c2:	f000 f90d 	bl	80028e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80026c6:	f000 f939 	bl	800293c <MX_TIM2_Init>
  MX_TIM3_Init();
 80026ca:	f000 f98b 	bl	80029e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026ce:	f000 fa03 	bl	8002ad8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80026d2:	f000 faa3 	bl	8002c1c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 80026d6:	f000 fa53 	bl	8002b80 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  while(MPU6050_Init()==1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80026da:	2100      	movs	r1, #0
 80026dc:	483c      	ldr	r0, [pc, #240]	; (80027d0 <main+0x120>)
 80026de:	f002 feeb 	bl	80054b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80026e2:	2104      	movs	r1, #4
 80026e4:	483a      	ldr	r0, [pc, #232]	; (80027d0 <main+0x120>)
 80026e6:	f002 fee7 	bl	80054b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80026ea:	2108      	movs	r1, #8
 80026ec:	4838      	ldr	r0, [pc, #224]	; (80027d0 <main+0x120>)
 80026ee:	f002 fee3 	bl	80054b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80026f2:	210c      	movs	r1, #12
 80026f4:	4836      	ldr	r0, [pc, #216]	; (80027d0 <main+0x120>)
 80026f6:	f002 fedf 	bl	80054b8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80026fa:	213c      	movs	r1, #60	; 0x3c
 80026fc:	4835      	ldr	r0, [pc, #212]	; (80027d4 <main+0x124>)
 80026fe:	f003 f849 	bl	8005794 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002702:	213c      	movs	r1, #60	; 0x3c
 8002704:	4834      	ldr	r0, [pc, #208]	; (80027d8 <main+0x128>)
 8002706:	f003 f845 	bl	8005794 <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_L, &htim2, 370, 0.01);
 800270a:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80027c8 <main+0x118>
 800270e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8002712:	4930      	ldr	r1, [pc, #192]	; (80027d4 <main+0x124>)
 8002714:	4831      	ldr	r0, [pc, #196]	; (80027dc <main+0x12c>)
 8002716:	f7fe fc15 	bl	8000f44 <EncoderSetting>
  EncoderSetting(&ENC_R, &htim4, 370, 0.01);
 800271a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80027c8 <main+0x118>
 800271e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8002722:	492d      	ldr	r1, [pc, #180]	; (80027d8 <main+0x128>)
 8002724:	482e      	ldr	r0, [pc, #184]	; (80027e0 <main+0x130>)
 8002726:	f7fe fc0d 	bl	8000f44 <EncoderSetting>

  LQR_Init();
 800272a:	f7ff fc41 	bl	8001fb0 <LQR_Init>
  PID_Init();
 800272e:	f7ff fee7 	bl	8002500 <PID_Init>
  StopandReset(&MPU6050);
 8002732:	482c      	ldr	r0, [pc, #176]	; (80027e4 <main+0x134>)
 8002734:	f7ff fc0c 	bl	8001f50 <StopandReset>

  log_Init(&huart1);
 8002738:	482b      	ldr	r0, [pc, #172]	; (80027e8 <main+0x138>)
 800273a:	f7fe fd21 	bl	8001180 <log_Init>
  log_AddHeaderArgumentToBuffer("Theta");
 800273e:	482b      	ldr	r0, [pc, #172]	; (80027ec <main+0x13c>)
 8002740:	f7fe fd76 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_AddHeaderArgumentToBuffer("Psi");
 8002744:	482a      	ldr	r0, [pc, #168]	; (80027f0 <main+0x140>)
 8002746:	f7fe fd73 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_AddHeaderArgumentToBuffer("Phi");
 800274a:	482a      	ldr	r0, [pc, #168]	; (80027f4 <main+0x144>)
 800274c:	f7fe fd70 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_SendString();
 8002750:	f7fe fd46 	bl	80011e0 <log_SendString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, StartMPU6050ask, osPriorityBelowNormal, 0, 128);
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <main+0x148>)
 8002756:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800275a:	461d      	mov	r5, r3
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 8002768:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fe55 	bl	800741e <osThreadCreate>
 8002774:	4603      	mov	r3, r0
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <main+0x14c>)
 8002778:	6013      	str	r3, [r2, #0]

  /* definition and creation of FunctionTask */
  osThreadDef(FunctionTask, StartTaskFunction, osPriorityNormal, 0, 128);
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <main+0x150>)
 800277c:	f107 0420 	add.w	r4, r7, #32
 8002780:	461d      	mov	r5, r3
 8002782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800278a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FunctionTaskHandle = osThreadCreate(osThread(FunctionTask), NULL);
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f004 fe42 	bl	800741e <osThreadCreate>
 800279a:	4603      	mov	r3, r0
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <main+0x154>)
 800279e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Cal_PID */
  osThreadDef(Cal_PID, StartTaskCalPID, osPriorityLow, 0, 128);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <main+0x158>)
 80027a2:	1d3c      	adds	r4, r7, #4
 80027a4:	461d      	mov	r5, r3
 80027a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Cal_PIDHandle = osThreadCreate(osThread(Cal_PID), NULL);
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 fe31 	bl	800741e <osThreadCreate>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <main+0x15c>)
 80027c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80027c2:	f004 fe25 	bl	8007410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <main+0x116>
 80027c8:	47ae147b 	.word	0x47ae147b
 80027cc:	3f847ae1 	.word	0x3f847ae1
 80027d0:	20000628 	.word	0x20000628
 80027d4:	200005e0 	.word	0x200005e0
 80027d8:	20000670 	.word	0x20000670
 80027dc:	20000858 	.word	0x20000858
 80027e0:	200008a0 	.word	0x200008a0
 80027e4:	20000800 	.word	0x20000800
 80027e8:	20000700 	.word	0x20000700
 80027ec:	0800bcbc 	.word	0x0800bcbc
 80027f0:	0800bcc4 	.word	0x0800bcc4
 80027f4:	0800bcc8 	.word	0x0800bcc8
 80027f8:	0800bcd8 	.word	0x0800bcd8
 80027fc:	20000748 	.word	0x20000748
 8002800:	0800bd04 	.word	0x0800bd04
 8002804:	2000074c 	.word	0x2000074c
 8002808:	0800bd28 	.word	0x0800bd28
 800280c:	20000750 	.word	0x20000750

08002810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b094      	sub	sp, #80	; 0x50
 8002814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002816:	f107 0320 	add.w	r3, r7, #32
 800281a:	2230      	movs	r2, #48	; 0x30
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f006 fdb7 	bl	8009392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <SystemClock_Config+0xc8>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <SystemClock_Config+0xc8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <SystemClock_Config+0xc8>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002850:	2300      	movs	r3, #0
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <SystemClock_Config+0xcc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <SystemClock_Config+0xcc>)
 800285a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <SystemClock_Config+0xcc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800286c:	2301      	movs	r3, #1
 800286e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002876:	2302      	movs	r3, #2
 8002878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800287a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002880:	2304      	movs	r3, #4
 8002882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002884:	2348      	movs	r3, #72	; 0x48
 8002886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002888:	2302      	movs	r3, #2
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800288c:	2304      	movs	r3, #4
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002890:	f107 0320 	add.w	r3, r7, #32
 8002894:	4618      	mov	r0, r3
 8002896:	f002 f835 	bl	8004904 <HAL_RCC_OscConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028a0:	f000 fb06 	bl	8002eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a4:	230f      	movs	r3, #15
 80028a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a8:	2302      	movs	r3, #2
 80028aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fa97 	bl	8004df4 <HAL_RCC_ClockConfig>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80028cc:	f000 faf0 	bl	8002eb0 <Error_Handler>
  }
}
 80028d0:	bf00      	nop
 80028d2:	3750      	adds	r7, #80	; 0x50
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000

080028e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <MX_I2C1_Init+0x50>)
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <MX_I2C1_Init+0x54>)
 80028e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_I2C1_Init+0x50>)
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_I2C1_Init+0x58>)
 80028ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_I2C1_Init+0x50>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_I2C1_Init+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_I2C1_Init+0x50>)
 80028fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <MX_I2C1_Init+0x50>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_I2C1_Init+0x50>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <MX_I2C1_Init+0x50>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_I2C1_Init+0x50>)
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <MX_I2C1_Init+0x50>)
 800291e:	f001 f9a5 	bl	8003c6c <HAL_I2C_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002928:	f000 fac2 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2000058c 	.word	0x2000058c
 8002934:	40005400 	.word	0x40005400
 8002938:	000186a0 	.word	0x000186a0

0800293c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f006 fd21 	bl	8009392 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800295a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800296e:	f04f 32ff 	mov.w	r2, #4294967295
 8002972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002980:	2303      	movs	r3, #3
 8002982:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002998:	2301      	movs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	4619      	mov	r1, r3
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_TIM2_Init+0xa4>)
 80029ac:	f002 fe4c 	bl	8005648 <HAL_TIM_Encoder_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029b6:	f000 fa7b 	bl	8002eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <MX_TIM2_Init+0xa4>)
 80029c8:	f003 fd30 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029d2:	f000 fa6d 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	3730      	adds	r7, #48	; 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200005e0 	.word	0x200005e0

080029e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a08:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <MX_TIM3_Init+0xf0>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a0e:	2206      	movs	r2, #6
 8002a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a2c:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a2e:	f002 fcf3 	bl	8005418 <HAL_TIM_PWM_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a38:	f000 fa3a 	bl	8002eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a4c:	f003 fcee 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a56:	f000 fa2b 	bl	8002eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a5a:	2360      	movs	r3, #96	; 0x60
 8002a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a72:	f003 f80d 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a7c:	f000 fa18 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2204      	movs	r2, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a88:	f003 f802 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a92:	f000 fa0d 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002a9e:	f002 fff7 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002aa8:	f000 fa02 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002ab4:	f002 ffec 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002abe:	f000 f9f7 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM3_Init+0xec>)
 8002ac4:	f000 fb2e 	bl	8003124 <HAL_TIM_MspPostInit>

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000628 	.word	0x20000628
 8002ad4:	40000400 	.word	0x40000400

08002ad8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f006 fc53 	bl	8009392 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <MX_TIM4_Init+0xa4>)
 8002af8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b22:	2301      	movs	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b32:	2301      	movs	r3, #1
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b46:	f002 fd7f 	bl	8005648 <HAL_TIM_Encoder_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b50:	f000 f9ae 	bl	8002eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_TIM4_Init+0xa0>)
 8002b62:	f003 fc63 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b6c:	f000 f9a0 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	3730      	adds	r7, #48	; 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000670 	.word	0x20000670
 8002b7c:	40000800 	.word	0x40000800

08002b80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	463b      	mov	r3, r7
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <MX_TIM5_Init+0x98>)
 8002ba0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002ba4:	2247      	movs	r2, #71	; 0x47
 8002ba6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bb4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002bc2:	4814      	ldr	r0, [pc, #80]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002bc4:	f002 fb68 	bl	8005298 <HAL_TIM_Base_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002bce:	f000 f96f 	bl	8002eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002be0:	f003 f818 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002bea:	f000 f961 	bl	8002eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <MX_TIM5_Init+0x94>)
 8002bfc:	f003 fc16 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c06:	f000 f953 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200006b8 	.word	0x200006b8
 8002c18:	40000c00 	.word	0x40000c00

08002c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <MX_USART1_UART_Init+0x50>)
 8002c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c54:	f003 fc7a 	bl	800654c <HAL_UART_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c5e:	f000 f927 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000700 	.word	0x20000700
 8002c6c:	40011000 	.word	0x40011000

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_GPIO_Init+0x84>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <StartMPU6050ask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPU6050ask */
void StartMPU6050ask(void const * argument)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_All(&MPU6050);
 8002d00:	4812      	ldr	r0, [pc, #72]	; (8002d4c <StartMPU6050ask+0x54>)
 8002d02:	f7fe fe89 	bl	8001a18 <MPU6050_Read_All>
	enc_l=CountRead(&ENC_L, count_ModeX1);
 8002d06:	2100      	movs	r1, #0
 8002d08:	4811      	ldr	r0, [pc, #68]	; (8002d50 <StartMPU6050ask+0x58>)
 8002d0a:	f7fe f9c3 	bl	8001094 <CountRead>
 8002d0e:	ec53 2b10 	vmov	r2, r3, d0
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff1f 	bl	8000b58 <__aeabi_d2iz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <StartMPU6050ask+0x5c>)
 8002d1e:	6013      	str	r3, [r2, #0]
	enc_r=CountRead(&ENC_R, count_ModeX1);
 8002d20:	2100      	movs	r1, #0
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <StartMPU6050ask+0x60>)
 8002d24:	f7fe f9b6 	bl	8001094 <CountRead>
 8002d28:	ec53 2b10 	vmov	r2, r3, d0
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fd ff12 	bl	8000b58 <__aeabi_d2iz>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <StartMPU6050ask+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]
	PID_Cal_Left();
 8002d3a:	f7ff fc35 	bl	80025a8 <PID_Cal_Left>
	PID_Cal_Right();
 8002d3e:	f7ff fc6b 	bl	8002618 <PID_Cal_Right>

    osDelay(10);
 8002d42:	200a      	movs	r0, #10
 8002d44:	f004 fbb7 	bl	80074b6 <osDelay>
	MPU6050_Read_All(&MPU6050);
 8002d48:	e7da      	b.n	8002d00 <StartMPU6050ask+0x8>
 8002d4a:	bf00      	nop
 8002d4c:	20000800 	.word	0x20000800
 8002d50:	20000858 	.word	0x20000858
 8002d54:	20000918 	.word	0x20000918
 8002d58:	200008a0 	.word	0x200008a0
 8002d5c:	2000091c 	.word	0x2000091c

08002d60 <StartTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFunction */
void StartTaskFunction(void const * argument)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	getfunctionLQR(&MPU6050);
 8002d68:	4824      	ldr	r0, [pc, #144]	; (8002dfc <StartTaskFunction+0x9c>)
 8002d6a:	f7ff fa91 	bl	8002290 <getfunctionLQR>
	if(MPU6050.KalmanAngleY > 3 || MPU6050.KalmanAngleY <-7)
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <StartTaskFunction+0x9c>)
 8002d70:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <StartTaskFunction+0xa0>)
 8002d7a:	f7fd fecd 	bl	8000b18 <__aeabi_dcmpgt>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <StartTaskFunction+0x3a>
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <StartTaskFunction+0x9c>)
 8002d86:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <StartTaskFunction+0xa4>)
 8002d90:	f7fd fea4 	bl	8000adc <__aeabi_dcmplt>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <StartTaskFunction+0x66>
	{
		PID_DC_SPEED_L.kP = 10;
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <StartTaskFunction+0xa8>)
 8002d9c:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <StartTaskFunction+0xac>)
 8002d9e:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 10;
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <StartTaskFunction+0xa8>)
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <StartTaskFunction+0xac>)
 8002da4:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <StartTaskFunction+0xa8>)
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <StartTaskFunction+0xb0>)
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 10;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <StartTaskFunction+0xb4>)
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <StartTaskFunction+0xac>)
 8002db0:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 10;
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <StartTaskFunction+0xb4>)
 8002db4:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <StartTaskFunction+0xac>)
 8002db6:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <StartTaskFunction+0xb4>)
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <StartTaskFunction+0xb0>)
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -15000;
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <StartTaskFunction+0xb8>)
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <StartTaskFunction+0xbc>)
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e016      	b.n	8002df4 <StartTaskFunction+0x94>
	}
	else{
		PID_DC_SPEED_L.kP = 1;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <StartTaskFunction+0xa8>)
 8002dc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dcc:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 30;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <StartTaskFunction+0xa8>)
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <StartTaskFunction+0xc0>)
 8002dd2:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <StartTaskFunction+0xa8>)
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <StartTaskFunction+0xb0>)
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 1;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <StartTaskFunction+0xb4>)
 8002ddc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002de0:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 30;
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <StartTaskFunction+0xb4>)
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <StartTaskFunction+0xc0>)
 8002de6:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <StartTaskFunction+0xb4>)
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <StartTaskFunction+0xb0>)
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -8000;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <StartTaskFunction+0xb8>)
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <StartTaskFunction+0xc4>)
 8002df2:	601a      	str	r2, [r3, #0]
	}


    osDelay(10);
 8002df4:	200a      	movs	r0, #10
 8002df6:	f004 fb5e 	bl	80074b6 <osDelay>
	getfunctionLQR(&MPU6050);
 8002dfa:	e7b5      	b.n	8002d68 <StartTaskFunction+0x8>
 8002dfc:	20000800 	.word	0x20000800
 8002e00:	40080000 	.word	0x40080000
 8002e04:	c01c0000 	.word	0xc01c0000
 8002e08:	20000758 	.word	0x20000758
 8002e0c:	41200000 	.word	0x41200000
 8002e10:	3a83126f 	.word	0x3a83126f
 8002e14:	200007a8 	.word	0x200007a8
 8002e18:	20000950 	.word	0x20000950
 8002e1c:	c66a6000 	.word	0xc66a6000
 8002e20:	41f00000 	.word	0x41f00000
 8002e24:	c5fa0000 	.word	0xc5fa0000

08002e28 <StartTaskCalPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalPID */
void StartTaskCalPID(void const * argument)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCalPID */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002e30:	200a      	movs	r0, #10
 8002e32:	f004 fb40 	bl	80074b6 <osDelay>
 8002e36:	e7fb      	b.n	8002e30 <StartTaskCalPID+0x8>

08002e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e4a:	f000 fbdf 	bl	800360c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d11a      	bne.n	8002e8e <HAL_TIM_PeriodElapsedCallback+0x56>
  {
		count++;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e62:	701a      	strb	r2, [r3, #0]
		if(count>=5)
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d910      	bls.n	8002e8e <HAL_TIM_PeriodElapsedCallback+0x56>
		{

			log_AddArgumentToBuffer((void*)&theta,TYPE_FLOAT);
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002e70:	f7fe fa08 	bl	8001284 <log_AddArgumentToBuffer>
			log_AddArgumentToBuffer((void*)&psi,TYPE_FLOAT);
 8002e74:	2102      	movs	r1, #2
 8002e76:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002e78:	f7fe fa04 	bl	8001284 <log_AddArgumentToBuffer>
			log_AddArgumentToBuffer((void*)&phi,TYPE_FLOAT);
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002e80:	f7fe fa00 	bl	8001284 <log_AddArgumentToBuffer>
			log_SendString();
 8002e84:	f7fe f9ac 	bl	80011e0 <log_SendString>
			count = 0;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
		}

  }
  /* USER CODE END Callback 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40002000 	.word	0x40002000
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	20000754 	.word	0x20000754
 8002ea4:	20000920 	.word	0x20000920
 8002ea8:	20000924 	.word	0x20000924
 8002eac:	20000928 	.word	0x20000928

08002eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <Error_Handler+0x8>
	...

08002ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_MspInit+0x54>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_MspInit+0x54>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_MspInit+0x54>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_MspInit+0x54>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_MspInit+0x54>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_MspInit+0x54>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	f06f 0001 	mvn.w	r0, #1
 8002f02:	f000 fc5b 	bl	80037bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_I2C_MspInit+0x84>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12b      	bne.n	8002f8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f52:	23c0      	movs	r3, #192	; 0xc0
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f56:	2312      	movs	r3, #18
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f62:	2304      	movs	r3, #4
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <HAL_I2C_MspInit+0x8c>)
 8002f6e:	f000 fce1 	bl	8003934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_I2C_MspInit+0x88>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3728      	adds	r7, #40	; 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40005400 	.word	0x40005400
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020400 	.word	0x40020400

08002fa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d12c      	bne.n	8003020 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ffe:	2303      	movs	r3, #3
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	481d      	ldr	r0, [pc, #116]	; (8003090 <HAL_TIM_Encoder_MspInit+0xec>)
 800301a:	f000 fc8b 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800301e:	e031      	b.n	8003084 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d12c      	bne.n	8003084 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003062:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003068:	2302      	movs	r3, #2
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003074:	2302      	movs	r3, #2
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	4619      	mov	r1, r3
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003080:	f000 fc58 	bl	8003934 <HAL_GPIO_Init>
}
 8003084:	bf00      	nop
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	40020000 	.word	0x40020000
 8003094:	40000800 	.word	0x40000800
 8003098:	40020c00 	.word	0x40020c00

0800309c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_PWM_MspInit+0x40>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_TIM_PWM_MspInit+0x40>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_TIM_PWM_MspInit+0x40>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_TIM_Base_MspInit+0x3c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10d      	bne.n	800310e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_TIM_Base_MspInit+0x40>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_TIM_Base_MspInit+0x40>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <HAL_TIM_Base_MspInit+0x40>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_TIM_MspPostInit+0xa4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d13b      	bne.n	80031be <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_TIM_MspPostInit+0xa8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800317e:	23c0      	movs	r3, #192	; 0xc0
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800318e:	2302      	movs	r3, #2
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <HAL_TIM_MspPostInit+0xac>)
 800319a:	f000 fbcb 	bl	8003934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800319e:	2303      	movs	r3, #3
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ae:	2302      	movs	r3, #2
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4806      	ldr	r0, [pc, #24]	; (80031d4 <HAL_TIM_MspPostInit+0xb0>)
 80031ba:	f000 fbbb 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400

080031d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_UART_MspInit+0x94>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d134      	bne.n	8003264 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_UART_MspInit+0x98>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <HAL_UART_MspInit+0x98>)
 8003204:	f043 0310 	orr.w	r3, r3, #16
 8003208:	6453      	str	r3, [r2, #68]	; 0x44
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_UART_MspInit+0x98>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_UART_MspInit+0x98>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a14      	ldr	r2, [pc, #80]	; (8003270 <HAL_UART_MspInit+0x98>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_UART_MspInit+0x98>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003240:	2303      	movs	r3, #3
 8003242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003244:	2307      	movs	r3, #7
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4619      	mov	r1, r3
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <HAL_UART_MspInit+0x9c>)
 8003250:	f000 fb70 	bl	8003934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2105      	movs	r1, #5
 8003258:	2025      	movs	r0, #37	; 0x25
 800325a:	f000 faaf 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800325e:	2025      	movs	r0, #37	; 0x25
 8003260:	f000 fac8 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40011000 	.word	0x40011000
 8003270:	40023800 	.word	0x40023800
 8003274:	40020000 	.word	0x40020000

08003278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_InitTick+0xe4>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <HAL_InitTick+0xe4>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6413      	str	r3, [r2, #64]	; 0x40
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_InitTick+0xe4>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032a4:	f107 0210 	add.w	r2, r7, #16
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 ffc0 	bl	8005234 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032be:	f001 ff91 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 80032c2:	6378      	str	r0, [r7, #52]	; 0x34
 80032c4:	e004      	b.n	80032d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032c6:	f001 ff8d 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 80032ca:	4603      	mov	r3, r0
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_InitTick+0xe8>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	0c9b      	lsrs	r3, r3, #18
 80032da:	3b01      	subs	r3, #1
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_InitTick+0xec>)
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <HAL_InitTick+0xf0>)
 80032e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_InitTick+0xec>)
 80032e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032ea:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_InitTick+0xec>)
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_InitTick+0xec>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_InitTick+0xec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_InitTick+0xec>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003304:	4817      	ldr	r0, [pc, #92]	; (8003364 <HAL_InitTick+0xec>)
 8003306:	f001 ffc7 	bl	8005298 <HAL_TIM_Base_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11b      	bne.n	8003350 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003318:	4812      	ldr	r0, [pc, #72]	; (8003364 <HAL_InitTick+0xec>)
 800331a:	f002 f80d 	bl	8005338 <HAL_TIM_Base_Start_IT>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800332c:	202d      	movs	r0, #45	; 0x2d
 800332e:	f000 fa61 	bl	80037f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d808      	bhi.n	800334a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	202d      	movs	r0, #45	; 0x2d
 800333e:	f000 fa3d 	bl	80037bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <HAL_InitTick+0xf4>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e002      	b.n	8003350 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003350:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003354:	4618      	mov	r0, r3
 8003356:	3738      	adds	r7, #56	; 0x38
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	431bde83 	.word	0x431bde83
 8003364:	2000096c 	.word	0x2000096c
 8003368:	40002000 	.word	0x40002000
 800336c:	2000009c 	.word	0x2000009c

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003374:	e7fe      	b.n	8003374 <NMI_Handler+0x4>

08003376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337a:	e7fe      	b.n	800337a <HardFault_Handler+0x4>

0800337c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <MemManage_Handler+0x4>

08003382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003386:	e7fe      	b.n	8003386 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	e7fe      	b.n	800338c <UsageFault_Handler+0x4>

0800338e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <USART1_IRQHandler+0x10>)
 80033a2:	f003 f959 	bl	8006658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000700 	.word	0x20000700

080033b0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80033b6:	f002 fa7b 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000096c 	.word	0x2000096c

080033c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return 1;
 80033c8:	2301      	movs	r3, #1
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_kill>:

int _kill(int pid, int sig)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033de:	f006 f82b 	bl	8009438 <__errno>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2216      	movs	r2, #22
 80033e6:	601a      	str	r2, [r3, #0]
  return -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_exit>:

void _exit (int status)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ffe7 	bl	80033d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003406:	e7fe      	b.n	8003406 <_exit+0x12>

08003408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e00a      	b.n	8003430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800341a:	f3af 8000 	nop.w
 800341e:	4601      	mov	r1, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	b2ca      	uxtb	r2, r1
 8003428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	dbf0      	blt.n	800341a <_read+0x12>
  }

  return len;
 8003438:	687b      	ldr	r3, [r7, #4]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e009      	b.n	8003468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	60ba      	str	r2, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	dbf1      	blt.n	8003454 <_write+0x12>
  }
  return len;
 8003470:	687b      	ldr	r3, [r7, #4]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_close>:

int _close(int file)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034a2:	605a      	str	r2, [r3, #4]
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_isatty>:

int _isatty(int file)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ba:	2301      	movs	r3, #1
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <_sbrk+0x5c>)
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <_sbrk+0x60>)
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <_sbrk+0x64>)
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <_sbrk+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003514:	f005 ff90 	bl	8009438 <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	220c      	movs	r2, #12
 800351c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e009      	b.n	8003538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <_sbrk+0x64>)
 8003534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20020000 	.word	0x20020000
 8003544:	00000400 	.word	0x00000400
 8003548:	200009b4 	.word	0x200009b4
 800354c:	20004860 	.word	0x20004860

08003550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <SystemInit+0x20>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <SystemInit+0x20>)
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003578:	f7ff ffea 	bl	8003550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800357e:	490d      	ldr	r1, [pc, #52]	; (80035b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003584:	e002      	b.n	800358c <LoopCopyDataInit>

08003586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358a:	3304      	adds	r3, #4

0800358c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800358c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003590:	d3f9      	bcc.n	8003586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003594:	4c0a      	ldr	r4, [pc, #40]	; (80035c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003598:	e001      	b.n	800359e <LoopFillZerobss>

0800359a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800359c:	3204      	adds	r2, #4

0800359e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a0:	d3fb      	bcc.n	800359a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a2:	f005 ff4f 	bl	8009444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035a6:	f7ff f883 	bl	80026b0 <main>
  bx  lr    
 80035aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b4:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 80035b8:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 80035bc:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80035c0:	2000485c 	.word	0x2000485c

080035c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c4:	e7fe      	b.n	80035c4 <ADC_IRQHandler>
	...

080035c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_Init+0x40>)
 80035d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_Init+0x40>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_Init+0x40>)
 80035de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_Init+0x40>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_Init+0x40>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f000 f8d8 	bl	80037a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f6:	200f      	movs	r0, #15
 80035f8:	f7ff fe3e 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035fc:	f7ff fc5e 	bl	8002ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00

0800360c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_IncTick+0x20>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_IncTick+0x24>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4413      	add	r3, r2
 800361c:	4a04      	ldr	r2, [pc, #16]	; (8003630 <HAL_IncTick+0x24>)
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200000a0 	.word	0x200000a0
 8003630:	200009b8 	.word	0x200009b8

08003634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return uwTick;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_GetTick+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200009b8 	.word	0x200009b8

0800364c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <__NVIC_GetPriorityGrouping+0x18>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0307 	and.w	r3, r3, #7
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db0b      	blt.n	80036da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4907      	ldr	r1, [pc, #28]	; (80036e8 <__NVIC_EnableIRQ+0x38>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f202 	lsl.w	r2, r0, r2
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff4c 	bl	800364c <__NVIC_SetPriorityGrouping>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ce:	f7ff ff61 	bl	8003694 <__NVIC_GetPriorityGrouping>
 80037d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7ff ffb1 	bl	8003740 <NVIC_EncodePriority>
 80037de:	4602      	mov	r2, r0
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff80 	bl	80036ec <__NVIC_SetPriority>
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff54 	bl	80036b0 <__NVIC_EnableIRQ>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800381e:	f7ff ff09 	bl	8003634 <HAL_GetTick>
 8003822:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d008      	beq.n	8003842 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e052      	b.n	80038e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0216 	bic.w	r2, r2, #22
 8003850:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003860:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_DMA_Abort+0x62>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0208 	bic.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003892:	e013      	b.n	80038bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003894:	f7ff fece 	bl	8003634 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d90c      	bls.n	80038bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2203      	movs	r2, #3
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e015      	b.n	80038e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e4      	bne.n	8003894 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	223f      	movs	r2, #63	; 0x3f
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e00c      	b.n	8003928 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2205      	movs	r2, #5
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e16b      	b.n	8003c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	f040 815a 	bne.w	8003c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d005      	beq.n	8003986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	2b02      	cmp	r3, #2
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d017      	beq.n	8003a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d123      	bne.n	8003a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	08da      	lsrs	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3208      	adds	r2, #8
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80b4 	beq.w	8003c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <HAL_GPIO_Init+0x30c>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a5f      	ldr	r2, [pc, #380]	; (8003c40 <HAL_GPIO_Init+0x30c>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_GPIO_Init+0x30c>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad6:	4a5b      	ldr	r2, [pc, #364]	; (8003c44 <HAL_GPIO_Init+0x310>)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_GPIO_Init+0x314>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02b      	beq.n	8003b5a <HAL_GPIO_Init+0x226>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a51      	ldr	r2, [pc, #324]	; (8003c4c <HAL_GPIO_Init+0x318>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d025      	beq.n	8003b56 <HAL_GPIO_Init+0x222>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a50      	ldr	r2, [pc, #320]	; (8003c50 <HAL_GPIO_Init+0x31c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <HAL_GPIO_Init+0x21e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_GPIO_Init+0x320>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d019      	beq.n	8003b4e <HAL_GPIO_Init+0x21a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4e      	ldr	r2, [pc, #312]	; (8003c58 <HAL_GPIO_Init+0x324>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x216>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4d      	ldr	r2, [pc, #308]	; (8003c5c <HAL_GPIO_Init+0x328>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_GPIO_Init+0x212>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_GPIO_Init+0x32c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x20e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_GPIO_Init+0x330>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_GPIO_Init+0x20a>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e00e      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	e00c      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b42:	2306      	movs	r3, #6
 8003b44:	e00a      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b46:	2305      	movs	r3, #5
 8003b48:	e008      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x228>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f002 0203 	and.w	r2, r2, #3
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4093      	lsls	r3, r2
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b6c:	4935      	ldr	r1, [pc, #212]	; (8003c44 <HAL_GPIO_Init+0x310>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9e:	4a32      	ldr	r2, [pc, #200]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc8:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c1c:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_GPIO_Init+0x334>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	f67f ae90 	bls.w	8003950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020c00 	.word	0x40020c00
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40021400 	.word	0x40021400
 8003c60:	40021800 	.word	0x40021800
 8003c64:	40021c00 	.word	0x40021c00
 8003c68:	40013c00 	.word	0x40013c00

08003c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e12b      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff f93e 	bl	8002f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	; 0x24
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f001 fa88 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a81      	ldr	r2, [pc, #516]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d807      	bhi.n	8003cf0 <HAL_I2C_Init+0x84>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_I2C_Init+0x278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bf94      	ite	ls
 8003ce8:	2301      	movls	r3, #1
 8003cea:	2300      	movhi	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e006      	b.n	8003cfe <HAL_I2C_Init+0x92>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a7d      	ldr	r2, [pc, #500]	; (8003ee8 <HAL_I2C_Init+0x27c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bf94      	ite	ls
 8003cf8:	2301      	movls	r3, #1
 8003cfa:	2300      	movhi	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0e7      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a78      	ldr	r2, [pc, #480]	; (8003eec <HAL_I2C_Init+0x280>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0c9b      	lsrs	r3, r3, #18
 8003d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a6a      	ldr	r2, [pc, #424]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <HAL_I2C_Init+0xd4>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e009      	b.n	8003d54 <HAL_I2C_Init+0xe8>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_I2C_Init+0x284>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	3301      	adds	r3, #1
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	495c      	ldr	r1, [pc, #368]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d70:	428b      	cmp	r3, r1
 8003d72:	d819      	bhi.n	8003da8 <HAL_I2C_Init+0x13c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e59      	subs	r1, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d88:	400b      	ands	r3, r1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_I2C_Init+0x138>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1e59      	subs	r1, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	e051      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e04f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_I2C_Init+0x168>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	440b      	add	r3, r1
 8003dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e012      	b.n	8003dfa <HAL_I2C_Init+0x18e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	0099      	lsls	r1, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Init+0x196>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10e      	bne.n	8003e28 <HAL_I2C_Init+0x1bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e58      	subs	r0, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	440b      	add	r3, r1
 8003e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	e00f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	0099      	lsls	r1, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	6809      	ldr	r1, [r1, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6911      	ldr	r1, [r2, #16]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	000186a0 	.word	0x000186a0
 8003ee4:	001e847f 	.word	0x001e847f
 8003ee8:	003d08ff 	.word	0x003d08ff
 8003eec:	431bde83 	.word	0x431bde83
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7ff fb91 	bl	8003634 <HAL_GetTick>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	f040 8214 	bne.w	800434a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2319      	movs	r3, #25
 8003f28:	2201      	movs	r2, #1
 8003f2a:	497b      	ldr	r1, [pc, #492]	; (8004118 <HAL_I2C_Mem_Read+0x224>)
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fafb 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e207      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x56>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e200      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2222      	movs	r2, #34	; 0x22
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a5b      	ldr	r2, [pc, #364]	; (800411c <HAL_I2C_Mem_Read+0x228>)
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb2:	88f8      	ldrh	r0, [r7, #6]
 8003fb4:	893a      	ldrh	r2, [r7, #8]
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f9c8 	bl	8004358 <I2C_RequestMemoryRead>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1bc      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e190      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	2b01      	cmp	r3, #1
 8004008:	d11b      	bne.n	8004042 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e170      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	2b02      	cmp	r3, #2
 8004048:	d11b      	bne.n	8004082 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	e150      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004098:	e144      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	f200 80f1 	bhi.w	8004286 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d123      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb9b 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e145      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f2:	e117      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d14e      	bne.n	800419a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	4906      	ldr	r1, [pc, #24]	; (8004120 <HAL_I2C_Mem_Read+0x22c>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa0e 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e11a      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000
 8004120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004198:	e0c4      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2200      	movs	r2, #0
 80041a2:	496c      	ldr	r1, [pc, #432]	; (8004354 <HAL_I2C_Mem_Read+0x460>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f9bf 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0cb      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2200      	movs	r2, #0
 80041fe:	4955      	ldr	r1, [pc, #340]	; (8004354 <HAL_I2C_Mem_Read+0x460>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f991 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e09d      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e04e      	b.n	8004324 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 faae 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e058      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d124      	bne.n	8004324 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d107      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f aeb6 	bne.w	800409a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	00010004 	.word	0x00010004

08004358 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4603      	mov	r3, r0
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	460b      	mov	r3, r1
 800436c:	813b      	strh	r3, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2200      	movs	r2, #0
 800439a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f8c2 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d103      	bne.n	80043c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0aa      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	4952      	ldr	r1, [pc, #328]	; (8004524 <I2C_RequestMemoryRead+0x1cc>)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f91d 	bl	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e097      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6a39      	ldr	r1, [r7, #32]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f9a8 	bl	800475c <I2C_WaitOnTXEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b04      	cmp	r3, #4
 8004418:	d107      	bne.n	800442a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e076      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	e021      	b.n	8004484 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004440:	893b      	ldrh	r3, [r7, #8]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	b29b      	uxth	r3, r3
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	6a39      	ldr	r1, [r7, #32]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f982 	bl	800475c <I2C_WaitOnTXEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b04      	cmp	r3, #4
 8004464:	d107      	bne.n	8004476 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e050      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	6a39      	ldr	r1, [r7, #32]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f967 	bl	800475c <I2C_WaitOnTXEFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00d      	beq.n	80044b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b04      	cmp	r3, #4
 800449a:	d107      	bne.n	80044ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e035      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f82b 	bl	8004528 <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d103      	bne.n	80044f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e013      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	4906      	ldr	r1, [pc, #24]	; (8004524 <I2C_RequestMemoryRead+0x1cc>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f886 	bl	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00010002 	.word	0x00010002

08004528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004538:	e048      	b.n	80045cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d044      	beq.n	80045cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7ff f877 	bl	8003634 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d139      	bne.n	80045cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d10d      	bne.n	800457e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	43da      	mvns	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	e00c      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x70>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	429a      	cmp	r2, r3
 800459c:	d116      	bne.n	80045cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e023      	b.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10d      	bne.n	80045f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	43da      	mvns	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	e00c      	b.n	800460c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	43da      	mvns	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	429a      	cmp	r2, r3
 8004610:	d093      	beq.n	800453a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800462a:	e071      	b.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d123      	bne.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e067      	b.n	8004754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d041      	beq.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7fe ffd2 	bl	8003634 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d136      	bne.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10c      	bne.n	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e00b      	b.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	43da      	mvns	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e021      	b.n	8004754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d10c      	bne.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	43da      	mvns	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4013      	ands	r3, r2
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e00b      	b.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af6d 	bne.w	800462c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004768:	e034      	b.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f89b 	bl	80048a6 <I2C_IsAcknowledgeFailed>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e034      	b.n	80047e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d028      	beq.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fe ff57 	bl	8003634 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11d      	bne.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d016      	beq.n	80047d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d1c3      	bne.n	800476a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047f8:	e049      	b.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d119      	bne.n	800483c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e030      	b.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fe fefa 	bl	8003634 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11d      	bne.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d016      	beq.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d1ae      	bne.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d11b      	bne.n	80048f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e267      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d075      	beq.n	8004a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004922:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d00c      	beq.n	8004948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800492e:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004936:	2b08      	cmp	r3, #8
 8004938:	d112      	bne.n	8004960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493a:	4b82      	ldr	r3, [pc, #520]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004946:	d10b      	bne.n	8004960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05b      	beq.n	8004a0c <HAL_RCC_OscConfig+0x108>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d157      	bne.n	8004a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e242      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d106      	bne.n	8004978 <HAL_RCC_OscConfig+0x74>
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a75      	ldr	r2, [pc, #468]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e01d      	b.n	80049b4 <HAL_RCC_OscConfig+0xb0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0x98>
 8004982:	4b70      	ldr	r3, [pc, #448]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6f      	ldr	r2, [pc, #444]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6c      	ldr	r2, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00b      	b.n	80049b4 <HAL_RCC_OscConfig+0xb0>
 800499c:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a68      	ldr	r2, [pc, #416]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a65      	ldr	r2, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 80049ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d013      	beq.n	80049e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe fe3a 	bl	8003634 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fe fe36 	bl	8003634 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e207      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0xc0>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fe fe26 	bl	8003634 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fe fe22 	bl	8003634 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1f3      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	4b51      	ldr	r3, [pc, #324]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0xe8>
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d063      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d11c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a32:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d116      	bne.n	8004a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_RCC_OscConfig+0x152>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e1c7      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4937      	ldr	r1, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	e03a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d020      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a74:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_RCC_OscConfig+0x244>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7a:	f7fe fddb 	bl	8003634 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a82:	f7fe fdd7 	bl	8003634 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e1a8      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4925      	ldr	r1, [pc, #148]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
 8004ab4:	e015      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab6:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <HAL_RCC_OscConfig+0x244>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fdba 	bl	8003634 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fe fdb6 	bl	8003634 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e187      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d036      	beq.n	8004b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d016      	beq.n	8004b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_RCC_OscConfig+0x248>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7fe fd9a 	bl	8003634 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fe fd96 	bl	8003634 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e167      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_OscConfig+0x240>)
 8004b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x200>
 8004b22:	e01b      	b.n	8004b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_OscConfig+0x248>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fd83 	bl	8003634 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b30:	e00e      	b.n	8004b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b32:	f7fe fd7f 	bl	8003634 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d907      	bls.n	8004b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e150      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1ea      	bne.n	8004b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8097 	beq.w	8004c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a7c      	ldr	r2, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b7a      	ldr	r3, [pc, #488]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b77      	ldr	r3, [pc, #476]	; (8004d78 <HAL_RCC_OscConfig+0x474>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d118      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba6:	4b74      	ldr	r3, [pc, #464]	; (8004d78 <HAL_RCC_OscConfig+0x474>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a73      	ldr	r2, [pc, #460]	; (8004d78 <HAL_RCC_OscConfig+0x474>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb2:	f7fe fd3f 	bl	8003634 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bba:	f7fe fd3b 	bl	8003634 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e10c      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	4b6a      	ldr	r3, [pc, #424]	; (8004d78 <HAL_RCC_OscConfig+0x474>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d106      	bne.n	8004bee <HAL_RCC_OscConfig+0x2ea>
 8004be0:	4b64      	ldr	r3, [pc, #400]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a63      	ldr	r2, [pc, #396]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
 8004bec:	e01c      	b.n	8004c28 <HAL_RCC_OscConfig+0x324>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCC_OscConfig+0x30c>
 8004bf6:	4b5f      	ldr	r3, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a5e      	ldr	r2, [pc, #376]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	f043 0304 	orr.w	r3, r3, #4
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
 8004c02:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a5b      	ldr	r2, [pc, #364]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_OscConfig+0x324>
 8004c10:	4b58      	ldr	r3, [pc, #352]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a57      	ldr	r2, [pc, #348]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	4b55      	ldr	r3, [pc, #340]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a54      	ldr	r2, [pc, #336]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c22:	f023 0304 	bic.w	r3, r3, #4
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fe fd00 	bl	8003634 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fe fcfc 	bl	8003634 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e0cb      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4e:	4b49      	ldr	r3, [pc, #292]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ee      	beq.n	8004c38 <HAL_RCC_OscConfig+0x334>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fcea 	bl	8003634 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f7fe fce6 	bl	8003634 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0b5      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7a:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ee      	bne.n	8004c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8c:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4a38      	ldr	r2, [pc, #224]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a1 	beq.w	8004de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d05c      	beq.n	8004d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d141      	bne.n	8004d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCC_OscConfig+0x478>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fcba 	bl	8003634 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fe fcb6 	bl	8003634 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e087      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	019b      	lsls	r3, r3, #6
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	491b      	ldr	r1, [pc, #108]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x478>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d12:	f7fe fc8f 	bl	8003634 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1a:	f7fe fc8b 	bl	8003634 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e05c      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x416>
 8004d38:	e054      	b.n	8004de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_RCC_OscConfig+0x478>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fe fc78 	bl	8003634 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fe fc74 	bl	8003634 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e045      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x444>
 8004d66:	e03d      	b.n	8004de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e038      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_OscConfig+0x4ec>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d028      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d121      	bne.n	8004de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d11a      	bne.n	8004de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d111      	bne.n	8004de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800

08004df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0cc      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e08:	4b68      	ldr	r3, [pc, #416]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d90c      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b65      	ldr	r3, [pc, #404]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b63      	ldr	r3, [pc, #396]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0b8      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e48:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a58      	ldr	r2, [pc, #352]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	494d      	ldr	r1, [pc, #308]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d044      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d119      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e06f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec2:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e067      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed2:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4934      	ldr	r1, [pc, #208]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee4:	f7fe fba6 	bl	8003634 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fe fba2 	bl	8003634 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e04f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 020c 	and.w	r2, r3, #12
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d1eb      	bne.n	8004eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d20c      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b22      	ldr	r3, [pc, #136]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e032      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f7a:	f000 f821 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	5ccb      	ldrb	r3, [r1, r3]
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe f96c 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023c00 	.word	0x40023c00
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	0800bd4c 	.word	0x0800bd4c
 8004fb8:	20000098 	.word	0x20000098
 8004fbc:	2000009c 	.word	0x2000009c

08004fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b094      	sub	sp, #80	; 0x50
 8004fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	647b      	str	r3, [r7, #68]	; 0x44
 8004fcc:	2300      	movs	r3, #0
 8004fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd8:	4b79      	ldr	r3, [pc, #484]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d00d      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x40>
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	f200 80e1 	bhi.w	80051ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ff2:	e0db      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff4:	4b73      	ldr	r3, [pc, #460]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ff6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ff8:	e0db      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ffa:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ffe:	e0d8      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800500a:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d063      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005016:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	2200      	movs	r2, #0
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005020:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005032:	4622      	mov	r2, r4
 8005034:	462b      	mov	r3, r5
 8005036:	f04f 0000 	mov.w	r0, #0
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	0159      	lsls	r1, r3, #5
 8005040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005044:	0150      	lsls	r0, r2, #5
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4621      	mov	r1, r4
 800504c:	1a51      	subs	r1, r2, r1
 800504e:	6139      	str	r1, [r7, #16]
 8005050:	4629      	mov	r1, r5
 8005052:	eb63 0301 	sbc.w	r3, r3, r1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005064:	4659      	mov	r1, fp
 8005066:	018b      	lsls	r3, r1, #6
 8005068:	4651      	mov	r1, sl
 800506a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800506e:	4651      	mov	r1, sl
 8005070:	018a      	lsls	r2, r1, #6
 8005072:	4651      	mov	r1, sl
 8005074:	ebb2 0801 	subs.w	r8, r2, r1
 8005078:	4659      	mov	r1, fp
 800507a:	eb63 0901 	sbc.w	r9, r3, r1
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005092:	4690      	mov	r8, r2
 8005094:	4699      	mov	r9, r3
 8005096:	4623      	mov	r3, r4
 8005098:	eb18 0303 	adds.w	r3, r8, r3
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	462b      	mov	r3, r5
 80050a0:	eb49 0303 	adc.w	r3, r9, r3
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050b2:	4629      	mov	r1, r5
 80050b4:	024b      	lsls	r3, r1, #9
 80050b6:	4621      	mov	r1, r4
 80050b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050bc:	4621      	mov	r1, r4
 80050be:	024a      	lsls	r2, r1, #9
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c6:	2200      	movs	r2, #0
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050d0:	f7fb fdba 	bl	8000c48 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4613      	mov	r3, r2
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	e058      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050de:	4b38      	ldr	r3, [pc, #224]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	2200      	movs	r2, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	4611      	mov	r1, r2
 80050ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	f04f 0000 	mov.w	r0, #0
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	0159      	lsls	r1, r3, #5
 8005106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800510a:	0150      	lsls	r0, r2, #5
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4641      	mov	r1, r8
 8005112:	ebb2 0a01 	subs.w	sl, r2, r1
 8005116:	4649      	mov	r1, r9
 8005118:	eb63 0b01 	sbc.w	fp, r3, r1
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800512c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005130:	ebb2 040a 	subs.w	r4, r2, sl
 8005134:	eb63 050b 	sbc.w	r5, r3, fp
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	00eb      	lsls	r3, r5, #3
 8005142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005146:	00e2      	lsls	r2, r4, #3
 8005148:	4614      	mov	r4, r2
 800514a:	461d      	mov	r5, r3
 800514c:	4643      	mov	r3, r8
 800514e:	18e3      	adds	r3, r4, r3
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	464b      	mov	r3, r9
 8005154:	eb45 0303 	adc.w	r3, r5, r3
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005166:	4629      	mov	r1, r5
 8005168:	028b      	lsls	r3, r1, #10
 800516a:	4621      	mov	r1, r4
 800516c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005170:	4621      	mov	r1, r4
 8005172:	028a      	lsls	r2, r1, #10
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	2200      	movs	r2, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005184:	f7fb fd60 	bl	8000c48 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4613      	mov	r3, r2
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	3301      	adds	r3, #1
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051aa:	e002      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3750      	adds	r7, #80	; 0x50
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	007a1200 	.word	0x007a1200

080051cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d0:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d2:	681b      	ldr	r3, [r3, #0]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000098 	.word	0x20000098

080051e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051e8:	f7ff fff0 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	0a9b      	lsrs	r3, r3, #10
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4903      	ldr	r1, [pc, #12]	; (8005208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40023800 	.word	0x40023800
 8005208:	0800bd5c 	.word	0x0800bd5c

0800520c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005210:	f7ff ffdc 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0b5b      	lsrs	r3, r3, #13
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800
 8005230:	0800bd5c 	.word	0x0800bd5c

08005234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	220f      	movs	r2, #15
 8005242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0203 	and.w	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_GetClockConfig+0x5c>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_RCC_GetClockConfig+0x60>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0207 	and.w	r2, r3, #7
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800
 8005294:	40023c00 	.word	0x40023c00

08005298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e041      	b.n	800532e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd ff0e 	bl	80030e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 fd8c 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e04e      	b.n	80053ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a23      	ldr	r2, [pc, #140]	; (80053fc <HAL_TIM_Base_Start_IT+0xc4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d022      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d01d      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_TIM_Base_Start_IT+0xc8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_TIM_Base_Start_IT+0xcc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_TIM_Base_Start_IT+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIM_Base_Start_IT+0xd4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_TIM_Base_Start_IT+0xd8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d111      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d010      	beq.n	80053ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	e007      	b.n	80053ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40010400 	.word	0x40010400
 8005410:	40014000 	.word	0x40014000
 8005414:	40001800 	.word	0x40001800

08005418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e041      	b.n	80054ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fd fe2c 	bl	800309c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 fccc 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x24>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x3e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x58>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07c      	b.n	8005624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0x82>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	e013      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0x92>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	e00b      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xa2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	e003      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff38 	bl	80063e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_PWM_Start+0xcc>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_TIM_PWM_Start+0xd0>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_TIM_PWM_Start+0xd2>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d01d      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_TIM_PWM_Start+0x17c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <HAL_TIM_PWM_Start+0x180>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIM_PWM_Start+0x184>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_TIM_PWM_Start+0x188>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <HAL_TIM_PWM_Start+0x18c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d010      	beq.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e007      	b.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e097      	b.n	800578c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fd fc97 	bl	8002fa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568c:	f023 0307 	bic.w	r3, r3, #7
 8005690:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fba9 	bl	8005df4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	4313      	orrs	r3, r2
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056e8:	f023 030c 	bic.w	r3, r3, #12
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4313      	orrs	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	031b      	lsls	r3, r3, #12
 8005718:	4313      	orrs	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4313      	orrs	r3, r2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ca:	7b7b      	ldrb	r3, [r7, #13]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e069      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e4:	e031      	b.n	800584a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d110      	bne.n	800580e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d102      	bne.n	80057f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f2:	7b3b      	ldrb	r3, [r7, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e055      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800580c:	e01d      	b.n	800584a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d105      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800581a:	7b7b      	ldrb	r3, [r7, #13]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d102      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005820:	7b3b      	ldrb	r3, [r7, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e03e      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_TIM_Encoder_Start+0xc4>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d008      	beq.n	8005868 <HAL_TIM_Encoder_Start+0xd4>
 8005856:	e00f      	b.n	8005878 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fdbd 	bl	80063e0 <TIM_CCxChannelCmd>
      break;
 8005866:	e016      	b.n	8005896 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	2104      	movs	r1, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fdb5 	bl	80063e0 <TIM_CCxChannelCmd>
      break;
 8005876:	e00e      	b.n	8005896 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fdad 	bl	80063e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2201      	movs	r2, #1
 800588c:	2104      	movs	r1, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fda6 	bl	80063e0 <TIM_CCxChannelCmd>
      break;
 8005894:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa5b 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa4d 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa5e 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0204 	mvn.w	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa35 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa27 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fa38 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa0f 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa01 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa12 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0210 	mvn.w	r2, #16
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2208      	movs	r2, #8
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9e9 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9db 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9ec 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0201 	mvn.w	r2, #1
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fd fa0e 	bl	8002e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd7c 	bl	8006538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9bd 	bl	8005dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0220 	mvn.w	r2, #32
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd4e 	bl	8006524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e0ae      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f200 809f 	bhi.w	8005bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005bfd 	.word	0x08005bfd
 8005acc:	08005bfd 	.word	0x08005bfd
 8005ad0:	08005bfd 	.word	0x08005bfd
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005bfd 	.word	0x08005bfd
 8005adc:	08005bfd 	.word	0x08005bfd
 8005ae0:	08005bfd 	.word	0x08005bfd
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005bfd 	.word	0x08005bfd
 8005aec:	08005bfd 	.word	0x08005bfd
 8005af0:	08005bfd 	.word	0x08005bfd
 8005af4:	08005bbb 	.word	0x08005bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa24 	bl	8005f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e064      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa74 	bl	800602c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e043      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fac9 	bl	8006118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fb1d 	bl	8006200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e002      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e0b4      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x186>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c68:	d03e      	beq.n	8005ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6e:	f200 8087 	bhi.w	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	f000 8086 	beq.w	8005d86 <HAL_TIM_ConfigClockSource+0x172>
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7e:	d87f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d01a      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0xa6>
 8005c84:	2b70      	cmp	r3, #112	; 0x70
 8005c86:	d87b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d050      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x11a>
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d877      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	d03c      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0xfa>
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d873      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d058      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x13a>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d86f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d064      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d86b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d060      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d867      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d05a      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	e062      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cca:	f000 fb69 	bl	80063a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	609a      	str	r2, [r3, #8]
      break;
 8005ce6:	e04f      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf8:	f000 fb52 	bl	80063a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d0a:	609a      	str	r2, [r3, #8]
      break;
 8005d0c:	e03c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fac6 	bl	80062ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2150      	movs	r1, #80	; 0x50
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb1f 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e02c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 fae5 	bl	800630a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2160      	movs	r1, #96	; 0x60
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb0f 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e01c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 faa6 	bl	80062ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2140      	movs	r1, #64	; 0x40
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 faff 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e00c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f000 faf6 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 8005d7e:	e003      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a46      	ldr	r2, [pc, #280]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a43      	ldr	r2, [pc, #268]	; (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a40      	ldr	r2, [pc, #256]	; (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a35      	ldr	r2, [pc, #212]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d027      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d023      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a31      	ldr	r2, [pc, #196]	; (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a30      	ldr	r2, [pc, #192]	; (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <TIM_Base_SetConfig+0x140>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <TIM_Base_SetConfig+0x144>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	; (8005f3c <TIM_Base_SetConfig+0x148>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <TIM_Base_SetConfig+0x14c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <TIM_Base_SetConfig+0x150>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <TIM_Base_SetConfig+0x154>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d103      	bne.n	8005ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]
  }
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800
 8005f40:	40001800 	.word	0x40001800
 8005f44:	40001c00 	.word	0x40001c00
 8005f48:	40002000 	.word	0x40002000

08005f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f023 0201 	bic.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 0302 	bic.w	r3, r3, #2
 8005f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a20      	ldr	r2, [pc, #128]	; (8006024 <TIM_OC1_SetConfig+0xd8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC1_SetConfig+0x64>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <TIM_OC1_SetConfig+0xdc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0308 	bic.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	; (8006024 <TIM_OC1_SetConfig+0xd8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_OC1_SetConfig+0x8e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <TIM_OC1_SetConfig+0xdc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f023 0210 	bic.w	r2, r3, #16
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a22      	ldr	r2, [pc, #136]	; (8006110 <TIM_OC2_SetConfig+0xe4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC2_SetConfig+0x68>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <TIM_OC2_SetConfig+0xe8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10d      	bne.n	80060b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a17      	ldr	r2, [pc, #92]	; (8006110 <TIM_OC2_SetConfig+0xe4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC2_SetConfig+0x94>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a16      	ldr	r2, [pc, #88]	; (8006114 <TIM_OC2_SetConfig+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d113      	bne.n	80060e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40010400 	.word	0x40010400

08006118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <TIM_OC3_SetConfig+0xe0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d003      	beq.n	800617e <TIM_OC3_SetConfig+0x66>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <TIM_OC3_SetConfig+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10d      	bne.n	800619a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <TIM_OC3_SetConfig+0xe0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_OC3_SetConfig+0x92>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a15      	ldr	r2, [pc, #84]	; (80061fc <TIM_OC3_SetConfig+0xe4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d113      	bne.n	80061d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400

08006200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800624a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	031b      	lsls	r3, r3, #12
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <TIM_OC4_SetConfig+0xa4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_OC4_SetConfig+0x68>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a11      	ldr	r2, [pc, #68]	; (80062a8 <TIM_OC4_SetConfig+0xa8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d109      	bne.n	800627c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800626e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	019b      	lsls	r3, r3, #6
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f023 0201 	bic.w	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 030a 	bic.w	r3, r3, #10
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f023 0210 	bic.w	r2, r3, #16
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	031b      	lsls	r3, r3, #12
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006346:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	f043 0307 	orr.w	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2201      	movs	r2, #1
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e05a      	b.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d022      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d01d      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d018      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00e      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a18      	ldr	r2, [pc, #96]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a17      	ldr	r2, [pc, #92]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10c      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e042      	b.n	80065e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc fe30 	bl	80031d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fcb1 	bl	8006ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	d121      	bne.n	800664a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_UART_Transmit_IT+0x26>
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e01a      	b.n	800664c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006644:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b0ba      	sub	sp, #232	; 0xe8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800667e:	2300      	movs	r3, #0
 8006680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10f      	bne.n	80066be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_UART_IRQHandler+0x66>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fb5f 	bl	8006d7a <UART_Receive_IT>
      return;
 80066bc:	e25b      	b.n	8006b76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80de 	beq.w	8006884 <HAL_UART_IRQHandler+0x22c>
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80d1 	beq.w	8006884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <HAL_UART_IRQHandler+0xae>
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <HAL_UART_IRQHandler+0xd2>
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f043 0202 	orr.w	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <HAL_UART_IRQHandler+0xf6>
 8006736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <HAL_UART_IRQHandler+0x126>
 800675a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	f043 0208 	orr.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 81f2 	beq.w	8006b6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_UART_IRQHandler+0x14e>
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 faea 	bl	8006d7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <HAL_UART_IRQHandler+0x17a>
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04f      	beq.n	8006872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9f2 	bl	8006bbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	d141      	bne.n	800686a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3314      	adds	r3, #20
 800680e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800681e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800682a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1d9      	bne.n	80067e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d013      	beq.n	8006862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	4a7e      	ldr	r2, [pc, #504]	; (8006a38 <HAL_UART_IRQHandler+0x3e0>)
 8006840:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	4618      	mov	r0, r3
 8006848:	f7fd f852 	bl	80038f0 <HAL_DMA_Abort_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e00e      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f994 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	e00a      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f990 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	e006      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f98c 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800687e:	e175      	b.n	8006b6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	bf00      	nop
    return;
 8006882:	e173      	b.n	8006b6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	2b01      	cmp	r3, #1
 800688a:	f040 814f 	bne.w	8006b2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8148 	beq.w	8006b2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8141 	beq.w	8006b2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	f040 80b6 	bne.w	8006a3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8145 	beq.w	8006b70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ee:	429a      	cmp	r2, r3
 80068f0:	f080 813e 	bcs.w	8006b70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	f000 8088 	beq.w	8006a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800693a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800694e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800697a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800697e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800698c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e1      	bne.n	8006956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e3      	bne.n	8006992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ea:	f023 0310 	bic.w	r3, r3, #16
 80069ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80069fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e3      	bne.n	80069d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fc fefb 	bl	8003810 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8b7 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a36:	e09b      	b.n	8006b70 <HAL_UART_IRQHandler+0x518>
 8006a38:	08006c83 	.word	0x08006c83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 808e 	beq.w	8006b74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8089 	beq.w	8006b74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a86:	647a      	str	r2, [r7, #68]	; 0x44
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006abe:	633a      	str	r2, [r7, #48]	; 0x30
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e3      	bne.n	8006a9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0310 	bic.w	r3, r3, #16
 8006af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b04:	61fa      	str	r2, [r7, #28]
 8006b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69b9      	ldr	r1, [r7, #24]
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	617b      	str	r3, [r7, #20]
   return(result);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e3      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f83d 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b2a:	e023      	b.n	8006b74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <HAL_UART_IRQHandler+0x4f4>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8b0 	bl	8006caa <UART_Transmit_IT>
    return;
 8006b4a:	e014      	b.n	8006b76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00e      	beq.n	8006b76 <HAL_UART_IRQHandler+0x51e>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d008      	beq.n	8006b76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8f0 	bl	8006d4a <UART_EndTransmit_IT>
    return;
 8006b6a:	e004      	b.n	8006b76 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b6c:	bf00      	nop
 8006b6e:	e002      	b.n	8006b76 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b70:	bf00      	nop
 8006b72:	e000      	b.n	8006b76 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b74:	bf00      	nop
  }
}
 8006b76:	37e8      	adds	r7, #232	; 0xe8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b095      	sub	sp, #84	; 0x54
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006be4:	643a      	str	r2, [r7, #64]	; 0x40
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d119      	bne.n	8006c68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c54:	61ba      	str	r2, [r7, #24]
 8006c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	613b      	str	r3, [r7, #16]
   return(result);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e5      	bne.n	8006c34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c76:	bf00      	nop
 8006c78:	3754      	adds	r7, #84	; 0x54
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff ff77 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b21      	cmp	r3, #33	; 0x21
 8006cbc:	d13e      	bne.n	8006d3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d114      	bne.n	8006cf2 <UART_Transmit_IT+0x48>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d110      	bne.n	8006cf2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	621a      	str	r2, [r3, #32]
 8006cf0:	e008      	b.n	8006d04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	1c59      	adds	r1, r3, #1
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6211      	str	r1, [r2, #32]
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4619      	mov	r1, r3
 8006d12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e000      	b.n	8006d3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb fc8c 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b08c      	sub	sp, #48	; 0x30
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b22      	cmp	r3, #34	; 0x22
 8006d8c:	f040 80ae 	bne.w	8006eec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d98:	d117      	bne.n	8006dca <UART_Receive_IT+0x50>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d113      	bne.n	8006dca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	1c9a      	adds	r2, r3, #2
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8006dc8:	e026      	b.n	8006e18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ddc:	d007      	beq.n	8006dee <UART_Receive_IT+0x74>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <UART_Receive_IT+0x82>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	e008      	b.n	8006e0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	4619      	mov	r1, r3
 8006e26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d15d      	bne.n	8006ee8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0220 	bic.w	r2, r2, #32
 8006e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d135      	bne.n	8006ede <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d10a      	bne.n	8006ed0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fe64 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
 8006edc:	e002      	b.n	8006ee4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fe4c 	bl	8006b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e002      	b.n	8006eee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e000      	b.n	8006eee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3730      	adds	r7, #48	; 0x30
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006efc:	b0c0      	sub	sp, #256	; 0x100
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	68d9      	ldr	r1, [r3, #12]
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	ea40 0301 	orr.w	r3, r0, r1
 8006f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f50:	f021 010c 	bic.w	r1, r1, #12
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	6999      	ldr	r1, [r3, #24]
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	ea40 0301 	orr.w	r3, r0, r1
 8006f7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b8f      	ldr	r3, [pc, #572]	; (80071c4 <UART_SetConfig+0x2cc>)
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d005      	beq.n	8006f98 <UART_SetConfig+0xa0>
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b8d      	ldr	r3, [pc, #564]	; (80071c8 <UART_SetConfig+0x2d0>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d104      	bne.n	8006fa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fe f938 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 8006f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fa0:	e003      	b.n	8006faa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fa2:	f7fe f91f 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8006fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	f040 810c 	bne.w	80071d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fca:	4622      	mov	r2, r4
 8006fcc:	462b      	mov	r3, r5
 8006fce:	1891      	adds	r1, r2, r2
 8006fd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fd2:	415b      	adcs	r3, r3
 8006fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fda:	4621      	mov	r1, r4
 8006fdc:	eb12 0801 	adds.w	r8, r2, r1
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	eb43 0901 	adc.w	r9, r3, r1
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ffa:	4690      	mov	r8, r2
 8006ffc:	4699      	mov	r9, r3
 8006ffe:	4623      	mov	r3, r4
 8007000:	eb18 0303 	adds.w	r3, r8, r3
 8007004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007008:	462b      	mov	r3, r5
 800700a:	eb49 0303 	adc.w	r3, r9, r3
 800700e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800701e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007026:	460b      	mov	r3, r1
 8007028:	18db      	adds	r3, r3, r3
 800702a:	653b      	str	r3, [r7, #80]	; 0x50
 800702c:	4613      	mov	r3, r2
 800702e:	eb42 0303 	adc.w	r3, r2, r3
 8007032:	657b      	str	r3, [r7, #84]	; 0x54
 8007034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800703c:	f7f9 fe04 	bl	8000c48 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4b61      	ldr	r3, [pc, #388]	; (80071cc <UART_SetConfig+0x2d4>)
 8007046:	fba3 2302 	umull	r2, r3, r3, r2
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	011c      	lsls	r4, r3, #4
 800704e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007052:	2200      	movs	r2, #0
 8007054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800705c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007060:	4642      	mov	r2, r8
 8007062:	464b      	mov	r3, r9
 8007064:	1891      	adds	r1, r2, r2
 8007066:	64b9      	str	r1, [r7, #72]	; 0x48
 8007068:	415b      	adcs	r3, r3
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007070:	4641      	mov	r1, r8
 8007072:	eb12 0a01 	adds.w	sl, r2, r1
 8007076:	4649      	mov	r1, r9
 8007078:	eb43 0b01 	adc.w	fp, r3, r1
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800708c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007090:	4692      	mov	sl, r2
 8007092:	469b      	mov	fp, r3
 8007094:	4643      	mov	r3, r8
 8007096:	eb1a 0303 	adds.w	r3, sl, r3
 800709a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800709e:	464b      	mov	r3, r9
 80070a0:	eb4b 0303 	adc.w	r3, fp, r3
 80070a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070bc:	460b      	mov	r3, r1
 80070be:	18db      	adds	r3, r3, r3
 80070c0:	643b      	str	r3, [r7, #64]	; 0x40
 80070c2:	4613      	mov	r3, r2
 80070c4:	eb42 0303 	adc.w	r3, r2, r3
 80070c8:	647b      	str	r3, [r7, #68]	; 0x44
 80070ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070d2:	f7f9 fdb9 	bl	8000c48 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <UART_SetConfig+0x2d4>)
 80070de:	fba3 2301 	umull	r2, r3, r3, r1
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	2264      	movs	r2, #100	; 0x64
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	1acb      	subs	r3, r1, r3
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <UART_SetConfig+0x2d4>)
 80070f4:	fba3 2302 	umull	r2, r3, r3, r2
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007100:	441c      	add	r4, r3
 8007102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007106:	2200      	movs	r2, #0
 8007108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800710c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	1891      	adds	r1, r2, r2
 800711a:	63b9      	str	r1, [r7, #56]	; 0x38
 800711c:	415b      	adcs	r3, r3
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007124:	4641      	mov	r1, r8
 8007126:	1851      	adds	r1, r2, r1
 8007128:	6339      	str	r1, [r7, #48]	; 0x30
 800712a:	4649      	mov	r1, r9
 800712c:	414b      	adcs	r3, r1
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800713c:	4659      	mov	r1, fp
 800713e:	00cb      	lsls	r3, r1, #3
 8007140:	4651      	mov	r1, sl
 8007142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007146:	4651      	mov	r1, sl
 8007148:	00ca      	lsls	r2, r1, #3
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
 800714e:	4603      	mov	r3, r0
 8007150:	4642      	mov	r2, r8
 8007152:	189b      	adds	r3, r3, r2
 8007154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007158:	464b      	mov	r3, r9
 800715a:	460a      	mov	r2, r1
 800715c:	eb42 0303 	adc.w	r3, r2, r3
 8007160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007178:	460b      	mov	r3, r1
 800717a:	18db      	adds	r3, r3, r3
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
 800717e:	4613      	mov	r3, r2
 8007180:	eb42 0303 	adc.w	r3, r2, r3
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800718a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800718e:	f7f9 fd5b 	bl	8000c48 <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <UART_SetConfig+0x2d4>)
 8007198:	fba3 1302 	umull	r1, r3, r3, r2
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	2164      	movs	r1, #100	; 0x64
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	3332      	adds	r3, #50	; 0x32
 80071aa:	4a08      	ldr	r2, [pc, #32]	; (80071cc <UART_SetConfig+0x2d4>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	f003 0207 	and.w	r2, r3, #7
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4422      	add	r2, r4
 80071be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071c0:	e106      	b.n	80073d0 <UART_SetConfig+0x4d8>
 80071c2:	bf00      	nop
 80071c4:	40011000 	.word	0x40011000
 80071c8:	40011400 	.word	0x40011400
 80071cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	1891      	adds	r1, r2, r2
 80071e8:	6239      	str	r1, [r7, #32]
 80071ea:	415b      	adcs	r3, r3
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
 80071ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071f2:	4641      	mov	r1, r8
 80071f4:	1854      	adds	r4, r2, r1
 80071f6:	4649      	mov	r1, r9
 80071f8:	eb43 0501 	adc.w	r5, r3, r1
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	00eb      	lsls	r3, r5, #3
 8007206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800720a:	00e2      	lsls	r2, r4, #3
 800720c:	4614      	mov	r4, r2
 800720e:	461d      	mov	r5, r3
 8007210:	4643      	mov	r3, r8
 8007212:	18e3      	adds	r3, r4, r3
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007218:	464b      	mov	r3, r9
 800721a:	eb45 0303 	adc.w	r3, r5, r3
 800721e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800722e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800723e:	4629      	mov	r1, r5
 8007240:	008b      	lsls	r3, r1, #2
 8007242:	4621      	mov	r1, r4
 8007244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007248:	4621      	mov	r1, r4
 800724a:	008a      	lsls	r2, r1, #2
 800724c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007250:	f7f9 fcfa 	bl	8000c48 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4b60      	ldr	r3, [pc, #384]	; (80073dc <UART_SetConfig+0x4e4>)
 800725a:	fba3 2302 	umull	r2, r3, r3, r2
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	011c      	lsls	r4, r3, #4
 8007262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007266:	2200      	movs	r2, #0
 8007268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800726c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007274:	4642      	mov	r2, r8
 8007276:	464b      	mov	r3, r9
 8007278:	1891      	adds	r1, r2, r2
 800727a:	61b9      	str	r1, [r7, #24]
 800727c:	415b      	adcs	r3, r3
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007284:	4641      	mov	r1, r8
 8007286:	1851      	adds	r1, r2, r1
 8007288:	6139      	str	r1, [r7, #16]
 800728a:	4649      	mov	r1, r9
 800728c:	414b      	adcs	r3, r1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800729c:	4659      	mov	r1, fp
 800729e:	00cb      	lsls	r3, r1, #3
 80072a0:	4651      	mov	r1, sl
 80072a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072a6:	4651      	mov	r1, sl
 80072a8:	00ca      	lsls	r2, r1, #3
 80072aa:	4610      	mov	r0, r2
 80072ac:	4619      	mov	r1, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	4642      	mov	r2, r8
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072b8:	464b      	mov	r3, r9
 80072ba:	460a      	mov	r2, r1
 80072bc:	eb42 0303 	adc.w	r3, r2, r3
 80072c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072dc:	4649      	mov	r1, r9
 80072de:	008b      	lsls	r3, r1, #2
 80072e0:	4641      	mov	r1, r8
 80072e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e6:	4641      	mov	r1, r8
 80072e8:	008a      	lsls	r2, r1, #2
 80072ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072ee:	f7f9 fcab 	bl	8000c48 <__aeabi_uldivmod>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	4b38      	ldr	r3, [pc, #224]	; (80073dc <UART_SetConfig+0x4e4>)
 80072fa:	fba3 2301 	umull	r2, r3, r3, r1
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	2264      	movs	r2, #100	; 0x64
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	1acb      	subs	r3, r1, r3
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	3332      	adds	r3, #50	; 0x32
 800730c:	4a33      	ldr	r2, [pc, #204]	; (80073dc <UART_SetConfig+0x4e4>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007318:	441c      	add	r4, r3
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731e:	2200      	movs	r2, #0
 8007320:	673b      	str	r3, [r7, #112]	; 0x70
 8007322:	677a      	str	r2, [r7, #116]	; 0x74
 8007324:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	1891      	adds	r1, r2, r2
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	415b      	adcs	r3, r3
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007338:	4641      	mov	r1, r8
 800733a:	1851      	adds	r1, r2, r1
 800733c:	6039      	str	r1, [r7, #0]
 800733e:	4649      	mov	r1, r9
 8007340:	414b      	adcs	r3, r1
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007350:	4659      	mov	r1, fp
 8007352:	00cb      	lsls	r3, r1, #3
 8007354:	4651      	mov	r1, sl
 8007356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735a:	4651      	mov	r1, sl
 800735c:	00ca      	lsls	r2, r1, #3
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	4603      	mov	r3, r0
 8007364:	4642      	mov	r2, r8
 8007366:	189b      	adds	r3, r3, r2
 8007368:	66bb      	str	r3, [r7, #104]	; 0x68
 800736a:	464b      	mov	r3, r9
 800736c:	460a      	mov	r2, r1
 800736e:	eb42 0303 	adc.w	r3, r2, r3
 8007372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	663b      	str	r3, [r7, #96]	; 0x60
 800737e:	667a      	str	r2, [r7, #100]	; 0x64
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800738c:	4649      	mov	r1, r9
 800738e:	008b      	lsls	r3, r1, #2
 8007390:	4641      	mov	r1, r8
 8007392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007396:	4641      	mov	r1, r8
 8007398:	008a      	lsls	r2, r1, #2
 800739a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800739e:	f7f9 fc53 	bl	8000c48 <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <UART_SetConfig+0x4e4>)
 80073a8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	2164      	movs	r1, #100	; 0x64
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	3332      	adds	r3, #50	; 0x32
 80073ba:	4a08      	ldr	r2, [pc, #32]	; (80073dc <UART_SetConfig+0x4e4>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4422      	add	r2, r4
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073d6:	46bd      	mov	sp, r7
 80073d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073dc:	51eb851f 	.word	0x51eb851f

080073e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073f2:	2b84      	cmp	r3, #132	; 0x84
 80073f4:	d005      	beq.n	8007402 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	3303      	adds	r3, #3
 8007400:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007414:	f000 fade 	bl	80079d4 <vTaskStartScheduler>
  
  return osOK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	bd80      	pop	{r7, pc}

0800741e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800741e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007420:	b089      	sub	sp, #36	; 0x24
 8007422:	af04      	add	r7, sp, #16
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d020      	beq.n	8007472 <osThreadCreate+0x54>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01c      	beq.n	8007472 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685c      	ldr	r4, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691e      	ldr	r6, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff ffc8 	bl	80073e0 <makeFreeRtosPriority>
 8007450:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800745a:	9202      	str	r2, [sp, #8]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	9100      	str	r1, [sp, #0]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	4632      	mov	r2, r6
 8007464:	4629      	mov	r1, r5
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f8ed 	bl	8007646 <xTaskCreateStatic>
 800746c:	4603      	mov	r3, r0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e01c      	b.n	80074ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685c      	ldr	r4, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800747e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff ffaa 	bl	80073e0 <makeFreeRtosPriority>
 800748c:	4602      	mov	r2, r0
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	9200      	str	r2, [sp, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	4632      	mov	r2, r6
 800749a:	4629      	mov	r1, r5
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f92f 	bl	8007700 <xTaskCreate>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d001      	beq.n	80074ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <osDelay+0x16>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	e000      	b.n	80074ce <osDelay+0x18>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fa4c 	bl	800796c <vTaskDelay>
  
  return osOK;
 80074d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f103 0208 	add.w	r2, r3, #8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295
 80074f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f103 0208 	add.w	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f103 0208 	add.w	r2, r3, #8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d103      	bne.n	80075a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e00c      	b.n	80075ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3308      	adds	r3, #8
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e002      	b.n	80075ae <vListInsert+0x2e>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d2f6      	bcs.n	80075a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6892      	ldr	r2, [r2, #8]
 8007608:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6852      	ldr	r2, [r2, #4]
 8007612:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	429a      	cmp	r2, r3
 800761c:	d103      	bne.n	8007626 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	1e5a      	subs	r2, r3, #1
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007646:	b580      	push	{r7, lr}
 8007648:	b08e      	sub	sp, #56	; 0x38
 800764a:	af04      	add	r7, sp, #16
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <xTaskCreateStatic+0x46>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	61fb      	str	r3, [r7, #28]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768c:	2354      	movs	r3, #84	; 0x54
 800768e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b54      	cmp	r3, #84	; 0x54
 8007694:	d00a      	beq.n	80076ac <xTaskCreateStatic+0x66>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	61bb      	str	r3, [r7, #24]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01e      	beq.n	80076f2 <xTaskCreateStatic+0xac>
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01b      	beq.n	80076f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076cc:	2300      	movs	r3, #0
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f850 	bl	800778a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ec:	f000 f8d4 	bl	8007898 <prvAddNewTaskToReadyList>
 80076f0:	e001      	b.n	80076f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f6:	697b      	ldr	r3, [r7, #20]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	; 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	; 0x30
 8007704:	af04      	add	r7, sp, #16
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007710:	88fb      	ldrh	r3, [r7, #6]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fec7 	bl	80084a8 <pvPortMalloc>
 800771a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007722:	2054      	movs	r0, #84	; 0x54
 8007724:	f000 fec0 	bl	80084a8 <pvPortMalloc>
 8007728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
 8007736:	e005      	b.n	8007744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f000 ff81 	bl	8008640 <vPortFree>
 800773e:	e001      	b.n	8007744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d017      	beq.n	800777a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f80e 	bl	800778a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800776e:	69f8      	ldr	r0, [r7, #28]
 8007770:	f000 f892 	bl	8007898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007774:	2301      	movs	r3, #1
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e002      	b.n	8007780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007780:	69bb      	ldr	r3, [r7, #24]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b088      	sub	sp, #32
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077a2:	3b01      	subs	r3, #1
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f023 0307 	bic.w	r3, r3, #7
 80077b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	617b      	str	r3, [r7, #20]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01f      	beq.n	8007818 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e012      	b.n	8007804 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	7819      	ldrb	r1, [r3, #0]
 80077e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	3334      	adds	r3, #52	; 0x34
 80077ee:	460a      	mov	r2, r1
 80077f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	3301      	adds	r3, #1
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d9e9      	bls.n	80077de <prvInitialiseNewTask+0x54>
 800780a:	e000      	b.n	800780e <prvInitialiseNewTask+0x84>
			{
				break;
 800780c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007816:	e003      	b.n	8007820 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b06      	cmp	r3, #6
 8007824:	d901      	bls.n	800782a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007826:	2306      	movs	r3, #6
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007834:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	2200      	movs	r2, #0
 800783a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	3304      	adds	r3, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff fe6c 	bl	800751e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	3318      	adds	r3, #24
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fe67 	bl	800751e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007854:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	f1c3 0207 	rsb	r2, r3, #7
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007864:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2200      	movs	r2, #0
 800786a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	69b8      	ldr	r0, [r7, #24]
 800787a:	f000 fc05 	bl	8008088 <pxPortInitialiseStack>
 800787e:	4602      	mov	r2, r0
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800788e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007890:	bf00      	nop
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a0:	f000 fd20 	bl	80082e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b6:	4a27      	ldr	r2, [pc, #156]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078bc:	4b24      	ldr	r3, [pc, #144]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c4:	f000 fabc 	bl	8007e40 <prvInitialiseTaskLists>
 80078c8:	e00d      	b.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ca:	4b23      	ldr	r3, [pc, #140]	; (8007958 <prvAddNewTaskToReadyList+0xc0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d802      	bhi.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a1b      	ldr	r2, [pc, #108]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	2201      	movs	r2, #1
 80078f6:	409a      	lsls	r2, r3
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	4a18      	ldr	r2, [pc, #96]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <prvAddNewTaskToReadyList+0xcc>)
 8007910:	441a      	add	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fe0d 	bl	8007538 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800791e:	f000 fd11 	bl	8008344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvAddNewTaskToReadyList+0xc0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00e      	beq.n	8007948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d207      	bcs.n	8007948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <prvAddNewTaskToReadyList+0xd0>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000abc 	.word	0x20000abc
 8007954:	200009bc 	.word	0x200009bc
 8007958:	20000ac8 	.word	0x20000ac8
 800795c:	20000ad8 	.word	0x20000ad8
 8007960:	20000ac4 	.word	0x20000ac4
 8007964:	200009c0 	.word	0x200009c0
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d017      	beq.n	80079ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <vTaskDelay+0x60>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <vTaskDelay+0x30>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800799c:	f000 f87a 	bl	8007a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb0a 	bl	8007fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079a8:	f000 f882 	bl	8007ab0 <xTaskResumeAll>
 80079ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <vTaskDelay+0x64>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000ae4 	.word	0x20000ae4
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079e2:	463a      	mov	r2, r7
 80079e4:	1d39      	adds	r1, r7, #4
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7f9 fe9c 	bl	8001728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	9202      	str	r2, [sp, #8]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	2300      	movs	r3, #0
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	460a      	mov	r2, r1
 8007a02:	491e      	ldr	r1, [pc, #120]	; (8007a7c <vTaskStartScheduler+0xa8>)
 8007a04:	481e      	ldr	r0, [pc, #120]	; (8007a80 <vTaskStartScheduler+0xac>)
 8007a06:	f7ff fe1e 	bl	8007646 <xTaskCreateStatic>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	; (8007a84 <vTaskStartScheduler+0xb0>)
 8007a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a10:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <vTaskStartScheduler+0xb0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e001      	b.n	8007a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d116      	bne.n	8007a56 <vTaskStartScheduler+0x82>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	613b      	str	r3, [r7, #16]
}
 8007a3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <vTaskStartScheduler+0xb4>)
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a44:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <vTaskStartScheduler+0xb8>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a4a:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <vTaskStartScheduler+0xbc>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a50:	f000 fba6 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a54:	e00e      	b.n	8007a74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d10a      	bne.n	8007a74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vTaskStartScheduler+0x9e>
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	0800bd44 	.word	0x0800bd44
 8007a80:	08007e11 	.word	0x08007e11
 8007a84:	20000ae0 	.word	0x20000ae0
 8007a88:	20000adc 	.word	0x20000adc
 8007a8c:	20000ac8 	.word	0x20000ac8
 8007a90:	20000ac0 	.word	0x20000ac0

08007a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <vTaskSuspendAll+0x18>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	4a03      	ldr	r2, [pc, #12]	; (8007aac <vTaskSuspendAll+0x18>)
 8007aa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007aa2:	bf00      	nop
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000ae4 	.word	0x20000ae4

08007ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007abe:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <xTaskResumeAll+0x114>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <xTaskResumeAll+0x2c>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	603b      	str	r3, [r7, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007adc:	f000 fc02 	bl	80082e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ae0:	4b38      	ldr	r3, [pc, #224]	; (8007bc4 <xTaskResumeAll+0x114>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4a37      	ldr	r2, [pc, #220]	; (8007bc4 <xTaskResumeAll+0x114>)
 8007ae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aea:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <xTaskResumeAll+0x114>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d161      	bne.n	8007bb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007af2:	4b35      	ldr	r3, [pc, #212]	; (8007bc8 <xTaskResumeAll+0x118>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d05d      	beq.n	8007bb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007afa:	e02e      	b.n	8007b5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afc:	4b33      	ldr	r3, [pc, #204]	; (8007bcc <xTaskResumeAll+0x11c>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3318      	adds	r3, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fd72 	bl	80075f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fd6d 	bl	80075f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <xTaskResumeAll+0x120>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	4a2a      	ldr	r2, [pc, #168]	; (8007bd0 <xTaskResumeAll+0x120>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a27      	ldr	r2, [pc, #156]	; (8007bd4 <xTaskResumeAll+0x124>)
 8007b38:	441a      	add	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7ff fcf9 	bl	8007538 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4b23      	ldr	r3, [pc, #140]	; (8007bd8 <xTaskResumeAll+0x128>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d302      	bcc.n	8007b5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <xTaskResumeAll+0x12c>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b5a:	4b1c      	ldr	r3, [pc, #112]	; (8007bcc <xTaskResumeAll+0x11c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1cc      	bne.n	8007afc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b68:	f000 fa08 	bl	8007f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b6c:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <xTaskResumeAll+0x130>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b78:	f000 f836 	bl	8007be8 <xTaskIncrementTick>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b82:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <xTaskResumeAll+0x12c>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f1      	bne.n	8007b78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b94:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <xTaskResumeAll+0x130>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <xTaskResumeAll+0x12c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <xTaskResumeAll+0x134>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bb6:	f000 fbc5 	bl	8008344 <vPortExitCritical>

	return xAlreadyYielded;
 8007bba:	68bb      	ldr	r3, [r7, #8]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000ae4 	.word	0x20000ae4
 8007bc8:	20000abc 	.word	0x20000abc
 8007bcc:	20000a7c 	.word	0x20000a7c
 8007bd0:	20000ac4 	.word	0x20000ac4
 8007bd4:	200009c0 	.word	0x200009c0
 8007bd8:	200009bc 	.word	0x200009bc
 8007bdc:	20000ad0 	.word	0x20000ad0
 8007be0:	20000acc 	.word	0x20000acc
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf2:	4b4e      	ldr	r3, [pc, #312]	; (8007d2c <xTaskIncrementTick+0x144>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 808e 	bne.w	8007d18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bfc:	4b4c      	ldr	r3, [pc, #304]	; (8007d30 <xTaskIncrementTick+0x148>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c04:	4a4a      	ldr	r2, [pc, #296]	; (8007d30 <xTaskIncrementTick+0x148>)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d120      	bne.n	8007c52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c10:	4b48      	ldr	r3, [pc, #288]	; (8007d34 <xTaskIncrementTick+0x14c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	603b      	str	r3, [r7, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <xTaskIncrementTick+0x46>
 8007c30:	4b40      	ldr	r3, [pc, #256]	; (8007d34 <xTaskIncrementTick+0x14c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4b40      	ldr	r3, [pc, #256]	; (8007d38 <xTaskIncrementTick+0x150>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3e      	ldr	r2, [pc, #248]	; (8007d34 <xTaskIncrementTick+0x14c>)
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	4a3e      	ldr	r2, [pc, #248]	; (8007d38 <xTaskIncrementTick+0x150>)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	4b3d      	ldr	r3, [pc, #244]	; (8007d3c <xTaskIncrementTick+0x154>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4a3c      	ldr	r2, [pc, #240]	; (8007d3c <xTaskIncrementTick+0x154>)
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	f000 f995 	bl	8007f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c52:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <xTaskIncrementTick+0x158>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d348      	bcc.n	8007cee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <xTaskIncrementTick+0x14c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c66:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <xTaskIncrementTick+0x158>)
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	601a      	str	r2, [r3, #0]
					break;
 8007c6e:	e03e      	b.n	8007cee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c70:	4b30      	ldr	r3, [pc, #192]	; (8007d34 <xTaskIncrementTick+0x14c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d203      	bcs.n	8007c90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c88:	4a2d      	ldr	r2, [pc, #180]	; (8007d40 <xTaskIncrementTick+0x158>)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c8e:	e02e      	b.n	8007cee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	3304      	adds	r3, #4
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fcac 	bl	80075f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d004      	beq.n	8007cac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	3318      	adds	r3, #24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fca3 	bl	80075f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <xTaskIncrementTick+0x15c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	4a22      	ldr	r2, [pc, #136]	; (8007d44 <xTaskIncrementTick+0x15c>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a1f      	ldr	r2, [pc, #124]	; (8007d48 <xTaskIncrementTick+0x160>)
 8007ccc:	441a      	add	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7ff fc2f 	bl	8007538 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <xTaskIncrementTick+0x164>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3b9      	bcc.n	8007c5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cec:	e7b6      	b.n	8007c5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cee:	4b17      	ldr	r3, [pc, #92]	; (8007d4c <xTaskIncrementTick+0x164>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4914      	ldr	r1, [pc, #80]	; (8007d48 <xTaskIncrementTick+0x160>)
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d901      	bls.n	8007d0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d0a:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <xTaskIncrementTick+0x168>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e004      	b.n	8007d22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <xTaskIncrementTick+0x16c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <xTaskIncrementTick+0x16c>)
 8007d20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d22:	697b      	ldr	r3, [r7, #20]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000ae4 	.word	0x20000ae4
 8007d30:	20000ac0 	.word	0x20000ac0
 8007d34:	20000a74 	.word	0x20000a74
 8007d38:	20000a78 	.word	0x20000a78
 8007d3c:	20000ad4 	.word	0x20000ad4
 8007d40:	20000adc 	.word	0x20000adc
 8007d44:	20000ac4 	.word	0x20000ac4
 8007d48:	200009c0 	.word	0x200009c0
 8007d4c:	200009bc 	.word	0x200009bc
 8007d50:	20000ad0 	.word	0x20000ad0
 8007d54:	20000acc 	.word	0x20000acc

08007d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d5e:	4b27      	ldr	r3, [pc, #156]	; (8007dfc <vTaskSwitchContext+0xa4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d66:	4b26      	ldr	r3, [pc, #152]	; (8007e00 <vTaskSwitchContext+0xa8>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d6c:	e03f      	b.n	8007dee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007d6e:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <vTaskSwitchContext+0xa8>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d74:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <vTaskSwitchContext+0xac>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	fab3 f383 	clz	r3, r3
 8007d80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	f1c3 031f 	rsb	r3, r3, #31
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	491f      	ldr	r1, [pc, #124]	; (8007e08 <vTaskSwitchContext+0xb0>)
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <vTaskSwitchContext+0x5a>
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4a12      	ldr	r2, [pc, #72]	; (8007e08 <vTaskSwitchContext+0xb0>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d104      	bne.n	8007de4 <vTaskSwitchContext+0x8c>
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <vTaskSwitchContext+0xb4>)
 8007dec:	6013      	str	r3, [r2, #0]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000ae4 	.word	0x20000ae4
 8007e00:	20000ad0 	.word	0x20000ad0
 8007e04:	20000ac4 	.word	0x20000ac4
 8007e08:	200009c0 	.word	0x200009c0
 8007e0c:	200009bc 	.word	0x200009bc

08007e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e18:	f000 f852 	bl	8007ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <prvIdleTask+0x28>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d9f9      	bls.n	8007e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <prvIdleTask+0x2c>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e34:	e7f0      	b.n	8007e18 <prvIdleTask+0x8>
 8007e36:	bf00      	nop
 8007e38:	200009c0 	.word	0x200009c0
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	e00c      	b.n	8007e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4a12      	ldr	r2, [pc, #72]	; (8007ea0 <prvInitialiseTaskLists+0x60>)
 8007e58:	4413      	add	r3, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fb3f 	bl	80074de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3301      	adds	r3, #1
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b06      	cmp	r3, #6
 8007e6a:	d9ef      	bls.n	8007e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e6c:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <prvInitialiseTaskLists+0x64>)
 8007e6e:	f7ff fb36 	bl	80074de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e72:	480d      	ldr	r0, [pc, #52]	; (8007ea8 <prvInitialiseTaskLists+0x68>)
 8007e74:	f7ff fb33 	bl	80074de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e78:	480c      	ldr	r0, [pc, #48]	; (8007eac <prvInitialiseTaskLists+0x6c>)
 8007e7a:	f7ff fb30 	bl	80074de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e7e:	480c      	ldr	r0, [pc, #48]	; (8007eb0 <prvInitialiseTaskLists+0x70>)
 8007e80:	f7ff fb2d 	bl	80074de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e84:	480b      	ldr	r0, [pc, #44]	; (8007eb4 <prvInitialiseTaskLists+0x74>)
 8007e86:	f7ff fb2a 	bl	80074de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <prvInitialiseTaskLists+0x78>)
 8007e8c:	4a05      	ldr	r2, [pc, #20]	; (8007ea4 <prvInitialiseTaskLists+0x64>)
 8007e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <prvInitialiseTaskLists+0x7c>)
 8007e92:	4a05      	ldr	r2, [pc, #20]	; (8007ea8 <prvInitialiseTaskLists+0x68>)
 8007e94:	601a      	str	r2, [r3, #0]
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200009c0 	.word	0x200009c0
 8007ea4:	20000a4c 	.word	0x20000a4c
 8007ea8:	20000a60 	.word	0x20000a60
 8007eac:	20000a7c 	.word	0x20000a7c
 8007eb0:	20000a90 	.word	0x20000a90
 8007eb4:	20000aa8 	.word	0x20000aa8
 8007eb8:	20000a74 	.word	0x20000a74
 8007ebc:	20000a78 	.word	0x20000a78

08007ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ec6:	e019      	b.n	8007efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ec8:	f000 fa0c 	bl	80082e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <prvCheckTasksWaitingTermination+0x50>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff fb8a 	bl	80075f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ede:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <prvCheckTasksWaitingTermination+0x54>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4a0b      	ldr	r2, [pc, #44]	; (8007f14 <prvCheckTasksWaitingTermination+0x54>)
 8007ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <prvCheckTasksWaitingTermination+0x58>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4a0a      	ldr	r2, [pc, #40]	; (8007f18 <prvCheckTasksWaitingTermination+0x58>)
 8007ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ef2:	f000 fa27 	bl	8008344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f810 	bl	8007f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <prvCheckTasksWaitingTermination+0x58>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e1      	bne.n	8007ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000a90 	.word	0x20000a90
 8007f14:	20000abc 	.word	0x20000abc
 8007f18:	20000aa4 	.word	0x20000aa4

08007f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d108      	bne.n	8007f40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fb84 	bl	8008640 <vPortFree>
				vPortFree( pxTCB );
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb81 	bl	8008640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f3e:	e018      	b.n	8007f72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d103      	bne.n	8007f52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb78 	bl	8008640 <vPortFree>
	}
 8007f50:	e00f      	b.n	8007f72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d00a      	beq.n	8007f72 <prvDeleteTCB+0x56>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <prvDeleteTCB+0x54>
	}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <prvResetNextTaskUnblockTime+0x38>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f94:	e008      	b.n	8007fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f96:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <prvResetNextTaskUnblockTime+0x38>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007fa6:	6013      	str	r3, [r2, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	20000a74 	.word	0x20000a74
 8007fb8:	20000adc 	.word	0x20000adc

08007fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fc6:	4b29      	ldr	r3, [pc, #164]	; (800806c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fcc:	4b28      	ldr	r3, [pc, #160]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fb0d 	bl	80075f2 <uxListRemove>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	43da      	mvns	r2, r3
 8007fec:	4b21      	ldr	r3, [pc, #132]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	4a20      	ldr	r2, [pc, #128]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ff4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d10a      	bne.n	8008014 <prvAddCurrentTaskToDelayedList+0x58>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3304      	adds	r3, #4
 800800a:	4619      	mov	r1, r3
 800800c:	481a      	ldr	r0, [pc, #104]	; (8008078 <prvAddCurrentTaskToDelayedList+0xbc>)
 800800e:	f7ff fa93 	bl	8007538 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008012:	e026      	b.n	8008062 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	429a      	cmp	r2, r3
 800802a:	d209      	bcs.n	8008040 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802c:	4b13      	ldr	r3, [pc, #76]	; (800807c <prvAddCurrentTaskToDelayedList+0xc0>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3304      	adds	r3, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f7ff faa1 	bl	8007580 <vListInsert>
}
 800803e:	e010      	b.n	8008062 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7ff fa97 	bl	8007580 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	d202      	bcs.n	8008062 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800805c:	4a09      	ldr	r2, [pc, #36]	; (8008084 <prvAddCurrentTaskToDelayedList+0xc8>)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6013      	str	r3, [r2, #0]
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000ac0 	.word	0x20000ac0
 8008070:	200009bc 	.word	0x200009bc
 8008074:	20000ac4 	.word	0x20000ac4
 8008078:	20000aa8 	.word	0x20000aa8
 800807c:	20000a78 	.word	0x20000a78
 8008080:	20000a74 	.word	0x20000a74
 8008084:	20000adc 	.word	0x20000adc

08008088 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3b04      	subs	r3, #4
 8008098:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3b04      	subs	r3, #4
 80080a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3b04      	subs	r3, #4
 80080b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080b8:	4a0c      	ldr	r2, [pc, #48]	; (80080ec <pxPortInitialiseStack+0x64>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3b14      	subs	r3, #20
 80080c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f06f 0202 	mvn.w	r2, #2
 80080d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3b20      	subs	r3, #32
 80080dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080de:	68fb      	ldr	r3, [r7, #12]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	080080f1 	.word	0x080080f1

080080f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080fa:	4b12      	ldr	r3, [pc, #72]	; (8008144 <prvTaskExitError+0x54>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008102:	d00a      	beq.n	800811a <prvTaskExitError+0x2a>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <prvTaskExitError+0x28>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60bb      	str	r3, [r7, #8]
}
 800812c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800812e:	bf00      	nop
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0fc      	beq.n	8008130 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200000a4 	.word	0x200000a4
	...

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081a6:	4b46      	ldr	r3, [pc, #280]	; (80082c0 <xPortStartScheduler+0x120>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a46      	ldr	r2, [pc, #280]	; (80082c4 <xPortStartScheduler+0x124>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10a      	bne.n	80081c6 <xPortStartScheduler+0x26>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081c6:	4b3e      	ldr	r3, [pc, #248]	; (80082c0 <xPortStartScheduler+0x120>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3f      	ldr	r2, [pc, #252]	; (80082c8 <xPortStartScheduler+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10a      	bne.n	80081e6 <xPortStartScheduler+0x46>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081e6:	4b39      	ldr	r3, [pc, #228]	; (80082cc <xPortStartScheduler+0x12c>)
 80081e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	22ff      	movs	r2, #255	; 0xff
 80081f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <xPortStartScheduler+0x130>)
 800820c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800820e:	4b31      	ldr	r3, [pc, #196]	; (80082d4 <xPortStartScheduler+0x134>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008214:	e009      	b.n	800822a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008216:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <xPortStartScheduler+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3b01      	subs	r3, #1
 800821c:	4a2d      	ldr	r2, [pc, #180]	; (80082d4 <xPortStartScheduler+0x134>)
 800821e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d0ef      	beq.n	8008216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008236:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <xPortStartScheduler+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1c3 0307 	rsb	r3, r3, #7
 800823e:	2b04      	cmp	r3, #4
 8008240:	d00a      	beq.n	8008258 <xPortStartScheduler+0xb8>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	60bb      	str	r3, [r7, #8]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <xPortStartScheduler+0x134>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <xPortStartScheduler+0x134>)
 8008260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <xPortStartScheduler+0x134>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800826a:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <xPortStartScheduler+0x134>)
 800826c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <xPortStartScheduler+0x138>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <xPortStartScheduler+0x138>)
 800827c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <xPortStartScheduler+0x138>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <xPortStartScheduler+0x138>)
 8008288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800828c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800828e:	f000 f8dd 	bl	800844c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <xPortStartScheduler+0x13c>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008298:	f000 f8fc 	bl	8008494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800829c:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <xPortStartScheduler+0x140>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0f      	ldr	r2, [pc, #60]	; (80082e0 <xPortStartScheduler+0x140>)
 80082a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082a8:	f7ff ff66 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082ac:	f7ff fd54 	bl	8007d58 <vTaskSwitchContext>
	prvTaskExitError();
 80082b0:	f7ff ff1e 	bl	80080f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	e000ed00 	.word	0xe000ed00
 80082c4:	410fc271 	.word	0x410fc271
 80082c8:	410fc270 	.word	0x410fc270
 80082cc:	e000e400 	.word	0xe000e400
 80082d0:	20000ae8 	.word	0x20000ae8
 80082d4:	20000aec 	.word	0x20000aec
 80082d8:	e000ed20 	.word	0xe000ed20
 80082dc:	200000a4 	.word	0x200000a4
 80082e0:	e000ef34 	.word	0xe000ef34

080082e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <vPortEnterCritical+0x58>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3301      	adds	r3, #1
 8008304:	4a0d      	ldr	r2, [pc, #52]	; (800833c <vPortEnterCritical+0x58>)
 8008306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <vPortEnterCritical+0x58>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10f      	bne.n	8008330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <vPortEnterCritical+0x5c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <vPortEnterCritical+0x4c>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	603b      	str	r3, [r7, #0]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <vPortEnterCritical+0x4a>
	}
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	200000a4 	.word	0x200000a4
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <vPortExitCritical+0x50>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <vPortExitCritical+0x24>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	607b      	str	r3, [r7, #4]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <vPortExitCritical+0x50>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3b01      	subs	r3, #1
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <vPortExitCritical+0x50>)
 8008370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <vPortExitCritical+0x42>
 800837a:	2300      	movs	r3, #0
 800837c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	200000a4 	.word	0x200000a4
	...

080083a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083a0:	f3ef 8009 	mrs	r0, PSP
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <pxCurrentTCBConst>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f01e 0f10 	tst.w	lr, #16
 80083b0:	bf08      	it	eq
 80083b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083c4:	f380 8811 	msr	BASEPRI, r0
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f7ff fcc2 	bl	8007d58 <vTaskSwitchContext>
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f380 8811 	msr	BASEPRI, r0
 80083dc:	bc09      	pop	{r0, r3}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f01e 0f10 	tst.w	lr, #16
 80083ea:	bf08      	it	eq
 80083ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083f0:	f380 8809 	msr	PSP, r0
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst>:
 8008400:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008422:	f7ff fbe1 	bl	8007be8 <xTaskIncrementTick>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <SysTick_Handler+0x40>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f383 8811 	msr	BASEPRI, r3
}
 800843e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <vPortSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <vPortSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <vPortSetupTimerInterrupt+0x40>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <vPortSetupTimerInterrupt+0x44>)
 800846a:	3b01      	subs	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800846e:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000098 	.word	0x20000098
 800848c:	10624dd3 	.word	0x10624dd3
 8008490:	e000e014 	.word	0xe000e014

08008494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084a4 <vPortEnableVFP+0x10>
 8008498:	6801      	ldr	r1, [r0, #0]
 800849a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800849e:	6001      	str	r1, [r0, #0]
 80084a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084a2:	bf00      	nop
 80084a4:	e000ed88 	.word	0xe000ed88

080084a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b4:	f7ff faee 	bl	8007a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b8:	4b5b      	ldr	r3, [pc, #364]	; (8008628 <pvPortMalloc+0x180>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c0:	f000 f920 	bl	8008704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c4:	4b59      	ldr	r3, [pc, #356]	; (800862c <pvPortMalloc+0x184>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8093 	bne.w	80085f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01d      	beq.n	8008514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084d8:	2208      	movs	r2, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0x6c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06e      	beq.n	80085f8 <pvPortMalloc+0x150>
 800851a:	4b45      	ldr	r3, [pc, #276]	; (8008630 <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d869      	bhi.n	80085f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b43      	ldr	r3, [pc, #268]	; (8008634 <pvPortMalloc+0x18c>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <pvPortMalloc+0x18c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa4>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b36      	ldr	r3, [pc, #216]	; (8008628 <pvPortMalloc+0x180>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d050      	beq.n	80085f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d91f      	bls.n	80085b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <pvPortMalloc+0xf8>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	f000 f908 	bl	80087c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <pvPortMalloc+0x188>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <pvPortMalloc+0x188>)
 80085c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <pvPortMalloc+0x188>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <pvPortMalloc+0x190>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <pvPortMalloc+0x188>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <pvPortMalloc+0x190>)
 80085d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x184>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <pvPortMalloc+0x194>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <pvPortMalloc+0x194>)
 80085f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f8:	f7ff fa5a 	bl	8007ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <pvPortMalloc+0x174>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <pvPortMalloc+0x172>
	return pvReturn;
 800861c:	69fb      	ldr	r3, [r7, #28]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3728      	adds	r7, #40	; 0x28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200046f8 	.word	0x200046f8
 800862c:	2000470c 	.word	0x2000470c
 8008630:	200046fc 	.word	0x200046fc
 8008634:	200046f0 	.word	0x200046f0
 8008638:	20004700 	.word	0x20004700
 800863c:	20004704 	.word	0x20004704

08008640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04d      	beq.n	80086ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008652:	2308      	movs	r3, #8
 8008654:	425b      	negs	r3, r3
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <vPortFree+0xb8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vPortFree+0x44>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	60fb      	str	r3, [r7, #12]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <vPortFree+0x62>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <vPortFree+0xb8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01e      	beq.n	80086ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <vPortFree+0xb8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c8:	f7ff f9e4 	bl	8007a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vPortFree+0xbc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <vPortFree+0xbc>)
 80086d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f874 	bl	80087c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <vPortFree+0xc0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vPortFree+0xc0>)
 80086e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086ea:	f7ff f9e1 	bl	8007ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ee:	bf00      	nop
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	2000470c 	.word	0x2000470c
 80086fc:	200046fc 	.word	0x200046fc
 8008700:	20004708 	.word	0x20004708

08008704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800870a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800870e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <prvHeapInit+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0307 	bic.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <prvHeapInit+0xac>)
 8008734:	4413      	add	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <prvHeapInit+0xb0>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <prvHeapInit+0xb0>)
 8008744:	2200      	movs	r2, #0
 8008746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008750:	2208      	movs	r2, #8
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0307 	bic.w	r3, r3, #7
 800875e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <prvHeapInit+0xb4>)
 8008764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <prvHeapInit+0xb4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <prvHeapInit+0xb4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvHeapInit+0xb4>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <prvHeapInit+0xb8>)
 8008792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <prvHeapInit+0xbc>)
 800879a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <prvHeapInit+0xc0>)
 800879e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000af0 	.word	0x20000af0
 80087b4:	200046f0 	.word	0x200046f0
 80087b8:	200046f8 	.word	0x200046f8
 80087bc:	20004700 	.word	0x20004700
 80087c0:	200046fc 	.word	0x200046fc
 80087c4:	2000470c 	.word	0x2000470c

080087c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087d0:	4b28      	ldr	r3, [pc, #160]	; (8008874 <prvInsertBlockIntoFreeList+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	e002      	b.n	80087dc <prvInsertBlockIntoFreeList+0x14>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d8f7      	bhi.n	80087d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d108      	bne.n	800880a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d118      	bne.n	8008850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d00d      	beq.n	8008846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e008      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e003      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d002      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	200046f0 	.word	0x200046f0
 8008878:	200046f8 	.word	0x200046f8

0800887c <__cvt>:
 800887c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	ec55 4b10 	vmov	r4, r5, d0
 8008884:	2d00      	cmp	r5, #0
 8008886:	460e      	mov	r6, r1
 8008888:	4619      	mov	r1, r3
 800888a:	462b      	mov	r3, r5
 800888c:	bfbb      	ittet	lt
 800888e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008892:	461d      	movlt	r5, r3
 8008894:	2300      	movge	r3, #0
 8008896:	232d      	movlt	r3, #45	; 0x2d
 8008898:	700b      	strb	r3, [r1, #0]
 800889a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800889c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088a0:	4691      	mov	r9, r2
 80088a2:	f023 0820 	bic.w	r8, r3, #32
 80088a6:	bfbc      	itt	lt
 80088a8:	4622      	movlt	r2, r4
 80088aa:	4614      	movlt	r4, r2
 80088ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088b0:	d005      	beq.n	80088be <__cvt+0x42>
 80088b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088b6:	d100      	bne.n	80088ba <__cvt+0x3e>
 80088b8:	3601      	adds	r6, #1
 80088ba:	2102      	movs	r1, #2
 80088bc:	e000      	b.n	80088c0 <__cvt+0x44>
 80088be:	2103      	movs	r1, #3
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	ab02      	add	r3, sp, #8
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	ec45 4b10 	vmov	d0, r4, r5
 80088cc:	4653      	mov	r3, sl
 80088ce:	4632      	mov	r2, r6
 80088d0:	f000 fe7e 	bl	80095d0 <_dtoa_r>
 80088d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088d8:	4607      	mov	r7, r0
 80088da:	d102      	bne.n	80088e2 <__cvt+0x66>
 80088dc:	f019 0f01 	tst.w	r9, #1
 80088e0:	d022      	beq.n	8008928 <__cvt+0xac>
 80088e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088e6:	eb07 0906 	add.w	r9, r7, r6
 80088ea:	d110      	bne.n	800890e <__cvt+0x92>
 80088ec:	783b      	ldrb	r3, [r7, #0]
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d10a      	bne.n	8008908 <__cvt+0x8c>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088fe:	b918      	cbnz	r0, 8008908 <__cvt+0x8c>
 8008900:	f1c6 0601 	rsb	r6, r6, #1
 8008904:	f8ca 6000 	str.w	r6, [sl]
 8008908:	f8da 3000 	ldr.w	r3, [sl]
 800890c:	4499      	add	r9, r3
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f8 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800891a:	b108      	cbz	r0, 8008920 <__cvt+0xa4>
 800891c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008920:	2230      	movs	r2, #48	; 0x30
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	454b      	cmp	r3, r9
 8008926:	d307      	bcc.n	8008938 <__cvt+0xbc>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892c:	1bdb      	subs	r3, r3, r7
 800892e:	4638      	mov	r0, r7
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	b004      	add	sp, #16
 8008934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	9103      	str	r1, [sp, #12]
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e7f0      	b.n	8008922 <__cvt+0xa6>

08008940 <__exponent>:
 8008940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008942:	4603      	mov	r3, r0
 8008944:	2900      	cmp	r1, #0
 8008946:	bfb8      	it	lt
 8008948:	4249      	neglt	r1, r1
 800894a:	f803 2b02 	strb.w	r2, [r3], #2
 800894e:	bfb4      	ite	lt
 8008950:	222d      	movlt	r2, #45	; 0x2d
 8008952:	222b      	movge	r2, #43	; 0x2b
 8008954:	2909      	cmp	r1, #9
 8008956:	7042      	strb	r2, [r0, #1]
 8008958:	dd2a      	ble.n	80089b0 <__exponent+0x70>
 800895a:	f10d 0207 	add.w	r2, sp, #7
 800895e:	4617      	mov	r7, r2
 8008960:	260a      	movs	r6, #10
 8008962:	4694      	mov	ip, r2
 8008964:	fb91 f5f6 	sdiv	r5, r1, r6
 8008968:	fb06 1415 	mls	r4, r6, r5, r1
 800896c:	3430      	adds	r4, #48	; 0x30
 800896e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008972:	460c      	mov	r4, r1
 8008974:	2c63      	cmp	r4, #99	; 0x63
 8008976:	f102 32ff 	add.w	r2, r2, #4294967295
 800897a:	4629      	mov	r1, r5
 800897c:	dcf1      	bgt.n	8008962 <__exponent+0x22>
 800897e:	3130      	adds	r1, #48	; 0x30
 8008980:	f1ac 0402 	sub.w	r4, ip, #2
 8008984:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008988:	1c41      	adds	r1, r0, #1
 800898a:	4622      	mov	r2, r4
 800898c:	42ba      	cmp	r2, r7
 800898e:	d30a      	bcc.n	80089a6 <__exponent+0x66>
 8008990:	f10d 0209 	add.w	r2, sp, #9
 8008994:	eba2 020c 	sub.w	r2, r2, ip
 8008998:	42bc      	cmp	r4, r7
 800899a:	bf88      	it	hi
 800899c:	2200      	movhi	r2, #0
 800899e:	4413      	add	r3, r2
 80089a0:	1a18      	subs	r0, r3, r0
 80089a2:	b003      	add	sp, #12
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80089ae:	e7ed      	b.n	800898c <__exponent+0x4c>
 80089b0:	2330      	movs	r3, #48	; 0x30
 80089b2:	3130      	adds	r1, #48	; 0x30
 80089b4:	7083      	strb	r3, [r0, #2]
 80089b6:	70c1      	strb	r1, [r0, #3]
 80089b8:	1d03      	adds	r3, r0, #4
 80089ba:	e7f1      	b.n	80089a0 <__exponent+0x60>

080089bc <_printf_float>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	ed2d 8b02 	vpush	{d8}
 80089c4:	b08d      	sub	sp, #52	; 0x34
 80089c6:	460c      	mov	r4, r1
 80089c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089cc:	4616      	mov	r6, r2
 80089ce:	461f      	mov	r7, r3
 80089d0:	4605      	mov	r5, r0
 80089d2:	f000 fce7 	bl	80093a4 <_localeconv_r>
 80089d6:	f8d0 a000 	ldr.w	sl, [r0]
 80089da:	4650      	mov	r0, sl
 80089dc:	f7f7 fc48 	bl	8000270 <strlen>
 80089e0:	2300      	movs	r3, #0
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	9305      	str	r3, [sp, #20]
 80089e8:	f8d8 3000 	ldr.w	r3, [r8]
 80089ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089f0:	3307      	adds	r3, #7
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	f103 0208 	add.w	r2, r3, #8
 80089fa:	f8c8 2000 	str.w	r2, [r8]
 80089fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a06:	9307      	str	r3, [sp, #28]
 8008a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a0c:	ee08 0a10 	vmov	s16, r0
 8008a10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a18:	4b9e      	ldr	r3, [pc, #632]	; (8008c94 <_printf_float+0x2d8>)
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	f7f8 f885 	bl	8000b2c <__aeabi_dcmpun>
 8008a22:	bb88      	cbnz	r0, 8008a88 <_printf_float+0xcc>
 8008a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a28:	4b9a      	ldr	r3, [pc, #616]	; (8008c94 <_printf_float+0x2d8>)
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	f7f8 f85f 	bl	8000af0 <__aeabi_dcmple>
 8008a32:	bb48      	cbnz	r0, 8008a88 <_printf_float+0xcc>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f84e 	bl	8000adc <__aeabi_dcmplt>
 8008a40:	b110      	cbz	r0, 8008a48 <_printf_float+0x8c>
 8008a42:	232d      	movs	r3, #45	; 0x2d
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a48:	4a93      	ldr	r2, [pc, #588]	; (8008c98 <_printf_float+0x2dc>)
 8008a4a:	4b94      	ldr	r3, [pc, #592]	; (8008c9c <_printf_float+0x2e0>)
 8008a4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a50:	bf94      	ite	ls
 8008a52:	4690      	movls	r8, r2
 8008a54:	4698      	movhi	r8, r3
 8008a56:	2303      	movs	r3, #3
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	f023 0304 	bic.w	r3, r3, #4
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	9700      	str	r7, [sp, #0]
 8008a68:	4633      	mov	r3, r6
 8008a6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 f9da 	bl	8008e28 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f040 8090 	bne.w	8008b9a <_printf_float+0x1de>
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	b00d      	add	sp, #52	; 0x34
 8008a80:	ecbd 8b02 	vpop	{d8}
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f84c 	bl	8000b2c <__aeabi_dcmpun>
 8008a94:	b140      	cbz	r0, 8008aa8 <_printf_float+0xec>
 8008a96:	464b      	mov	r3, r9
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfbc      	itt	lt
 8008a9c:	232d      	movlt	r3, #45	; 0x2d
 8008a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aa2:	4a7f      	ldr	r2, [pc, #508]	; (8008ca0 <_printf_float+0x2e4>)
 8008aa4:	4b7f      	ldr	r3, [pc, #508]	; (8008ca4 <_printf_float+0x2e8>)
 8008aa6:	e7d1      	b.n	8008a4c <_printf_float+0x90>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008aae:	9206      	str	r2, [sp, #24]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d13f      	bne.n	8008b34 <_printf_float+0x178>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	6861      	ldr	r1, [r4, #4]
 8008abc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008aca:	ab09      	add	r3, sp, #36	; 0x24
 8008acc:	ec49 8b10 	vmov	d0, r8, r9
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	6022      	str	r2, [r4, #0]
 8008ad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7ff fecf 	bl	800887c <__cvt>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae2:	2b47      	cmp	r3, #71	; 0x47
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	d108      	bne.n	8008afa <_printf_float+0x13e>
 8008ae8:	1cc8      	adds	r0, r1, #3
 8008aea:	db02      	blt.n	8008af2 <_printf_float+0x136>
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	4299      	cmp	r1, r3
 8008af0:	dd41      	ble.n	8008b76 <_printf_float+0x1ba>
 8008af2:	f1ab 0302 	sub.w	r3, fp, #2
 8008af6:	fa5f fb83 	uxtb.w	fp, r3
 8008afa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008afe:	d820      	bhi.n	8008b42 <_printf_float+0x186>
 8008b00:	3901      	subs	r1, #1
 8008b02:	465a      	mov	r2, fp
 8008b04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b08:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0a:	f7ff ff19 	bl	8008940 <__exponent>
 8008b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b10:	1813      	adds	r3, r2, r0
 8008b12:	2a01      	cmp	r2, #1
 8008b14:	4681      	mov	r9, r0
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	dc02      	bgt.n	8008b20 <_printf_float+0x164>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x168>
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d09c      	beq.n	8008a66 <_printf_float+0xaa>
 8008b2c:	232d      	movs	r3, #45	; 0x2d
 8008b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b32:	e798      	b.n	8008a66 <_printf_float+0xaa>
 8008b34:	9a06      	ldr	r2, [sp, #24]
 8008b36:	2a47      	cmp	r2, #71	; 0x47
 8008b38:	d1be      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1bc      	bne.n	8008ab8 <_printf_float+0xfc>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7b9      	b.n	8008ab6 <_printf_float+0xfa>
 8008b42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b46:	d118      	bne.n	8008b7a <_printf_float+0x1be>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	dd0b      	ble.n	8008b66 <_printf_float+0x1aa>
 8008b4e:	6121      	str	r1, [r4, #16]
 8008b50:	b913      	cbnz	r3, 8008b58 <_printf_float+0x19c>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d502      	bpl.n	8008b5e <_printf_float+0x1a2>
 8008b58:	3301      	adds	r3, #1
 8008b5a:	440b      	add	r3, r1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b60:	f04f 0900 	mov.w	r9, #0
 8008b64:	e7de      	b.n	8008b24 <_printf_float+0x168>
 8008b66:	b913      	cbnz	r3, 8008b6e <_printf_float+0x1b2>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	07d2      	lsls	r2, r2, #31
 8008b6c:	d501      	bpl.n	8008b72 <_printf_float+0x1b6>
 8008b6e:	3302      	adds	r3, #2
 8008b70:	e7f4      	b.n	8008b5c <_printf_float+0x1a0>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7f2      	b.n	8008b5c <_printf_float+0x1a0>
 8008b76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	db05      	blt.n	8008b8c <_printf_float+0x1d0>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	6121      	str	r1, [r4, #16]
 8008b84:	07d8      	lsls	r0, r3, #31
 8008b86:	d5ea      	bpl.n	8008b5e <_printf_float+0x1a2>
 8008b88:	1c4b      	adds	r3, r1, #1
 8008b8a:	e7e7      	b.n	8008b5c <_printf_float+0x1a0>
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	bfd4      	ite	le
 8008b90:	f1c1 0202 	rsble	r2, r1, #2
 8008b94:	2201      	movgt	r2, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	e7e0      	b.n	8008b5c <_printf_float+0x1a0>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	055a      	lsls	r2, r3, #21
 8008b9e:	d407      	bmi.n	8008bb0 <_printf_float+0x1f4>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	d12c      	bne.n	8008c08 <_printf_float+0x24c>
 8008bae:	e764      	b.n	8008a7a <_printf_float+0xbe>
 8008bb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bb4:	f240 80e0 	bls.w	8008d78 <_printf_float+0x3bc>
 8008bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f7f7 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d034      	beq.n	8008c32 <_printf_float+0x276>
 8008bc8:	4a37      	ldr	r2, [pc, #220]	; (8008ca8 <_printf_float+0x2ec>)
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af51 	beq.w	8008a7a <_printf_float+0xbe>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	db02      	blt.n	8008be6 <_printf_float+0x22a>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	07d8      	lsls	r0, r3, #31
 8008be4:	d510      	bpl.n	8008c08 <_printf_float+0x24c>
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	4652      	mov	r2, sl
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af41 	beq.w	8008a7a <_printf_float+0xbe>
 8008bf8:	f04f 0800 	mov.w	r8, #0
 8008bfc:	f104 091a 	add.w	r9, r4, #26
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	4543      	cmp	r3, r8
 8008c06:	dc09      	bgt.n	8008c1c <_printf_float+0x260>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	079b      	lsls	r3, r3, #30
 8008c0c:	f100 8107 	bmi.w	8008e1e <_printf_float+0x462>
 8008c10:	68e0      	ldr	r0, [r4, #12]
 8008c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c14:	4298      	cmp	r0, r3
 8008c16:	bfb8      	it	lt
 8008c18:	4618      	movlt	r0, r3
 8008c1a:	e730      	b.n	8008a7e <_printf_float+0xc2>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	464a      	mov	r2, r9
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af27 	beq.w	8008a7a <_printf_float+0xbe>
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	e7e6      	b.n	8008c00 <_printf_float+0x244>
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dc39      	bgt.n	8008cac <_printf_float+0x2f0>
 8008c38:	4a1b      	ldr	r2, [pc, #108]	; (8008ca8 <_printf_float+0x2ec>)
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	f43f af19 	beq.w	8008a7a <_printf_float+0xbe>
 8008c48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d102      	bne.n	8008c56 <_printf_float+0x29a>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07d9      	lsls	r1, r3, #31
 8008c54:	d5d8      	bpl.n	8008c08 <_printf_float+0x24c>
 8008c56:	ee18 3a10 	vmov	r3, s16
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f af09 	beq.w	8008a7a <_printf_float+0xbe>
 8008c68:	f04f 0900 	mov.w	r9, #0
 8008c6c:	f104 0a1a 	add.w	sl, r4, #26
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	425b      	negs	r3, r3
 8008c74:	454b      	cmp	r3, r9
 8008c76:	dc01      	bgt.n	8008c7c <_printf_float+0x2c0>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	e792      	b.n	8008ba2 <_printf_float+0x1e6>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4652      	mov	r2, sl
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aef7 	beq.w	8008a7a <_printf_float+0xbe>
 8008c8c:	f109 0901 	add.w	r9, r9, #1
 8008c90:	e7ee      	b.n	8008c70 <_printf_float+0x2b4>
 8008c92:	bf00      	nop
 8008c94:	7fefffff 	.word	0x7fefffff
 8008c98:	0800bd64 	.word	0x0800bd64
 8008c9c:	0800bd68 	.word	0x0800bd68
 8008ca0:	0800bd6c 	.word	0x0800bd6c
 8008ca4:	0800bd70 	.word	0x0800bd70
 8008ca8:	0800bd74 	.word	0x0800bd74
 8008cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	bfa8      	it	ge
 8008cb4:	461a      	movge	r2, r3
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	4691      	mov	r9, r2
 8008cba:	dc37      	bgt.n	8008d2c <_printf_float+0x370>
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc4:	f104 021a 	add.w	r2, r4, #26
 8008cc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	eba3 0309 	sub.w	r3, r3, r9
 8008cd0:	455b      	cmp	r3, fp
 8008cd2:	dc33      	bgt.n	8008d3c <_printf_float+0x380>
 8008cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	db3b      	blt.n	8008d54 <_printf_float+0x398>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d438      	bmi.n	8008d54 <_printf_float+0x398>
 8008ce2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ce6:	eba2 0903 	sub.w	r9, r2, r3
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	1ad2      	subs	r2, r2, r3
 8008cee:	4591      	cmp	r9, r2
 8008cf0:	bfa8      	it	ge
 8008cf2:	4691      	movge	r9, r2
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	dc35      	bgt.n	8008d66 <_printf_float+0x3aa>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d02:	f104 0a1a 	add.w	sl, r4, #26
 8008d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	eba3 0309 	sub.w	r3, r3, r9
 8008d10:	4543      	cmp	r3, r8
 8008d12:	f77f af79 	ble.w	8008c08 <_printf_float+0x24c>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f aeaa 	beq.w	8008a7a <_printf_float+0xbe>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	e7ec      	b.n	8008d06 <_printf_float+0x34a>
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4642      	mov	r2, r8
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c0      	bne.n	8008cbc <_printf_float+0x300>
 8008d3a:	e69e      	b.n	8008a7a <_printf_float+0xbe>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	9205      	str	r2, [sp, #20]
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae97 	beq.w	8008a7a <_printf_float+0xbe>
 8008d4c:	9a05      	ldr	r2, [sp, #20]
 8008d4e:	f10b 0b01 	add.w	fp, fp, #1
 8008d52:	e7b9      	b.n	8008cc8 <_printf_float+0x30c>
 8008d54:	ee18 3a10 	vmov	r3, s16
 8008d58:	4652      	mov	r2, sl
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	d1be      	bne.n	8008ce2 <_printf_float+0x326>
 8008d64:	e689      	b.n	8008a7a <_printf_float+0xbe>
 8008d66:	9a05      	ldr	r2, [sp, #20]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4442      	add	r2, r8
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	d1c1      	bne.n	8008cfa <_printf_float+0x33e>
 8008d76:	e680      	b.n	8008a7a <_printf_float+0xbe>
 8008d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	dc01      	bgt.n	8008d82 <_printf_float+0x3c6>
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d53a      	bpl.n	8008df8 <_printf_float+0x43c>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4642      	mov	r2, r8
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f43f ae74 	beq.w	8008a7a <_printf_float+0xbe>
 8008d92:	ee18 3a10 	vmov	r3, s16
 8008d96:	4652      	mov	r2, sl
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f ae6b 	beq.w	8008a7a <_printf_float+0xbe>
 8008da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da8:	2200      	movs	r2, #0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008db0:	f7f7 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db4:	b9d8      	cbnz	r0, 8008dee <_printf_float+0x432>
 8008db6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008dba:	f108 0201 	add.w	r2, r8, #1
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d10e      	bne.n	8008de6 <_printf_float+0x42a>
 8008dc8:	e657      	b.n	8008a7a <_printf_float+0xbe>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae50 	beq.w	8008a7a <_printf_float+0xbe>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4543      	cmp	r3, r8
 8008de4:	dcf1      	bgt.n	8008dca <_printf_float+0x40e>
 8008de6:	464b      	mov	r3, r9
 8008de8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dec:	e6da      	b.n	8008ba4 <_printf_float+0x1e8>
 8008dee:	f04f 0800 	mov.w	r8, #0
 8008df2:	f104 0a1a 	add.w	sl, r4, #26
 8008df6:	e7f2      	b.n	8008dde <_printf_float+0x422>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	e7df      	b.n	8008dbe <_printf_float+0x402>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	464a      	mov	r2, r9
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	f43f ae36 	beq.w	8008a7a <_printf_float+0xbe>
 8008e0e:	f108 0801 	add.w	r8, r8, #1
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e16:	1a5b      	subs	r3, r3, r1
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	dcf0      	bgt.n	8008dfe <_printf_float+0x442>
 8008e1c:	e6f8      	b.n	8008c10 <_printf_float+0x254>
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	f104 0919 	add.w	r9, r4, #25
 8008e26:	e7f4      	b.n	8008e12 <_printf_float+0x456>

08008e28 <_printf_common>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	4699      	mov	r9, r3
 8008e30:	688a      	ldr	r2, [r1, #8]
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e44:	4607      	mov	r7, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	b10a      	cbz	r2, 8008e4e <_printf_common+0x26>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	6833      	ldrmi	r3, [r6, #0]
 8008e56:	3302      	addmi	r3, #2
 8008e58:	6033      	strmi	r3, [r6, #0]
 8008e5a:	6825      	ldr	r5, [r4, #0]
 8008e5c:	f015 0506 	ands.w	r5, r5, #6
 8008e60:	d106      	bne.n	8008e70 <_printf_common+0x48>
 8008e62:	f104 0a19 	add.w	sl, r4, #25
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	6832      	ldr	r2, [r6, #0]
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dc26      	bgt.n	8008ebe <_printf_common+0x96>
 8008e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e74:	1e13      	subs	r3, r2, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	bf18      	it	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	0692      	lsls	r2, r2, #26
 8008e7e:	d42b      	bmi.n	8008ed8 <_printf_common+0xb0>
 8008e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d01e      	beq.n	8008ecc <_printf_common+0xa4>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	f003 0306 	and.w	r3, r3, #6
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	bf02      	ittt	eq
 8008e9a:	68e5      	ldreq	r5, [r4, #12]
 8008e9c:	6833      	ldreq	r3, [r6, #0]
 8008e9e:	1aed      	subeq	r5, r5, r3
 8008ea0:	68a3      	ldr	r3, [r4, #8]
 8008ea2:	bf0c      	ite	eq
 8008ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea8:	2500      	movne	r5, #0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	bfc4      	itt	gt
 8008eae:	1a9b      	subgt	r3, r3, r2
 8008eb0:	18ed      	addgt	r5, r5, r3
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	341a      	adds	r4, #26
 8008eb6:	42b5      	cmp	r5, r6
 8008eb8:	d11a      	bne.n	8008ef0 <_printf_common+0xc8>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e008      	b.n	8008ed0 <_printf_common+0xa8>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	47c0      	blx	r8
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d103      	bne.n	8008ed4 <_printf_common+0xac>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	e7c6      	b.n	8008e66 <_printf_common+0x3e>
 8008ed8:	18e1      	adds	r1, r4, r3
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	2030      	movs	r0, #48	; 0x30
 8008ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ee2:	4422      	add	r2, r4
 8008ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eec:	3302      	adds	r3, #2
 8008eee:	e7c7      	b.n	8008e80 <_printf_common+0x58>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d0e6      	beq.n	8008ecc <_printf_common+0xa4>
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7d9      	b.n	8008eb6 <_printf_common+0x8e>
	...

08008f04 <_printf_i>:
 8008f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	7e0f      	ldrb	r7, [r1, #24]
 8008f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f0c:	2f78      	cmp	r7, #120	; 0x78
 8008f0e:	4691      	mov	r9, r2
 8008f10:	4680      	mov	r8, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	469a      	mov	sl, r3
 8008f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f1a:	d807      	bhi.n	8008f2c <_printf_i+0x28>
 8008f1c:	2f62      	cmp	r7, #98	; 0x62
 8008f1e:	d80a      	bhi.n	8008f36 <_printf_i+0x32>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f000 80d4 	beq.w	80090ce <_printf_i+0x1ca>
 8008f26:	2f58      	cmp	r7, #88	; 0x58
 8008f28:	f000 80c0 	beq.w	80090ac <_printf_i+0x1a8>
 8008f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f34:	e03a      	b.n	8008fac <_printf_i+0xa8>
 8008f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f3a:	2b15      	cmp	r3, #21
 8008f3c:	d8f6      	bhi.n	8008f2c <_printf_i+0x28>
 8008f3e:	a101      	add	r1, pc, #4	; (adr r1, 8008f44 <_printf_i+0x40>)
 8008f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008f2d 	.word	0x08008f2d
 8008f50:	08008f2d 	.word	0x08008f2d
 8008f54:	08008f2d 	.word	0x08008f2d
 8008f58:	08008f2d 	.word	0x08008f2d
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008f2d 	.word	0x08008f2d
 8008f64:	08008f2d 	.word	0x08008f2d
 8008f68:	08008f2d 	.word	0x08008f2d
 8008f6c:	08008f2d 	.word	0x08008f2d
 8008f70:	080090b5 	.word	0x080090b5
 8008f74:	08008fdd 	.word	0x08008fdd
 8008f78:	0800906f 	.word	0x0800906f
 8008f7c:	08008f2d 	.word	0x08008f2d
 8008f80:	08008f2d 	.word	0x08008f2d
 8008f84:	080090d7 	.word	0x080090d7
 8008f88:	08008f2d 	.word	0x08008f2d
 8008f8c:	08008fdd 	.word	0x08008fdd
 8008f90:	08008f2d 	.word	0x08008f2d
 8008f94:	08008f2d 	.word	0x08008f2d
 8008f98:	08009077 	.word	0x08009077
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	1d1a      	adds	r2, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fac:	2301      	movs	r3, #1
 8008fae:	e09f      	b.n	80090f0 <_printf_i+0x1ec>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	0607      	lsls	r7, r0, #24
 8008fb6:	f103 0104 	add.w	r1, r3, #4
 8008fba:	6029      	str	r1, [r5, #0]
 8008fbc:	d501      	bpl.n	8008fc2 <_printf_i+0xbe>
 8008fbe:	681e      	ldr	r6, [r3, #0]
 8008fc0:	e003      	b.n	8008fca <_printf_i+0xc6>
 8008fc2:	0646      	lsls	r6, r0, #25
 8008fc4:	d5fb      	bpl.n	8008fbe <_printf_i+0xba>
 8008fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	da03      	bge.n	8008fd6 <_printf_i+0xd2>
 8008fce:	232d      	movs	r3, #45	; 0x2d
 8008fd0:	4276      	negs	r6, r6
 8008fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd6:	485a      	ldr	r0, [pc, #360]	; (8009140 <_printf_i+0x23c>)
 8008fd8:	230a      	movs	r3, #10
 8008fda:	e012      	b.n	8009002 <_printf_i+0xfe>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	1d19      	adds	r1, r3, #4
 8008fe2:	6029      	str	r1, [r5, #0]
 8008fe4:	0605      	lsls	r5, r0, #24
 8008fe6:	d501      	bpl.n	8008fec <_printf_i+0xe8>
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	e002      	b.n	8008ff2 <_printf_i+0xee>
 8008fec:	0641      	lsls	r1, r0, #25
 8008fee:	d5fb      	bpl.n	8008fe8 <_printf_i+0xe4>
 8008ff0:	881e      	ldrh	r6, [r3, #0]
 8008ff2:	4853      	ldr	r0, [pc, #332]	; (8009140 <_printf_i+0x23c>)
 8008ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2308      	moveq	r3, #8
 8008ffa:	230a      	movne	r3, #10
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009002:	6865      	ldr	r5, [r4, #4]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	2d00      	cmp	r5, #0
 8009008:	bfa2      	ittt	ge
 800900a:	6821      	ldrge	r1, [r4, #0]
 800900c:	f021 0104 	bicge.w	r1, r1, #4
 8009010:	6021      	strge	r1, [r4, #0]
 8009012:	b90e      	cbnz	r6, 8009018 <_printf_i+0x114>
 8009014:	2d00      	cmp	r5, #0
 8009016:	d04b      	beq.n	80090b0 <_printf_i+0x1ac>
 8009018:	4615      	mov	r5, r2
 800901a:	fbb6 f1f3 	udiv	r1, r6, r3
 800901e:	fb03 6711 	mls	r7, r3, r1, r6
 8009022:	5dc7      	ldrb	r7, [r0, r7]
 8009024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009028:	4637      	mov	r7, r6
 800902a:	42bb      	cmp	r3, r7
 800902c:	460e      	mov	r6, r1
 800902e:	d9f4      	bls.n	800901a <_printf_i+0x116>
 8009030:	2b08      	cmp	r3, #8
 8009032:	d10b      	bne.n	800904c <_printf_i+0x148>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07de      	lsls	r6, r3, #31
 8009038:	d508      	bpl.n	800904c <_printf_i+0x148>
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	6861      	ldr	r1, [r4, #4]
 800903e:	4299      	cmp	r1, r3
 8009040:	bfde      	ittt	le
 8009042:	2330      	movle	r3, #48	; 0x30
 8009044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800904c:	1b52      	subs	r2, r2, r5
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	f8cd a000 	str.w	sl, [sp]
 8009054:	464b      	mov	r3, r9
 8009056:	aa03      	add	r2, sp, #12
 8009058:	4621      	mov	r1, r4
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fee4 	bl	8008e28 <_printf_common>
 8009060:	3001      	adds	r0, #1
 8009062:	d14a      	bne.n	80090fa <_printf_i+0x1f6>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b004      	add	sp, #16
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f043 0320 	orr.w	r3, r3, #32
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	4833      	ldr	r0, [pc, #204]	; (8009144 <_printf_i+0x240>)
 8009078:	2778      	movs	r7, #120	; 0x78
 800907a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6829      	ldr	r1, [r5, #0]
 8009082:	061f      	lsls	r7, r3, #24
 8009084:	f851 6b04 	ldr.w	r6, [r1], #4
 8009088:	d402      	bmi.n	8009090 <_printf_i+0x18c>
 800908a:	065f      	lsls	r7, r3, #25
 800908c:	bf48      	it	mi
 800908e:	b2b6      	uxthmi	r6, r6
 8009090:	07df      	lsls	r7, r3, #31
 8009092:	bf48      	it	mi
 8009094:	f043 0320 	orrmi.w	r3, r3, #32
 8009098:	6029      	str	r1, [r5, #0]
 800909a:	bf48      	it	mi
 800909c:	6023      	strmi	r3, [r4, #0]
 800909e:	b91e      	cbnz	r6, 80090a8 <_printf_i+0x1a4>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	f023 0320 	bic.w	r3, r3, #32
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	2310      	movs	r3, #16
 80090aa:	e7a7      	b.n	8008ffc <_printf_i+0xf8>
 80090ac:	4824      	ldr	r0, [pc, #144]	; (8009140 <_printf_i+0x23c>)
 80090ae:	e7e4      	b.n	800907a <_printf_i+0x176>
 80090b0:	4615      	mov	r5, r2
 80090b2:	e7bd      	b.n	8009030 <_printf_i+0x12c>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	6826      	ldr	r6, [r4, #0]
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	1d18      	adds	r0, r3, #4
 80090bc:	6028      	str	r0, [r5, #0]
 80090be:	0635      	lsls	r5, r6, #24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	d501      	bpl.n	80090c8 <_printf_i+0x1c4>
 80090c4:	6019      	str	r1, [r3, #0]
 80090c6:	e002      	b.n	80090ce <_printf_i+0x1ca>
 80090c8:	0670      	lsls	r0, r6, #25
 80090ca:	d5fb      	bpl.n	80090c4 <_printf_i+0x1c0>
 80090cc:	8019      	strh	r1, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	4615      	mov	r5, r2
 80090d4:	e7bc      	b.n	8009050 <_printf_i+0x14c>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	602a      	str	r2, [r5, #0]
 80090dc:	681d      	ldr	r5, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 f874 	bl	80001d0 <memchr>
 80090e8:	b108      	cbz	r0, 80090ee <_printf_i+0x1ea>
 80090ea:	1b40      	subs	r0, r0, r5
 80090ec:	6060      	str	r0, [r4, #4]
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	2300      	movs	r3, #0
 80090f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f8:	e7aa      	b.n	8009050 <_printf_i+0x14c>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d0ad      	beq.n	8009064 <_printf_i+0x160>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	079b      	lsls	r3, r3, #30
 800910c:	d413      	bmi.n	8009136 <_printf_i+0x232>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	4298      	cmp	r0, r3
 8009114:	bfb8      	it	lt
 8009116:	4618      	movlt	r0, r3
 8009118:	e7a6      	b.n	8009068 <_printf_i+0x164>
 800911a:	2301      	movs	r3, #1
 800911c:	4632      	mov	r2, r6
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	47d0      	blx	sl
 8009124:	3001      	adds	r0, #1
 8009126:	d09d      	beq.n	8009064 <_printf_i+0x160>
 8009128:	3501      	adds	r5, #1
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	9903      	ldr	r1, [sp, #12]
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	42ab      	cmp	r3, r5
 8009132:	dcf2      	bgt.n	800911a <_printf_i+0x216>
 8009134:	e7eb      	b.n	800910e <_printf_i+0x20a>
 8009136:	2500      	movs	r5, #0
 8009138:	f104 0619 	add.w	r6, r4, #25
 800913c:	e7f5      	b.n	800912a <_printf_i+0x226>
 800913e:	bf00      	nop
 8009140:	0800bd76 	.word	0x0800bd76
 8009144:	0800bd87 	.word	0x0800bd87

08009148 <std>:
 8009148:	2300      	movs	r3, #0
 800914a:	b510      	push	{r4, lr}
 800914c:	4604      	mov	r4, r0
 800914e:	e9c0 3300 	strd	r3, r3, [r0]
 8009152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009156:	6083      	str	r3, [r0, #8]
 8009158:	8181      	strh	r1, [r0, #12]
 800915a:	6643      	str	r3, [r0, #100]	; 0x64
 800915c:	81c2      	strh	r2, [r0, #14]
 800915e:	6183      	str	r3, [r0, #24]
 8009160:	4619      	mov	r1, r3
 8009162:	2208      	movs	r2, #8
 8009164:	305c      	adds	r0, #92	; 0x5c
 8009166:	f000 f914 	bl	8009392 <memset>
 800916a:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <std+0x58>)
 800916c:	6263      	str	r3, [r4, #36]	; 0x24
 800916e:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <std+0x5c>)
 8009170:	62a3      	str	r3, [r4, #40]	; 0x28
 8009172:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <std+0x60>)
 8009174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009176:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <std+0x64>)
 8009178:	6323      	str	r3, [r4, #48]	; 0x30
 800917a:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <std+0x68>)
 800917c:	6224      	str	r4, [r4, #32]
 800917e:	429c      	cmp	r4, r3
 8009180:	d006      	beq.n	8009190 <std+0x48>
 8009182:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009186:	4294      	cmp	r4, r2
 8009188:	d002      	beq.n	8009190 <std+0x48>
 800918a:	33d0      	adds	r3, #208	; 0xd0
 800918c:	429c      	cmp	r4, r3
 800918e:	d105      	bne.n	800919c <std+0x54>
 8009190:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	f000 b978 	b.w	800948c <__retarget_lock_init_recursive>
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	0800930d 	.word	0x0800930d
 80091a4:	0800932f 	.word	0x0800932f
 80091a8:	08009367 	.word	0x08009367
 80091ac:	0800938b 	.word	0x0800938b
 80091b0:	20004710 	.word	0x20004710

080091b4 <stdio_exit_handler>:
 80091b4:	4a02      	ldr	r2, [pc, #8]	; (80091c0 <stdio_exit_handler+0xc>)
 80091b6:	4903      	ldr	r1, [pc, #12]	; (80091c4 <stdio_exit_handler+0x10>)
 80091b8:	4803      	ldr	r0, [pc, #12]	; (80091c8 <stdio_exit_handler+0x14>)
 80091ba:	f000 b869 	b.w	8009290 <_fwalk_sglue>
 80091be:	bf00      	nop
 80091c0:	200000a8 	.word	0x200000a8
 80091c4:	0800ae69 	.word	0x0800ae69
 80091c8:	200000b4 	.word	0x200000b4

080091cc <cleanup_stdio>:
 80091cc:	6841      	ldr	r1, [r0, #4]
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <cleanup_stdio+0x34>)
 80091d0:	4299      	cmp	r1, r3
 80091d2:	b510      	push	{r4, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	d001      	beq.n	80091dc <cleanup_stdio+0x10>
 80091d8:	f001 fe46 	bl	800ae68 <_fflush_r>
 80091dc:	68a1      	ldr	r1, [r4, #8]
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <cleanup_stdio+0x38>)
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <cleanup_stdio+0x1e>
 80091e4:	4620      	mov	r0, r4
 80091e6:	f001 fe3f 	bl	800ae68 <_fflush_r>
 80091ea:	68e1      	ldr	r1, [r4, #12]
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <cleanup_stdio+0x3c>)
 80091ee:	4299      	cmp	r1, r3
 80091f0:	d004      	beq.n	80091fc <cleanup_stdio+0x30>
 80091f2:	4620      	mov	r0, r4
 80091f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f8:	f001 be36 	b.w	800ae68 <_fflush_r>
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	bf00      	nop
 8009200:	20004710 	.word	0x20004710
 8009204:	20004778 	.word	0x20004778
 8009208:	200047e0 	.word	0x200047e0

0800920c <global_stdio_init.part.0>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4b0b      	ldr	r3, [pc, #44]	; (800923c <global_stdio_init.part.0+0x30>)
 8009210:	4c0b      	ldr	r4, [pc, #44]	; (8009240 <global_stdio_init.part.0+0x34>)
 8009212:	4a0c      	ldr	r2, [pc, #48]	; (8009244 <global_stdio_init.part.0+0x38>)
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	4620      	mov	r0, r4
 8009218:	2200      	movs	r2, #0
 800921a:	2104      	movs	r1, #4
 800921c:	f7ff ff94 	bl	8009148 <std>
 8009220:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009224:	2201      	movs	r2, #1
 8009226:	2109      	movs	r1, #9
 8009228:	f7ff ff8e 	bl	8009148 <std>
 800922c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009230:	2202      	movs	r2, #2
 8009232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009236:	2112      	movs	r1, #18
 8009238:	f7ff bf86 	b.w	8009148 <std>
 800923c:	20004848 	.word	0x20004848
 8009240:	20004710 	.word	0x20004710
 8009244:	080091b5 	.word	0x080091b5

08009248 <__sfp_lock_acquire>:
 8009248:	4801      	ldr	r0, [pc, #4]	; (8009250 <__sfp_lock_acquire+0x8>)
 800924a:	f000 b920 	b.w	800948e <__retarget_lock_acquire_recursive>
 800924e:	bf00      	nop
 8009250:	20004851 	.word	0x20004851

08009254 <__sfp_lock_release>:
 8009254:	4801      	ldr	r0, [pc, #4]	; (800925c <__sfp_lock_release+0x8>)
 8009256:	f000 b91b 	b.w	8009490 <__retarget_lock_release_recursive>
 800925a:	bf00      	nop
 800925c:	20004851 	.word	0x20004851

08009260 <__sinit>:
 8009260:	b510      	push	{r4, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	f7ff fff0 	bl	8009248 <__sfp_lock_acquire>
 8009268:	6a23      	ldr	r3, [r4, #32]
 800926a:	b11b      	cbz	r3, 8009274 <__sinit+0x14>
 800926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009270:	f7ff bff0 	b.w	8009254 <__sfp_lock_release>
 8009274:	4b04      	ldr	r3, [pc, #16]	; (8009288 <__sinit+0x28>)
 8009276:	6223      	str	r3, [r4, #32]
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <__sinit+0x2c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f5      	bne.n	800926c <__sinit+0xc>
 8009280:	f7ff ffc4 	bl	800920c <global_stdio_init.part.0>
 8009284:	e7f2      	b.n	800926c <__sinit+0xc>
 8009286:	bf00      	nop
 8009288:	080091cd 	.word	0x080091cd
 800928c:	20004848 	.word	0x20004848

08009290 <_fwalk_sglue>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	4607      	mov	r7, r0
 8009296:	4688      	mov	r8, r1
 8009298:	4614      	mov	r4, r2
 800929a:	2600      	movs	r6, #0
 800929c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a0:	f1b9 0901 	subs.w	r9, r9, #1
 80092a4:	d505      	bpl.n	80092b2 <_fwalk_sglue+0x22>
 80092a6:	6824      	ldr	r4, [r4, #0]
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d1f7      	bne.n	800929c <_fwalk_sglue+0xc>
 80092ac:	4630      	mov	r0, r6
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d907      	bls.n	80092c8 <_fwalk_sglue+0x38>
 80092b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092bc:	3301      	adds	r3, #1
 80092be:	d003      	beq.n	80092c8 <_fwalk_sglue+0x38>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c0      	blx	r8
 80092c6:	4306      	orrs	r6, r0
 80092c8:	3568      	adds	r5, #104	; 0x68
 80092ca:	e7e9      	b.n	80092a0 <_fwalk_sglue+0x10>

080092cc <siprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b500      	push	{lr}
 80092d0:	b09c      	sub	sp, #112	; 0x70
 80092d2:	ab1d      	add	r3, sp, #116	; 0x74
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092dc:	4809      	ldr	r0, [pc, #36]	; (8009304 <siprintf+0x38>)
 80092de:	9107      	str	r1, [sp, #28]
 80092e0:	9104      	str	r1, [sp, #16]
 80092e2:	4909      	ldr	r1, [pc, #36]	; (8009308 <siprintf+0x3c>)
 80092e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	a902      	add	r1, sp, #8
 80092f0:	f001 fc36 	bl	800ab60 <_svfiprintf_r>
 80092f4:	9b02      	ldr	r3, [sp, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	b01c      	add	sp, #112	; 0x70
 80092fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009300:	b003      	add	sp, #12
 8009302:	4770      	bx	lr
 8009304:	20000100 	.word	0x20000100
 8009308:	ffff0208 	.word	0xffff0208

0800930c <__sread>:
 800930c:	b510      	push	{r4, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	f000 f86c 	bl	80093f0 <_read_r>
 8009318:	2800      	cmp	r0, #0
 800931a:	bfab      	itete	ge
 800931c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800931e:	89a3      	ldrhlt	r3, [r4, #12]
 8009320:	181b      	addge	r3, r3, r0
 8009322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009326:	bfac      	ite	ge
 8009328:	6563      	strge	r3, [r4, #84]	; 0x54
 800932a:	81a3      	strhlt	r3, [r4, #12]
 800932c:	bd10      	pop	{r4, pc}

0800932e <__swrite>:
 800932e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009332:	461f      	mov	r7, r3
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	05db      	lsls	r3, r3, #23
 8009338:	4605      	mov	r5, r0
 800933a:	460c      	mov	r4, r1
 800933c:	4616      	mov	r6, r2
 800933e:	d505      	bpl.n	800934c <__swrite+0x1e>
 8009340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009344:	2302      	movs	r3, #2
 8009346:	2200      	movs	r2, #0
 8009348:	f000 f840 	bl	80093cc <_lseek_r>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	4632      	mov	r2, r6
 800935a:	463b      	mov	r3, r7
 800935c:	4628      	mov	r0, r5
 800935e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	f000 b857 	b.w	8009414 <_write_r>

08009366 <__sseek>:
 8009366:	b510      	push	{r4, lr}
 8009368:	460c      	mov	r4, r1
 800936a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936e:	f000 f82d 	bl	80093cc <_lseek_r>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	bf15      	itete	ne
 8009378:	6560      	strne	r0, [r4, #84]	; 0x54
 800937a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800937e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009382:	81a3      	strheq	r3, [r4, #12]
 8009384:	bf18      	it	ne
 8009386:	81a3      	strhne	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__sclose>:
 800938a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938e:	f000 b80d 	b.w	80093ac <_close_r>

08009392 <memset>:
 8009392:	4402      	add	r2, r0
 8009394:	4603      	mov	r3, r0
 8009396:	4293      	cmp	r3, r2
 8009398:	d100      	bne.n	800939c <memset+0xa>
 800939a:	4770      	bx	lr
 800939c:	f803 1b01 	strb.w	r1, [r3], #1
 80093a0:	e7f9      	b.n	8009396 <memset+0x4>
	...

080093a4 <_localeconv_r>:
 80093a4:	4800      	ldr	r0, [pc, #0]	; (80093a8 <_localeconv_r+0x4>)
 80093a6:	4770      	bx	lr
 80093a8:	200001f4 	.word	0x200001f4

080093ac <_close_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d06      	ldr	r5, [pc, #24]	; (80093c8 <_close_r+0x1c>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7fa f85f 	bl	800347a <_close>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_close_r+0x1a>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_close_r+0x1a>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	2000484c 	.word	0x2000484c

080093cc <_lseek_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	; (80093ec <_lseek_r+0x20>)
 80093d0:	4604      	mov	r4, r0
 80093d2:	4608      	mov	r0, r1
 80093d4:	4611      	mov	r1, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7fa f874 	bl	80034c8 <_lseek>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_lseek_r+0x1e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_lseek_r+0x1e>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	2000484c 	.word	0x2000484c

080093f0 <_read_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_read_r+0x20>)
 80093f4:	4604      	mov	r4, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f7fa f802 	bl	8003408 <_read>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_read_r+0x1e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_read_r+0x1e>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	2000484c 	.word	0x2000484c

08009414 <_write_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d07      	ldr	r5, [pc, #28]	; (8009434 <_write_r+0x20>)
 8009418:	4604      	mov	r4, r0
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	2200      	movs	r2, #0
 8009420:	602a      	str	r2, [r5, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	f7fa f80d 	bl	8003442 <_write>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d102      	bne.n	8009432 <_write_r+0x1e>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	b103      	cbz	r3, 8009432 <_write_r+0x1e>
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	2000484c 	.word	0x2000484c

08009438 <__errno>:
 8009438:	4b01      	ldr	r3, [pc, #4]	; (8009440 <__errno+0x8>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20000100 	.word	0x20000100

08009444 <__libc_init_array>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	4d0d      	ldr	r5, [pc, #52]	; (800947c <__libc_init_array+0x38>)
 8009448:	4c0d      	ldr	r4, [pc, #52]	; (8009480 <__libc_init_array+0x3c>)
 800944a:	1b64      	subs	r4, r4, r5
 800944c:	10a4      	asrs	r4, r4, #2
 800944e:	2600      	movs	r6, #0
 8009450:	42a6      	cmp	r6, r4
 8009452:	d109      	bne.n	8009468 <__libc_init_array+0x24>
 8009454:	4d0b      	ldr	r5, [pc, #44]	; (8009484 <__libc_init_array+0x40>)
 8009456:	4c0c      	ldr	r4, [pc, #48]	; (8009488 <__libc_init_array+0x44>)
 8009458:	f002 fc14 	bl	800bc84 <_init>
 800945c:	1b64      	subs	r4, r4, r5
 800945e:	10a4      	asrs	r4, r4, #2
 8009460:	2600      	movs	r6, #0
 8009462:	42a6      	cmp	r6, r4
 8009464:	d105      	bne.n	8009472 <__libc_init_array+0x2e>
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	f855 3b04 	ldr.w	r3, [r5], #4
 800946c:	4798      	blx	r3
 800946e:	3601      	adds	r6, #1
 8009470:	e7ee      	b.n	8009450 <__libc_init_array+0xc>
 8009472:	f855 3b04 	ldr.w	r3, [r5], #4
 8009476:	4798      	blx	r3
 8009478:	3601      	adds	r6, #1
 800947a:	e7f2      	b.n	8009462 <__libc_init_array+0x1e>
 800947c:	0800c150 	.word	0x0800c150
 8009480:	0800c150 	.word	0x0800c150
 8009484:	0800c150 	.word	0x0800c150
 8009488:	0800c154 	.word	0x0800c154

0800948c <__retarget_lock_init_recursive>:
 800948c:	4770      	bx	lr

0800948e <__retarget_lock_acquire_recursive>:
 800948e:	4770      	bx	lr

08009490 <__retarget_lock_release_recursive>:
 8009490:	4770      	bx	lr

08009492 <strcpy>:
 8009492:	4603      	mov	r3, r0
 8009494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009498:	f803 2b01 	strb.w	r2, [r3], #1
 800949c:	2a00      	cmp	r2, #0
 800949e:	d1f9      	bne.n	8009494 <strcpy+0x2>
 80094a0:	4770      	bx	lr

080094a2 <memcpy>:
 80094a2:	440a      	add	r2, r1
 80094a4:	4291      	cmp	r1, r2
 80094a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80094aa:	d100      	bne.n	80094ae <memcpy+0xc>
 80094ac:	4770      	bx	lr
 80094ae:	b510      	push	{r4, lr}
 80094b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b8:	4291      	cmp	r1, r2
 80094ba:	d1f9      	bne.n	80094b0 <memcpy+0xe>
 80094bc:	bd10      	pop	{r4, pc}

080094be <quorem>:
 80094be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c2:	6903      	ldr	r3, [r0, #16]
 80094c4:	690c      	ldr	r4, [r1, #16]
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	4607      	mov	r7, r0
 80094ca:	db7e      	blt.n	80095ca <quorem+0x10c>
 80094cc:	3c01      	subs	r4, #1
 80094ce:	f101 0814 	add.w	r8, r1, #20
 80094d2:	f100 0514 	add.w	r5, r0, #20
 80094d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e4:	3301      	adds	r3, #1
 80094e6:	429a      	cmp	r2, r3
 80094e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094f4:	d331      	bcc.n	800955a <quorem+0x9c>
 80094f6:	f04f 0e00 	mov.w	lr, #0
 80094fa:	4640      	mov	r0, r8
 80094fc:	46ac      	mov	ip, r5
 80094fe:	46f2      	mov	sl, lr
 8009500:	f850 2b04 	ldr.w	r2, [r0], #4
 8009504:	b293      	uxth	r3, r2
 8009506:	fb06 e303 	mla	r3, r6, r3, lr
 800950a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800950e:	0c1a      	lsrs	r2, r3, #16
 8009510:	b29b      	uxth	r3, r3
 8009512:	ebaa 0303 	sub.w	r3, sl, r3
 8009516:	f8dc a000 	ldr.w	sl, [ip]
 800951a:	fa13 f38a 	uxtah	r3, r3, sl
 800951e:	fb06 220e 	mla	r2, r6, lr, r2
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800952a:	b292      	uxth	r2, r2
 800952c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009534:	f8bd 3000 	ldrh.w	r3, [sp]
 8009538:	4581      	cmp	r9, r0
 800953a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953e:	f84c 3b04 	str.w	r3, [ip], #4
 8009542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009546:	d2db      	bcs.n	8009500 <quorem+0x42>
 8009548:	f855 300b 	ldr.w	r3, [r5, fp]
 800954c:	b92b      	cbnz	r3, 800955a <quorem+0x9c>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	3b04      	subs	r3, #4
 8009552:	429d      	cmp	r5, r3
 8009554:	461a      	mov	r2, r3
 8009556:	d32c      	bcc.n	80095b2 <quorem+0xf4>
 8009558:	613c      	str	r4, [r7, #16]
 800955a:	4638      	mov	r0, r7
 800955c:	f001 f9a6 	bl	800a8ac <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	db22      	blt.n	80095aa <quorem+0xec>
 8009564:	3601      	adds	r6, #1
 8009566:	4629      	mov	r1, r5
 8009568:	2000      	movs	r0, #0
 800956a:	f858 2b04 	ldr.w	r2, [r8], #4
 800956e:	f8d1 c000 	ldr.w	ip, [r1]
 8009572:	b293      	uxth	r3, r2
 8009574:	1ac3      	subs	r3, r0, r3
 8009576:	0c12      	lsrs	r2, r2, #16
 8009578:	fa13 f38c 	uxtah	r3, r3, ip
 800957c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009584:	b29b      	uxth	r3, r3
 8009586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800958a:	45c1      	cmp	r9, r8
 800958c:	f841 3b04 	str.w	r3, [r1], #4
 8009590:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009594:	d2e9      	bcs.n	800956a <quorem+0xac>
 8009596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800959e:	b922      	cbnz	r2, 80095aa <quorem+0xec>
 80095a0:	3b04      	subs	r3, #4
 80095a2:	429d      	cmp	r5, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	d30a      	bcc.n	80095be <quorem+0x100>
 80095a8:	613c      	str	r4, [r7, #16]
 80095aa:	4630      	mov	r0, r6
 80095ac:	b003      	add	sp, #12
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	3b04      	subs	r3, #4
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d1ce      	bne.n	8009558 <quorem+0x9a>
 80095ba:	3c01      	subs	r4, #1
 80095bc:	e7c9      	b.n	8009552 <quorem+0x94>
 80095be:	6812      	ldr	r2, [r2, #0]
 80095c0:	3b04      	subs	r3, #4
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d1f0      	bne.n	80095a8 <quorem+0xea>
 80095c6:	3c01      	subs	r4, #1
 80095c8:	e7eb      	b.n	80095a2 <quorem+0xe4>
 80095ca:	2000      	movs	r0, #0
 80095cc:	e7ee      	b.n	80095ac <quorem+0xee>
	...

080095d0 <_dtoa_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b04 	vpush	{d8-d9}
 80095d8:	69c5      	ldr	r5, [r0, #28]
 80095da:	b093      	sub	sp, #76	; 0x4c
 80095dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095e0:	ec57 6b10 	vmov	r6, r7, d0
 80095e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095e8:	9107      	str	r1, [sp, #28]
 80095ea:	4604      	mov	r4, r0
 80095ec:	920a      	str	r2, [sp, #40]	; 0x28
 80095ee:	930d      	str	r3, [sp, #52]	; 0x34
 80095f0:	b975      	cbnz	r5, 8009610 <_dtoa_r+0x40>
 80095f2:	2010      	movs	r0, #16
 80095f4:	f000 fe2a 	bl	800a24c <malloc>
 80095f8:	4602      	mov	r2, r0
 80095fa:	61e0      	str	r0, [r4, #28]
 80095fc:	b920      	cbnz	r0, 8009608 <_dtoa_r+0x38>
 80095fe:	4bae      	ldr	r3, [pc, #696]	; (80098b8 <_dtoa_r+0x2e8>)
 8009600:	21ef      	movs	r1, #239	; 0xef
 8009602:	48ae      	ldr	r0, [pc, #696]	; (80098bc <_dtoa_r+0x2ec>)
 8009604:	f001 fc82 	bl	800af0c <__assert_func>
 8009608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800960c:	6005      	str	r5, [r0, #0]
 800960e:	60c5      	str	r5, [r0, #12]
 8009610:	69e3      	ldr	r3, [r4, #28]
 8009612:	6819      	ldr	r1, [r3, #0]
 8009614:	b151      	cbz	r1, 800962c <_dtoa_r+0x5c>
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	604a      	str	r2, [r1, #4]
 800961a:	2301      	movs	r3, #1
 800961c:	4093      	lsls	r3, r2
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	4620      	mov	r0, r4
 8009622:	f000 ff07 	bl	800a434 <_Bfree>
 8009626:	69e3      	ldr	r3, [r4, #28]
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	1e3b      	subs	r3, r7, #0
 800962e:	bfbb      	ittet	lt
 8009630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009634:	9303      	strlt	r3, [sp, #12]
 8009636:	2300      	movge	r3, #0
 8009638:	2201      	movlt	r2, #1
 800963a:	bfac      	ite	ge
 800963c:	f8c8 3000 	strge.w	r3, [r8]
 8009640:	f8c8 2000 	strlt.w	r2, [r8]
 8009644:	4b9e      	ldr	r3, [pc, #632]	; (80098c0 <_dtoa_r+0x2f0>)
 8009646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800964a:	ea33 0308 	bics.w	r3, r3, r8
 800964e:	d11b      	bne.n	8009688 <_dtoa_r+0xb8>
 8009650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009652:	f242 730f 	movw	r3, #9999	; 0x270f
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800965c:	4333      	orrs	r3, r6
 800965e:	f000 8593 	beq.w	800a188 <_dtoa_r+0xbb8>
 8009662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009664:	b963      	cbnz	r3, 8009680 <_dtoa_r+0xb0>
 8009666:	4b97      	ldr	r3, [pc, #604]	; (80098c4 <_dtoa_r+0x2f4>)
 8009668:	e027      	b.n	80096ba <_dtoa_r+0xea>
 800966a:	4b97      	ldr	r3, [pc, #604]	; (80098c8 <_dtoa_r+0x2f8>)
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	9800      	ldr	r0, [sp, #0]
 8009676:	b013      	add	sp, #76	; 0x4c
 8009678:	ecbd 8b04 	vpop	{d8-d9}
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	4b90      	ldr	r3, [pc, #576]	; (80098c4 <_dtoa_r+0x2f4>)
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	3303      	adds	r3, #3
 8009686:	e7f3      	b.n	8009670 <_dtoa_r+0xa0>
 8009688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800968c:	2200      	movs	r2, #0
 800968e:	ec51 0b17 	vmov	r0, r1, d7
 8009692:	eeb0 8a47 	vmov.f32	s16, s14
 8009696:	eef0 8a67 	vmov.f32	s17, s15
 800969a:	2300      	movs	r3, #0
 800969c:	f7f7 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80096a0:	4681      	mov	r9, r0
 80096a2:	b160      	cbz	r0, 80096be <_dtoa_r+0xee>
 80096a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a6:	2301      	movs	r3, #1
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8568 	beq.w	800a182 <_dtoa_r+0xbb2>
 80096b2:	4b86      	ldr	r3, [pc, #536]	; (80098cc <_dtoa_r+0x2fc>)
 80096b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	e7da      	b.n	8009674 <_dtoa_r+0xa4>
 80096be:	aa10      	add	r2, sp, #64	; 0x40
 80096c0:	a911      	add	r1, sp, #68	; 0x44
 80096c2:	4620      	mov	r0, r4
 80096c4:	eeb0 0a48 	vmov.f32	s0, s16
 80096c8:	eef0 0a68 	vmov.f32	s1, s17
 80096cc:	f001 f994 	bl	800a9f8 <__d2b>
 80096d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096d4:	4682      	mov	sl, r0
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	d07f      	beq.n	80097da <_dtoa_r+0x20a>
 80096da:	ee18 3a90 	vmov	r3, s17
 80096de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80096e6:	ec51 0b18 	vmov	r0, r1, d8
 80096ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80096f6:	4619      	mov	r1, r3
 80096f8:	2200      	movs	r2, #0
 80096fa:	4b75      	ldr	r3, [pc, #468]	; (80098d0 <_dtoa_r+0x300>)
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	a367      	add	r3, pc, #412	; (adr r3, 80098a0 <_dtoa_r+0x2d0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff77 	bl	80005f8 <__aeabi_dmul>
 800970a:	a367      	add	r3, pc, #412	; (adr r3, 80098a8 <_dtoa_r+0x2d8>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	4606      	mov	r6, r0
 8009716:	4628      	mov	r0, r5
 8009718:	460f      	mov	r7, r1
 800971a:	f7f6 ff03 	bl	8000524 <__aeabi_i2d>
 800971e:	a364      	add	r3, pc, #400	; (adr r3, 80098b0 <_dtoa_r+0x2e0>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fdac 	bl	800028c <__adddf3>
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	f7f7 fa0e 	bl	8000b58 <__aeabi_d2iz>
 800973c:	2200      	movs	r2, #0
 800973e:	4683      	mov	fp, r0
 8009740:	2300      	movs	r3, #0
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f7 f9c9 	bl	8000adc <__aeabi_dcmplt>
 800974a:	b148      	cbz	r0, 8009760 <_dtoa_r+0x190>
 800974c:	4658      	mov	r0, fp
 800974e:	f7f6 fee9 	bl	8000524 <__aeabi_i2d>
 8009752:	4632      	mov	r2, r6
 8009754:	463b      	mov	r3, r7
 8009756:	f7f7 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800975a:	b908      	cbnz	r0, 8009760 <_dtoa_r+0x190>
 800975c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009760:	f1bb 0f16 	cmp.w	fp, #22
 8009764:	d857      	bhi.n	8009816 <_dtoa_r+0x246>
 8009766:	4b5b      	ldr	r3, [pc, #364]	; (80098d4 <_dtoa_r+0x304>)
 8009768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	ec51 0b18 	vmov	r0, r1, d8
 8009774:	f7f7 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8009778:	2800      	cmp	r0, #0
 800977a:	d04e      	beq.n	800981a <_dtoa_r+0x24a>
 800977c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009780:	2300      	movs	r3, #0
 8009782:	930c      	str	r3, [sp, #48]	; 0x30
 8009784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009786:	1b5b      	subs	r3, r3, r5
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	bf45      	ittet	mi
 800978c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009790:	9305      	strmi	r3, [sp, #20]
 8009792:	2300      	movpl	r3, #0
 8009794:	2300      	movmi	r3, #0
 8009796:	9206      	str	r2, [sp, #24]
 8009798:	bf54      	ite	pl
 800979a:	9305      	strpl	r3, [sp, #20]
 800979c:	9306      	strmi	r3, [sp, #24]
 800979e:	f1bb 0f00 	cmp.w	fp, #0
 80097a2:	db3c      	blt.n	800981e <_dtoa_r+0x24e>
 80097a4:	9b06      	ldr	r3, [sp, #24]
 80097a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80097aa:	445b      	add	r3, fp
 80097ac:	9306      	str	r3, [sp, #24]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9308      	str	r3, [sp, #32]
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d868      	bhi.n	800988a <_dtoa_r+0x2ba>
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	bfc4      	itt	gt
 80097bc:	3b04      	subgt	r3, #4
 80097be:	9307      	strgt	r3, [sp, #28]
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	f1a3 0302 	sub.w	r3, r3, #2
 80097c6:	bfcc      	ite	gt
 80097c8:	2500      	movgt	r5, #0
 80097ca:	2501      	movle	r5, #1
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	f200 8085 	bhi.w	80098dc <_dtoa_r+0x30c>
 80097d2:	e8df f003 	tbb	[pc, r3]
 80097d6:	3b2e      	.short	0x3b2e
 80097d8:	5839      	.short	0x5839
 80097da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097de:	441d      	add	r5, r3
 80097e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	bfc1      	itttt	gt
 80097e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80097f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80097f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80097f8:	bfd6      	itet	le
 80097fa:	f1c3 0320 	rsble	r3, r3, #32
 80097fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009802:	fa06 f003 	lslle.w	r0, r6, r3
 8009806:	f7f6 fe7d 	bl	8000504 <__aeabi_ui2d>
 800980a:	2201      	movs	r2, #1
 800980c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009810:	3d01      	subs	r5, #1
 8009812:	920e      	str	r2, [sp, #56]	; 0x38
 8009814:	e76f      	b.n	80096f6 <_dtoa_r+0x126>
 8009816:	2301      	movs	r3, #1
 8009818:	e7b3      	b.n	8009782 <_dtoa_r+0x1b2>
 800981a:	900c      	str	r0, [sp, #48]	; 0x30
 800981c:	e7b2      	b.n	8009784 <_dtoa_r+0x1b4>
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	eba3 030b 	sub.w	r3, r3, fp
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	f1cb 0300 	rsb	r3, fp, #0
 800982a:	9308      	str	r3, [sp, #32]
 800982c:	2300      	movs	r3, #0
 800982e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009830:	e7bf      	b.n	80097b2 <_dtoa_r+0x1e2>
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc52      	bgt.n	80098e2 <_dtoa_r+0x312>
 800983c:	2301      	movs	r3, #1
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	461a      	mov	r2, r3
 8009844:	920a      	str	r2, [sp, #40]	; 0x28
 8009846:	e00b      	b.n	8009860 <_dtoa_r+0x290>
 8009848:	2301      	movs	r3, #1
 800984a:	e7f3      	b.n	8009834 <_dtoa_r+0x264>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009852:	445b      	add	r3, fp
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	3301      	adds	r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	bfb8      	it	lt
 800985e:	2301      	movlt	r3, #1
 8009860:	69e0      	ldr	r0, [r4, #28]
 8009862:	2100      	movs	r1, #0
 8009864:	2204      	movs	r2, #4
 8009866:	f102 0614 	add.w	r6, r2, #20
 800986a:	429e      	cmp	r6, r3
 800986c:	d93d      	bls.n	80098ea <_dtoa_r+0x31a>
 800986e:	6041      	str	r1, [r0, #4]
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fd9f 	bl	800a3b4 <_Balloc>
 8009876:	9000      	str	r0, [sp, #0]
 8009878:	2800      	cmp	r0, #0
 800987a:	d139      	bne.n	80098f0 <_dtoa_r+0x320>
 800987c:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <_dtoa_r+0x308>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 11af 	movw	r1, #431	; 0x1af
 8009884:	e6bd      	b.n	8009602 <_dtoa_r+0x32>
 8009886:	2301      	movs	r3, #1
 8009888:	e7e1      	b.n	800984e <_dtoa_r+0x27e>
 800988a:	2501      	movs	r5, #1
 800988c:	2300      	movs	r3, #0
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	9509      	str	r5, [sp, #36]	; 0x24
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	2200      	movs	r2, #0
 800989c:	2312      	movs	r3, #18
 800989e:	e7d1      	b.n	8009844 <_dtoa_r+0x274>
 80098a0:	636f4361 	.word	0x636f4361
 80098a4:	3fd287a7 	.word	0x3fd287a7
 80098a8:	8b60c8b3 	.word	0x8b60c8b3
 80098ac:	3fc68a28 	.word	0x3fc68a28
 80098b0:	509f79fb 	.word	0x509f79fb
 80098b4:	3fd34413 	.word	0x3fd34413
 80098b8:	0800bda5 	.word	0x0800bda5
 80098bc:	0800bdbc 	.word	0x0800bdbc
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	0800bda1 	.word	0x0800bda1
 80098c8:	0800bd98 	.word	0x0800bd98
 80098cc:	0800bd75 	.word	0x0800bd75
 80098d0:	3ff80000 	.word	0x3ff80000
 80098d4:	0800bea8 	.word	0x0800bea8
 80098d8:	0800be14 	.word	0x0800be14
 80098dc:	2301      	movs	r3, #1
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	e7d7      	b.n	8009892 <_dtoa_r+0x2c2>
 80098e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	e7ba      	b.n	8009860 <_dtoa_r+0x290>
 80098ea:	3101      	adds	r1, #1
 80098ec:	0052      	lsls	r2, r2, #1
 80098ee:	e7ba      	b.n	8009866 <_dtoa_r+0x296>
 80098f0:	69e3      	ldr	r3, [r4, #28]
 80098f2:	9a00      	ldr	r2, [sp, #0]
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	2b0e      	cmp	r3, #14
 80098fa:	f200 80a8 	bhi.w	8009a4e <_dtoa_r+0x47e>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	f000 80a5 	beq.w	8009a4e <_dtoa_r+0x47e>
 8009904:	f1bb 0f00 	cmp.w	fp, #0
 8009908:	dd38      	ble.n	800997c <_dtoa_r+0x3ac>
 800990a:	4bc0      	ldr	r3, [pc, #768]	; (8009c0c <_dtoa_r+0x63c>)
 800990c:	f00b 020f 	and.w	r2, fp, #15
 8009910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800991c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009920:	d019      	beq.n	8009956 <_dtoa_r+0x386>
 8009922:	4bbb      	ldr	r3, [pc, #748]	; (8009c10 <_dtoa_r+0x640>)
 8009924:	ec51 0b18 	vmov	r0, r1, d8
 8009928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800992c:	f7f6 ff8e 	bl	800084c <__aeabi_ddiv>
 8009930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009934:	f008 080f 	and.w	r8, r8, #15
 8009938:	2503      	movs	r5, #3
 800993a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c10 <_dtoa_r+0x640>
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	d10a      	bne.n	800995a <_dtoa_r+0x38a>
 8009944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009948:	4632      	mov	r2, r6
 800994a:	463b      	mov	r3, r7
 800994c:	f7f6 ff7e 	bl	800084c <__aeabi_ddiv>
 8009950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009954:	e02b      	b.n	80099ae <_dtoa_r+0x3de>
 8009956:	2502      	movs	r5, #2
 8009958:	e7ef      	b.n	800993a <_dtoa_r+0x36a>
 800995a:	f018 0f01 	tst.w	r8, #1
 800995e:	d008      	beq.n	8009972 <_dtoa_r+0x3a2>
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	3501      	adds	r5, #1
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009976:	f109 0908 	add.w	r9, r9, #8
 800997a:	e7e0      	b.n	800993e <_dtoa_r+0x36e>
 800997c:	f000 809f 	beq.w	8009abe <_dtoa_r+0x4ee>
 8009980:	f1cb 0600 	rsb	r6, fp, #0
 8009984:	4ba1      	ldr	r3, [pc, #644]	; (8009c0c <_dtoa_r+0x63c>)
 8009986:	4fa2      	ldr	r7, [pc, #648]	; (8009c10 <_dtoa_r+0x640>)
 8009988:	f006 020f 	and.w	r2, r6, #15
 800998c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	ec51 0b18 	vmov	r0, r1, d8
 8009998:	f7f6 fe2e 	bl	80005f8 <__aeabi_dmul>
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	1136      	asrs	r6, r6, #4
 80099a2:	2300      	movs	r3, #0
 80099a4:	2502      	movs	r5, #2
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	d17e      	bne.n	8009aa8 <_dtoa_r+0x4d8>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1d0      	bne.n	8009950 <_dtoa_r+0x380>
 80099ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8084 	beq.w	8009ac2 <_dtoa_r+0x4f2>
 80099ba:	4b96      	ldr	r3, [pc, #600]	; (8009c14 <_dtoa_r+0x644>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f7 f88b 	bl	8000adc <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d07b      	beq.n	8009ac2 <_dtoa_r+0x4f2>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d078      	beq.n	8009ac2 <_dtoa_r+0x4f2>
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd39      	ble.n	8009a4a <_dtoa_r+0x47a>
 80099d6:	4b90      	ldr	r3, [pc, #576]	; (8009c18 <_dtoa_r+0x648>)
 80099d8:	2200      	movs	r2, #0
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	f7f6 fe0b 	bl	80005f8 <__aeabi_dmul>
 80099e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e6:	9e01      	ldr	r6, [sp, #4]
 80099e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80099ec:	3501      	adds	r5, #1
 80099ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7f6 fd96 	bl	8000524 <__aeabi_i2d>
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	f7f6 fdfc 	bl	80005f8 <__aeabi_dmul>
 8009a00:	4b86      	ldr	r3, [pc, #536]	; (8009c1c <_dtoa_r+0x64c>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	f7f6 fc42 	bl	800028c <__adddf3>
 8009a08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d158      	bne.n	8009ac8 <_dtoa_r+0x4f8>
 8009a16:	4b82      	ldr	r3, [pc, #520]	; (8009c20 <_dtoa_r+0x650>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fc33 	bl	8000288 <__aeabi_dsub>
 8009a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	f7f7 f875 	bl	8000b18 <__aeabi_dcmpgt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f040 8296 	bne.w	8009f60 <_dtoa_r+0x990>
 8009a34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a38:	4640      	mov	r0, r8
 8009a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f7 f84c 	bl	8000adc <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f040 8289 	bne.w	8009f5c <_dtoa_r+0x98c>
 8009a4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f2c0 814e 	blt.w	8009cf2 <_dtoa_r+0x722>
 8009a56:	f1bb 0f0e 	cmp.w	fp, #14
 8009a5a:	f300 814a 	bgt.w	8009cf2 <_dtoa_r+0x722>
 8009a5e:	4b6b      	ldr	r3, [pc, #428]	; (8009c0c <_dtoa_r+0x63c>)
 8009a60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f280 80dc 	bge.w	8009c28 <_dtoa_r+0x658>
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f300 80d8 	bgt.w	8009c28 <_dtoa_r+0x658>
 8009a78:	f040 826f 	bne.w	8009f5a <_dtoa_r+0x98a>
 8009a7c:	4b68      	ldr	r3, [pc, #416]	; (8009c20 <_dtoa_r+0x650>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fdb8 	bl	80005f8 <__aeabi_dmul>
 8009a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a8c:	f7f7 f83a 	bl	8000b04 <__aeabi_dcmpge>
 8009a90:	9e04      	ldr	r6, [sp, #16]
 8009a92:	4637      	mov	r7, r6
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f040 8245 	bne.w	8009f24 <_dtoa_r+0x954>
 8009a9a:	9d00      	ldr	r5, [sp, #0]
 8009a9c:	2331      	movs	r3, #49	; 0x31
 8009a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8009aa2:	f10b 0b01 	add.w	fp, fp, #1
 8009aa6:	e241      	b.n	8009f2c <_dtoa_r+0x95c>
 8009aa8:	07f2      	lsls	r2, r6, #31
 8009aaa:	d505      	bpl.n	8009ab8 <_dtoa_r+0x4e8>
 8009aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	1076      	asrs	r6, r6, #1
 8009aba:	3708      	adds	r7, #8
 8009abc:	e773      	b.n	80099a6 <_dtoa_r+0x3d6>
 8009abe:	2502      	movs	r5, #2
 8009ac0:	e775      	b.n	80099ae <_dtoa_r+0x3de>
 8009ac2:	9e04      	ldr	r6, [sp, #16]
 8009ac4:	465f      	mov	r7, fp
 8009ac6:	e792      	b.n	80099ee <_dtoa_r+0x41e>
 8009ac8:	9900      	ldr	r1, [sp, #0]
 8009aca:	4b50      	ldr	r3, [pc, #320]	; (8009c0c <_dtoa_r+0x63c>)
 8009acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ad0:	4431      	add	r1, r6
 8009ad2:	9102      	str	r1, [sp, #8]
 8009ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ad6:	eeb0 9a47 	vmov.f32	s18, s14
 8009ada:	eef0 9a67 	vmov.f32	s19, s15
 8009ade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	d044      	beq.n	8009b74 <_dtoa_r+0x5a4>
 8009aea:	494e      	ldr	r1, [pc, #312]	; (8009c24 <_dtoa_r+0x654>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f6 fead 	bl	800084c <__aeabi_ddiv>
 8009af2:	ec53 2b19 	vmov	r2, r3, d9
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	9d00      	ldr	r5, [sp, #0]
 8009afc:	ec41 0b19 	vmov	d9, r0, r1
 8009b00:	4649      	mov	r1, r9
 8009b02:	4640      	mov	r0, r8
 8009b04:	f7f7 f828 	bl	8000b58 <__aeabi_d2iz>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	f7f6 fd0b 	bl	8000524 <__aeabi_i2d>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 fbb7 	bl	8000288 <__aeabi_dsub>
 8009b1a:	3630      	adds	r6, #48	; 0x30
 8009b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b20:	ec53 2b19 	vmov	r2, r3, d9
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	f7f6 ffd8 	bl	8000adc <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d164      	bne.n	8009bfa <_dtoa_r+0x62a>
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	4937      	ldr	r1, [pc, #220]	; (8009c14 <_dtoa_r+0x644>)
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7f6 fba6 	bl	8000288 <__aeabi_dsub>
 8009b3c:	ec53 2b19 	vmov	r2, r3, d9
 8009b40:	f7f6 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 80b6 	bne.w	8009cb6 <_dtoa_r+0x6e6>
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	f43f af7c 	beq.w	8009a4a <_dtoa_r+0x47a>
 8009b52:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <_dtoa_r+0x648>)
 8009b54:	ec51 0b19 	vmov	r0, r1, d9
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <_dtoa_r+0x648>)
 8009b60:	ec41 0b19 	vmov	d9, r0, r1
 8009b64:	2200      	movs	r2, #0
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fd45 	bl	80005f8 <__aeabi_dmul>
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	e7c5      	b.n	8009b00 <_dtoa_r+0x530>
 8009b74:	ec51 0b17 	vmov	r0, r1, d7
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	9d00      	ldr	r5, [sp, #0]
 8009b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b82:	ec41 0b19 	vmov	d9, r0, r1
 8009b86:	4649      	mov	r1, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	f7f6 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	f7f6 fcc8 	bl	8000524 <__aeabi_i2d>
 8009b94:	3630      	adds	r6, #48	; 0x30
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 fb73 	bl	8000288 <__aeabi_dsub>
 8009ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba6:	9b02      	ldr	r3, [sp, #8]
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	4680      	mov	r8, r0
 8009bac:	4689      	mov	r9, r1
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	d124      	bne.n	8009bfe <_dtoa_r+0x62e>
 8009bb4:	4b1b      	ldr	r3, [pc, #108]	; (8009c24 <_dtoa_r+0x654>)
 8009bb6:	ec51 0b19 	vmov	r0, r1, d9
 8009bba:	f7f6 fb67 	bl	800028c <__adddf3>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	f7f6 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d173      	bne.n	8009cb6 <_dtoa_r+0x6e6>
 8009bce:	ec53 2b19 	vmov	r2, r3, d9
 8009bd2:	4914      	ldr	r1, [pc, #80]	; (8009c24 <_dtoa_r+0x654>)
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	f7f6 fb57 	bl	8000288 <__aeabi_dsub>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	f7f6 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f43f af2f 	beq.w	8009a4a <_dtoa_r+0x47a>
 8009bec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bee:	1e6b      	subs	r3, r5, #1
 8009bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bf6:	2b30      	cmp	r3, #48	; 0x30
 8009bf8:	d0f8      	beq.n	8009bec <_dtoa_r+0x61c>
 8009bfa:	46bb      	mov	fp, r7
 8009bfc:	e04a      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_dtoa_r+0x648>)
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4680      	mov	r8, r0
 8009c06:	4689      	mov	r9, r1
 8009c08:	e7bd      	b.n	8009b86 <_dtoa_r+0x5b6>
 8009c0a:	bf00      	nop
 8009c0c:	0800bea8 	.word	0x0800bea8
 8009c10:	0800be80 	.word	0x0800be80
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	40240000 	.word	0x40240000
 8009c1c:	401c0000 	.word	0x401c0000
 8009c20:	40140000 	.word	0x40140000
 8009c24:	3fe00000 	.word	0x3fe00000
 8009c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c2c:	9d00      	ldr	r5, [sp, #0]
 8009c2e:	4642      	mov	r2, r8
 8009c30:	464b      	mov	r3, r9
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fe09 	bl	800084c <__aeabi_ddiv>
 8009c3a:	f7f6 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8009c3e:	9001      	str	r0, [sp, #4]
 8009c40:	f7f6 fc70 	bl	8000524 <__aeabi_i2d>
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 fb18 	bl	8000288 <__aeabi_dsub>
 8009c58:	9e01      	ldr	r6, [sp, #4]
 8009c5a:	9f04      	ldr	r7, [sp, #16]
 8009c5c:	3630      	adds	r6, #48	; 0x30
 8009c5e:	f805 6b01 	strb.w	r6, [r5], #1
 8009c62:	9e00      	ldr	r6, [sp, #0]
 8009c64:	1bae      	subs	r6, r5, r6
 8009c66:	42b7      	cmp	r7, r6
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	d134      	bne.n	8009cd8 <_dtoa_r+0x708>
 8009c6e:	f7f6 fb0d 	bl	800028c <__adddf3>
 8009c72:	4642      	mov	r2, r8
 8009c74:	464b      	mov	r3, r9
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	f7f6 ff4d 	bl	8000b18 <__aeabi_dcmpgt>
 8009c7e:	b9c8      	cbnz	r0, 8009cb4 <_dtoa_r+0x6e4>
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c8c:	b110      	cbz	r0, 8009c94 <_dtoa_r+0x6c4>
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	07db      	lsls	r3, r3, #31
 8009c92:	d40f      	bmi.n	8009cb4 <_dtoa_r+0x6e4>
 8009c94:	4651      	mov	r1, sl
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fbcc 	bl	800a434 <_Bfree>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca0:	702b      	strb	r3, [r5, #0]
 8009ca2:	f10b 0301 	add.w	r3, fp, #1
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f43f ace2 	beq.w	8009674 <_dtoa_r+0xa4>
 8009cb0:	601d      	str	r5, [r3, #0]
 8009cb2:	e4df      	b.n	8009674 <_dtoa_r+0xa4>
 8009cb4:	465f      	mov	r7, fp
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	461d      	mov	r5, r3
 8009cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cbe:	2a39      	cmp	r2, #57	; 0x39
 8009cc0:	d106      	bne.n	8009cd0 <_dtoa_r+0x700>
 8009cc2:	9a00      	ldr	r2, [sp, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d1f7      	bne.n	8009cb8 <_dtoa_r+0x6e8>
 8009cc8:	9900      	ldr	r1, [sp, #0]
 8009cca:	2230      	movs	r2, #48	; 0x30
 8009ccc:	3701      	adds	r7, #1
 8009cce:	700a      	strb	r2, [r1, #0]
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e790      	b.n	8009bfa <_dtoa_r+0x62a>
 8009cd8:	4ba3      	ldr	r3, [pc, #652]	; (8009f68 <_dtoa_r+0x998>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	f7f6 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d09e      	beq.n	8009c2e <_dtoa_r+0x65e>
 8009cf0:	e7d0      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	f000 80ca 	beq.w	8009e8e <_dtoa_r+0x8be>
 8009cfa:	9a07      	ldr	r2, [sp, #28]
 8009cfc:	2a01      	cmp	r2, #1
 8009cfe:	f300 80ad 	bgt.w	8009e5c <_dtoa_r+0x88c>
 8009d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	f000 80a5 	beq.w	8009e54 <_dtoa_r+0x884>
 8009d0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d0e:	9e08      	ldr	r6, [sp, #32]
 8009d10:	9d05      	ldr	r5, [sp, #20]
 8009d12:	9a05      	ldr	r2, [sp, #20]
 8009d14:	441a      	add	r2, r3
 8009d16:	9205      	str	r2, [sp, #20]
 8009d18:	9a06      	ldr	r2, [sp, #24]
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	441a      	add	r2, r3
 8009d1e:	4620      	mov	r0, r4
 8009d20:	9206      	str	r2, [sp, #24]
 8009d22:	f000 fc3d 	bl	800a5a0 <__i2b>
 8009d26:	4607      	mov	r7, r0
 8009d28:	b165      	cbz	r5, 8009d44 <_dtoa_r+0x774>
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd09      	ble.n	8009d44 <_dtoa_r+0x774>
 8009d30:	42ab      	cmp	r3, r5
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	bfa8      	it	ge
 8009d36:	462b      	movge	r3, r5
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	9205      	str	r2, [sp, #20]
 8009d3c:	9a06      	ldr	r2, [sp, #24]
 8009d3e:	1aed      	subs	r5, r5, r3
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	9306      	str	r3, [sp, #24]
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	b1f3      	cbz	r3, 8009d86 <_dtoa_r+0x7b6>
 8009d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a3 	beq.w	8009e96 <_dtoa_r+0x8c6>
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	dd10      	ble.n	8009d76 <_dtoa_r+0x7a6>
 8009d54:	4639      	mov	r1, r7
 8009d56:	4632      	mov	r2, r6
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fce1 	bl	800a720 <__pow5mult>
 8009d5e:	4652      	mov	r2, sl
 8009d60:	4601      	mov	r1, r0
 8009d62:	4607      	mov	r7, r0
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fc31 	bl	800a5cc <__multiply>
 8009d6a:	4651      	mov	r1, sl
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fb60 	bl	800a434 <_Bfree>
 8009d74:	46c2      	mov	sl, r8
 8009d76:	9b08      	ldr	r3, [sp, #32]
 8009d78:	1b9a      	subs	r2, r3, r6
 8009d7a:	d004      	beq.n	8009d86 <_dtoa_r+0x7b6>
 8009d7c:	4651      	mov	r1, sl
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fcce 	bl	800a720 <__pow5mult>
 8009d84:	4682      	mov	sl, r0
 8009d86:	2101      	movs	r1, #1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fc09 	bl	800a5a0 <__i2b>
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	4606      	mov	r6, r0
 8009d94:	f340 8081 	ble.w	8009e9a <_dtoa_r+0x8ca>
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fcbf 	bl	800a720 <__pow5mult>
 8009da2:	9b07      	ldr	r3, [sp, #28]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	4606      	mov	r6, r0
 8009da8:	dd7a      	ble.n	8009ea0 <_dtoa_r+0x8d0>
 8009daa:	f04f 0800 	mov.w	r8, #0
 8009dae:	6933      	ldr	r3, [r6, #16]
 8009db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009db4:	6918      	ldr	r0, [r3, #16]
 8009db6:	f000 fba5 	bl	800a504 <__hi0bits>
 8009dba:	f1c0 0020 	rsb	r0, r0, #32
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	4418      	add	r0, r3
 8009dc2:	f010 001f 	ands.w	r0, r0, #31
 8009dc6:	f000 8094 	beq.w	8009ef2 <_dtoa_r+0x922>
 8009dca:	f1c0 0320 	rsb	r3, r0, #32
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	f340 8085 	ble.w	8009ede <_dtoa_r+0x90e>
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	f1c0 001c 	rsb	r0, r0, #28
 8009dda:	4403      	add	r3, r0
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	4403      	add	r3, r0
 8009de2:	4405      	add	r5, r0
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dd05      	ble.n	8009df8 <_dtoa_r+0x828>
 8009dec:	4651      	mov	r1, sl
 8009dee:	461a      	mov	r2, r3
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 fcef 	bl	800a7d4 <__lshift>
 8009df6:	4682      	mov	sl, r0
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd05      	ble.n	8009e0a <_dtoa_r+0x83a>
 8009dfe:	4631      	mov	r1, r6
 8009e00:	461a      	mov	r2, r3
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fce6 	bl	800a7d4 <__lshift>
 8009e08:	4606      	mov	r6, r0
 8009e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d072      	beq.n	8009ef6 <_dtoa_r+0x926>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4650      	mov	r0, sl
 8009e14:	f000 fd4a 	bl	800a8ac <__mcmp>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	da6c      	bge.n	8009ef6 <_dtoa_r+0x926>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4651      	mov	r1, sl
 8009e20:	220a      	movs	r2, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fb28 	bl	800a478 <__multadd>
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e2e:	4682      	mov	sl, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 81b0 	beq.w	800a196 <_dtoa_r+0xbc6>
 8009e36:	2300      	movs	r3, #0
 8009e38:	4639      	mov	r1, r7
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fb1b 	bl	800a478 <__multadd>
 8009e42:	9b01      	ldr	r3, [sp, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	4607      	mov	r7, r0
 8009e48:	f300 8096 	bgt.w	8009f78 <_dtoa_r+0x9a8>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dc59      	bgt.n	8009f06 <_dtoa_r+0x936>
 8009e52:	e091      	b.n	8009f78 <_dtoa_r+0x9a8>
 8009e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e5a:	e758      	b.n	8009d0e <_dtoa_r+0x73e>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	1e5e      	subs	r6, r3, #1
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	42b3      	cmp	r3, r6
 8009e64:	bfbf      	itttt	lt
 8009e66:	9b08      	ldrlt	r3, [sp, #32]
 8009e68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e6a:	9608      	strlt	r6, [sp, #32]
 8009e6c:	1af3      	sublt	r3, r6, r3
 8009e6e:	bfb4      	ite	lt
 8009e70:	18d2      	addlt	r2, r2, r3
 8009e72:	1b9e      	subge	r6, r3, r6
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	bfbc      	itt	lt
 8009e78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e7a:	2600      	movlt	r6, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfb7      	itett	lt
 8009e80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e88:	1a9d      	sublt	r5, r3, r2
 8009e8a:	2300      	movlt	r3, #0
 8009e8c:	e741      	b.n	8009d12 <_dtoa_r+0x742>
 8009e8e:	9e08      	ldr	r6, [sp, #32]
 8009e90:	9d05      	ldr	r5, [sp, #20]
 8009e92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e94:	e748      	b.n	8009d28 <_dtoa_r+0x758>
 8009e96:	9a08      	ldr	r2, [sp, #32]
 8009e98:	e770      	b.n	8009d7c <_dtoa_r+0x7ac>
 8009e9a:	9b07      	ldr	r3, [sp, #28]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	dc19      	bgt.n	8009ed4 <_dtoa_r+0x904>
 8009ea0:	9b02      	ldr	r3, [sp, #8]
 8009ea2:	b9bb      	cbnz	r3, 8009ed4 <_dtoa_r+0x904>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eaa:	b99b      	cbnz	r3, 8009ed4 <_dtoa_r+0x904>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eb2:	0d1b      	lsrs	r3, r3, #20
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	b183      	cbz	r3, 8009eda <_dtoa_r+0x90a>
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	9306      	str	r3, [sp, #24]
 8009ec4:	f04f 0801 	mov.w	r8, #1
 8009ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f47f af6f 	bne.w	8009dae <_dtoa_r+0x7de>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	e774      	b.n	8009dbe <_dtoa_r+0x7ee>
 8009ed4:	f04f 0800 	mov.w	r8, #0
 8009ed8:	e7f6      	b.n	8009ec8 <_dtoa_r+0x8f8>
 8009eda:	4698      	mov	r8, r3
 8009edc:	e7f4      	b.n	8009ec8 <_dtoa_r+0x8f8>
 8009ede:	d082      	beq.n	8009de6 <_dtoa_r+0x816>
 8009ee0:	9a05      	ldr	r2, [sp, #20]
 8009ee2:	331c      	adds	r3, #28
 8009ee4:	441a      	add	r2, r3
 8009ee6:	9205      	str	r2, [sp, #20]
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	441a      	add	r2, r3
 8009eec:	441d      	add	r5, r3
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	e779      	b.n	8009de6 <_dtoa_r+0x816>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	e7f4      	b.n	8009ee0 <_dtoa_r+0x910>
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc37      	bgt.n	8009f6c <_dtoa_r+0x99c>
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	dd34      	ble.n	8009f6c <_dtoa_r+0x99c>
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	b963      	cbnz	r3, 8009f24 <_dtoa_r+0x954>
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	2205      	movs	r2, #5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fab2 	bl	800a478 <__multadd>
 8009f14:	4601      	mov	r1, r0
 8009f16:	4606      	mov	r6, r0
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f000 fcc7 	bl	800a8ac <__mcmp>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f73f adbb 	bgt.w	8009a9a <_dtoa_r+0x4ca>
 8009f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f26:	9d00      	ldr	r5, [sp, #0]
 8009f28:	ea6f 0b03 	mvn.w	fp, r3
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	4631      	mov	r1, r6
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fa7e 	bl	800a434 <_Bfree>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f43f aeab 	beq.w	8009c94 <_dtoa_r+0x6c4>
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	d005      	beq.n	8009f50 <_dtoa_r+0x980>
 8009f44:	45b8      	cmp	r8, r7
 8009f46:	d003      	beq.n	8009f50 <_dtoa_r+0x980>
 8009f48:	4641      	mov	r1, r8
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 fa72 	bl	800a434 <_Bfree>
 8009f50:	4639      	mov	r1, r7
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fa6e 	bl	800a434 <_Bfree>
 8009f58:	e69c      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	4637      	mov	r7, r6
 8009f5e:	e7e1      	b.n	8009f24 <_dtoa_r+0x954>
 8009f60:	46bb      	mov	fp, r7
 8009f62:	4637      	mov	r7, r6
 8009f64:	e599      	b.n	8009a9a <_dtoa_r+0x4ca>
 8009f66:	bf00      	nop
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80c8 	beq.w	800a104 <_dtoa_r+0xb34>
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	dd05      	ble.n	8009f88 <_dtoa_r+0x9b8>
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	462a      	mov	r2, r5
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fc27 	bl	800a7d4 <__lshift>
 8009f86:	4607      	mov	r7, r0
 8009f88:	f1b8 0f00 	cmp.w	r8, #0
 8009f8c:	d05b      	beq.n	800a046 <_dtoa_r+0xa76>
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fa0f 	bl	800a3b4 <_Balloc>
 8009f96:	4605      	mov	r5, r0
 8009f98:	b928      	cbnz	r0, 8009fa6 <_dtoa_r+0x9d6>
 8009f9a:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <_dtoa_r+0xbd8>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009fa2:	f7ff bb2e 	b.w	8009602 <_dtoa_r+0x32>
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	3202      	adds	r2, #2
 8009faa:	0092      	lsls	r2, r2, #2
 8009fac:	f107 010c 	add.w	r1, r7, #12
 8009fb0:	300c      	adds	r0, #12
 8009fb2:	f7ff fa76 	bl	80094a2 <memcpy>
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fc0a 	bl	800a7d4 <__lshift>
 8009fc0:	9b00      	ldr	r3, [sp, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fca:	4413      	add	r3, r2
 8009fcc:	9308      	str	r3, [sp, #32]
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	46b8      	mov	r8, r7
 8009fd6:	9306      	str	r3, [sp, #24]
 8009fd8:	4607      	mov	r7, r0
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	4631      	mov	r1, r6
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	f7ff fa6b 	bl	80094be <quorem>
 8009fe8:	4641      	mov	r1, r8
 8009fea:	9002      	str	r0, [sp, #8]
 8009fec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	f000 fc5b 	bl	800a8ac <__mcmp>
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	9005      	str	r0, [sp, #20]
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fc71 	bl	800a8e4 <__mdiff>
 800a002:	68c2      	ldr	r2, [r0, #12]
 800a004:	4605      	mov	r5, r0
 800a006:	bb02      	cbnz	r2, 800a04a <_dtoa_r+0xa7a>
 800a008:	4601      	mov	r1, r0
 800a00a:	4650      	mov	r0, sl
 800a00c:	f000 fc4e 	bl	800a8ac <__mcmp>
 800a010:	4602      	mov	r2, r0
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	9209      	str	r2, [sp, #36]	; 0x24
 800a018:	f000 fa0c 	bl	800a434 <_Bfree>
 800a01c:	9b07      	ldr	r3, [sp, #28]
 800a01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a020:	9d04      	ldr	r5, [sp, #16]
 800a022:	ea43 0102 	orr.w	r1, r3, r2
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	4319      	orrs	r1, r3
 800a02a:	d110      	bne.n	800a04e <_dtoa_r+0xa7e>
 800a02c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a030:	d029      	beq.n	800a086 <_dtoa_r+0xab6>
 800a032:	9b05      	ldr	r3, [sp, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd02      	ble.n	800a03e <_dtoa_r+0xa6e>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	f883 9000 	strb.w	r9, [r3]
 800a044:	e774      	b.n	8009f30 <_dtoa_r+0x960>
 800a046:	4638      	mov	r0, r7
 800a048:	e7ba      	b.n	8009fc0 <_dtoa_r+0x9f0>
 800a04a:	2201      	movs	r2, #1
 800a04c:	e7e1      	b.n	800a012 <_dtoa_r+0xa42>
 800a04e:	9b05      	ldr	r3, [sp, #20]
 800a050:	2b00      	cmp	r3, #0
 800a052:	db04      	blt.n	800a05e <_dtoa_r+0xa8e>
 800a054:	9907      	ldr	r1, [sp, #28]
 800a056:	430b      	orrs	r3, r1
 800a058:	9906      	ldr	r1, [sp, #24]
 800a05a:	430b      	orrs	r3, r1
 800a05c:	d120      	bne.n	800a0a0 <_dtoa_r+0xad0>
 800a05e:	2a00      	cmp	r2, #0
 800a060:	dded      	ble.n	800a03e <_dtoa_r+0xa6e>
 800a062:	4651      	mov	r1, sl
 800a064:	2201      	movs	r2, #1
 800a066:	4620      	mov	r0, r4
 800a068:	f000 fbb4 	bl	800a7d4 <__lshift>
 800a06c:	4631      	mov	r1, r6
 800a06e:	4682      	mov	sl, r0
 800a070:	f000 fc1c 	bl	800a8ac <__mcmp>
 800a074:	2800      	cmp	r0, #0
 800a076:	dc03      	bgt.n	800a080 <_dtoa_r+0xab0>
 800a078:	d1e1      	bne.n	800a03e <_dtoa_r+0xa6e>
 800a07a:	f019 0f01 	tst.w	r9, #1
 800a07e:	d0de      	beq.n	800a03e <_dtoa_r+0xa6e>
 800a080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a084:	d1d8      	bne.n	800a038 <_dtoa_r+0xa68>
 800a086:	9a01      	ldr	r2, [sp, #4]
 800a088:	2339      	movs	r3, #57	; 0x39
 800a08a:	7013      	strb	r3, [r2, #0]
 800a08c:	462b      	mov	r3, r5
 800a08e:	461d      	mov	r5, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a096:	2a39      	cmp	r2, #57	; 0x39
 800a098:	d06c      	beq.n	800a174 <_dtoa_r+0xba4>
 800a09a:	3201      	adds	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e747      	b.n	8009f30 <_dtoa_r+0x960>
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	dd07      	ble.n	800a0b4 <_dtoa_r+0xae4>
 800a0a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0a8:	d0ed      	beq.n	800a086 <_dtoa_r+0xab6>
 800a0aa:	9a01      	ldr	r2, [sp, #4]
 800a0ac:	f109 0301 	add.w	r3, r9, #1
 800a0b0:	7013      	strb	r3, [r2, #0]
 800a0b2:	e73d      	b.n	8009f30 <_dtoa_r+0x960>
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	9a08      	ldr	r2, [sp, #32]
 800a0b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d043      	beq.n	800a148 <_dtoa_r+0xb78>
 800a0c0:	4651      	mov	r1, sl
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f9d6 	bl	800a478 <__multadd>
 800a0cc:	45b8      	cmp	r8, r7
 800a0ce:	4682      	mov	sl, r0
 800a0d0:	f04f 0300 	mov.w	r3, #0
 800a0d4:	f04f 020a 	mov.w	r2, #10
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4620      	mov	r0, r4
 800a0dc:	d107      	bne.n	800a0ee <_dtoa_r+0xb1e>
 800a0de:	f000 f9cb 	bl	800a478 <__multadd>
 800a0e2:	4680      	mov	r8, r0
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	e775      	b.n	8009fda <_dtoa_r+0xa0a>
 800a0ee:	f000 f9c3 	bl	800a478 <__multadd>
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 f9bc 	bl	800a478 <__multadd>
 800a100:	4607      	mov	r7, r0
 800a102:	e7f0      	b.n	800a0e6 <_dtoa_r+0xb16>
 800a104:	9b04      	ldr	r3, [sp, #16]
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	9d00      	ldr	r5, [sp, #0]
 800a10a:	4631      	mov	r1, r6
 800a10c:	4650      	mov	r0, sl
 800a10e:	f7ff f9d6 	bl	80094be <quorem>
 800a112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	f805 9b01 	strb.w	r9, [r5], #1
 800a11c:	1aea      	subs	r2, r5, r3
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	4293      	cmp	r3, r2
 800a122:	dd07      	ble.n	800a134 <_dtoa_r+0xb64>
 800a124:	4651      	mov	r1, sl
 800a126:	2300      	movs	r3, #0
 800a128:	220a      	movs	r2, #10
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 f9a4 	bl	800a478 <__multadd>
 800a130:	4682      	mov	sl, r0
 800a132:	e7ea      	b.n	800a10a <_dtoa_r+0xb3a>
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfc8      	it	gt
 800a13a:	461d      	movgt	r5, r3
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	bfd8      	it	le
 800a140:	2501      	movle	r5, #1
 800a142:	441d      	add	r5, r3
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	4651      	mov	r1, sl
 800a14a:	2201      	movs	r2, #1
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fb41 	bl	800a7d4 <__lshift>
 800a152:	4631      	mov	r1, r6
 800a154:	4682      	mov	sl, r0
 800a156:	f000 fba9 	bl	800a8ac <__mcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	dc96      	bgt.n	800a08c <_dtoa_r+0xabc>
 800a15e:	d102      	bne.n	800a166 <_dtoa_r+0xb96>
 800a160:	f019 0f01 	tst.w	r9, #1
 800a164:	d192      	bne.n	800a08c <_dtoa_r+0xabc>
 800a166:	462b      	mov	r3, r5
 800a168:	461d      	mov	r5, r3
 800a16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a16e:	2a30      	cmp	r2, #48	; 0x30
 800a170:	d0fa      	beq.n	800a168 <_dtoa_r+0xb98>
 800a172:	e6dd      	b.n	8009f30 <_dtoa_r+0x960>
 800a174:	9a00      	ldr	r2, [sp, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d189      	bne.n	800a08e <_dtoa_r+0xabe>
 800a17a:	f10b 0b01 	add.w	fp, fp, #1
 800a17e:	2331      	movs	r3, #49	; 0x31
 800a180:	e796      	b.n	800a0b0 <_dtoa_r+0xae0>
 800a182:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <_dtoa_r+0xbdc>)
 800a184:	f7ff ba99 	b.w	80096ba <_dtoa_r+0xea>
 800a188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f aa6d 	bne.w	800966a <_dtoa_r+0x9a>
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <_dtoa_r+0xbe0>)
 800a192:	f7ff ba92 	b.w	80096ba <_dtoa_r+0xea>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dcb5      	bgt.n	800a108 <_dtoa_r+0xb38>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	f73f aeb1 	bgt.w	8009f06 <_dtoa_r+0x936>
 800a1a4:	e7b0      	b.n	800a108 <_dtoa_r+0xb38>
 800a1a6:	bf00      	nop
 800a1a8:	0800be14 	.word	0x0800be14
 800a1ac:	0800bd74 	.word	0x0800bd74
 800a1b0:	0800bd98 	.word	0x0800bd98

0800a1b4 <_free_r>:
 800a1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d044      	beq.n	800a244 <_free_r+0x90>
 800a1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1be:	9001      	str	r0, [sp, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1c6:	bfb8      	it	lt
 800a1c8:	18e4      	addlt	r4, r4, r3
 800a1ca:	f000 f8e7 	bl	800a39c <__malloc_lock>
 800a1ce:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <_free_r+0x94>)
 800a1d0:	9801      	ldr	r0, [sp, #4]
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	b933      	cbnz	r3, 800a1e4 <_free_r+0x30>
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	6014      	str	r4, [r2, #0]
 800a1da:	b003      	add	sp, #12
 800a1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1e0:	f000 b8e2 	b.w	800a3a8 <__malloc_unlock>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d908      	bls.n	800a1fa <_free_r+0x46>
 800a1e8:	6825      	ldr	r5, [r4, #0]
 800a1ea:	1961      	adds	r1, r4, r5
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	bf01      	itttt	eq
 800a1f0:	6819      	ldreq	r1, [r3, #0]
 800a1f2:	685b      	ldreq	r3, [r3, #4]
 800a1f4:	1949      	addeq	r1, r1, r5
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	e7ed      	b.n	800a1d6 <_free_r+0x22>
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b10b      	cbz	r3, 800a204 <_free_r+0x50>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d9fa      	bls.n	800a1fa <_free_r+0x46>
 800a204:	6811      	ldr	r1, [r2, #0]
 800a206:	1855      	adds	r5, r2, r1
 800a208:	42a5      	cmp	r5, r4
 800a20a:	d10b      	bne.n	800a224 <_free_r+0x70>
 800a20c:	6824      	ldr	r4, [r4, #0]
 800a20e:	4421      	add	r1, r4
 800a210:	1854      	adds	r4, r2, r1
 800a212:	42a3      	cmp	r3, r4
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	d1e0      	bne.n	800a1da <_free_r+0x26>
 800a218:	681c      	ldr	r4, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	6053      	str	r3, [r2, #4]
 800a21e:	440c      	add	r4, r1
 800a220:	6014      	str	r4, [r2, #0]
 800a222:	e7da      	b.n	800a1da <_free_r+0x26>
 800a224:	d902      	bls.n	800a22c <_free_r+0x78>
 800a226:	230c      	movs	r3, #12
 800a228:	6003      	str	r3, [r0, #0]
 800a22a:	e7d6      	b.n	800a1da <_free_r+0x26>
 800a22c:	6825      	ldr	r5, [r4, #0]
 800a22e:	1961      	adds	r1, r4, r5
 800a230:	428b      	cmp	r3, r1
 800a232:	bf04      	itt	eq
 800a234:	6819      	ldreq	r1, [r3, #0]
 800a236:	685b      	ldreq	r3, [r3, #4]
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	bf04      	itt	eq
 800a23c:	1949      	addeq	r1, r1, r5
 800a23e:	6021      	streq	r1, [r4, #0]
 800a240:	6054      	str	r4, [r2, #4]
 800a242:	e7ca      	b.n	800a1da <_free_r+0x26>
 800a244:	b003      	add	sp, #12
 800a246:	bd30      	pop	{r4, r5, pc}
 800a248:	20004854 	.word	0x20004854

0800a24c <malloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <malloc+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 b823 	b.w	800a29c <_malloc_r>
 800a256:	bf00      	nop
 800a258:	20000100 	.word	0x20000100

0800a25c <sbrk_aligned>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4e0e      	ldr	r6, [pc, #56]	; (800a298 <sbrk_aligned+0x3c>)
 800a260:	460c      	mov	r4, r1
 800a262:	6831      	ldr	r1, [r6, #0]
 800a264:	4605      	mov	r5, r0
 800a266:	b911      	cbnz	r1, 800a26e <sbrk_aligned+0x12>
 800a268:	f000 fe40 	bl	800aeec <_sbrk_r>
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f000 fe3b 	bl	800aeec <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d00a      	beq.n	800a290 <sbrk_aligned+0x34>
 800a27a:	1cc4      	adds	r4, r0, #3
 800a27c:	f024 0403 	bic.w	r4, r4, #3
 800a280:	42a0      	cmp	r0, r4
 800a282:	d007      	beq.n	800a294 <sbrk_aligned+0x38>
 800a284:	1a21      	subs	r1, r4, r0
 800a286:	4628      	mov	r0, r5
 800a288:	f000 fe30 	bl	800aeec <_sbrk_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d101      	bne.n	800a294 <sbrk_aligned+0x38>
 800a290:	f04f 34ff 	mov.w	r4, #4294967295
 800a294:	4620      	mov	r0, r4
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	20004858 	.word	0x20004858

0800a29c <_malloc_r>:
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	1ccd      	adds	r5, r1, #3
 800a2a2:	f025 0503 	bic.w	r5, r5, #3
 800a2a6:	3508      	adds	r5, #8
 800a2a8:	2d0c      	cmp	r5, #12
 800a2aa:	bf38      	it	cc
 800a2ac:	250c      	movcc	r5, #12
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	db01      	blt.n	800a2b8 <_malloc_r+0x1c>
 800a2b4:	42a9      	cmp	r1, r5
 800a2b6:	d905      	bls.n	800a2c4 <_malloc_r+0x28>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	2600      	movs	r6, #0
 800a2be:	4630      	mov	r0, r6
 800a2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a398 <_malloc_r+0xfc>
 800a2c8:	f000 f868 	bl	800a39c <__malloc_lock>
 800a2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d0:	461c      	mov	r4, r3
 800a2d2:	bb5c      	cbnz	r4, 800a32c <_malloc_r+0x90>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f7ff ffc0 	bl	800a25c <sbrk_aligned>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	4604      	mov	r4, r0
 800a2e0:	d155      	bne.n	800a38e <_malloc_r+0xf2>
 800a2e2:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e6:	4626      	mov	r6, r4
 800a2e8:	2e00      	cmp	r6, #0
 800a2ea:	d145      	bne.n	800a378 <_malloc_r+0xdc>
 800a2ec:	2c00      	cmp	r4, #0
 800a2ee:	d048      	beq.n	800a382 <_malloc_r+0xe6>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	eb04 0903 	add.w	r9, r4, r3
 800a2fa:	f000 fdf7 	bl	800aeec <_sbrk_r>
 800a2fe:	4581      	cmp	r9, r0
 800a300:	d13f      	bne.n	800a382 <_malloc_r+0xe6>
 800a302:	6821      	ldr	r1, [r4, #0]
 800a304:	1a6d      	subs	r5, r5, r1
 800a306:	4629      	mov	r1, r5
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ffa7 	bl	800a25c <sbrk_aligned>
 800a30e:	3001      	adds	r0, #1
 800a310:	d037      	beq.n	800a382 <_malloc_r+0xe6>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	442b      	add	r3, r5
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	f8d8 3000 	ldr.w	r3, [r8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d038      	beq.n	800a392 <_malloc_r+0xf6>
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	42a2      	cmp	r2, r4
 800a324:	d12b      	bne.n	800a37e <_malloc_r+0xe2>
 800a326:	2200      	movs	r2, #0
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	e00f      	b.n	800a34c <_malloc_r+0xb0>
 800a32c:	6822      	ldr	r2, [r4, #0]
 800a32e:	1b52      	subs	r2, r2, r5
 800a330:	d41f      	bmi.n	800a372 <_malloc_r+0xd6>
 800a332:	2a0b      	cmp	r2, #11
 800a334:	d917      	bls.n	800a366 <_malloc_r+0xca>
 800a336:	1961      	adds	r1, r4, r5
 800a338:	42a3      	cmp	r3, r4
 800a33a:	6025      	str	r5, [r4, #0]
 800a33c:	bf18      	it	ne
 800a33e:	6059      	strne	r1, [r3, #4]
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	bf08      	it	eq
 800a344:	f8c8 1000 	streq.w	r1, [r8]
 800a348:	5162      	str	r2, [r4, r5]
 800a34a:	604b      	str	r3, [r1, #4]
 800a34c:	4638      	mov	r0, r7
 800a34e:	f104 060b 	add.w	r6, r4, #11
 800a352:	f000 f829 	bl	800a3a8 <__malloc_unlock>
 800a356:	f026 0607 	bic.w	r6, r6, #7
 800a35a:	1d23      	adds	r3, r4, #4
 800a35c:	1af2      	subs	r2, r6, r3
 800a35e:	d0ae      	beq.n	800a2be <_malloc_r+0x22>
 800a360:	1b9b      	subs	r3, r3, r6
 800a362:	50a3      	str	r3, [r4, r2]
 800a364:	e7ab      	b.n	800a2be <_malloc_r+0x22>
 800a366:	42a3      	cmp	r3, r4
 800a368:	6862      	ldr	r2, [r4, #4]
 800a36a:	d1dd      	bne.n	800a328 <_malloc_r+0x8c>
 800a36c:	f8c8 2000 	str.w	r2, [r8]
 800a370:	e7ec      	b.n	800a34c <_malloc_r+0xb0>
 800a372:	4623      	mov	r3, r4
 800a374:	6864      	ldr	r4, [r4, #4]
 800a376:	e7ac      	b.n	800a2d2 <_malloc_r+0x36>
 800a378:	4634      	mov	r4, r6
 800a37a:	6876      	ldr	r6, [r6, #4]
 800a37c:	e7b4      	b.n	800a2e8 <_malloc_r+0x4c>
 800a37e:	4613      	mov	r3, r2
 800a380:	e7cc      	b.n	800a31c <_malloc_r+0x80>
 800a382:	230c      	movs	r3, #12
 800a384:	603b      	str	r3, [r7, #0]
 800a386:	4638      	mov	r0, r7
 800a388:	f000 f80e 	bl	800a3a8 <__malloc_unlock>
 800a38c:	e797      	b.n	800a2be <_malloc_r+0x22>
 800a38e:	6025      	str	r5, [r4, #0]
 800a390:	e7dc      	b.n	800a34c <_malloc_r+0xb0>
 800a392:	605b      	str	r3, [r3, #4]
 800a394:	deff      	udf	#255	; 0xff
 800a396:	bf00      	nop
 800a398:	20004854 	.word	0x20004854

0800a39c <__malloc_lock>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__malloc_lock+0x8>)
 800a39e:	f7ff b876 	b.w	800948e <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20004850 	.word	0x20004850

0800a3a8 <__malloc_unlock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__malloc_unlock+0x8>)
 800a3aa:	f7ff b871 	b.w	8009490 <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20004850 	.word	0x20004850

0800a3b4 <_Balloc>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	69c6      	ldr	r6, [r0, #28]
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	b976      	cbnz	r6, 800a3dc <_Balloc+0x28>
 800a3be:	2010      	movs	r0, #16
 800a3c0:	f7ff ff44 	bl	800a24c <malloc>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	61e0      	str	r0, [r4, #28]
 800a3c8:	b920      	cbnz	r0, 800a3d4 <_Balloc+0x20>
 800a3ca:	4b18      	ldr	r3, [pc, #96]	; (800a42c <_Balloc+0x78>)
 800a3cc:	4818      	ldr	r0, [pc, #96]	; (800a430 <_Balloc+0x7c>)
 800a3ce:	216b      	movs	r1, #107	; 0x6b
 800a3d0:	f000 fd9c 	bl	800af0c <__assert_func>
 800a3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3d8:	6006      	str	r6, [r0, #0]
 800a3da:	60c6      	str	r6, [r0, #12]
 800a3dc:	69e6      	ldr	r6, [r4, #28]
 800a3de:	68f3      	ldr	r3, [r6, #12]
 800a3e0:	b183      	cbz	r3, 800a404 <_Balloc+0x50>
 800a3e2:	69e3      	ldr	r3, [r4, #28]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ea:	b9b8      	cbnz	r0, 800a41c <_Balloc+0x68>
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a3f2:	1d72      	adds	r2, r6, #5
 800a3f4:	0092      	lsls	r2, r2, #2
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 fda6 	bl	800af48 <_calloc_r>
 800a3fc:	b160      	cbz	r0, 800a418 <_Balloc+0x64>
 800a3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a402:	e00e      	b.n	800a422 <_Balloc+0x6e>
 800a404:	2221      	movs	r2, #33	; 0x21
 800a406:	2104      	movs	r1, #4
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fd9d 	bl	800af48 <_calloc_r>
 800a40e:	69e3      	ldr	r3, [r4, #28]
 800a410:	60f0      	str	r0, [r6, #12]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e4      	bne.n	800a3e2 <_Balloc+0x2e>
 800a418:	2000      	movs	r0, #0
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	6802      	ldr	r2, [r0, #0]
 800a41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a422:	2300      	movs	r3, #0
 800a424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a428:	e7f7      	b.n	800a41a <_Balloc+0x66>
 800a42a:	bf00      	nop
 800a42c:	0800bda5 	.word	0x0800bda5
 800a430:	0800be25 	.word	0x0800be25

0800a434 <_Bfree>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	69c6      	ldr	r6, [r0, #28]
 800a438:	4605      	mov	r5, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Bfree+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7ff ff04 	bl	800a24c <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	61e8      	str	r0, [r5, #28]
 800a448:	b920      	cbnz	r0, 800a454 <_Bfree+0x20>
 800a44a:	4b09      	ldr	r3, [pc, #36]	; (800a470 <_Bfree+0x3c>)
 800a44c:	4809      	ldr	r0, [pc, #36]	; (800a474 <_Bfree+0x40>)
 800a44e:	218f      	movs	r1, #143	; 0x8f
 800a450:	f000 fd5c 	bl	800af0c <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	b13c      	cbz	r4, 800a46e <_Bfree+0x3a>
 800a45e:	69eb      	ldr	r3, [r5, #28]
 800a460:	6862      	ldr	r2, [r4, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a468:	6021      	str	r1, [r4, #0]
 800a46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	0800bda5 	.word	0x0800bda5
 800a474:	0800be25 	.word	0x0800be25

0800a478 <__multadd>:
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	690d      	ldr	r5, [r1, #16]
 800a47e:	4607      	mov	r7, r0
 800a480:	460c      	mov	r4, r1
 800a482:	461e      	mov	r6, r3
 800a484:	f101 0c14 	add.w	ip, r1, #20
 800a488:	2000      	movs	r0, #0
 800a48a:	f8dc 3000 	ldr.w	r3, [ip]
 800a48e:	b299      	uxth	r1, r3
 800a490:	fb02 6101 	mla	r1, r2, r1, r6
 800a494:	0c1e      	lsrs	r6, r3, #16
 800a496:	0c0b      	lsrs	r3, r1, #16
 800a498:	fb02 3306 	mla	r3, r2, r6, r3
 800a49c:	b289      	uxth	r1, r1
 800a49e:	3001      	adds	r0, #1
 800a4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4a4:	4285      	cmp	r5, r0
 800a4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a4aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ae:	dcec      	bgt.n	800a48a <__multadd+0x12>
 800a4b0:	b30e      	cbz	r6, 800a4f6 <__multadd+0x7e>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dc19      	bgt.n	800a4ec <__multadd+0x74>
 800a4b8:	6861      	ldr	r1, [r4, #4]
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	3101      	adds	r1, #1
 800a4be:	f7ff ff79 	bl	800a3b4 <_Balloc>
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	b928      	cbnz	r0, 800a4d2 <__multadd+0x5a>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <__multadd+0x84>)
 800a4ca:	480d      	ldr	r0, [pc, #52]	; (800a500 <__multadd+0x88>)
 800a4cc:	21ba      	movs	r1, #186	; 0xba
 800a4ce:	f000 fd1d 	bl	800af0c <__assert_func>
 800a4d2:	6922      	ldr	r2, [r4, #16]
 800a4d4:	3202      	adds	r2, #2
 800a4d6:	f104 010c 	add.w	r1, r4, #12
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	300c      	adds	r0, #12
 800a4de:	f7fe ffe0 	bl	80094a2 <memcpy>
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff ffa5 	bl	800a434 <_Bfree>
 800a4ea:	4644      	mov	r4, r8
 800a4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	615e      	str	r6, [r3, #20]
 800a4f4:	6125      	str	r5, [r4, #16]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fc:	0800be14 	.word	0x0800be14
 800a500:	0800be25 	.word	0x0800be25

0800a504 <__hi0bits>:
 800a504:	0c03      	lsrs	r3, r0, #16
 800a506:	041b      	lsls	r3, r3, #16
 800a508:	b9d3      	cbnz	r3, 800a540 <__hi0bits+0x3c>
 800a50a:	0400      	lsls	r0, r0, #16
 800a50c:	2310      	movs	r3, #16
 800a50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a512:	bf04      	itt	eq
 800a514:	0200      	lsleq	r0, r0, #8
 800a516:	3308      	addeq	r3, #8
 800a518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a51c:	bf04      	itt	eq
 800a51e:	0100      	lsleq	r0, r0, #4
 800a520:	3304      	addeq	r3, #4
 800a522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a526:	bf04      	itt	eq
 800a528:	0080      	lsleq	r0, r0, #2
 800a52a:	3302      	addeq	r3, #2
 800a52c:	2800      	cmp	r0, #0
 800a52e:	db05      	blt.n	800a53c <__hi0bits+0x38>
 800a530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a534:	f103 0301 	add.w	r3, r3, #1
 800a538:	bf08      	it	eq
 800a53a:	2320      	moveq	r3, #32
 800a53c:	4618      	mov	r0, r3
 800a53e:	4770      	bx	lr
 800a540:	2300      	movs	r3, #0
 800a542:	e7e4      	b.n	800a50e <__hi0bits+0xa>

0800a544 <__lo0bits>:
 800a544:	6803      	ldr	r3, [r0, #0]
 800a546:	f013 0207 	ands.w	r2, r3, #7
 800a54a:	d00c      	beq.n	800a566 <__lo0bits+0x22>
 800a54c:	07d9      	lsls	r1, r3, #31
 800a54e:	d422      	bmi.n	800a596 <__lo0bits+0x52>
 800a550:	079a      	lsls	r2, r3, #30
 800a552:	bf49      	itett	mi
 800a554:	085b      	lsrmi	r3, r3, #1
 800a556:	089b      	lsrpl	r3, r3, #2
 800a558:	6003      	strmi	r3, [r0, #0]
 800a55a:	2201      	movmi	r2, #1
 800a55c:	bf5c      	itt	pl
 800a55e:	6003      	strpl	r3, [r0, #0]
 800a560:	2202      	movpl	r2, #2
 800a562:	4610      	mov	r0, r2
 800a564:	4770      	bx	lr
 800a566:	b299      	uxth	r1, r3
 800a568:	b909      	cbnz	r1, 800a56e <__lo0bits+0x2a>
 800a56a:	0c1b      	lsrs	r3, r3, #16
 800a56c:	2210      	movs	r2, #16
 800a56e:	b2d9      	uxtb	r1, r3
 800a570:	b909      	cbnz	r1, 800a576 <__lo0bits+0x32>
 800a572:	3208      	adds	r2, #8
 800a574:	0a1b      	lsrs	r3, r3, #8
 800a576:	0719      	lsls	r1, r3, #28
 800a578:	bf04      	itt	eq
 800a57a:	091b      	lsreq	r3, r3, #4
 800a57c:	3204      	addeq	r2, #4
 800a57e:	0799      	lsls	r1, r3, #30
 800a580:	bf04      	itt	eq
 800a582:	089b      	lsreq	r3, r3, #2
 800a584:	3202      	addeq	r2, #2
 800a586:	07d9      	lsls	r1, r3, #31
 800a588:	d403      	bmi.n	800a592 <__lo0bits+0x4e>
 800a58a:	085b      	lsrs	r3, r3, #1
 800a58c:	f102 0201 	add.w	r2, r2, #1
 800a590:	d003      	beq.n	800a59a <__lo0bits+0x56>
 800a592:	6003      	str	r3, [r0, #0]
 800a594:	e7e5      	b.n	800a562 <__lo0bits+0x1e>
 800a596:	2200      	movs	r2, #0
 800a598:	e7e3      	b.n	800a562 <__lo0bits+0x1e>
 800a59a:	2220      	movs	r2, #32
 800a59c:	e7e1      	b.n	800a562 <__lo0bits+0x1e>
	...

0800a5a0 <__i2b>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	f7ff ff05 	bl	800a3b4 <_Balloc>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	b928      	cbnz	r0, 800a5ba <__i2b+0x1a>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <__i2b+0x24>)
 800a5b0:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <__i2b+0x28>)
 800a5b2:	f240 1145 	movw	r1, #325	; 0x145
 800a5b6:	f000 fca9 	bl	800af0c <__assert_func>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	6144      	str	r4, [r0, #20]
 800a5be:	6103      	str	r3, [r0, #16]
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800be14 	.word	0x0800be14
 800a5c8:	0800be25 	.word	0x0800be25

0800a5cc <__multiply>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4691      	mov	r9, r2
 800a5d2:	690a      	ldr	r2, [r1, #16]
 800a5d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	bfb8      	it	lt
 800a5dc:	460b      	movlt	r3, r1
 800a5de:	460c      	mov	r4, r1
 800a5e0:	bfbc      	itt	lt
 800a5e2:	464c      	movlt	r4, r9
 800a5e4:	4699      	movlt	r9, r3
 800a5e6:	6927      	ldr	r7, [r4, #16]
 800a5e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5ec:	68a3      	ldr	r3, [r4, #8]
 800a5ee:	6861      	ldr	r1, [r4, #4]
 800a5f0:	eb07 060a 	add.w	r6, r7, sl
 800a5f4:	42b3      	cmp	r3, r6
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	bfb8      	it	lt
 800a5fa:	3101      	addlt	r1, #1
 800a5fc:	f7ff feda 	bl	800a3b4 <_Balloc>
 800a600:	b930      	cbnz	r0, 800a610 <__multiply+0x44>
 800a602:	4602      	mov	r2, r0
 800a604:	4b44      	ldr	r3, [pc, #272]	; (800a718 <__multiply+0x14c>)
 800a606:	4845      	ldr	r0, [pc, #276]	; (800a71c <__multiply+0x150>)
 800a608:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a60c:	f000 fc7e 	bl	800af0c <__assert_func>
 800a610:	f100 0514 	add.w	r5, r0, #20
 800a614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a618:	462b      	mov	r3, r5
 800a61a:	2200      	movs	r2, #0
 800a61c:	4543      	cmp	r3, r8
 800a61e:	d321      	bcc.n	800a664 <__multiply+0x98>
 800a620:	f104 0314 	add.w	r3, r4, #20
 800a624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a628:	f109 0314 	add.w	r3, r9, #20
 800a62c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a630:	9202      	str	r2, [sp, #8]
 800a632:	1b3a      	subs	r2, r7, r4
 800a634:	3a15      	subs	r2, #21
 800a636:	f022 0203 	bic.w	r2, r2, #3
 800a63a:	3204      	adds	r2, #4
 800a63c:	f104 0115 	add.w	r1, r4, #21
 800a640:	428f      	cmp	r7, r1
 800a642:	bf38      	it	cc
 800a644:	2204      	movcc	r2, #4
 800a646:	9201      	str	r2, [sp, #4]
 800a648:	9a02      	ldr	r2, [sp, #8]
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d80c      	bhi.n	800a66a <__multiply+0x9e>
 800a650:	2e00      	cmp	r6, #0
 800a652:	dd03      	ble.n	800a65c <__multiply+0x90>
 800a654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d05b      	beq.n	800a714 <__multiply+0x148>
 800a65c:	6106      	str	r6, [r0, #16]
 800a65e:	b005      	add	sp, #20
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	f843 2b04 	str.w	r2, [r3], #4
 800a668:	e7d8      	b.n	800a61c <__multiply+0x50>
 800a66a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a66e:	f1ba 0f00 	cmp.w	sl, #0
 800a672:	d024      	beq.n	800a6be <__multiply+0xf2>
 800a674:	f104 0e14 	add.w	lr, r4, #20
 800a678:	46a9      	mov	r9, r5
 800a67a:	f04f 0c00 	mov.w	ip, #0
 800a67e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a682:	f8d9 1000 	ldr.w	r1, [r9]
 800a686:	fa1f fb82 	uxth.w	fp, r2
 800a68a:	b289      	uxth	r1, r1
 800a68c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a694:	f8d9 2000 	ldr.w	r2, [r9]
 800a698:	4461      	add	r1, ip
 800a69a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a69e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6a6:	b289      	uxth	r1, r1
 800a6a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6ac:	4577      	cmp	r7, lr
 800a6ae:	f849 1b04 	str.w	r1, [r9], #4
 800a6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6b6:	d8e2      	bhi.n	800a67e <__multiply+0xb2>
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	f845 c002 	str.w	ip, [r5, r2]
 800a6be:	9a03      	ldr	r2, [sp, #12]
 800a6c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ca:	d021      	beq.n	800a710 <__multiply+0x144>
 800a6cc:	6829      	ldr	r1, [r5, #0]
 800a6ce:	f104 0c14 	add.w	ip, r4, #20
 800a6d2:	46ae      	mov	lr, r5
 800a6d4:	f04f 0a00 	mov.w	sl, #0
 800a6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a6dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6e4:	4452      	add	r2, sl
 800a6e6:	b289      	uxth	r1, r1
 800a6e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a6f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6f8:	f8be 1000 	ldrh.w	r1, [lr]
 800a6fc:	fb09 110a 	mla	r1, r9, sl, r1
 800a700:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a704:	4567      	cmp	r7, ip
 800a706:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a70a:	d8e5      	bhi.n	800a6d8 <__multiply+0x10c>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	50a9      	str	r1, [r5, r2]
 800a710:	3504      	adds	r5, #4
 800a712:	e799      	b.n	800a648 <__multiply+0x7c>
 800a714:	3e01      	subs	r6, #1
 800a716:	e79b      	b.n	800a650 <__multiply+0x84>
 800a718:	0800be14 	.word	0x0800be14
 800a71c:	0800be25 	.word	0x0800be25

0800a720 <__pow5mult>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	4615      	mov	r5, r2
 800a726:	f012 0203 	ands.w	r2, r2, #3
 800a72a:	4606      	mov	r6, r0
 800a72c:	460f      	mov	r7, r1
 800a72e:	d007      	beq.n	800a740 <__pow5mult+0x20>
 800a730:	4c25      	ldr	r4, [pc, #148]	; (800a7c8 <__pow5mult+0xa8>)
 800a732:	3a01      	subs	r2, #1
 800a734:	2300      	movs	r3, #0
 800a736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a73a:	f7ff fe9d 	bl	800a478 <__multadd>
 800a73e:	4607      	mov	r7, r0
 800a740:	10ad      	asrs	r5, r5, #2
 800a742:	d03d      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a744:	69f4      	ldr	r4, [r6, #28]
 800a746:	b97c      	cbnz	r4, 800a768 <__pow5mult+0x48>
 800a748:	2010      	movs	r0, #16
 800a74a:	f7ff fd7f 	bl	800a24c <malloc>
 800a74e:	4602      	mov	r2, r0
 800a750:	61f0      	str	r0, [r6, #28]
 800a752:	b928      	cbnz	r0, 800a760 <__pow5mult+0x40>
 800a754:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <__pow5mult+0xac>)
 800a756:	481e      	ldr	r0, [pc, #120]	; (800a7d0 <__pow5mult+0xb0>)
 800a758:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a75c:	f000 fbd6 	bl	800af0c <__assert_func>
 800a760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a764:	6004      	str	r4, [r0, #0]
 800a766:	60c4      	str	r4, [r0, #12]
 800a768:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a770:	b94c      	cbnz	r4, 800a786 <__pow5mult+0x66>
 800a772:	f240 2171 	movw	r1, #625	; 0x271
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ff12 	bl	800a5a0 <__i2b>
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a782:	4604      	mov	r4, r0
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	07eb      	lsls	r3, r5, #31
 800a78c:	d50a      	bpl.n	800a7a4 <__pow5mult+0x84>
 800a78e:	4639      	mov	r1, r7
 800a790:	4622      	mov	r2, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff1a 	bl	800a5cc <__multiply>
 800a798:	4639      	mov	r1, r7
 800a79a:	4680      	mov	r8, r0
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7ff fe49 	bl	800a434 <_Bfree>
 800a7a2:	4647      	mov	r7, r8
 800a7a4:	106d      	asrs	r5, r5, #1
 800a7a6:	d00b      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	b938      	cbnz	r0, 800a7bc <__pow5mult+0x9c>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7ff ff0b 	bl	800a5cc <__multiply>
 800a7b6:	6020      	str	r0, [r4, #0]
 800a7b8:	f8c0 9000 	str.w	r9, [r0]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e7e4      	b.n	800a78a <__pow5mult+0x6a>
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800bf70 	.word	0x0800bf70
 800a7cc:	0800bda5 	.word	0x0800bda5
 800a7d0:	0800be25 	.word	0x0800be25

0800a7d4 <__lshift>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	460c      	mov	r4, r1
 800a7da:	6849      	ldr	r1, [r1, #4]
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7ec:	f108 0601 	add.w	r6, r8, #1
 800a7f0:	42b3      	cmp	r3, r6
 800a7f2:	db0b      	blt.n	800a80c <__lshift+0x38>
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	f7ff fddd 	bl	800a3b4 <_Balloc>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b948      	cbnz	r0, 800a812 <__lshift+0x3e>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <__lshift+0xd0>)
 800a802:	4829      	ldr	r0, [pc, #164]	; (800a8a8 <__lshift+0xd4>)
 800a804:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a808:	f000 fb80 	bl	800af0c <__assert_func>
 800a80c:	3101      	adds	r1, #1
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	e7ee      	b.n	800a7f0 <__lshift+0x1c>
 800a812:	2300      	movs	r3, #0
 800a814:	f100 0114 	add.w	r1, r0, #20
 800a818:	f100 0210 	add.w	r2, r0, #16
 800a81c:	4618      	mov	r0, r3
 800a81e:	4553      	cmp	r3, sl
 800a820:	db33      	blt.n	800a88a <__lshift+0xb6>
 800a822:	6920      	ldr	r0, [r4, #16]
 800a824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a828:	f104 0314 	add.w	r3, r4, #20
 800a82c:	f019 091f 	ands.w	r9, r9, #31
 800a830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a838:	d02b      	beq.n	800a892 <__lshift+0xbe>
 800a83a:	f1c9 0e20 	rsb	lr, r9, #32
 800a83e:	468a      	mov	sl, r1
 800a840:	2200      	movs	r2, #0
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	fa00 f009 	lsl.w	r0, r0, r9
 800a848:	4310      	orrs	r0, r2
 800a84a:	f84a 0b04 	str.w	r0, [sl], #4
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	459c      	cmp	ip, r3
 800a854:	fa22 f20e 	lsr.w	r2, r2, lr
 800a858:	d8f3      	bhi.n	800a842 <__lshift+0x6e>
 800a85a:	ebac 0304 	sub.w	r3, ip, r4
 800a85e:	3b15      	subs	r3, #21
 800a860:	f023 0303 	bic.w	r3, r3, #3
 800a864:	3304      	adds	r3, #4
 800a866:	f104 0015 	add.w	r0, r4, #21
 800a86a:	4584      	cmp	ip, r0
 800a86c:	bf38      	it	cc
 800a86e:	2304      	movcc	r3, #4
 800a870:	50ca      	str	r2, [r1, r3]
 800a872:	b10a      	cbz	r2, 800a878 <__lshift+0xa4>
 800a874:	f108 0602 	add.w	r6, r8, #2
 800a878:	3e01      	subs	r6, #1
 800a87a:	4638      	mov	r0, r7
 800a87c:	612e      	str	r6, [r5, #16]
 800a87e:	4621      	mov	r1, r4
 800a880:	f7ff fdd8 	bl	800a434 <_Bfree>
 800a884:	4628      	mov	r0, r5
 800a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a88e:	3301      	adds	r3, #1
 800a890:	e7c5      	b.n	800a81e <__lshift+0x4a>
 800a892:	3904      	subs	r1, #4
 800a894:	f853 2b04 	ldr.w	r2, [r3], #4
 800a898:	f841 2f04 	str.w	r2, [r1, #4]!
 800a89c:	459c      	cmp	ip, r3
 800a89e:	d8f9      	bhi.n	800a894 <__lshift+0xc0>
 800a8a0:	e7ea      	b.n	800a878 <__lshift+0xa4>
 800a8a2:	bf00      	nop
 800a8a4:	0800be14 	.word	0x0800be14
 800a8a8:	0800be25 	.word	0x0800be25

0800a8ac <__mcmp>:
 800a8ac:	b530      	push	{r4, r5, lr}
 800a8ae:	6902      	ldr	r2, [r0, #16]
 800a8b0:	690c      	ldr	r4, [r1, #16]
 800a8b2:	1b12      	subs	r2, r2, r4
 800a8b4:	d10e      	bne.n	800a8d4 <__mcmp+0x28>
 800a8b6:	f100 0314 	add.w	r3, r0, #20
 800a8ba:	3114      	adds	r1, #20
 800a8bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8cc:	42a5      	cmp	r5, r4
 800a8ce:	d003      	beq.n	800a8d8 <__mcmp+0x2c>
 800a8d0:	d305      	bcc.n	800a8de <__mcmp+0x32>
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	bd30      	pop	{r4, r5, pc}
 800a8d8:	4283      	cmp	r3, r0
 800a8da:	d3f3      	bcc.n	800a8c4 <__mcmp+0x18>
 800a8dc:	e7fa      	b.n	800a8d4 <__mcmp+0x28>
 800a8de:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e2:	e7f7      	b.n	800a8d4 <__mcmp+0x28>

0800a8e4 <__mdiff>:
 800a8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4690      	mov	r8, r2
 800a8f2:	f7ff ffdb 	bl	800a8ac <__mcmp>
 800a8f6:	1e05      	subs	r5, r0, #0
 800a8f8:	d110      	bne.n	800a91c <__mdiff+0x38>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fd59 	bl	800a3b4 <_Balloc>
 800a902:	b930      	cbnz	r0, 800a912 <__mdiff+0x2e>
 800a904:	4b3a      	ldr	r3, [pc, #232]	; (800a9f0 <__mdiff+0x10c>)
 800a906:	4602      	mov	r2, r0
 800a908:	f240 2137 	movw	r1, #567	; 0x237
 800a90c:	4839      	ldr	r0, [pc, #228]	; (800a9f4 <__mdiff+0x110>)
 800a90e:	f000 fafd 	bl	800af0c <__assert_func>
 800a912:	2301      	movs	r3, #1
 800a914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	bfa4      	itt	ge
 800a91e:	4643      	movge	r3, r8
 800a920:	46a0      	movge	r8, r4
 800a922:	4630      	mov	r0, r6
 800a924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a928:	bfa6      	itte	ge
 800a92a:	461c      	movge	r4, r3
 800a92c:	2500      	movge	r5, #0
 800a92e:	2501      	movlt	r5, #1
 800a930:	f7ff fd40 	bl	800a3b4 <_Balloc>
 800a934:	b920      	cbnz	r0, 800a940 <__mdiff+0x5c>
 800a936:	4b2e      	ldr	r3, [pc, #184]	; (800a9f0 <__mdiff+0x10c>)
 800a938:	4602      	mov	r2, r0
 800a93a:	f240 2145 	movw	r1, #581	; 0x245
 800a93e:	e7e5      	b.n	800a90c <__mdiff+0x28>
 800a940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a944:	6926      	ldr	r6, [r4, #16]
 800a946:	60c5      	str	r5, [r0, #12]
 800a948:	f104 0914 	add.w	r9, r4, #20
 800a94c:	f108 0514 	add.w	r5, r8, #20
 800a950:	f100 0e14 	add.w	lr, r0, #20
 800a954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a95c:	f108 0210 	add.w	r2, r8, #16
 800a960:	46f2      	mov	sl, lr
 800a962:	2100      	movs	r1, #0
 800a964:	f859 3b04 	ldr.w	r3, [r9], #4
 800a968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a96c:	fa11 f88b 	uxtah	r8, r1, fp
 800a970:	b299      	uxth	r1, r3
 800a972:	0c1b      	lsrs	r3, r3, #16
 800a974:	eba8 0801 	sub.w	r8, r8, r1
 800a978:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a97c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a980:	fa1f f888 	uxth.w	r8, r8
 800a984:	1419      	asrs	r1, r3, #16
 800a986:	454e      	cmp	r6, r9
 800a988:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a98c:	f84a 3b04 	str.w	r3, [sl], #4
 800a990:	d8e8      	bhi.n	800a964 <__mdiff+0x80>
 800a992:	1b33      	subs	r3, r6, r4
 800a994:	3b15      	subs	r3, #21
 800a996:	f023 0303 	bic.w	r3, r3, #3
 800a99a:	3304      	adds	r3, #4
 800a99c:	3415      	adds	r4, #21
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	bf38      	it	cc
 800a9a2:	2304      	movcc	r3, #4
 800a9a4:	441d      	add	r5, r3
 800a9a6:	4473      	add	r3, lr
 800a9a8:	469e      	mov	lr, r3
 800a9aa:	462e      	mov	r6, r5
 800a9ac:	4566      	cmp	r6, ip
 800a9ae:	d30e      	bcc.n	800a9ce <__mdiff+0xea>
 800a9b0:	f10c 0203 	add.w	r2, ip, #3
 800a9b4:	1b52      	subs	r2, r2, r5
 800a9b6:	f022 0203 	bic.w	r2, r2, #3
 800a9ba:	3d03      	subs	r5, #3
 800a9bc:	45ac      	cmp	ip, r5
 800a9be:	bf38      	it	cc
 800a9c0:	2200      	movcc	r2, #0
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9c8:	b17a      	cbz	r2, 800a9ea <__mdiff+0x106>
 800a9ca:	6107      	str	r7, [r0, #16]
 800a9cc:	e7a4      	b.n	800a918 <__mdiff+0x34>
 800a9ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9d2:	fa11 f288 	uxtah	r2, r1, r8
 800a9d6:	1414      	asrs	r4, r2, #16
 800a9d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9dc:	b292      	uxth	r2, r2
 800a9de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9e2:	f84e 2b04 	str.w	r2, [lr], #4
 800a9e6:	1421      	asrs	r1, r4, #16
 800a9e8:	e7e0      	b.n	800a9ac <__mdiff+0xc8>
 800a9ea:	3f01      	subs	r7, #1
 800a9ec:	e7ea      	b.n	800a9c4 <__mdiff+0xe0>
 800a9ee:	bf00      	nop
 800a9f0:	0800be14 	.word	0x0800be14
 800a9f4:	0800be25 	.word	0x0800be25

0800a9f8 <__d2b>:
 800a9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	2101      	movs	r1, #1
 800aa00:	ec59 8b10 	vmov	r8, r9, d0
 800aa04:	4616      	mov	r6, r2
 800aa06:	f7ff fcd5 	bl	800a3b4 <_Balloc>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	b930      	cbnz	r0, 800aa1c <__d2b+0x24>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b24      	ldr	r3, [pc, #144]	; (800aaa4 <__d2b+0xac>)
 800aa12:	4825      	ldr	r0, [pc, #148]	; (800aaa8 <__d2b+0xb0>)
 800aa14:	f240 310f 	movw	r1, #783	; 0x30f
 800aa18:	f000 fa78 	bl	800af0c <__assert_func>
 800aa1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa24:	bb2d      	cbnz	r5, 800aa72 <__d2b+0x7a>
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	f1b8 0300 	subs.w	r3, r8, #0
 800aa2c:	d026      	beq.n	800aa7c <__d2b+0x84>
 800aa2e:	4668      	mov	r0, sp
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	f7ff fd87 	bl	800a544 <__lo0bits>
 800aa36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa3a:	b1e8      	cbz	r0, 800aa78 <__d2b+0x80>
 800aa3c:	f1c0 0320 	rsb	r3, r0, #32
 800aa40:	fa02 f303 	lsl.w	r3, r2, r3
 800aa44:	430b      	orrs	r3, r1
 800aa46:	40c2      	lsrs	r2, r0
 800aa48:	6163      	str	r3, [r4, #20]
 800aa4a:	9201      	str	r2, [sp, #4]
 800aa4c:	9b01      	ldr	r3, [sp, #4]
 800aa4e:	61a3      	str	r3, [r4, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bf14      	ite	ne
 800aa54:	2202      	movne	r2, #2
 800aa56:	2201      	moveq	r2, #1
 800aa58:	6122      	str	r2, [r4, #16]
 800aa5a:	b1bd      	cbz	r5, 800aa8c <__d2b+0x94>
 800aa5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa60:	4405      	add	r5, r0
 800aa62:	603d      	str	r5, [r7, #0]
 800aa64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa68:	6030      	str	r0, [r6, #0]
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	b003      	add	sp, #12
 800aa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa76:	e7d6      	b.n	800aa26 <__d2b+0x2e>
 800aa78:	6161      	str	r1, [r4, #20]
 800aa7a:	e7e7      	b.n	800aa4c <__d2b+0x54>
 800aa7c:	a801      	add	r0, sp, #4
 800aa7e:	f7ff fd61 	bl	800a544 <__lo0bits>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	6163      	str	r3, [r4, #20]
 800aa86:	3020      	adds	r0, #32
 800aa88:	2201      	movs	r2, #1
 800aa8a:	e7e5      	b.n	800aa58 <__d2b+0x60>
 800aa8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa94:	6038      	str	r0, [r7, #0]
 800aa96:	6918      	ldr	r0, [r3, #16]
 800aa98:	f7ff fd34 	bl	800a504 <__hi0bits>
 800aa9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaa0:	e7e2      	b.n	800aa68 <__d2b+0x70>
 800aaa2:	bf00      	nop
 800aaa4:	0800be14 	.word	0x0800be14
 800aaa8:	0800be25 	.word	0x0800be25

0800aaac <__ssputs_r>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	688e      	ldr	r6, [r1, #8]
 800aab2:	461f      	mov	r7, r3
 800aab4:	42be      	cmp	r6, r7
 800aab6:	680b      	ldr	r3, [r1, #0]
 800aab8:	4682      	mov	sl, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4690      	mov	r8, r2
 800aabe:	d82c      	bhi.n	800ab1a <__ssputs_r+0x6e>
 800aac0:	898a      	ldrh	r2, [r1, #12]
 800aac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aac6:	d026      	beq.n	800ab16 <__ssputs_r+0x6a>
 800aac8:	6965      	ldr	r5, [r4, #20]
 800aaca:	6909      	ldr	r1, [r1, #16]
 800aacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aad0:	eba3 0901 	sub.w	r9, r3, r1
 800aad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aad8:	1c7b      	adds	r3, r7, #1
 800aada:	444b      	add	r3, r9
 800aadc:	106d      	asrs	r5, r5, #1
 800aade:	429d      	cmp	r5, r3
 800aae0:	bf38      	it	cc
 800aae2:	461d      	movcc	r5, r3
 800aae4:	0553      	lsls	r3, r2, #21
 800aae6:	d527      	bpl.n	800ab38 <__ssputs_r+0x8c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7ff fbd7 	bl	800a29c <_malloc_r>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	b360      	cbz	r0, 800ab4c <__ssputs_r+0xa0>
 800aaf2:	6921      	ldr	r1, [r4, #16]
 800aaf4:	464a      	mov	r2, r9
 800aaf6:	f7fe fcd4 	bl	80094a2 <memcpy>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	6126      	str	r6, [r4, #16]
 800ab08:	6165      	str	r5, [r4, #20]
 800ab0a:	444e      	add	r6, r9
 800ab0c:	eba5 0509 	sub.w	r5, r5, r9
 800ab10:	6026      	str	r6, [r4, #0]
 800ab12:	60a5      	str	r5, [r4, #8]
 800ab14:	463e      	mov	r6, r7
 800ab16:	42be      	cmp	r6, r7
 800ab18:	d900      	bls.n	800ab1c <__ssputs_r+0x70>
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	4632      	mov	r2, r6
 800ab20:	4641      	mov	r1, r8
 800ab22:	f000 f9c9 	bl	800aeb8 <memmove>
 800ab26:	68a3      	ldr	r3, [r4, #8]
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	60a3      	str	r3, [r4, #8]
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	4433      	add	r3, r6
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	2000      	movs	r0, #0
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	462a      	mov	r2, r5
 800ab3a:	f000 fa2d 	bl	800af98 <_realloc_r>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1e0      	bne.n	800ab06 <__ssputs_r+0x5a>
 800ab44:	6921      	ldr	r1, [r4, #16]
 800ab46:	4650      	mov	r0, sl
 800ab48:	f7ff fb34 	bl	800a1b4 <_free_r>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	f8ca 3000 	str.w	r3, [sl]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5e:	e7e9      	b.n	800ab34 <__ssputs_r+0x88>

0800ab60 <_svfiprintf_r>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4698      	mov	r8, r3
 800ab66:	898b      	ldrh	r3, [r1, #12]
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	b09d      	sub	sp, #116	; 0x74
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4614      	mov	r4, r2
 800ab72:	d50e      	bpl.n	800ab92 <_svfiprintf_r+0x32>
 800ab74:	690b      	ldr	r3, [r1, #16]
 800ab76:	b963      	cbnz	r3, 800ab92 <_svfiprintf_r+0x32>
 800ab78:	2140      	movs	r1, #64	; 0x40
 800ab7a:	f7ff fb8f 	bl	800a29c <_malloc_r>
 800ab7e:	6028      	str	r0, [r5, #0]
 800ab80:	6128      	str	r0, [r5, #16]
 800ab82:	b920      	cbnz	r0, 800ab8e <_svfiprintf_r+0x2e>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e0d0      	b.n	800ad30 <_svfiprintf_r+0x1d0>
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	616b      	str	r3, [r5, #20]
 800ab92:	2300      	movs	r3, #0
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	2320      	movs	r3, #32
 800ab98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba0:	2330      	movs	r3, #48	; 0x30
 800aba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad48 <_svfiprintf_r+0x1e8>
 800aba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abaa:	f04f 0901 	mov.w	r9, #1
 800abae:	4623      	mov	r3, r4
 800abb0:	469a      	mov	sl, r3
 800abb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb6:	b10a      	cbz	r2, 800abbc <_svfiprintf_r+0x5c>
 800abb8:	2a25      	cmp	r2, #37	; 0x25
 800abba:	d1f9      	bne.n	800abb0 <_svfiprintf_r+0x50>
 800abbc:	ebba 0b04 	subs.w	fp, sl, r4
 800abc0:	d00b      	beq.n	800abda <_svfiprintf_r+0x7a>
 800abc2:	465b      	mov	r3, fp
 800abc4:	4622      	mov	r2, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ff6f 	bl	800aaac <__ssputs_r>
 800abce:	3001      	adds	r0, #1
 800abd0:	f000 80a9 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd6:	445a      	add	r2, fp
 800abd8:	9209      	str	r2, [sp, #36]	; 0x24
 800abda:	f89a 3000 	ldrb.w	r3, [sl]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80a1 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abee:	f10a 0a01 	add.w	sl, sl, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	9307      	str	r3, [sp, #28]
 800abf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abfa:	931a      	str	r3, [sp, #104]	; 0x68
 800abfc:	4654      	mov	r4, sl
 800abfe:	2205      	movs	r2, #5
 800ac00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac04:	4850      	ldr	r0, [pc, #320]	; (800ad48 <_svfiprintf_r+0x1e8>)
 800ac06:	f7f5 fae3 	bl	80001d0 <memchr>
 800ac0a:	9a04      	ldr	r2, [sp, #16]
 800ac0c:	b9d8      	cbnz	r0, 800ac46 <_svfiprintf_r+0xe6>
 800ac0e:	06d0      	lsls	r0, r2, #27
 800ac10:	bf44      	itt	mi
 800ac12:	2320      	movmi	r3, #32
 800ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac18:	0711      	lsls	r1, r2, #28
 800ac1a:	bf44      	itt	mi
 800ac1c:	232b      	movmi	r3, #43	; 0x2b
 800ac1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac22:	f89a 3000 	ldrb.w	r3, [sl]
 800ac26:	2b2a      	cmp	r3, #42	; 0x2a
 800ac28:	d015      	beq.n	800ac56 <_svfiprintf_r+0xf6>
 800ac2a:	9a07      	ldr	r2, [sp, #28]
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f04f 0c0a 	mov.w	ip, #10
 800ac34:	4621      	mov	r1, r4
 800ac36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3a:	3b30      	subs	r3, #48	; 0x30
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d94d      	bls.n	800acdc <_svfiprintf_r+0x17c>
 800ac40:	b1b0      	cbz	r0, 800ac70 <_svfiprintf_r+0x110>
 800ac42:	9207      	str	r2, [sp, #28]
 800ac44:	e014      	b.n	800ac70 <_svfiprintf_r+0x110>
 800ac46:	eba0 0308 	sub.w	r3, r0, r8
 800ac4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	46a2      	mov	sl, r4
 800ac54:	e7d2      	b.n	800abfc <_svfiprintf_r+0x9c>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d19      	adds	r1, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9103      	str	r1, [sp, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfbb      	ittet	lt
 800ac62:	425b      	neglt	r3, r3
 800ac64:	f042 0202 	orrlt.w	r2, r2, #2
 800ac68:	9307      	strge	r3, [sp, #28]
 800ac6a:	9307      	strlt	r3, [sp, #28]
 800ac6c:	bfb8      	it	lt
 800ac6e:	9204      	strlt	r2, [sp, #16]
 800ac70:	7823      	ldrb	r3, [r4, #0]
 800ac72:	2b2e      	cmp	r3, #46	; 0x2e
 800ac74:	d10c      	bne.n	800ac90 <_svfiprintf_r+0x130>
 800ac76:	7863      	ldrb	r3, [r4, #1]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d134      	bne.n	800ace6 <_svfiprintf_r+0x186>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	9203      	str	r2, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb8      	it	lt
 800ac88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac8c:	3402      	adds	r4, #2
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad58 <_svfiprintf_r+0x1f8>
 800ac94:	7821      	ldrb	r1, [r4, #0]
 800ac96:	2203      	movs	r2, #3
 800ac98:	4650      	mov	r0, sl
 800ac9a:	f7f5 fa99 	bl	80001d0 <memchr>
 800ac9e:	b138      	cbz	r0, 800acb0 <_svfiprintf_r+0x150>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	eba0 000a 	sub.w	r0, r0, sl
 800aca6:	2240      	movs	r2, #64	; 0x40
 800aca8:	4082      	lsls	r2, r0
 800acaa:	4313      	orrs	r3, r2
 800acac:	3401      	adds	r4, #1
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	4825      	ldr	r0, [pc, #148]	; (800ad4c <_svfiprintf_r+0x1ec>)
 800acb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acba:	2206      	movs	r2, #6
 800acbc:	f7f5 fa88 	bl	80001d0 <memchr>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d038      	beq.n	800ad36 <_svfiprintf_r+0x1d6>
 800acc4:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <_svfiprintf_r+0x1f0>)
 800acc6:	bb1b      	cbnz	r3, 800ad10 <_svfiprintf_r+0x1b0>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	3307      	adds	r3, #7
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	3308      	adds	r3, #8
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	4433      	add	r3, r6
 800acd8:	9309      	str	r3, [sp, #36]	; 0x24
 800acda:	e768      	b.n	800abae <_svfiprintf_r+0x4e>
 800acdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace0:	460c      	mov	r4, r1
 800ace2:	2001      	movs	r0, #1
 800ace4:	e7a6      	b.n	800ac34 <_svfiprintf_r+0xd4>
 800ace6:	2300      	movs	r3, #0
 800ace8:	3401      	adds	r4, #1
 800acea:	9305      	str	r3, [sp, #20]
 800acec:	4619      	mov	r1, r3
 800acee:	f04f 0c0a 	mov.w	ip, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf8:	3a30      	subs	r2, #48	; 0x30
 800acfa:	2a09      	cmp	r2, #9
 800acfc:	d903      	bls.n	800ad06 <_svfiprintf_r+0x1a6>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c6      	beq.n	800ac90 <_svfiprintf_r+0x130>
 800ad02:	9105      	str	r1, [sp, #20]
 800ad04:	e7c4      	b.n	800ac90 <_svfiprintf_r+0x130>
 800ad06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e7f0      	b.n	800acf2 <_svfiprintf_r+0x192>
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <_svfiprintf_r+0x1f4>)
 800ad18:	a904      	add	r1, sp, #16
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f7fd fe4e 	bl	80089bc <_printf_float>
 800ad20:	1c42      	adds	r2, r0, #1
 800ad22:	4606      	mov	r6, r0
 800ad24:	d1d6      	bne.n	800acd4 <_svfiprintf_r+0x174>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	065b      	lsls	r3, r3, #25
 800ad2a:	f53f af2d 	bmi.w	800ab88 <_svfiprintf_r+0x28>
 800ad2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad30:	b01d      	add	sp, #116	; 0x74
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <_svfiprintf_r+0x1f4>)
 800ad3e:	a904      	add	r1, sp, #16
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7fe f8df 	bl	8008f04 <_printf_i>
 800ad46:	e7eb      	b.n	800ad20 <_svfiprintf_r+0x1c0>
 800ad48:	0800bf7c 	.word	0x0800bf7c
 800ad4c:	0800bf86 	.word	0x0800bf86
 800ad50:	080089bd 	.word	0x080089bd
 800ad54:	0800aaad 	.word	0x0800aaad
 800ad58:	0800bf82 	.word	0x0800bf82

0800ad5c <__sflush_r>:
 800ad5c:	898a      	ldrh	r2, [r1, #12]
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	0710      	lsls	r0, r2, #28
 800ad66:	460c      	mov	r4, r1
 800ad68:	d458      	bmi.n	800ae1c <__sflush_r+0xc0>
 800ad6a:	684b      	ldr	r3, [r1, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dc05      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc02      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d0f9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad88:	682f      	ldr	r7, [r5, #0]
 800ad8a:	6a21      	ldr	r1, [r4, #32]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	d032      	beq.n	800adf6 <__sflush_r+0x9a>
 800ad90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	075a      	lsls	r2, r3, #29
 800ad96:	d505      	bpl.n	800ada4 <__sflush_r+0x48>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	1ac0      	subs	r0, r0, r3
 800ad9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad9e:	b10b      	cbz	r3, 800ada4 <__sflush_r+0x48>
 800ada0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	4602      	mov	r2, r0
 800ada8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adaa:	6a21      	ldr	r1, [r4, #32]
 800adac:	4628      	mov	r0, r5
 800adae:	47b0      	blx	r6
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	d106      	bne.n	800adc4 <__sflush_r+0x68>
 800adb6:	6829      	ldr	r1, [r5, #0]
 800adb8:	291d      	cmp	r1, #29
 800adba:	d82b      	bhi.n	800ae14 <__sflush_r+0xb8>
 800adbc:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <__sflush_r+0x108>)
 800adbe:	410a      	asrs	r2, r1
 800adc0:	07d6      	lsls	r6, r2, #31
 800adc2:	d427      	bmi.n	800ae14 <__sflush_r+0xb8>
 800adc4:	2200      	movs	r2, #0
 800adc6:	6062      	str	r2, [r4, #4]
 800adc8:	04d9      	lsls	r1, r3, #19
 800adca:	6922      	ldr	r2, [r4, #16]
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	d504      	bpl.n	800adda <__sflush_r+0x7e>
 800add0:	1c42      	adds	r2, r0, #1
 800add2:	d101      	bne.n	800add8 <__sflush_r+0x7c>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b903      	cbnz	r3, 800adda <__sflush_r+0x7e>
 800add8:	6560      	str	r0, [r4, #84]	; 0x54
 800adda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800addc:	602f      	str	r7, [r5, #0]
 800adde:	2900      	cmp	r1, #0
 800ade0:	d0c9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ade2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade6:	4299      	cmp	r1, r3
 800ade8:	d002      	beq.n	800adf0 <__sflush_r+0x94>
 800adea:	4628      	mov	r0, r5
 800adec:	f7ff f9e2 	bl	800a1b4 <_free_r>
 800adf0:	2000      	movs	r0, #0
 800adf2:	6360      	str	r0, [r4, #52]	; 0x34
 800adf4:	e7c0      	b.n	800ad78 <__sflush_r+0x1c>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b0      	blx	r6
 800adfc:	1c41      	adds	r1, r0, #1
 800adfe:	d1c8      	bne.n	800ad92 <__sflush_r+0x36>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0c5      	beq.n	800ad92 <__sflush_r+0x36>
 800ae06:	2b1d      	cmp	r3, #29
 800ae08:	d001      	beq.n	800ae0e <__sflush_r+0xb2>
 800ae0a:	2b16      	cmp	r3, #22
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0xb6>
 800ae0e:	602f      	str	r7, [r5, #0]
 800ae10:	e7b1      	b.n	800ad76 <__sflush_r+0x1a>
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e7ad      	b.n	800ad78 <__sflush_r+0x1c>
 800ae1c:	690f      	ldr	r7, [r1, #16]
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	d0a9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ae22:	0793      	lsls	r3, r2, #30
 800ae24:	680e      	ldr	r6, [r1, #0]
 800ae26:	bf08      	it	eq
 800ae28:	694b      	ldreq	r3, [r1, #20]
 800ae2a:	600f      	str	r7, [r1, #0]
 800ae2c:	bf18      	it	ne
 800ae2e:	2300      	movne	r3, #0
 800ae30:	eba6 0807 	sub.w	r8, r6, r7
 800ae34:	608b      	str	r3, [r1, #8]
 800ae36:	f1b8 0f00 	cmp.w	r8, #0
 800ae3a:	dd9c      	ble.n	800ad76 <__sflush_r+0x1a>
 800ae3c:	6a21      	ldr	r1, [r4, #32]
 800ae3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae40:	4643      	mov	r3, r8
 800ae42:	463a      	mov	r2, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b0      	blx	r6
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	dc06      	bgt.n	800ae5a <__sflush_r+0xfe>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e78e      	b.n	800ad78 <__sflush_r+0x1c>
 800ae5a:	4407      	add	r7, r0
 800ae5c:	eba8 0800 	sub.w	r8, r8, r0
 800ae60:	e7e9      	b.n	800ae36 <__sflush_r+0xda>
 800ae62:	bf00      	nop
 800ae64:	dfbffffe 	.word	0xdfbffffe

0800ae68 <_fflush_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	690b      	ldr	r3, [r1, #16]
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	b913      	cbnz	r3, 800ae78 <_fflush_r+0x10>
 800ae72:	2500      	movs	r5, #0
 800ae74:	4628      	mov	r0, r5
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	b118      	cbz	r0, 800ae82 <_fflush_r+0x1a>
 800ae7a:	6a03      	ldr	r3, [r0, #32]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <_fflush_r+0x1a>
 800ae7e:	f7fe f9ef 	bl	8009260 <__sinit>
 800ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f3      	beq.n	800ae72 <_fflush_r+0xa>
 800ae8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae8c:	07d0      	lsls	r0, r2, #31
 800ae8e:	d404      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae90:	0599      	lsls	r1, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae96:	f7fe fafa 	bl	800948e <__retarget_lock_acquire_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f7ff ff5d 	bl	800ad5c <__sflush_r>
 800aea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea4:	07da      	lsls	r2, r3, #31
 800aea6:	4605      	mov	r5, r0
 800aea8:	d4e4      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	059b      	lsls	r3, r3, #22
 800aeae:	d4e1      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb2:	f7fe faed 	bl	8009490 <__retarget_lock_release_recursive>
 800aeb6:	e7dd      	b.n	800ae74 <_fflush_r+0xc>

0800aeb8 <memmove>:
 800aeb8:	4288      	cmp	r0, r1
 800aeba:	b510      	push	{r4, lr}
 800aebc:	eb01 0402 	add.w	r4, r1, r2
 800aec0:	d902      	bls.n	800aec8 <memmove+0x10>
 800aec2:	4284      	cmp	r4, r0
 800aec4:	4623      	mov	r3, r4
 800aec6:	d807      	bhi.n	800aed8 <memmove+0x20>
 800aec8:	1e43      	subs	r3, r0, #1
 800aeca:	42a1      	cmp	r1, r4
 800aecc:	d008      	beq.n	800aee0 <memmove+0x28>
 800aece:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aed6:	e7f8      	b.n	800aeca <memmove+0x12>
 800aed8:	4402      	add	r2, r0
 800aeda:	4601      	mov	r1, r0
 800aedc:	428a      	cmp	r2, r1
 800aede:	d100      	bne.n	800aee2 <memmove+0x2a>
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeea:	e7f7      	b.n	800aedc <memmove+0x24>

0800aeec <_sbrk_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_sbrk_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f8 faf4 	bl	80034e4 <_sbrk>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_sbrk_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_sbrk_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	2000484c 	.word	0x2000484c

0800af0c <__assert_func>:
 800af0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af0e:	4614      	mov	r4, r2
 800af10:	461a      	mov	r2, r3
 800af12:	4b09      	ldr	r3, [pc, #36]	; (800af38 <__assert_func+0x2c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4605      	mov	r5, r0
 800af18:	68d8      	ldr	r0, [r3, #12]
 800af1a:	b14c      	cbz	r4, 800af30 <__assert_func+0x24>
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <__assert_func+0x30>)
 800af1e:	9100      	str	r1, [sp, #0]
 800af20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af24:	4906      	ldr	r1, [pc, #24]	; (800af40 <__assert_func+0x34>)
 800af26:	462b      	mov	r3, r5
 800af28:	f000 f872 	bl	800b010 <fiprintf>
 800af2c:	f000 f882 	bl	800b034 <abort>
 800af30:	4b04      	ldr	r3, [pc, #16]	; (800af44 <__assert_func+0x38>)
 800af32:	461c      	mov	r4, r3
 800af34:	e7f3      	b.n	800af1e <__assert_func+0x12>
 800af36:	bf00      	nop
 800af38:	20000100 	.word	0x20000100
 800af3c:	0800bf97 	.word	0x0800bf97
 800af40:	0800bfa4 	.word	0x0800bfa4
 800af44:	0800bfd2 	.word	0x0800bfd2

0800af48 <_calloc_r>:
 800af48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af4a:	fba1 2402 	umull	r2, r4, r1, r2
 800af4e:	b94c      	cbnz	r4, 800af64 <_calloc_r+0x1c>
 800af50:	4611      	mov	r1, r2
 800af52:	9201      	str	r2, [sp, #4]
 800af54:	f7ff f9a2 	bl	800a29c <_malloc_r>
 800af58:	9a01      	ldr	r2, [sp, #4]
 800af5a:	4605      	mov	r5, r0
 800af5c:	b930      	cbnz	r0, 800af6c <_calloc_r+0x24>
 800af5e:	4628      	mov	r0, r5
 800af60:	b003      	add	sp, #12
 800af62:	bd30      	pop	{r4, r5, pc}
 800af64:	220c      	movs	r2, #12
 800af66:	6002      	str	r2, [r0, #0]
 800af68:	2500      	movs	r5, #0
 800af6a:	e7f8      	b.n	800af5e <_calloc_r+0x16>
 800af6c:	4621      	mov	r1, r4
 800af6e:	f7fe fa10 	bl	8009392 <memset>
 800af72:	e7f4      	b.n	800af5e <_calloc_r+0x16>

0800af74 <__ascii_mbtowc>:
 800af74:	b082      	sub	sp, #8
 800af76:	b901      	cbnz	r1, 800af7a <__ascii_mbtowc+0x6>
 800af78:	a901      	add	r1, sp, #4
 800af7a:	b142      	cbz	r2, 800af8e <__ascii_mbtowc+0x1a>
 800af7c:	b14b      	cbz	r3, 800af92 <__ascii_mbtowc+0x1e>
 800af7e:	7813      	ldrb	r3, [r2, #0]
 800af80:	600b      	str	r3, [r1, #0]
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	1e10      	subs	r0, r2, #0
 800af86:	bf18      	it	ne
 800af88:	2001      	movne	r0, #1
 800af8a:	b002      	add	sp, #8
 800af8c:	4770      	bx	lr
 800af8e:	4610      	mov	r0, r2
 800af90:	e7fb      	b.n	800af8a <__ascii_mbtowc+0x16>
 800af92:	f06f 0001 	mvn.w	r0, #1
 800af96:	e7f8      	b.n	800af8a <__ascii_mbtowc+0x16>

0800af98 <_realloc_r>:
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9c:	4680      	mov	r8, r0
 800af9e:	4614      	mov	r4, r2
 800afa0:	460e      	mov	r6, r1
 800afa2:	b921      	cbnz	r1, 800afae <_realloc_r+0x16>
 800afa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	4611      	mov	r1, r2
 800afaa:	f7ff b977 	b.w	800a29c <_malloc_r>
 800afae:	b92a      	cbnz	r2, 800afbc <_realloc_r+0x24>
 800afb0:	f7ff f900 	bl	800a1b4 <_free_r>
 800afb4:	4625      	mov	r5, r4
 800afb6:	4628      	mov	r0, r5
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	f000 f841 	bl	800b042 <_malloc_usable_size_r>
 800afc0:	4284      	cmp	r4, r0
 800afc2:	4607      	mov	r7, r0
 800afc4:	d802      	bhi.n	800afcc <_realloc_r+0x34>
 800afc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afca:	d812      	bhi.n	800aff2 <_realloc_r+0x5a>
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7ff f964 	bl	800a29c <_malloc_r>
 800afd4:	4605      	mov	r5, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d0ed      	beq.n	800afb6 <_realloc_r+0x1e>
 800afda:	42bc      	cmp	r4, r7
 800afdc:	4622      	mov	r2, r4
 800afde:	4631      	mov	r1, r6
 800afe0:	bf28      	it	cs
 800afe2:	463a      	movcs	r2, r7
 800afe4:	f7fe fa5d 	bl	80094a2 <memcpy>
 800afe8:	4631      	mov	r1, r6
 800afea:	4640      	mov	r0, r8
 800afec:	f7ff f8e2 	bl	800a1b4 <_free_r>
 800aff0:	e7e1      	b.n	800afb6 <_realloc_r+0x1e>
 800aff2:	4635      	mov	r5, r6
 800aff4:	e7df      	b.n	800afb6 <_realloc_r+0x1e>

0800aff6 <__ascii_wctomb>:
 800aff6:	b149      	cbz	r1, 800b00c <__ascii_wctomb+0x16>
 800aff8:	2aff      	cmp	r2, #255	; 0xff
 800affa:	bf85      	ittet	hi
 800affc:	238a      	movhi	r3, #138	; 0x8a
 800affe:	6003      	strhi	r3, [r0, #0]
 800b000:	700a      	strbls	r2, [r1, #0]
 800b002:	f04f 30ff 	movhi.w	r0, #4294967295
 800b006:	bf98      	it	ls
 800b008:	2001      	movls	r0, #1
 800b00a:	4770      	bx	lr
 800b00c:	4608      	mov	r0, r1
 800b00e:	4770      	bx	lr

0800b010 <fiprintf>:
 800b010:	b40e      	push	{r1, r2, r3}
 800b012:	b503      	push	{r0, r1, lr}
 800b014:	4601      	mov	r1, r0
 800b016:	ab03      	add	r3, sp, #12
 800b018:	4805      	ldr	r0, [pc, #20]	; (800b030 <fiprintf+0x20>)
 800b01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b01e:	6800      	ldr	r0, [r0, #0]
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	f000 f83f 	bl	800b0a4 <_vfiprintf_r>
 800b026:	b002      	add	sp, #8
 800b028:	f85d eb04 	ldr.w	lr, [sp], #4
 800b02c:	b003      	add	sp, #12
 800b02e:	4770      	bx	lr
 800b030:	20000100 	.word	0x20000100

0800b034 <abort>:
 800b034:	b508      	push	{r3, lr}
 800b036:	2006      	movs	r0, #6
 800b038:	f000 fa0c 	bl	800b454 <raise>
 800b03c:	2001      	movs	r0, #1
 800b03e:	f7f8 f9d9 	bl	80033f4 <_exit>

0800b042 <_malloc_usable_size_r>:
 800b042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b046:	1f18      	subs	r0, r3, #4
 800b048:	2b00      	cmp	r3, #0
 800b04a:	bfbc      	itt	lt
 800b04c:	580b      	ldrlt	r3, [r1, r0]
 800b04e:	18c0      	addlt	r0, r0, r3
 800b050:	4770      	bx	lr

0800b052 <__sfputc_r>:
 800b052:	6893      	ldr	r3, [r2, #8]
 800b054:	3b01      	subs	r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	b410      	push	{r4}
 800b05a:	6093      	str	r3, [r2, #8]
 800b05c:	da08      	bge.n	800b070 <__sfputc_r+0x1e>
 800b05e:	6994      	ldr	r4, [r2, #24]
 800b060:	42a3      	cmp	r3, r4
 800b062:	db01      	blt.n	800b068 <__sfputc_r+0x16>
 800b064:	290a      	cmp	r1, #10
 800b066:	d103      	bne.n	800b070 <__sfputc_r+0x1e>
 800b068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b06c:	f000 b934 	b.w	800b2d8 <__swbuf_r>
 800b070:	6813      	ldr	r3, [r2, #0]
 800b072:	1c58      	adds	r0, r3, #1
 800b074:	6010      	str	r0, [r2, #0]
 800b076:	7019      	strb	r1, [r3, #0]
 800b078:	4608      	mov	r0, r1
 800b07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <__sfputs_r>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	4614      	mov	r4, r2
 800b088:	18d5      	adds	r5, r2, r3
 800b08a:	42ac      	cmp	r4, r5
 800b08c:	d101      	bne.n	800b092 <__sfputs_r+0x12>
 800b08e:	2000      	movs	r0, #0
 800b090:	e007      	b.n	800b0a2 <__sfputs_r+0x22>
 800b092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b096:	463a      	mov	r2, r7
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff ffda 	bl	800b052 <__sfputc_r>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d1f3      	bne.n	800b08a <__sfputs_r+0xa>
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0a4 <_vfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	b09d      	sub	sp, #116	; 0x74
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	4698      	mov	r8, r3
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	b118      	cbz	r0, 800b0bc <_vfiprintf_r+0x18>
 800b0b4:	6a03      	ldr	r3, [r0, #32]
 800b0b6:	b90b      	cbnz	r3, 800b0bc <_vfiprintf_r+0x18>
 800b0b8:	f7fe f8d2 	bl	8009260 <__sinit>
 800b0bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	d405      	bmi.n	800b0ce <_vfiprintf_r+0x2a>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	059a      	lsls	r2, r3, #22
 800b0c6:	d402      	bmi.n	800b0ce <_vfiprintf_r+0x2a>
 800b0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ca:	f7fe f9e0 	bl	800948e <__retarget_lock_acquire_recursive>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	071b      	lsls	r3, r3, #28
 800b0d2:	d501      	bpl.n	800b0d8 <_vfiprintf_r+0x34>
 800b0d4:	692b      	ldr	r3, [r5, #16]
 800b0d6:	b99b      	cbnz	r3, 800b100 <_vfiprintf_r+0x5c>
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f000 f93a 	bl	800b354 <__swsetup_r>
 800b0e0:	b170      	cbz	r0, 800b100 <_vfiprintf_r+0x5c>
 800b0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e4:	07dc      	lsls	r4, r3, #31
 800b0e6:	d504      	bpl.n	800b0f2 <_vfiprintf_r+0x4e>
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ec:	b01d      	add	sp, #116	; 0x74
 800b0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	0598      	lsls	r0, r3, #22
 800b0f6:	d4f7      	bmi.n	800b0e8 <_vfiprintf_r+0x44>
 800b0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0fa:	f7fe f9c9 	bl	8009490 <__retarget_lock_release_recursive>
 800b0fe:	e7f3      	b.n	800b0e8 <_vfiprintf_r+0x44>
 800b100:	2300      	movs	r3, #0
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
 800b104:	2320      	movs	r3, #32
 800b106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b10e:	2330      	movs	r3, #48	; 0x30
 800b110:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2c4 <_vfiprintf_r+0x220>
 800b114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b118:	f04f 0901 	mov.w	r9, #1
 800b11c:	4623      	mov	r3, r4
 800b11e:	469a      	mov	sl, r3
 800b120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b124:	b10a      	cbz	r2, 800b12a <_vfiprintf_r+0x86>
 800b126:	2a25      	cmp	r2, #37	; 0x25
 800b128:	d1f9      	bne.n	800b11e <_vfiprintf_r+0x7a>
 800b12a:	ebba 0b04 	subs.w	fp, sl, r4
 800b12e:	d00b      	beq.n	800b148 <_vfiprintf_r+0xa4>
 800b130:	465b      	mov	r3, fp
 800b132:	4622      	mov	r2, r4
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ffa2 	bl	800b080 <__sfputs_r>
 800b13c:	3001      	adds	r0, #1
 800b13e:	f000 80a9 	beq.w	800b294 <_vfiprintf_r+0x1f0>
 800b142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b144:	445a      	add	r2, fp
 800b146:	9209      	str	r2, [sp, #36]	; 0x24
 800b148:	f89a 3000 	ldrb.w	r3, [sl]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 80a1 	beq.w	800b294 <_vfiprintf_r+0x1f0>
 800b152:	2300      	movs	r3, #0
 800b154:	f04f 32ff 	mov.w	r2, #4294967295
 800b158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b15c:	f10a 0a01 	add.w	sl, sl, #1
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	9307      	str	r3, [sp, #28]
 800b164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b168:	931a      	str	r3, [sp, #104]	; 0x68
 800b16a:	4654      	mov	r4, sl
 800b16c:	2205      	movs	r2, #5
 800b16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b172:	4854      	ldr	r0, [pc, #336]	; (800b2c4 <_vfiprintf_r+0x220>)
 800b174:	f7f5 f82c 	bl	80001d0 <memchr>
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	b9d8      	cbnz	r0, 800b1b4 <_vfiprintf_r+0x110>
 800b17c:	06d1      	lsls	r1, r2, #27
 800b17e:	bf44      	itt	mi
 800b180:	2320      	movmi	r3, #32
 800b182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b186:	0713      	lsls	r3, r2, #28
 800b188:	bf44      	itt	mi
 800b18a:	232b      	movmi	r3, #43	; 0x2b
 800b18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b190:	f89a 3000 	ldrb.w	r3, [sl]
 800b194:	2b2a      	cmp	r3, #42	; 0x2a
 800b196:	d015      	beq.n	800b1c4 <_vfiprintf_r+0x120>
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	4654      	mov	r4, sl
 800b19c:	2000      	movs	r0, #0
 800b19e:	f04f 0c0a 	mov.w	ip, #10
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a8:	3b30      	subs	r3, #48	; 0x30
 800b1aa:	2b09      	cmp	r3, #9
 800b1ac:	d94d      	bls.n	800b24a <_vfiprintf_r+0x1a6>
 800b1ae:	b1b0      	cbz	r0, 800b1de <_vfiprintf_r+0x13a>
 800b1b0:	9207      	str	r2, [sp, #28]
 800b1b2:	e014      	b.n	800b1de <_vfiprintf_r+0x13a>
 800b1b4:	eba0 0308 	sub.w	r3, r0, r8
 800b1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	46a2      	mov	sl, r4
 800b1c2:	e7d2      	b.n	800b16a <_vfiprintf_r+0xc6>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1d19      	adds	r1, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9103      	str	r1, [sp, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfbb      	ittet	lt
 800b1d0:	425b      	neglt	r3, r3
 800b1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d6:	9307      	strge	r3, [sp, #28]
 800b1d8:	9307      	strlt	r3, [sp, #28]
 800b1da:	bfb8      	it	lt
 800b1dc:	9204      	strlt	r2, [sp, #16]
 800b1de:	7823      	ldrb	r3, [r4, #0]
 800b1e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e2:	d10c      	bne.n	800b1fe <_vfiprintf_r+0x15a>
 800b1e4:	7863      	ldrb	r3, [r4, #1]
 800b1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e8:	d134      	bne.n	800b254 <_vfiprintf_r+0x1b0>
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	1d1a      	adds	r2, r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	9203      	str	r2, [sp, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfb8      	it	lt
 800b1f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1fa:	3402      	adds	r4, #2
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b2d4 <_vfiprintf_r+0x230>
 800b202:	7821      	ldrb	r1, [r4, #0]
 800b204:	2203      	movs	r2, #3
 800b206:	4650      	mov	r0, sl
 800b208:	f7f4 ffe2 	bl	80001d0 <memchr>
 800b20c:	b138      	cbz	r0, 800b21e <_vfiprintf_r+0x17a>
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	eba0 000a 	sub.w	r0, r0, sl
 800b214:	2240      	movs	r2, #64	; 0x40
 800b216:	4082      	lsls	r2, r0
 800b218:	4313      	orrs	r3, r2
 800b21a:	3401      	adds	r4, #1
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4829      	ldr	r0, [pc, #164]	; (800b2c8 <_vfiprintf_r+0x224>)
 800b224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b228:	2206      	movs	r2, #6
 800b22a:	f7f4 ffd1 	bl	80001d0 <memchr>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d03f      	beq.n	800b2b2 <_vfiprintf_r+0x20e>
 800b232:	4b26      	ldr	r3, [pc, #152]	; (800b2cc <_vfiprintf_r+0x228>)
 800b234:	bb1b      	cbnz	r3, 800b27e <_vfiprintf_r+0x1da>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	3307      	adds	r3, #7
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	3308      	adds	r3, #8
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b244:	443b      	add	r3, r7
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
 800b248:	e768      	b.n	800b11c <_vfiprintf_r+0x78>
 800b24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b24e:	460c      	mov	r4, r1
 800b250:	2001      	movs	r0, #1
 800b252:	e7a6      	b.n	800b1a2 <_vfiprintf_r+0xfe>
 800b254:	2300      	movs	r3, #0
 800b256:	3401      	adds	r4, #1
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	4619      	mov	r1, r3
 800b25c:	f04f 0c0a 	mov.w	ip, #10
 800b260:	4620      	mov	r0, r4
 800b262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b266:	3a30      	subs	r2, #48	; 0x30
 800b268:	2a09      	cmp	r2, #9
 800b26a:	d903      	bls.n	800b274 <_vfiprintf_r+0x1d0>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0c6      	beq.n	800b1fe <_vfiprintf_r+0x15a>
 800b270:	9105      	str	r1, [sp, #20]
 800b272:	e7c4      	b.n	800b1fe <_vfiprintf_r+0x15a>
 800b274:	fb0c 2101 	mla	r1, ip, r1, r2
 800b278:	4604      	mov	r4, r0
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7f0      	b.n	800b260 <_vfiprintf_r+0x1bc>
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	462a      	mov	r2, r5
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <_vfiprintf_r+0x22c>)
 800b286:	a904      	add	r1, sp, #16
 800b288:	4630      	mov	r0, r6
 800b28a:	f7fd fb97 	bl	80089bc <_printf_float>
 800b28e:	4607      	mov	r7, r0
 800b290:	1c78      	adds	r0, r7, #1
 800b292:	d1d6      	bne.n	800b242 <_vfiprintf_r+0x19e>
 800b294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b296:	07d9      	lsls	r1, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_vfiprintf_r+0x202>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	059a      	lsls	r2, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_vfiprintf_r+0x202>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a2:	f7fe f8f5 	bl	8009490 <__retarget_lock_release_recursive>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	065b      	lsls	r3, r3, #25
 800b2aa:	f53f af1d 	bmi.w	800b0e8 <_vfiprintf_r+0x44>
 800b2ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2b0:	e71c      	b.n	800b0ec <_vfiprintf_r+0x48>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <_vfiprintf_r+0x22c>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7fd fe21 	bl	8008f04 <_printf_i>
 800b2c2:	e7e4      	b.n	800b28e <_vfiprintf_r+0x1ea>
 800b2c4:	0800bf7c 	.word	0x0800bf7c
 800b2c8:	0800bf86 	.word	0x0800bf86
 800b2cc:	080089bd 	.word	0x080089bd
 800b2d0:	0800b081 	.word	0x0800b081
 800b2d4:	0800bf82 	.word	0x0800bf82

0800b2d8 <__swbuf_r>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	460e      	mov	r6, r1
 800b2dc:	4614      	mov	r4, r2
 800b2de:	4605      	mov	r5, r0
 800b2e0:	b118      	cbz	r0, 800b2ea <__swbuf_r+0x12>
 800b2e2:	6a03      	ldr	r3, [r0, #32]
 800b2e4:	b90b      	cbnz	r3, 800b2ea <__swbuf_r+0x12>
 800b2e6:	f7fd ffbb 	bl	8009260 <__sinit>
 800b2ea:	69a3      	ldr	r3, [r4, #24]
 800b2ec:	60a3      	str	r3, [r4, #8]
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	071a      	lsls	r2, r3, #28
 800b2f2:	d525      	bpl.n	800b340 <__swbuf_r+0x68>
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	b31b      	cbz	r3, 800b340 <__swbuf_r+0x68>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	6922      	ldr	r2, [r4, #16]
 800b2fc:	1a98      	subs	r0, r3, r2
 800b2fe:	6963      	ldr	r3, [r4, #20]
 800b300:	b2f6      	uxtb	r6, r6
 800b302:	4283      	cmp	r3, r0
 800b304:	4637      	mov	r7, r6
 800b306:	dc04      	bgt.n	800b312 <__swbuf_r+0x3a>
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f7ff fdac 	bl	800ae68 <_fflush_r>
 800b310:	b9e0      	cbnz	r0, 800b34c <__swbuf_r+0x74>
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	3b01      	subs	r3, #1
 800b316:	60a3      	str	r3, [r4, #8]
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	6022      	str	r2, [r4, #0]
 800b31e:	701e      	strb	r6, [r3, #0]
 800b320:	6962      	ldr	r2, [r4, #20]
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	429a      	cmp	r2, r3
 800b326:	d004      	beq.n	800b332 <__swbuf_r+0x5a>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	07db      	lsls	r3, r3, #31
 800b32c:	d506      	bpl.n	800b33c <__swbuf_r+0x64>
 800b32e:	2e0a      	cmp	r6, #10
 800b330:	d104      	bne.n	800b33c <__swbuf_r+0x64>
 800b332:	4621      	mov	r1, r4
 800b334:	4628      	mov	r0, r5
 800b336:	f7ff fd97 	bl	800ae68 <_fflush_r>
 800b33a:	b938      	cbnz	r0, 800b34c <__swbuf_r+0x74>
 800b33c:	4638      	mov	r0, r7
 800b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f000 f806 	bl	800b354 <__swsetup_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0d5      	beq.n	800b2f8 <__swbuf_r+0x20>
 800b34c:	f04f 37ff 	mov.w	r7, #4294967295
 800b350:	e7f4      	b.n	800b33c <__swbuf_r+0x64>
	...

0800b354 <__swsetup_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4b2a      	ldr	r3, [pc, #168]	; (800b400 <__swsetup_r+0xac>)
 800b358:	4605      	mov	r5, r0
 800b35a:	6818      	ldr	r0, [r3, #0]
 800b35c:	460c      	mov	r4, r1
 800b35e:	b118      	cbz	r0, 800b368 <__swsetup_r+0x14>
 800b360:	6a03      	ldr	r3, [r0, #32]
 800b362:	b90b      	cbnz	r3, 800b368 <__swsetup_r+0x14>
 800b364:	f7fd ff7c 	bl	8009260 <__sinit>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b36e:	0718      	lsls	r0, r3, #28
 800b370:	d422      	bmi.n	800b3b8 <__swsetup_r+0x64>
 800b372:	06d9      	lsls	r1, r3, #27
 800b374:	d407      	bmi.n	800b386 <__swsetup_r+0x32>
 800b376:	2309      	movs	r3, #9
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	e034      	b.n	800b3f0 <__swsetup_r+0x9c>
 800b386:	0758      	lsls	r0, r3, #29
 800b388:	d512      	bpl.n	800b3b0 <__swsetup_r+0x5c>
 800b38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38c:	b141      	cbz	r1, 800b3a0 <__swsetup_r+0x4c>
 800b38e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b392:	4299      	cmp	r1, r3
 800b394:	d002      	beq.n	800b39c <__swsetup_r+0x48>
 800b396:	4628      	mov	r0, r5
 800b398:	f7fe ff0c 	bl	800a1b4 <_free_r>
 800b39c:	2300      	movs	r3, #0
 800b39e:	6363      	str	r3, [r4, #52]	; 0x34
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	f043 0308 	orr.w	r3, r3, #8
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	b94b      	cbnz	r3, 800b3d0 <__swsetup_r+0x7c>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c6:	d003      	beq.n	800b3d0 <__swsetup_r+0x7c>
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f000 f884 	bl	800b4d8 <__smakebuf_r>
 800b3d0:	89a0      	ldrh	r0, [r4, #12]
 800b3d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d6:	f010 0301 	ands.w	r3, r0, #1
 800b3da:	d00a      	beq.n	800b3f2 <__swsetup_r+0x9e>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	60a3      	str	r3, [r4, #8]
 800b3e0:	6963      	ldr	r3, [r4, #20]
 800b3e2:	425b      	negs	r3, r3
 800b3e4:	61a3      	str	r3, [r4, #24]
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	b943      	cbnz	r3, 800b3fc <__swsetup_r+0xa8>
 800b3ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ee:	d1c4      	bne.n	800b37a <__swsetup_r+0x26>
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	0781      	lsls	r1, r0, #30
 800b3f4:	bf58      	it	pl
 800b3f6:	6963      	ldrpl	r3, [r4, #20]
 800b3f8:	60a3      	str	r3, [r4, #8]
 800b3fa:	e7f4      	b.n	800b3e6 <__swsetup_r+0x92>
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e7f7      	b.n	800b3f0 <__swsetup_r+0x9c>
 800b400:	20000100 	.word	0x20000100

0800b404 <_raise_r>:
 800b404:	291f      	cmp	r1, #31
 800b406:	b538      	push	{r3, r4, r5, lr}
 800b408:	4604      	mov	r4, r0
 800b40a:	460d      	mov	r5, r1
 800b40c:	d904      	bls.n	800b418 <_raise_r+0x14>
 800b40e:	2316      	movs	r3, #22
 800b410:	6003      	str	r3, [r0, #0]
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b41a:	b112      	cbz	r2, 800b422 <_raise_r+0x1e>
 800b41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b420:	b94b      	cbnz	r3, 800b436 <_raise_r+0x32>
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f830 	bl	800b488 <_getpid_r>
 800b428:	462a      	mov	r2, r5
 800b42a:	4601      	mov	r1, r0
 800b42c:	4620      	mov	r0, r4
 800b42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b432:	f000 b817 	b.w	800b464 <_kill_r>
 800b436:	2b01      	cmp	r3, #1
 800b438:	d00a      	beq.n	800b450 <_raise_r+0x4c>
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	d103      	bne.n	800b446 <_raise_r+0x42>
 800b43e:	2316      	movs	r3, #22
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	2001      	movs	r0, #1
 800b444:	e7e7      	b.n	800b416 <_raise_r+0x12>
 800b446:	2400      	movs	r4, #0
 800b448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b44c:	4628      	mov	r0, r5
 800b44e:	4798      	blx	r3
 800b450:	2000      	movs	r0, #0
 800b452:	e7e0      	b.n	800b416 <_raise_r+0x12>

0800b454 <raise>:
 800b454:	4b02      	ldr	r3, [pc, #8]	; (800b460 <raise+0xc>)
 800b456:	4601      	mov	r1, r0
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	f7ff bfd3 	b.w	800b404 <_raise_r>
 800b45e:	bf00      	nop
 800b460:	20000100 	.word	0x20000100

0800b464 <_kill_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4d07      	ldr	r5, [pc, #28]	; (800b484 <_kill_r+0x20>)
 800b468:	2300      	movs	r3, #0
 800b46a:	4604      	mov	r4, r0
 800b46c:	4608      	mov	r0, r1
 800b46e:	4611      	mov	r1, r2
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	f7f7 ffaf 	bl	80033d4 <_kill>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d102      	bne.n	800b480 <_kill_r+0x1c>
 800b47a:	682b      	ldr	r3, [r5, #0]
 800b47c:	b103      	cbz	r3, 800b480 <_kill_r+0x1c>
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	bd38      	pop	{r3, r4, r5, pc}
 800b482:	bf00      	nop
 800b484:	2000484c 	.word	0x2000484c

0800b488 <_getpid_r>:
 800b488:	f7f7 bf9c 	b.w	80033c4 <_getpid>

0800b48c <__swhatbuf_r>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	460c      	mov	r4, r1
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	2900      	cmp	r1, #0
 800b496:	b096      	sub	sp, #88	; 0x58
 800b498:	4615      	mov	r5, r2
 800b49a:	461e      	mov	r6, r3
 800b49c:	da0d      	bge.n	800b4ba <__swhatbuf_r+0x2e>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4a4:	f04f 0100 	mov.w	r1, #0
 800b4a8:	bf0c      	ite	eq
 800b4aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b4ae:	2340      	movne	r3, #64	; 0x40
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	6031      	str	r1, [r6, #0]
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	b016      	add	sp, #88	; 0x58
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	466a      	mov	r2, sp
 800b4bc:	f000 f848 	bl	800b550 <_fstat_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dbec      	blt.n	800b49e <__swhatbuf_r+0x12>
 800b4c4:	9901      	ldr	r1, [sp, #4]
 800b4c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b4ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b4ce:	4259      	negs	r1, r3
 800b4d0:	4159      	adcs	r1, r3
 800b4d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d6:	e7eb      	b.n	800b4b0 <__swhatbuf_r+0x24>

0800b4d8 <__smakebuf_r>:
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4dc:	079d      	lsls	r5, r3, #30
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	d507      	bpl.n	800b4f4 <__smakebuf_r+0x1c>
 800b4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	b002      	add	sp, #8
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	ab01      	add	r3, sp, #4
 800b4f6:	466a      	mov	r2, sp
 800b4f8:	f7ff ffc8 	bl	800b48c <__swhatbuf_r>
 800b4fc:	9900      	ldr	r1, [sp, #0]
 800b4fe:	4605      	mov	r5, r0
 800b500:	4630      	mov	r0, r6
 800b502:	f7fe fecb 	bl	800a29c <_malloc_r>
 800b506:	b948      	cbnz	r0, 800b51c <__smakebuf_r+0x44>
 800b508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50c:	059a      	lsls	r2, r3, #22
 800b50e:	d4ef      	bmi.n	800b4f0 <__smakebuf_r+0x18>
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7e3      	b.n	800b4e4 <__smakebuf_r+0xc>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	9b00      	ldr	r3, [sp, #0]
 800b528:	6163      	str	r3, [r4, #20]
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	6120      	str	r0, [r4, #16]
 800b52e:	b15b      	cbz	r3, 800b548 <__smakebuf_r+0x70>
 800b530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b534:	4630      	mov	r0, r6
 800b536:	f000 f81d 	bl	800b574 <_isatty_r>
 800b53a:	b128      	cbz	r0, 800b548 <__smakebuf_r+0x70>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	f043 0301 	orr.w	r3, r3, #1
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	431d      	orrs	r5, r3
 800b54c:	81a5      	strh	r5, [r4, #12]
 800b54e:	e7cf      	b.n	800b4f0 <__smakebuf_r+0x18>

0800b550 <_fstat_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	4d07      	ldr	r5, [pc, #28]	; (800b570 <_fstat_r+0x20>)
 800b554:	2300      	movs	r3, #0
 800b556:	4604      	mov	r4, r0
 800b558:	4608      	mov	r0, r1
 800b55a:	4611      	mov	r1, r2
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	f7f7 ff98 	bl	8003492 <_fstat>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	d102      	bne.n	800b56c <_fstat_r+0x1c>
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	b103      	cbz	r3, 800b56c <_fstat_r+0x1c>
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	bd38      	pop	{r3, r4, r5, pc}
 800b56e:	bf00      	nop
 800b570:	2000484c 	.word	0x2000484c

0800b574 <_isatty_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d06      	ldr	r5, [pc, #24]	; (800b590 <_isatty_r+0x1c>)
 800b578:	2300      	movs	r3, #0
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f7 ff97 	bl	80034b2 <_isatty>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_isatty_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_isatty_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	2000484c 	.word	0x2000484c

0800b594 <atan2>:
 800b594:	f000 bab0 	b.w	800baf8 <__ieee754_atan2>

0800b598 <sqrt>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	ed2d 8b02 	vpush	{d8}
 800b59e:	ec55 4b10 	vmov	r4, r5, d0
 800b5a2:	f000 f9cf 	bl	800b944 <__ieee754_sqrt>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b5b2:	eef0 8a60 	vmov.f32	s17, s1
 800b5b6:	f7f5 fab9 	bl	8000b2c <__aeabi_dcmpun>
 800b5ba:	b990      	cbnz	r0, 800b5e2 <sqrt+0x4a>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	b158      	cbz	r0, 800b5e2 <sqrt+0x4a>
 800b5ca:	f7fd ff35 	bl	8009438 <__errno>
 800b5ce:	2321      	movs	r3, #33	; 0x21
 800b5d0:	6003      	str	r3, [r0, #0]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f7f5 f937 	bl	800084c <__aeabi_ddiv>
 800b5de:	ec41 0b18 	vmov	d8, r0, r1
 800b5e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b5e6:	eef0 0a68 	vmov.f32	s1, s17
 800b5ea:	ecbd 8b02 	vpop	{d8}
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}

0800b5f0 <atan>:
 800b5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ec55 4b10 	vmov	r4, r5, d0
 800b5f8:	4bc3      	ldr	r3, [pc, #780]	; (800b908 <atan+0x318>)
 800b5fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5fe:	429e      	cmp	r6, r3
 800b600:	46ab      	mov	fp, r5
 800b602:	dd18      	ble.n	800b636 <atan+0x46>
 800b604:	4bc1      	ldr	r3, [pc, #772]	; (800b90c <atan+0x31c>)
 800b606:	429e      	cmp	r6, r3
 800b608:	dc01      	bgt.n	800b60e <atan+0x1e>
 800b60a:	d109      	bne.n	800b620 <atan+0x30>
 800b60c:	b144      	cbz	r4, 800b620 <atan+0x30>
 800b60e:	4622      	mov	r2, r4
 800b610:	462b      	mov	r3, r5
 800b612:	4620      	mov	r0, r4
 800b614:	4629      	mov	r1, r5
 800b616:	f7f4 fe39 	bl	800028c <__adddf3>
 800b61a:	4604      	mov	r4, r0
 800b61c:	460d      	mov	r5, r1
 800b61e:	e006      	b.n	800b62e <atan+0x3e>
 800b620:	f1bb 0f00 	cmp.w	fp, #0
 800b624:	f300 8131 	bgt.w	800b88a <atan+0x29a>
 800b628:	a59b      	add	r5, pc, #620	; (adr r5, 800b898 <atan+0x2a8>)
 800b62a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b62e:	ec45 4b10 	vmov	d0, r4, r5
 800b632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	4bb6      	ldr	r3, [pc, #728]	; (800b910 <atan+0x320>)
 800b638:	429e      	cmp	r6, r3
 800b63a:	dc14      	bgt.n	800b666 <atan+0x76>
 800b63c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b640:	429e      	cmp	r6, r3
 800b642:	dc0d      	bgt.n	800b660 <atan+0x70>
 800b644:	a396      	add	r3, pc, #600	; (adr r3, 800b8a0 <atan+0x2b0>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	ee10 0a10 	vmov	r0, s0
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f4 fe1c 	bl	800028c <__adddf3>
 800b654:	4baf      	ldr	r3, [pc, #700]	; (800b914 <atan+0x324>)
 800b656:	2200      	movs	r2, #0
 800b658:	f7f5 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1e6      	bne.n	800b62e <atan+0x3e>
 800b660:	f04f 3aff 	mov.w	sl, #4294967295
 800b664:	e02b      	b.n	800b6be <atan+0xce>
 800b666:	f000 f963 	bl	800b930 <fabs>
 800b66a:	4bab      	ldr	r3, [pc, #684]	; (800b918 <atan+0x328>)
 800b66c:	429e      	cmp	r6, r3
 800b66e:	ec55 4b10 	vmov	r4, r5, d0
 800b672:	f300 80bf 	bgt.w	800b7f4 <atan+0x204>
 800b676:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b67a:	429e      	cmp	r6, r3
 800b67c:	f300 80a0 	bgt.w	800b7c0 <atan+0x1d0>
 800b680:	ee10 2a10 	vmov	r2, s0
 800b684:	ee10 0a10 	vmov	r0, s0
 800b688:	462b      	mov	r3, r5
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f4 fdfe 	bl	800028c <__adddf3>
 800b690:	4ba0      	ldr	r3, [pc, #640]	; (800b914 <atan+0x324>)
 800b692:	2200      	movs	r2, #0
 800b694:	f7f4 fdf8 	bl	8000288 <__aeabi_dsub>
 800b698:	2200      	movs	r2, #0
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7f4 fdf1 	bl	800028c <__adddf3>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	f7f5 f8cb 	bl	800084c <__aeabi_ddiv>
 800b6b6:	f04f 0a00 	mov.w	sl, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	4622      	mov	r2, r4
 800b6c0:	462b      	mov	r3, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	f7f4 ff97 	bl	80005f8 <__aeabi_dmul>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4680      	mov	r8, r0
 800b6d0:	4689      	mov	r9, r1
 800b6d2:	f7f4 ff91 	bl	80005f8 <__aeabi_dmul>
 800b6d6:	a374      	add	r3, pc, #464	; (adr r3, 800b8a8 <atan+0x2b8>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	4606      	mov	r6, r0
 800b6de:	460f      	mov	r7, r1
 800b6e0:	f7f4 ff8a 	bl	80005f8 <__aeabi_dmul>
 800b6e4:	a372      	add	r3, pc, #456	; (adr r3, 800b8b0 <atan+0x2c0>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 fdcf 	bl	800028c <__adddf3>
 800b6ee:	4632      	mov	r2, r6
 800b6f0:	463b      	mov	r3, r7
 800b6f2:	f7f4 ff81 	bl	80005f8 <__aeabi_dmul>
 800b6f6:	a370      	add	r3, pc, #448	; (adr r3, 800b8b8 <atan+0x2c8>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f4 fdc6 	bl	800028c <__adddf3>
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	f7f4 ff78 	bl	80005f8 <__aeabi_dmul>
 800b708:	a36d      	add	r3, pc, #436	; (adr r3, 800b8c0 <atan+0x2d0>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fdbd 	bl	800028c <__adddf3>
 800b712:	4632      	mov	r2, r6
 800b714:	463b      	mov	r3, r7
 800b716:	f7f4 ff6f 	bl	80005f8 <__aeabi_dmul>
 800b71a:	a36b      	add	r3, pc, #428	; (adr r3, 800b8c8 <atan+0x2d8>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f4 fdb4 	bl	800028c <__adddf3>
 800b724:	4632      	mov	r2, r6
 800b726:	463b      	mov	r3, r7
 800b728:	f7f4 ff66 	bl	80005f8 <__aeabi_dmul>
 800b72c:	a368      	add	r3, pc, #416	; (adr r3, 800b8d0 <atan+0x2e0>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 fdab 	bl	800028c <__adddf3>
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	f7f4 ff5d 	bl	80005f8 <__aeabi_dmul>
 800b73e:	a366      	add	r3, pc, #408	; (adr r3, 800b8d8 <atan+0x2e8>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	4680      	mov	r8, r0
 800b746:	4689      	mov	r9, r1
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f4 ff54 	bl	80005f8 <__aeabi_dmul>
 800b750:	a363      	add	r3, pc, #396	; (adr r3, 800b8e0 <atan+0x2f0>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 fd97 	bl	8000288 <__aeabi_dsub>
 800b75a:	4632      	mov	r2, r6
 800b75c:	463b      	mov	r3, r7
 800b75e:	f7f4 ff4b 	bl	80005f8 <__aeabi_dmul>
 800b762:	a361      	add	r3, pc, #388	; (adr r3, 800b8e8 <atan+0x2f8>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 fd8e 	bl	8000288 <__aeabi_dsub>
 800b76c:	4632      	mov	r2, r6
 800b76e:	463b      	mov	r3, r7
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	a35e      	add	r3, pc, #376	; (adr r3, 800b8f0 <atan+0x300>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	f7f4 fd85 	bl	8000288 <__aeabi_dsub>
 800b77e:	4632      	mov	r2, r6
 800b780:	463b      	mov	r3, r7
 800b782:	f7f4 ff39 	bl	80005f8 <__aeabi_dmul>
 800b786:	a35c      	add	r3, pc, #368	; (adr r3, 800b8f8 <atan+0x308>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7f4 fd7c 	bl	8000288 <__aeabi_dsub>
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	f7f4 ff30 	bl	80005f8 <__aeabi_dmul>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f4 fd74 	bl	800028c <__adddf3>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f7f4 ff26 	bl	80005f8 <__aeabi_dmul>
 800b7ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	d14b      	bne.n	800b84e <atan+0x25e>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7f4 fd65 	bl	8000288 <__aeabi_dsub>
 800b7be:	e72c      	b.n	800b61a <atan+0x2a>
 800b7c0:	ee10 0a10 	vmov	r0, s0
 800b7c4:	4b53      	ldr	r3, [pc, #332]	; (800b914 <atan+0x324>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 fd5d 	bl	8000288 <__aeabi_dsub>
 800b7ce:	4b51      	ldr	r3, [pc, #324]	; (800b914 <atan+0x324>)
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f4 fd57 	bl	800028c <__adddf3>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f5 f831 	bl	800084c <__aeabi_ddiv>
 800b7ea:	f04f 0a01 	mov.w	sl, #1
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	e764      	b.n	800b6be <atan+0xce>
 800b7f4:	4b49      	ldr	r3, [pc, #292]	; (800b91c <atan+0x32c>)
 800b7f6:	429e      	cmp	r6, r3
 800b7f8:	da1d      	bge.n	800b836 <atan+0x246>
 800b7fa:	ee10 0a10 	vmov	r0, s0
 800b7fe:	4b48      	ldr	r3, [pc, #288]	; (800b920 <atan+0x330>)
 800b800:	2200      	movs	r2, #0
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd40 	bl	8000288 <__aeabi_dsub>
 800b808:	4b45      	ldr	r3, [pc, #276]	; (800b920 <atan+0x330>)
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	2200      	movs	r2, #0
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fef0 	bl	80005f8 <__aeabi_dmul>
 800b818:	4b3e      	ldr	r3, [pc, #248]	; (800b914 <atan+0x324>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f7f4 fd36 	bl	800028c <__adddf3>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4630      	mov	r0, r6
 800b826:	4639      	mov	r1, r7
 800b828:	f7f5 f810 	bl	800084c <__aeabi_ddiv>
 800b82c:	f04f 0a02 	mov.w	sl, #2
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	e743      	b.n	800b6be <atan+0xce>
 800b836:	462b      	mov	r3, r5
 800b838:	ee10 2a10 	vmov	r2, s0
 800b83c:	4939      	ldr	r1, [pc, #228]	; (800b924 <atan+0x334>)
 800b83e:	2000      	movs	r0, #0
 800b840:	f7f5 f804 	bl	800084c <__aeabi_ddiv>
 800b844:	f04f 0a03 	mov.w	sl, #3
 800b848:	4604      	mov	r4, r0
 800b84a:	460d      	mov	r5, r1
 800b84c:	e737      	b.n	800b6be <atan+0xce>
 800b84e:	4b36      	ldr	r3, [pc, #216]	; (800b928 <atan+0x338>)
 800b850:	4e36      	ldr	r6, [pc, #216]	; (800b92c <atan+0x33c>)
 800b852:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f4 fd15 	bl	8000288 <__aeabi_dsub>
 800b85e:	4622      	mov	r2, r4
 800b860:	462b      	mov	r3, r5
 800b862:	f7f4 fd11 	bl	8000288 <__aeabi_dsub>
 800b866:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b872:	f7f4 fd09 	bl	8000288 <__aeabi_dsub>
 800b876:	f1bb 0f00 	cmp.w	fp, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	f6bf aed6 	bge.w	800b62e <atan+0x3e>
 800b882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b886:	461d      	mov	r5, r3
 800b888:	e6d1      	b.n	800b62e <atan+0x3e>
 800b88a:	a51d      	add	r5, pc, #116	; (adr r5, 800b900 <atan+0x310>)
 800b88c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b890:	e6cd      	b.n	800b62e <atan+0x3e>
 800b892:	bf00      	nop
 800b894:	f3af 8000 	nop.w
 800b898:	54442d18 	.word	0x54442d18
 800b89c:	bff921fb 	.word	0xbff921fb
 800b8a0:	8800759c 	.word	0x8800759c
 800b8a4:	7e37e43c 	.word	0x7e37e43c
 800b8a8:	e322da11 	.word	0xe322da11
 800b8ac:	3f90ad3a 	.word	0x3f90ad3a
 800b8b0:	24760deb 	.word	0x24760deb
 800b8b4:	3fa97b4b 	.word	0x3fa97b4b
 800b8b8:	a0d03d51 	.word	0xa0d03d51
 800b8bc:	3fb10d66 	.word	0x3fb10d66
 800b8c0:	c54c206e 	.word	0xc54c206e
 800b8c4:	3fb745cd 	.word	0x3fb745cd
 800b8c8:	920083ff 	.word	0x920083ff
 800b8cc:	3fc24924 	.word	0x3fc24924
 800b8d0:	5555550d 	.word	0x5555550d
 800b8d4:	3fd55555 	.word	0x3fd55555
 800b8d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8dc:	bfa2b444 	.word	0xbfa2b444
 800b8e0:	52defd9a 	.word	0x52defd9a
 800b8e4:	3fadde2d 	.word	0x3fadde2d
 800b8e8:	af749a6d 	.word	0xaf749a6d
 800b8ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8f0:	fe231671 	.word	0xfe231671
 800b8f4:	3fbc71c6 	.word	0x3fbc71c6
 800b8f8:	9998ebc4 	.word	0x9998ebc4
 800b8fc:	3fc99999 	.word	0x3fc99999
 800b900:	54442d18 	.word	0x54442d18
 800b904:	3ff921fb 	.word	0x3ff921fb
 800b908:	440fffff 	.word	0x440fffff
 800b90c:	7ff00000 	.word	0x7ff00000
 800b910:	3fdbffff 	.word	0x3fdbffff
 800b914:	3ff00000 	.word	0x3ff00000
 800b918:	3ff2ffff 	.word	0x3ff2ffff
 800b91c:	40038000 	.word	0x40038000
 800b920:	3ff80000 	.word	0x3ff80000
 800b924:	bff00000 	.word	0xbff00000
 800b928:	0800c0f8 	.word	0x0800c0f8
 800b92c:	0800c0d8 	.word	0x0800c0d8

0800b930 <fabs>:
 800b930:	ec51 0b10 	vmov	r0, r1, d0
 800b934:	ee10 2a10 	vmov	r2, s0
 800b938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b93c:	ec43 2b10 	vmov	d0, r2, r3
 800b940:	4770      	bx	lr
	...

0800b944 <__ieee754_sqrt>:
 800b944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	ec55 4b10 	vmov	r4, r5, d0
 800b94c:	4e67      	ldr	r6, [pc, #412]	; (800baec <__ieee754_sqrt+0x1a8>)
 800b94e:	43ae      	bics	r6, r5
 800b950:	ee10 0a10 	vmov	r0, s0
 800b954:	ee10 2a10 	vmov	r2, s0
 800b958:	4629      	mov	r1, r5
 800b95a:	462b      	mov	r3, r5
 800b95c:	d10d      	bne.n	800b97a <__ieee754_sqrt+0x36>
 800b95e:	f7f4 fe4b 	bl	80005f8 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f4 fc8f 	bl	800028c <__adddf3>
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	ec45 4b10 	vmov	d0, r4, r5
 800b976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	dc0b      	bgt.n	800b996 <__ieee754_sqrt+0x52>
 800b97e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b982:	4326      	orrs	r6, r4
 800b984:	d0f5      	beq.n	800b972 <__ieee754_sqrt+0x2e>
 800b986:	b135      	cbz	r5, 800b996 <__ieee754_sqrt+0x52>
 800b988:	f7f4 fc7e 	bl	8000288 <__aeabi_dsub>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	f7f4 ff5c 	bl	800084c <__aeabi_ddiv>
 800b994:	e7eb      	b.n	800b96e <__ieee754_sqrt+0x2a>
 800b996:	1509      	asrs	r1, r1, #20
 800b998:	f000 808d 	beq.w	800bab6 <__ieee754_sqrt+0x172>
 800b99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b9a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9a8:	07c9      	lsls	r1, r1, #31
 800b9aa:	bf5c      	itt	pl
 800b9ac:	005b      	lslpl	r3, r3, #1
 800b9ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b9b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9b6:	bf58      	it	pl
 800b9b8:	0052      	lslpl	r2, r2, #1
 800b9ba:	2500      	movs	r5, #0
 800b9bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b9c0:	1076      	asrs	r6, r6, #1
 800b9c2:	0052      	lsls	r2, r2, #1
 800b9c4:	f04f 0e16 	mov.w	lr, #22
 800b9c8:	46ac      	mov	ip, r5
 800b9ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9ce:	eb0c 0001 	add.w	r0, ip, r1
 800b9d2:	4298      	cmp	r0, r3
 800b9d4:	bfde      	ittt	le
 800b9d6:	1a1b      	suble	r3, r3, r0
 800b9d8:	eb00 0c01 	addle.w	ip, r0, r1
 800b9dc:	186d      	addle	r5, r5, r1
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	f1be 0e01 	subs.w	lr, lr, #1
 800b9e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b9e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b9ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b9f0:	d1ed      	bne.n	800b9ce <__ieee754_sqrt+0x8a>
 800b9f2:	4674      	mov	r4, lr
 800b9f4:	2720      	movs	r7, #32
 800b9f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b9fa:	4563      	cmp	r3, ip
 800b9fc:	eb01 000e 	add.w	r0, r1, lr
 800ba00:	dc02      	bgt.n	800ba08 <__ieee754_sqrt+0xc4>
 800ba02:	d113      	bne.n	800ba2c <__ieee754_sqrt+0xe8>
 800ba04:	4290      	cmp	r0, r2
 800ba06:	d811      	bhi.n	800ba2c <__ieee754_sqrt+0xe8>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	eb00 0e01 	add.w	lr, r0, r1
 800ba0e:	da57      	bge.n	800bac0 <__ieee754_sqrt+0x17c>
 800ba10:	f1be 0f00 	cmp.w	lr, #0
 800ba14:	db54      	blt.n	800bac0 <__ieee754_sqrt+0x17c>
 800ba16:	f10c 0801 	add.w	r8, ip, #1
 800ba1a:	eba3 030c 	sub.w	r3, r3, ip
 800ba1e:	4290      	cmp	r0, r2
 800ba20:	bf88      	it	hi
 800ba22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ba26:	1a12      	subs	r2, r2, r0
 800ba28:	440c      	add	r4, r1
 800ba2a:	46c4      	mov	ip, r8
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	3f01      	subs	r7, #1
 800ba30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ba34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ba38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba3c:	d1dd      	bne.n	800b9fa <__ieee754_sqrt+0xb6>
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	d01b      	beq.n	800ba7a <__ieee754_sqrt+0x136>
 800ba42:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800baf0 <__ieee754_sqrt+0x1ac>
 800ba46:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800baf4 <__ieee754_sqrt+0x1b0>
 800ba4a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ba4e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ba52:	f7f4 fc19 	bl	8000288 <__aeabi_dsub>
 800ba56:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4640      	mov	r0, r8
 800ba60:	4649      	mov	r1, r9
 800ba62:	f7f5 f845 	bl	8000af0 <__aeabi_dcmple>
 800ba66:	b140      	cbz	r0, 800ba7a <__ieee754_sqrt+0x136>
 800ba68:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ba6c:	e9da 0100 	ldrd	r0, r1, [sl]
 800ba70:	e9db 2300 	ldrd	r2, r3, [fp]
 800ba74:	d126      	bne.n	800bac4 <__ieee754_sqrt+0x180>
 800ba76:	3501      	adds	r5, #1
 800ba78:	463c      	mov	r4, r7
 800ba7a:	106a      	asrs	r2, r5, #1
 800ba7c:	0863      	lsrs	r3, r4, #1
 800ba7e:	07e9      	lsls	r1, r5, #31
 800ba80:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ba84:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ba88:	bf48      	it	mi
 800ba8a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ba8e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ba92:	461c      	mov	r4, r3
 800ba94:	e76d      	b.n	800b972 <__ieee754_sqrt+0x2e>
 800ba96:	0ad3      	lsrs	r3, r2, #11
 800ba98:	3815      	subs	r0, #21
 800ba9a:	0552      	lsls	r2, r2, #21
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0fa      	beq.n	800ba96 <__ieee754_sqrt+0x152>
 800baa0:	02dc      	lsls	r4, r3, #11
 800baa2:	d50a      	bpl.n	800baba <__ieee754_sqrt+0x176>
 800baa4:	f1c1 0420 	rsb	r4, r1, #32
 800baa8:	fa22 f404 	lsr.w	r4, r2, r4
 800baac:	1e4d      	subs	r5, r1, #1
 800baae:	408a      	lsls	r2, r1
 800bab0:	4323      	orrs	r3, r4
 800bab2:	1b41      	subs	r1, r0, r5
 800bab4:	e772      	b.n	800b99c <__ieee754_sqrt+0x58>
 800bab6:	4608      	mov	r0, r1
 800bab8:	e7f0      	b.n	800ba9c <__ieee754_sqrt+0x158>
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	3101      	adds	r1, #1
 800babe:	e7ef      	b.n	800baa0 <__ieee754_sqrt+0x15c>
 800bac0:	46e0      	mov	r8, ip
 800bac2:	e7aa      	b.n	800ba1a <__ieee754_sqrt+0xd6>
 800bac4:	f7f4 fbe2 	bl	800028c <__adddf3>
 800bac8:	e9da 8900 	ldrd	r8, r9, [sl]
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f5 f802 	bl	8000adc <__aeabi_dcmplt>
 800bad8:	b120      	cbz	r0, 800bae4 <__ieee754_sqrt+0x1a0>
 800bada:	1ca0      	adds	r0, r4, #2
 800badc:	bf08      	it	eq
 800bade:	3501      	addeq	r5, #1
 800bae0:	3402      	adds	r4, #2
 800bae2:	e7ca      	b.n	800ba7a <__ieee754_sqrt+0x136>
 800bae4:	3401      	adds	r4, #1
 800bae6:	f024 0401 	bic.w	r4, r4, #1
 800baea:	e7c6      	b.n	800ba7a <__ieee754_sqrt+0x136>
 800baec:	7ff00000 	.word	0x7ff00000
 800baf0:	20000270 	.word	0x20000270
 800baf4:	20000278 	.word	0x20000278

0800baf8 <__ieee754_atan2>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	ec57 6b11 	vmov	r6, r7, d1
 800bb00:	4273      	negs	r3, r6
 800bb02:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bc80 <__ieee754_atan2+0x188>
 800bb06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bb0a:	4333      	orrs	r3, r6
 800bb0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb10:	4543      	cmp	r3, r8
 800bb12:	ec51 0b10 	vmov	r0, r1, d0
 800bb16:	ee11 5a10 	vmov	r5, s2
 800bb1a:	d80a      	bhi.n	800bb32 <__ieee754_atan2+0x3a>
 800bb1c:	4244      	negs	r4, r0
 800bb1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb22:	4304      	orrs	r4, r0
 800bb24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bb28:	4544      	cmp	r4, r8
 800bb2a:	ee10 9a10 	vmov	r9, s0
 800bb2e:	468e      	mov	lr, r1
 800bb30:	d907      	bls.n	800bb42 <__ieee754_atan2+0x4a>
 800bb32:	4632      	mov	r2, r6
 800bb34:	463b      	mov	r3, r7
 800bb36:	f7f4 fba9 	bl	800028c <__adddf3>
 800bb3a:	ec41 0b10 	vmov	d0, r0, r1
 800bb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bb46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb4a:	4334      	orrs	r4, r6
 800bb4c:	d103      	bne.n	800bb56 <__ieee754_atan2+0x5e>
 800bb4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb52:	f7ff bd4d 	b.w	800b5f0 <atan>
 800bb56:	17bc      	asrs	r4, r7, #30
 800bb58:	f004 0402 	and.w	r4, r4, #2
 800bb5c:	ea53 0909 	orrs.w	r9, r3, r9
 800bb60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bb64:	d107      	bne.n	800bb76 <__ieee754_atan2+0x7e>
 800bb66:	2c02      	cmp	r4, #2
 800bb68:	d05f      	beq.n	800bc2a <__ieee754_atan2+0x132>
 800bb6a:	2c03      	cmp	r4, #3
 800bb6c:	d1e5      	bne.n	800bb3a <__ieee754_atan2+0x42>
 800bb6e:	a140      	add	r1, pc, #256	; (adr r1, 800bc70 <__ieee754_atan2+0x178>)
 800bb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb74:	e7e1      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bb76:	4315      	orrs	r5, r2
 800bb78:	d106      	bne.n	800bb88 <__ieee754_atan2+0x90>
 800bb7a:	f1be 0f00 	cmp.w	lr, #0
 800bb7e:	da5f      	bge.n	800bc40 <__ieee754_atan2+0x148>
 800bb80:	a13d      	add	r1, pc, #244	; (adr r1, 800bc78 <__ieee754_atan2+0x180>)
 800bb82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb86:	e7d8      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bb88:	4542      	cmp	r2, r8
 800bb8a:	d10f      	bne.n	800bbac <__ieee754_atan2+0xb4>
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb92:	d107      	bne.n	800bba4 <__ieee754_atan2+0xac>
 800bb94:	2c02      	cmp	r4, #2
 800bb96:	d84c      	bhi.n	800bc32 <__ieee754_atan2+0x13a>
 800bb98:	4b33      	ldr	r3, [pc, #204]	; (800bc68 <__ieee754_atan2+0x170>)
 800bb9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bba2:	e7ca      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bba4:	2c02      	cmp	r4, #2
 800bba6:	d848      	bhi.n	800bc3a <__ieee754_atan2+0x142>
 800bba8:	4b30      	ldr	r3, [pc, #192]	; (800bc6c <__ieee754_atan2+0x174>)
 800bbaa:	e7f6      	b.n	800bb9a <__ieee754_atan2+0xa2>
 800bbac:	4543      	cmp	r3, r8
 800bbae:	d0e4      	beq.n	800bb7a <__ieee754_atan2+0x82>
 800bbb0:	1a9b      	subs	r3, r3, r2
 800bbb2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bbb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbba:	da1e      	bge.n	800bbfa <__ieee754_atan2+0x102>
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	da01      	bge.n	800bbc4 <__ieee754_atan2+0xcc>
 800bbc0:	323c      	adds	r2, #60	; 0x3c
 800bbc2:	db1e      	blt.n	800bc02 <__ieee754_atan2+0x10a>
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	f7f4 fe40 	bl	800084c <__aeabi_ddiv>
 800bbcc:	ec41 0b10 	vmov	d0, r0, r1
 800bbd0:	f7ff feae 	bl	800b930 <fabs>
 800bbd4:	f7ff fd0c 	bl	800b5f0 <atan>
 800bbd8:	ec51 0b10 	vmov	r0, r1, d0
 800bbdc:	2c01      	cmp	r4, #1
 800bbde:	d013      	beq.n	800bc08 <__ieee754_atan2+0x110>
 800bbe0:	2c02      	cmp	r4, #2
 800bbe2:	d015      	beq.n	800bc10 <__ieee754_atan2+0x118>
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	d0a8      	beq.n	800bb3a <__ieee754_atan2+0x42>
 800bbe8:	a317      	add	r3, pc, #92	; (adr r3, 800bc48 <__ieee754_atan2+0x150>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fb4b 	bl	8000288 <__aeabi_dsub>
 800bbf2:	a317      	add	r3, pc, #92	; (adr r3, 800bc50 <__ieee754_atan2+0x158>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	e014      	b.n	800bc24 <__ieee754_atan2+0x12c>
 800bbfa:	a117      	add	r1, pc, #92	; (adr r1, 800bc58 <__ieee754_atan2+0x160>)
 800bbfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc00:	e7ec      	b.n	800bbdc <__ieee754_atan2+0xe4>
 800bc02:	2000      	movs	r0, #0
 800bc04:	2100      	movs	r1, #0
 800bc06:	e7e9      	b.n	800bbdc <__ieee754_atan2+0xe4>
 800bc08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	e794      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc10:	a30d      	add	r3, pc, #52	; (adr r3, 800bc48 <__ieee754_atan2+0x150>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	a10c      	add	r1, pc, #48	; (adr r1, 800bc50 <__ieee754_atan2+0x158>)
 800bc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc24:	f7f4 fb30 	bl	8000288 <__aeabi_dsub>
 800bc28:	e787      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc2a:	a109      	add	r1, pc, #36	; (adr r1, 800bc50 <__ieee754_atan2+0x158>)
 800bc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc30:	e783      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc32:	a10b      	add	r1, pc, #44	; (adr r1, 800bc60 <__ieee754_atan2+0x168>)
 800bc34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc38:	e77f      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	e77c      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc40:	a105      	add	r1, pc, #20	; (adr r1, 800bc58 <__ieee754_atan2+0x160>)
 800bc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc46:	e778      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc48:	33145c07 	.word	0x33145c07
 800bc4c:	3ca1a626 	.word	0x3ca1a626
 800bc50:	54442d18 	.word	0x54442d18
 800bc54:	400921fb 	.word	0x400921fb
 800bc58:	54442d18 	.word	0x54442d18
 800bc5c:	3ff921fb 	.word	0x3ff921fb
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	3fe921fb 	.word	0x3fe921fb
 800bc68:	0800c118 	.word	0x0800c118
 800bc6c:	0800c130 	.word	0x0800c130
 800bc70:	54442d18 	.word	0x54442d18
 800bc74:	c00921fb 	.word	0xc00921fb
 800bc78:	54442d18 	.word	0x54442d18
 800bc7c:	bff921fb 	.word	0xbff921fb
 800bc80:	7ff00000 	.word	0x7ff00000

0800bc84 <_init>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	bf00      	nop
 800bc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8a:	bc08      	pop	{r3}
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	4770      	bx	lr

0800bc90 <_fini>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr
