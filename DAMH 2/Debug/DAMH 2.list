
DAMH 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007ae0  08007ae0  00017ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be8  08007be8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf0  08007bf0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007bf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00004494  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004594  20004594  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a56  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dc6  00000000  00000000  00032bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001248  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e38  00000000  00000000  00036bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022fe9  00000000  00000000  00037a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015c9c  00000000  00000000  0005a9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3e7a  00000000  00000000  00070695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005160  00000000  00000000  00144510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00149670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ac4 	.word	0x08007ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08007ac4 	.word	0x08007ac4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6178      	str	r0, [r7, #20]
 8000e9c:	6139      	str	r1, [r7, #16]
 8000e9e:	60fa      	str	r2, [r7, #12]
 8000ea0:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ee8:	441a      	add	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fab6 	bl	8000474 <__aeabi_i2d>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f0e:	f7ff fc45 	bl	800079c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff faa7 	bl	8000474 <__aeabi_i2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fc35 	bl	800079c <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SpeedReadNonReset+0x118>)
 8000f40:	f7ff fb02 	bl	8000548 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000f54:	a31e      	add	r3, pc, #120	; (adr r3, 8000fd0 <SpeedReadNonReset+0x108>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000f6c:	a31a      	add	r3, pc, #104	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fae9 	bl	8000548 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f92d 	bl	80001dc <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f90:	a311      	add	r3, pc, #68	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff f91b 	bl	80001dc <__adddf3>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	ced91687 	.word	0xced91687
 8000fd4:	3feb53f7 	.word	0x3feb53f7
 8000fd8:	532617c2 	.word	0x532617c2
 8000fdc:	3fb2a305 	.word	0x3fb2a305
 8000fe0:	404e0000 	.word	0x404e0000

08000fe4 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800100e:	441a      	add	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7e1b      	ldrb	r3, [r3, #24]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <CountRead+0x52>
	{
		return enc->count_X4;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_i2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	e033      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d110      	bne.n	8001060 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da00      	bge.n	8001048 <CountRead+0x64>
 8001046:	3303      	adds	r3, #3
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa0d 	bl	8000474 <__aeabi_i2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e01e      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d116      	bne.n	8001096 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001070:	fb03 f202 	mul.w	r2, r3, r2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fb92 f3f3 	sdiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9f8 	bl	8000474 <__aeabi_i2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001094:	e003      	b.n	800109e <CountRead+0xba>
	}else {
		return 0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
	}
}
 800109e:	ec43 2b17 	vmov	d7, r2, r3
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfb8      	it	lt
 80010ca:	425b      	neglt	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	615a      	str	r2, [r3, #20]

	if(Input<0){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da4d      	bge.n	8001180 <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <Drive+0x48>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
 80010f6:	e018      	b.n	800112a <Drive+0x7a>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d105      	bne.n	800110c <Drive+0x5c>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6393      	str	r3, [r2, #56]	; 0x38
 800110a:	e00e      	b.n	800112a <Drive+0x7a>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d105      	bne.n	8001120 <Drive+0x70>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800111e:	e004      	b.n	800112a <Drive+0x7a>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <Drive+0x90>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	89da      	ldrh	r2, [r3, #14]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 800113e:	e0b7      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d107      	bne.n	8001158 <Drive+0xa8>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	89d9      	ldrh	r1, [r3, #14]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	6393      	str	r3, [r2, #56]	; 0x38
 8001156:	e0ab      	b.n	80012b0 <Drive+0x200>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b08      	cmp	r3, #8
 800115e:	d107      	bne.n	8001170 <Drive+0xc0>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	89d9      	ldrh	r1, [r3, #14]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	460b      	mov	r3, r1
 800116c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800116e:	e09f      	b.n	80012b0 <Drive+0x200>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	89d9      	ldrh	r1, [r3, #14]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	460b      	mov	r3, r1
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117e:	e097      	b.n	80012b0 <Drive+0x200>
	else if(Input>0){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	dd4d      	ble.n	8001222 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <Drive+0xec>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	89da      	ldrh	r2, [r3, #14]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
 800119a:	e01e      	b.n	80011da <Drive+0x12a>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d107      	bne.n	80011b4 <Drive+0x104>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	89d9      	ldrh	r1, [r3, #14]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	460b      	mov	r3, r1
 80011b0:	6393      	str	r3, [r2, #56]	; 0x38
 80011b2:	e012      	b.n	80011da <Drive+0x12a>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d107      	bne.n	80011cc <Drive+0x11c>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	89d9      	ldrh	r1, [r3, #14]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	460b      	mov	r3, r1
 80011c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011ca:	e006      	b.n	80011da <Drive+0x12a>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	89d9      	ldrh	r1, [r3, #14]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	460b      	mov	r3, r1
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <Drive+0x13e>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011ec:	e060      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d105      	bne.n	8001202 <Drive+0x152>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38
 8001200:	e056      	b.n	80012b0 <Drive+0x200>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b08      	cmp	r3, #8
 8001208:	d105      	bne.n	8001216 <Drive+0x166>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001214:	e04c      	b.n	80012b0 <Drive+0x200>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001220:	e046      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <Drive+0x186>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	e018      	b.n	8001268 <Drive+0x1b8>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d105      	bne.n	800124a <Drive+0x19a>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	6393      	str	r3, [r2, #56]	; 0x38
 8001248:	e00e      	b.n	8001268 <Drive+0x1b8>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d105      	bne.n	800125e <Drive+0x1ae>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800125c:	e004      	b.n	8001268 <Drive+0x1b8>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d105      	bne.n	800127c <Drive+0x1cc>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
}
 800127a:	e019      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	2b04      	cmp	r3, #4
 8001282:	d105      	bne.n	8001290 <Drive+0x1e0>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800128e:	e00f      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d105      	bne.n	80012a4 <Drive+0x1f4>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012a2:	e005      	b.n	80012b0 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012ae:	e7ff      	b.n	80012b0 <Drive+0x200>
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012c8:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	edd3 7a02 	vldr	s15, [r3, #8]
 8001316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	ed93 7a08 	vldr	s14, [r3, #32]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	dd06      	ble.n	8001358 <Pid_Cal+0x9c>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	e002      	b.n	800135e <Pid_Cal+0xa2>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	edd3 7a08 	vldr	s15, [r3, #32]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ed93 7a08 	vldr	s14, [r3, #32]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d506      	bpl.n	800138e <Pid_Cal+0xd2>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	e002      	b.n	8001394 <Pid_Cal+0xd8>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a08 	vldr	s15, [r3, #32]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80013ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80013ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	ed93 7a06 	vldr	s14, [r3, #24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edd3 7a08 	vldr	s15, [r3, #32]
 800141a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800143a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	dd02      	ble.n	800144a <Pid_Cal+0x18e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	e001      	b.n	800144e <Pid_Cal+0x192>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800145e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d502      	bpl.n	800146e <Pid_Cal+0x1b2>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	e001      	b.n	8001472 <Pid_Cal+0x1b6>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <vApplicationGetIdleTaskMemory+0x30>)
 800149a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000011c 	.word	0x2000011c
 80014b4:	20000170 	.word	0x20000170

080014b8 <Kalman_getAngle>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};
int Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b096      	sub	sp, #88	; 0x58
 80014bc:	af00      	add	r7, sp, #0
 80014be:	61f8      	str	r0, [r7, #28]
 80014c0:	ed87 0b04 	vstr	d0, [r7, #16]
 80014c4:	ed87 1b02 	vstr	d1, [r7, #8]
 80014c8:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d6:	f7fe fe7f 	bl	80001d8 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80014e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f0:	f7ff f82a 	bl	8000548 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fe6e 	bl	80001dc <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	69f9      	ldr	r1, [r7, #28]
 8001506:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800151a:	f7ff f815 	bl	8000548 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800152c:	f7fe fe54 	bl	80001d8 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800153e:	f7fe fe4b 	bl	80001d8 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7fe fe44 	bl	80001dc <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fe36 	bl	80001dc <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	69f9      	ldr	r1, [r7, #28]
 8001576:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fe1f 	bl	80001d8 <__aeabi_dsub>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	69f9      	ldr	r1, [r7, #28]
 80015a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b4:	f7fe ffc8 	bl	8000548 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe0a 	bl	80001d8 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	69f9      	ldr	r1, [r7, #28]
 80015ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015de:	f7fe ffb3 	bl	8000548 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdf7 	bl	80001dc <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	69f9      	ldr	r1, [r7, #28]
 80015f4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001604:	f7fe fdea 	bl	80001dc <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001616:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800161a:	f7ff f8bf 	bl	800079c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800162c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001630:	f7ff f8b4 	bl	800079c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001646:	f7fe fdc7 	bl	80001d8 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001658:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800165c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fdb6 	bl	80001dc <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	69f9      	ldr	r1, [r7, #28]
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001680:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fda2 	bl	80001dc <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	69f9      	ldr	r1, [r7, #28]
 800169e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80016b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80016bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016c4:	f7fe ff40 	bl	8000548 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fd82 	bl	80001d8 <__aeabi_dsub>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	69f9      	ldr	r1, [r7, #28]
 80016da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80016e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ec:	f7fe ff2c 	bl	8000548 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7fe fd6e 	bl	80001d8 <__aeabi_dsub>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	69f9      	ldr	r1, [r7, #28]
 8001702:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800170c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001714:	f7fe ff18 	bl	8000548 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe fd5a 	bl	80001d8 <__aeabi_dsub>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	69f9      	ldr	r1, [r7, #28]
 800172a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001734:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001738:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe fd46 	bl	80001d8 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	69f9      	ldr	r1, [r7, #28]
 8001752:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9a2 	bl	8000aa8 <__aeabi_d2iz>
 8001764:	4603      	mov	r3, r0
};
 8001766:	4618      	mov	r0, r3
 8001768:	3758      	adds	r7, #88	; 0x58
 800176a:	46bd      	mov	sp, r7
 800176c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001770 <MPU6050_Init>:

uint8_t MPU6050_Init()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2301      	movs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	2275      	movs	r2, #117	; 0x75
 8001786:	21d0      	movs	r1, #208	; 0xd0
 8001788:	4822      	ldr	r0, [pc, #136]	; (8001814 <MPU6050_Init+0xa4>)
 800178a:	f002 f903 	bl	8003994 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b68      	cmp	r3, #104	; 0x68
 8001792:	d139      	bne.n	8001808 <MPU6050_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001798:	2364      	movs	r3, #100	; 0x64
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	226b      	movs	r2, #107	; 0x6b
 80017a8:	21d0      	movs	r1, #208	; 0xd0
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <MPU6050_Init+0xa4>)
 80017ac:	f001 fff8 	bl	80037a0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80017b0:	2307      	movs	r3, #7
 80017b2:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	1dbb      	adds	r3, r7, #6
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	2219      	movs	r2, #25
 80017c4:	21d0      	movs	r1, #208	; 0xd0
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <MPU6050_Init+0xa4>)
 80017c8:	f001 ffea 	bl	80037a0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80017cc:	2300      	movs	r3, #0
 80017ce:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	221c      	movs	r2, #28
 80017e0:	21d0      	movs	r1, #208	; 0xd0
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <MPU6050_Init+0xa4>)
 80017e4:	f001 ffdc 	bl	80037a0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017ec:	2364      	movs	r3, #100	; 0x64
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2301      	movs	r3, #1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	1dbb      	adds	r3, r7, #6
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	221b      	movs	r2, #27
 80017fc:	21d0      	movs	r1, #208	; 0xd0
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MPU6050_Init+0xa4>)
 8001800:	f001 ffce 	bl	80037a0 <HAL_I2C_Mem_Write>
        return 0;
 8001804:	2300      	movs	r3, #0
 8001806:	e000      	b.n	800180a <MPU6050_Init+0x9a>
    }
    return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000370 	.word	0x20000370

08001818 <MPU6050_Read_All>:
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 8001818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800181c:	b094      	sub	sp, #80	; 0x50
 800181e:	af04      	add	r7, sp, #16
 8001820:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	230e      	movs	r3, #14
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2301      	movs	r3, #1
 8001832:	223b      	movs	r2, #59	; 0x3b
 8001834:	21d0      	movs	r1, #208	; 0xd0
 8001836:	488e      	ldr	r0, [pc, #568]	; (8001a70 <MPU6050_Read_All+0x258>)
 8001838:	f002 f8ac 	bl	8003994 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800183c:	7a3b      	ldrb	r3, [r7, #8]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	7a7b      	ldrb	r3, [r7, #9]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800184e:	7abb      	ldrb	r3, [r7, #10]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21a      	sxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001880:	7c3b      	ldrb	r3, [r7, #16]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21a      	sxth	r2, r3
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b21a      	sxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001892:	7cbb      	ldrb	r3, [r7, #18]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	b21a      	sxth	r2, r3
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	b21b      	sxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b21a      	sxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80018a4:	7d3b      	ldrb	r3, [r7, #20]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	7d7b      	ldrb	r3, [r7, #21]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fdd9 	bl	8000474 <__aeabi_i2d>
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <MPU6050_Read_All+0x25c>)
 80018c8:	f7fe ff68 	bl	800079c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdc9 	bl	8000474 <__aeabi_i2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <MPU6050_Read_All+0x25c>)
 80018e8:	f7fe ff58 	bl	800079c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fdb9 	bl	8000474 <__aeabi_i2d>
 8001902:	a355      	add	r3, pc, #340	; (adr r3, 8001a58 <MPU6050_Read_All+0x240>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff48 	bl	800079c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001916:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001a78 <MPU6050_Read_All+0x260>
 8001926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001a7c <MPU6050_Read_All+0x264>
 800192e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fd98 	bl	8000474 <__aeabi_i2d>
 8001944:	a346      	add	r3, pc, #280	; (adr r3, 8001a60 <MPU6050_Read_All+0x248>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff27 	bl	800079c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd88 	bl	8000474 <__aeabi_i2d>
 8001964:	a33e      	add	r3, pc, #248	; (adr r3, 8001a60 <MPU6050_Read_All+0x248>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe ff17 	bl	800079c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd78 	bl	8000474 <__aeabi_i2d>
 8001984:	a336      	add	r3, pc, #216	; (adr r3, 8001a60 <MPU6050_Read_All+0x248>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe ff07 	bl	800079c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001998:	f001 fb34 	bl	8003004 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <MPU6050_Read_All+0x268>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd55 	bl	8000454 <__aeabi_ui2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <MPU6050_Read_All+0x26c>)
 80019b0:	f7fe fef4 	bl	800079c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80019bc:	f001 fb22 	bl	8003004 <HAL_GetTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <MPU6050_Read_All+0x268>)
 80019c4:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	fb03 f202 	mul.w	r2, r3, r2
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd41 	bl	8000474 <__aeabi_i2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	ec43 2b10 	vmov	d0, r2, r3
 80019fa:	f005 fceb 	bl	80073d4 <sqrt>
 80019fe:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a0e:	f7ff f803 	bl	8000a18 <__aeabi_dcmpeq>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d137      	bne.n	8001a88 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd28 	bl	8000474 <__aeabi_i2d>
 8001a24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a28:	f7fe feb8 	bl	800079c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	ec43 2b17 	vmov	d7, r2, r3
 8001a34:	eeb0 0a47 	vmov.f32	s0, s14
 8001a38:	eef0 0a67 	vmov.f32	s1, s15
 8001a3c:	f005 fcf8 	bl	8007430 <atan>
 8001a40:	ec51 0b10 	vmov	r0, r1, d0
 8001a44:	a308      	add	r3, pc, #32	; (adr r3, 8001a68 <MPU6050_Read_All+0x250>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd7d 	bl	8000548 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a56:	e01d      	b.n	8001a94 <MPU6050_Read_All+0x27c>
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40cc2900 	.word	0x40cc2900
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40606000 	.word	0x40606000
 8001a68:	1a63c1f8 	.word	0x1a63c1f8
 8001a6c:	404ca5dc 	.word	0x404ca5dc
 8001a70:	20000370 	.word	0x20000370
 8001a74:	40d00000 	.word	0x40d00000
 8001a78:	43aa0000 	.word	0x43aa0000
 8001a7c:	42121eb8 	.word	0x42121eb8
 8001a80:	20000548 	.word	0x20000548
 8001a84:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	425b      	negs	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fce9 	bl	8000474 <__aeabi_i2d>
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	468b      	mov	fp, r1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fce1 	bl	8000474 <__aeabi_i2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	ec43 2b11 	vmov	d1, r2, r3
 8001aba:	ec4b ab10 	vmov	d0, sl, fp
 8001abe:	f005 fc87 	bl	80073d0 <atan2>
 8001ac2:	ec51 0b10 	vmov	r0, r1, d0
 8001ac6:	a34a      	add	r3, pc, #296	; (adr r3, 8001bf0 <MPU6050_Read_All+0x3d8>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd3c 	bl	8000548 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <MPU6050_Read_All+0x3c8>)
 8001ade:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ae2:	f7fe ffa3 	bl	8000a2c <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <MPU6050_Read_All+0x2ea>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <MPU6050_Read_All+0x3cc>)
 8001af8:	f7fe ffb6 	bl	8000a68 <__aeabi_dcmpgt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d114      	bne.n	8001b2c <MPU6050_Read_All+0x314>
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <MPU6050_Read_All+0x3cc>)
 8001b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0c:	f7fe ffac 	bl	8000a68 <__aeabi_dcmpgt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <MPU6050_Read_All+0x32a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <MPU6050_Read_All+0x3c8>)
 8001b22:	f7fe ff83 	bl	8000a2c <__aeabi_dcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00a      	beq.n	8001b42 <MPU6050_Read_All+0x32a>
    {
        KalmanY.angle = pitch;
 8001b2c:	492e      	ldr	r1, [pc, #184]	; (8001be8 <MPU6050_Read_All+0x3d0>)
 8001b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b32:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b40:	e016      	b.n	8001b70 <MPU6050_Read_All+0x358>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b48:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001b50:	eef0 1a67 	vmov.f32	s3, s15
 8001b54:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b58:	4823      	ldr	r0, [pc, #140]	; (8001be8 <MPU6050_Read_All+0x3d0>)
 8001b5a:	f7ff fcad 	bl	80014b8 <Kalman_getAngle>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc87 	bl	8000474 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b76:	4690      	mov	r8, r2
 8001b78:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <MPU6050_Read_All+0x3cc>)
 8001b82:	4640      	mov	r0, r8
 8001b84:	4649      	mov	r1, r9
 8001b86:	f7fe ff6f 	bl	8000a68 <__aeabi_dcmpgt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <MPU6050_Read_All+0x38a>
        DataStruct->Gx = -DataStruct->Gx;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b96:	4614      	mov	r4, r2
 8001b98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001ba8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bac:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb0:	eef0 1a67 	vmov.f32	s3, s15
 8001bb4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <MPU6050_Read_All+0x3d4>)
 8001bba:	f7ff fc7d 	bl	80014b8 <Kalman_getAngle>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc57 	bl	8000474 <__aeabi_i2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001bd0:	bf00      	nop
 8001bd2:	3740      	adds	r7, #64	; 0x40
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	c0568000 	.word	0xc0568000
 8001be4:	40568000 	.word	0x40568000
 8001be8:	20000048 	.word	0x20000048
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	1a63c1f8 	.word	0x1a63c1f8
 8001bf4:	404ca5dc 	.word	0x404ca5dc

08001bf8 <gettheta>:

float leftvolt, rightvolt;

float PWM_L,PWM_R;

float gettheta(int enc_l, int enc_r){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	float angle =(0.5*360/370)*(enc_l+ enc_r);
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc33 	bl	8000474 <__aeabi_i2d>
 8001c0e:	a30a      	add	r3, pc, #40	; (adr r3, 8001c38 <gettheta+0x40>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fc98 	bl	8000548 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff6a 	bl	8000af8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
	return angle;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	3759f22a 	.word	0x3759f22a
 8001c3c:	3fdf2298 	.word	0x3fdf2298

08001c40 <getphi>:

float getphi(int enc_l, int enc_r){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
	float angle = (3.2/22.5)*(enc_l + enc_r);
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc0f 	bl	8000474 <__aeabi_i2d>
 8001c56:	a30a      	add	r3, pc, #40	; (adr r3, 8001c80 <getphi+0x40>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fc74 	bl	8000548 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ff46 	bl	8000af8 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60fb      	str	r3, [r7, #12]
	return angle;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	ee07 3a90 	vmov	s15, r3
}
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	789abcdf 	.word	0x789abcdf
 8001c84:	3fc23456 	.word	0x3fc23456

08001c88 <map>:
float map(float x, float in_max, float in_min, float out_max, float out_min){
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c92:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c96:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c9a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001c9e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x-in_min)*(out_max-out_min)/(in_max-in_min) + out_min;
 8001ca2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cae:	edd7 6a02 	vldr	s13, [r7, #8]
 8001cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <constrain>:
float constrain(float x, float a, float b){
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cee:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cf2:	ed87 1a01 	vstr	s2, [r7, #4]
	if(x<a) 			return a;
 8001cf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d501      	bpl.n	8001d0c <constrain+0x28>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	e00b      	b.n	8001d24 <constrain+0x40>

	else if(x>b) 		return b;
 8001d0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd01      	ble.n	8001d22 <constrain+0x3e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e000      	b.n	8001d24 <constrain+0x40>

	else 			 	return x;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <StopandReset>:

//LQR function
void StopandReset(MPU6050_t *DataStruct){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
	Drive(&Motor_R, &htim3, 0, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001d40:	2304      	movs	r3, #4
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2300      	movs	r3, #0
 8001d46:	2200      	movs	r2, #0
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <StopandReset+0x4c>)
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <StopandReset+0x50>)
 8001d4c:	f7ff f9b0 	bl	80010b0 <Drive>
	Drive(&Motor_L, &htim3, 0, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001d50:	230c      	movs	r3, #12
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2308      	movs	r3, #8
 8001d56:	2200      	movs	r2, #0
 8001d58:	490a      	ldr	r1, [pc, #40]	; (8001d84 <StopandReset+0x4c>)
 8001d5a:	480c      	ldr	r0, [pc, #48]	; (8001d8c <StopandReset+0x54>)
 8001d5c:	f7ff f9a8 	bl	80010b0 <Drive>
	enc_l    = 0;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <StopandReset+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
	enc_r	 = 0;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <StopandReset+0x5c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
	DataStruct->KalmanAngleY=-2;
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d76:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000040c 	.word	0x2000040c
 8001d88:	20000650 	.word	0x20000650
 8001d8c:	20000638 	.word	0x20000638
 8001d90:	20000668 	.word	0x20000668
 8001d94:	2000066c 	.word	0x2000066c

08001d98 <LQR_Init>:
void LQR_Init(){
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

	 k1 =	-1;						// k1*theta
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LQR_Init+0x38>)
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <LQR_Init+0x3c>)
 8001da0:	601a      	str	r2, [r3, #0]
	 k2 =	-100;					// k2*thetadot
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <LQR_Init+0x40>)
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <LQR_Init+0x44>)
 8001da6:	601a      	str	r2, [r3, #0]
	 k3 =	-80000;					// k3*psi
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <LQR_Init+0x48>)
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <LQR_Init+0x4c>)
 8001dac:	601a      	str	r2, [r3, #0]
	 k4 =	-8000;					// k4*psidot
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <LQR_Init+0x50>)
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LQR_Init+0x54>)
 8001db2:	601a      	str	r2, [r3, #0]
	 k5 =	-0.5;					// k5*phi
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <LQR_Init+0x58>)
 8001db6:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001dba:	601a      	str	r2, [r3, #0]
	 k6 =	-0.5;					// k6*phidot
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <LQR_Init+0x5c>)
 8001dbe:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001dc2:	601a      	str	r2, [r3, #0]

}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000694 	.word	0x20000694
 8001dd4:	bf800000 	.word	0xbf800000
 8001dd8:	20000698 	.word	0x20000698
 8001ddc:	c2c80000 	.word	0xc2c80000
 8001de0:	2000069c 	.word	0x2000069c
 8001de4:	c79c4000 	.word	0xc79c4000
 8001de8:	200006a0 	.word	0x200006a0
 8001dec:	c5fa0000 	.word	0xc5fa0000
 8001df0:	200006a4 	.word	0x200006a4
 8001df4:	200006a8 	.word	0x200006a8

08001df8 <getLQR>:
void getLQR(float theta_,float thetadot_,float psi_,float psidot_,float phi_,float phidot_){
 8001df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dfc:	ed2d 8b02 	vpush	{d8}
 8001e00:	b087      	sub	sp, #28
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e08:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e0c:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e10:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e14:	ed87 2a01 	vstr	s4, [r7, #4]
 8001e18:	edc7 2a00 	vstr	s5, [r7]
	leftvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ - k5*phi_ - k6*phidot_;
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <getLQR+0x248>)
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2a:	4b86      	ldr	r3, [pc, #536]	; (8002044 <getLQR+0x24c>)
 8001e2c:	edd3 6a00 	vldr	s13, [r3]
 8001e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e3c:	4b82      	ldr	r3, [pc, #520]	; (8002048 <getLQR+0x250>)
 8001e3e:	edd3 6a00 	vldr	s13, [r3]
 8001e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	; (800204c <getLQR+0x254>)
 8001e50:	edd3 6a00 	vldr	s13, [r3]
 8001e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e60:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <getLQR+0x258>)
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e72:	4b78      	ldr	r3, [pc, #480]	; (8002054 <getLQR+0x25c>)
 8001e74:	edd3 6a00 	vldr	s13, [r3]
 8001e78:	edd7 7a00 	vldr	s15, [r7]
 8001e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	4b74      	ldr	r3, [pc, #464]	; (8002058 <getLQR+0x260>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]
	rightvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ + k5*phi_ + k6*phidot_;
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <getLQR+0x248>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <getLQR+0x24c>)
 8001e9a:	edd3 6a00 	vldr	s13, [r3]
 8001e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <getLQR+0x250>)
 8001eac:	edd3 6a00 	vldr	s13, [r3]
 8001eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ebc:	4b63      	ldr	r3, [pc, #396]	; (800204c <getLQR+0x254>)
 8001ebe:	edd3 6a00 	vldr	s13, [r3]
 8001ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ece:	4b60      	ldr	r3, [pc, #384]	; (8002050 <getLQR+0x258>)
 8001ed0:	edd3 6a00 	vldr	s13, [r3]
 8001ed4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <getLQR+0x25c>)
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	edd7 7a00 	vldr	s15, [r7]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <getLQR+0x264>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
	PWM_L = map(leftvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);		//Limit 15 deg.
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <getLQR+0x260>)
 8001efa:	ed93 8a00 	vldr	s16, [r3]
 8001efe:	4b52      	ldr	r3, [pc, #328]	; (8002048 <getLQR+0x250>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fac8 	bl	8000498 <__aeabi_f2d>
 8001f08:	a34b      	add	r3, pc, #300	; (adr r3, 8002038 <getLQR+0x240>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb1b 	bl	8000548 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <getLQR+0x268>)
 8001f22:	4640      	mov	r0, r8
 8001f24:	4649      	mov	r1, r9
 8001f26:	f7fe fc39 	bl	800079c <__aeabi_ddiv>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f7fe fde1 	bl	8000af8 <__aeabi_d2f>
 8001f36:	4606      	mov	r6, r0
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <getLQR+0x250>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe faab 	bl	8000498 <__aeabi_f2d>
 8001f42:	a33d      	add	r3, pc, #244	; (adr r3, 8002038 <getLQR+0x240>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fafe 	bl	8000548 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <getLQR+0x268>)
 8001f5a:	f7fe fc1f 	bl	800079c <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fdc7 	bl	8000af8 <__aeabi_d2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8002064 <getLQR+0x26c>
 8001f70:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002068 <getLQR+0x270>
 8001f74:	ee01 3a10 	vmov	s2, r3
 8001f78:	ee00 6a90 	vmov	s1, r6
 8001f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f80:	f7ff fe82 	bl	8001c88 <map>
 8001f84:	eef0 7a40 	vmov.f32	s15, s0
 8001f88:	4b38      	ldr	r3, [pc, #224]	; (800206c <getLQR+0x274>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
	PWM_R = map(rightvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);
 8001f8e:	4b33      	ldr	r3, [pc, #204]	; (800205c <getLQR+0x264>)
 8001f90:	ed93 8a00 	vldr	s16, [r3]
 8001f94:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <getLQR+0x250>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa7d 	bl	8000498 <__aeabi_f2d>
 8001f9e:	a326      	add	r3, pc, #152	; (adr r3, 8002038 <getLQR+0x240>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <getLQR+0x268>)
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f7fe fbee 	bl	800079c <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fd96 	bl	8000af8 <__aeabi_d2f>
 8001fcc:	4604      	mov	r4, r0
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <getLQR+0x250>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa60 	bl	8000498 <__aeabi_f2d>
 8001fd8:	a317      	add	r3, pc, #92	; (adr r3, 8002038 <getLQR+0x240>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <getLQR+0x268>)
 8001ff0:	f7fe fbd4 	bl	800079c <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd7c 	bl	8000af8 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8002064 <getLQR+0x26c>
 8002006:	eddf 1a18 	vldr	s3, [pc, #96]	; 8002068 <getLQR+0x270>
 800200a:	ee01 3a10 	vmov	s2, r3
 800200e:	ee00 4a90 	vmov	s1, r4
 8002012:	eeb0 0a48 	vmov.f32	s0, s16
 8002016:	f7ff fe37 	bl	8001c88 <map>
 800201a:	eef0 7a40 	vmov.f32	s15, s0
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <getLQR+0x278>)
 8002020:	edc3 7a00 	vstr	s15, [r3]
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	ecbd 8b02 	vpop	{d8}
 800202e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	54442d18 	.word	0x54442d18
 800203c:	400921fb 	.word	0x400921fb
 8002040:	20000694 	.word	0x20000694
 8002044:	20000698 	.word	0x20000698
 8002048:	2000069c 	.word	0x2000069c
 800204c:	200006a0 	.word	0x200006a0
 8002050:	200006a4 	.word	0x200006a4
 8002054:	200006a8 	.word	0x200006a8
 8002058:	200006ac 	.word	0x200006ac
 800205c:	200006b0 	.word	0x200006b0
 8002060:	402e0000 	.word	0x402e0000
 8002064:	447a0000 	.word	0x447a0000
 8002068:	c47a0000 	.word	0xc47a0000
 800206c:	200006b4 	.word	0x200006b4
 8002070:	200006b8 	.word	0x200006b8
 8002074:	00000000 	.word	0x00000000

08002078 <getfunctionLQR>:
void getfunctionLQR(MPU6050_t *DataStruct){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - timerloop) > 6) {									//Set time loop update and control motor
 8002080:	f000 ffc0 	bl	8003004 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	4b86      	ldr	r3, [pc, #536]	; (80022a0 <getfunctionLQR+0x228>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b06      	cmp	r3, #6
 800208e:	f240 80fc 	bls.w	800228a <getfunctionLQR+0x212>
	    theta = gettheta(enc_l, enc_r)*DEG_TO_RAD; 							//Read theta value and convert to Rad
 8002092:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <getfunctionLQR+0x22c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a84      	ldr	r2, [pc, #528]	; (80022a8 <getfunctionLQR+0x230>)
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fdab 	bl	8001bf8 <gettheta>
 80020a2:	ee10 3a10 	vmov	r3, s0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f9f6 	bl	8000498 <__aeabi_f2d>
 80020ac:	a37a      	add	r3, pc, #488	; (adr r3, 8002298 <getfunctionLQR+0x220>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fa49 	bl	8000548 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd1b 	bl	8000af8 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a79      	ldr	r2, [pc, #484]	; (80022ac <getfunctionLQR+0x234>)
 80020c6:	6013      	str	r3, [r2, #0]
	    psi = (DataStruct->KalmanAngleY + 2)*DEG_TO_RAD;    				//Read psi value and convert to Rad
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d6:	f7fe f881 	bl	80001dc <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	a36d      	add	r3, pc, #436	; (adr r3, 8002298 <getfunctionLQR+0x220>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fa2e 	bl	8000548 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fd00 	bl	8000af8 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a6d      	ldr	r2, [pc, #436]	; (80022b0 <getfunctionLQR+0x238>)
 80020fc:	6013      	str	r3, [r2, #0]
	    phi =  getphi(enc_l, enc_r)*DEG_TO_RAD;    							//Read phi value and convert to Rad
 80020fe:	4b69      	ldr	r3, [pc, #420]	; (80022a4 <getfunctionLQR+0x22c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <getfunctionLQR+0x230>)
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fd99 	bl	8001c40 <getphi>
 800210e:	ee10 3a10 	vmov	r3, s0
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9c0 	bl	8000498 <__aeabi_f2d>
 8002118:	a35f      	add	r3, pc, #380	; (adr r3, 8002298 <getfunctionLQR+0x220>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa13 	bl	8000548 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fce5 	bl	8000af8 <__aeabi_d2f>
 800212e:	4603      	mov	r3, r0
 8002130:	4a60      	ldr	r2, [pc, #384]	; (80022b4 <getfunctionLQR+0x23c>)
 8002132:	6013      	str	r3, [r2, #0]
	    if(abs(DataStruct->KalmanAngleY) <=2) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fcb3 	bl	8000aa8 <__aeabi_d2iz>
 8002142:	4603      	mov	r3, r0
 8002144:	f113 0f02 	cmn.w	r3, #2
 8002148:	db11      	blt.n	800216e <getfunctionLQR+0xf6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fca8 	bl	8000aa8 <__aeabi_d2iz>
 8002158:	4603      	mov	r3, r0
 800215a:	2b02      	cmp	r3, #2
 800215c:	dc07      	bgt.n	800216e <getfunctionLQR+0xf6>
	    	PWM_L = 0;
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <getfunctionLQR+0x240>)
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
	    	PWM_R = 0;
 8002166:	4b55      	ldr	r3, [pc, #340]	; (80022bc <getfunctionLQR+0x244>)
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
	    }
	    //Update time compare with timeloop
	    float dt = (float)(HAL_GetTick() - timer) / 100;
 800216e:	f000 ff49 	bl	8003004 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	4b52      	ldr	r3, [pc, #328]	; (80022c0 <getfunctionLQR+0x248>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002182:	eddf 6a50 	vldr	s13, [pc, #320]	; 80022c4 <getfunctionLQR+0x24c>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	edc7 7a03 	vstr	s15, [r7, #12]
	    timerloop = HAL_GetTick();
 800218e:	f000 ff39 	bl	8003004 <HAL_GetTick>
 8002192:	4603      	mov	r3, r0
 8002194:	4a42      	ldr	r2, [pc, #264]	; (80022a0 <getfunctionLQR+0x228>)
 8002196:	6013      	str	r3, [r2, #0]

	    //Update input angle value
	    thetadot 	= (theta - theta_old)/dt;
 8002198:	4b44      	ldr	r3, [pc, #272]	; (80022ac <getfunctionLQR+0x234>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <getfunctionLQR+0x250>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <getfunctionLQR+0x254>)
 80021b2:	edc3 7a00 	vstr	s15, [r3]
	    psidot 		= (psi - psi_old)/dt;
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <getfunctionLQR+0x238>)
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <getfunctionLQR+0x258>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <getfunctionLQR+0x25c>)
 80021d0:	edc3 7a00 	vstr	s15, [r3]
	    phidot 		= (phi - phi_old)/dt;
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <getfunctionLQR+0x23c>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <getfunctionLQR+0x260>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80021e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <getfunctionLQR+0x264>)
 80021ee:	edc3 7a00 	vstr	s15, [r3]

	    //Update old angle value
	    theta_old = theta;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <getfunctionLQR+0x234>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <getfunctionLQR+0x250>)
 80021f8:	6013      	str	r3, [r2, #0]
	    psi_old = psi;
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <getfunctionLQR+0x238>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <getfunctionLQR+0x258>)
 8002200:	6013      	str	r3, [r2, #0]
	    phi_old = phi;
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <getfunctionLQR+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <getfunctionLQR+0x260>)
 8002208:	6013      	str	r3, [r2, #0]

	    getLQR(theta, thetadot, psi, psidot, phi, phidot);
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <getfunctionLQR+0x234>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <getfunctionLQR+0x254>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <getfunctionLQR+0x238>)
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <getfunctionLQR+0x25c>)
 800221e:	ed93 6a00 	vldr	s12, [r3]
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <getfunctionLQR+0x23c>)
 8002224:	edd3 5a00 	vldr	s11, [r3]
 8002228:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <getfunctionLQR+0x264>)
 800222a:	ed93 5a00 	vldr	s10, [r3]
 800222e:	eef0 2a45 	vmov.f32	s5, s10
 8002232:	eeb0 2a65 	vmov.f32	s4, s11
 8002236:	eef0 1a46 	vmov.f32	s3, s12
 800223a:	eeb0 1a66 	vmov.f32	s2, s13
 800223e:	eef0 0a47 	vmov.f32	s1, s14
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	f7ff fdd7 	bl	8001df8 <getLQR>

	    PWM_L = constrain(PWM_L, -200, 200);
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <getfunctionLQR+0x240>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80022e0 <getfunctionLQR+0x268>
 8002254:	eddf 0a23 	vldr	s1, [pc, #140]	; 80022e4 <getfunctionLQR+0x26c>
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	f7ff fd42 	bl	8001ce4 <constrain>
 8002260:	eef0 7a40 	vmov.f32	s15, s0
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <getfunctionLQR+0x240>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
		PWM_R = constrain(PWM_R, -200, 200);
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <getfunctionLQR+0x244>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80022e0 <getfunctionLQR+0x268>
 8002274:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80022e4 <getfunctionLQR+0x26c>
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	f7ff fd32 	bl	8001ce4 <constrain>
 8002280:	eef0 7a40 	vmov.f32	s15, s0
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <getfunctionLQR+0x244>)
 8002286:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	f3af 8000 	nop.w
 8002298:	a2529d39 	.word	0xa2529d39
 800229c:	3f91df46 	.word	0x3f91df46
 80022a0:	2000054c 	.word	0x2000054c
 80022a4:	20000668 	.word	0x20000668
 80022a8:	2000066c 	.word	0x2000066c
 80022ac:	20000670 	.word	0x20000670
 80022b0:	20000674 	.word	0x20000674
 80022b4:	20000678 	.word	0x20000678
 80022b8:	200006b4 	.word	0x200006b4
 80022bc:	200006b8 	.word	0x200006b8
 80022c0:	20000548 	.word	0x20000548
 80022c4:	42c80000 	.word	0x42c80000
 80022c8:	20000688 	.word	0x20000688
 80022cc:	2000067c 	.word	0x2000067c
 80022d0:	2000068c 	.word	0x2000068c
 80022d4:	20000680 	.word	0x20000680
 80022d8:	20000690 	.word	0x20000690
 80022dc:	20000684 	.word	0x20000684
 80022e0:	43480000 	.word	0x43480000
 80022e4:	c3480000 	.word	0xc3480000

080022e8 <PID_Init>:
//--------------------------------LQR-------------------------------------------------//
void PID_Init()
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	PID_DC_SPEED_L.kP = 1;
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <PID_Init+0x88>)
 80022ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022f2:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_L.kI = 30;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <PID_Init+0x88>)
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <PID_Init+0x8c>)
 80022f8:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_L.kD = 0.001;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <PID_Init+0x88>)
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <PID_Init+0x90>)
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_L.alpha = 0;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <PID_Init+0x88>)
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_L.deltaT = 0.01;
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <PID_Init+0x88>)
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <PID_Init+0x94>)
 800230c:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_L.uI_AboveLimit = 1000;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <PID_Init+0x88>)
 8002310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_L.uI_BelowLimit = -1000;
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <PID_Init+0x88>)
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <PID_Init+0x98>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_L.u_AboveLimit  = 1000;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <PID_Init+0x88>)
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <PID_Init+0x9c>)
 8002320:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_L.u_BelowLimit  = -1000;
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <PID_Init+0x88>)
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <PID_Init+0xa0>)
 8002326:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_SPEED_R.kP = 1;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <PID_Init+0xa4>)
 800232a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800232e:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_R.kI = 30;
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <PID_Init+0xa4>)
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <PID_Init+0x8c>)
 8002334:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_R.kD = 0.001;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <PID_Init+0xa4>)
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <PID_Init+0x90>)
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_R.alpha = 0;
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <PID_Init+0xa4>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_R.deltaT = 0.01;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <PID_Init+0xa4>)
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <PID_Init+0x94>)
 8002348:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_R.uI_AboveLimit = 1000;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <PID_Init+0xa4>)
 800234c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_R.uI_BelowLimit = -1000;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <PID_Init+0xa4>)
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <PID_Init+0x98>)
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_R.u_AboveLimit  = 1000;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <PID_Init+0xa4>)
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <PID_Init+0x9c>)
 800235c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_R.u_BelowLimit  = -1000;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <PID_Init+0xa4>)
 8002360:	4a09      	ldr	r2, [pc, #36]	; (8002388 <PID_Init+0xa0>)
 8002362:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200004a8 	.word	0x200004a8
 8002374:	41f00000 	.word	0x41f00000
 8002378:	3a83126f 	.word	0x3a83126f
 800237c:	3c23d70a 	.word	0x3c23d70a
 8002380:	fffffc18 	.word	0xfffffc18
 8002384:	447a0000 	.word	0x447a0000
 8002388:	c47a0000 	.word	0xc47a0000
 800238c:	200004f8 	.word	0x200004f8

08002390 <PID_Cal_Left>:
void PID_Cal_Left(){
 8002390:	b580      	push	{r7, lr}
 8002392:	ed2d 8b02 	vpush	{d8}
 8002396:	b082      	sub	sp, #8
 8002398:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_L);
 800239a:	4814      	ldr	r0, [pc, #80]	; (80023ec <PID_Cal_Left+0x5c>)
 800239c:	f7fe fd94 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_L, PWM_L, ENC_L.vel_Real);
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <PID_Cal_Left+0x60>)
 80023a2:	ed93 8a00 	vldr	s16, [r3]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <PID_Cal_Left+0x5c>)
 80023a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fba2 	bl	8000af8 <__aeabi_d2f>
 80023b4:	4603      	mov	r3, r0
 80023b6:	ee00 3a90 	vmov	s1, r3
 80023ba:	eeb0 0a48 	vmov.f32	s0, s16
 80023be:	480d      	ldr	r0, [pc, #52]	; (80023f4 <PID_Cal_Left+0x64>)
 80023c0:	f7fe ff7c 	bl	80012bc <Pid_Cal>
	Drive(&Motor_L, &htim3, PID_DC_SPEED_L.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <PID_Cal_Left+0x64>)
 80023c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80023ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ce:	230c      	movs	r3, #12
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2308      	movs	r3, #8
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	4907      	ldr	r1, [pc, #28]	; (80023f8 <PID_Cal_Left+0x68>)
 80023da:	4808      	ldr	r0, [pc, #32]	; (80023fc <PID_Cal_Left+0x6c>)
 80023dc:	f7fe fe68 	bl	80010b0 <Drive>
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	ecbd 8b02 	vpop	{d8}
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200005a8 	.word	0x200005a8
 80023f0:	200006b4 	.word	0x200006b4
 80023f4:	200004a8 	.word	0x200004a8
 80023f8:	2000040c 	.word	0x2000040c
 80023fc:	20000638 	.word	0x20000638

08002400 <PID_Cal_Right>:
void PID_Cal_Right(){
 8002400:	b580      	push	{r7, lr}
 8002402:	ed2d 8b02 	vpush	{d8}
 8002406:	b082      	sub	sp, #8
 8002408:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_R);
 800240a:	4814      	ldr	r0, [pc, #80]	; (800245c <PID_Cal_Right+0x5c>)
 800240c:	f7fe fd5c 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_R, PWM_R, ENC_R.vel_Real);
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <PID_Cal_Right+0x60>)
 8002412:	ed93 8a00 	vldr	s16, [r3]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <PID_Cal_Right+0x5c>)
 8002418:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe fb6a 	bl	8000af8 <__aeabi_d2f>
 8002424:	4603      	mov	r3, r0
 8002426:	ee00 3a90 	vmov	s1, r3
 800242a:	eeb0 0a48 	vmov.f32	s0, s16
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <PID_Cal_Right+0x64>)
 8002430:	f7fe ff44 	bl	80012bc <Pid_Cal>
	Drive(&Motor_R, &htim3, PID_DC_SPEED_R.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <PID_Cal_Right+0x64>)
 8002436:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800243a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243e:	2304      	movs	r3, #4
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	ee17 2a90 	vmov	r2, s15
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <PID_Cal_Right+0x68>)
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <PID_Cal_Right+0x6c>)
 800244c:	f7fe fe30 	bl	80010b0 <Drive>
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	ecbd 8b02 	vpop	{d8}
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200005f0 	.word	0x200005f0
 8002460:	200006b8 	.word	0x200006b8
 8002464:	200004f8 	.word	0x200004f8
 8002468:	2000040c 	.word	0x2000040c
 800246c:	20000650 	.word	0x20000650

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b096      	sub	sp, #88	; 0x58
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f000 fd8f 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f895 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 fa4b 	bl	8002918 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002482:	f000 f8f9 	bl	8002678 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002486:	f000 f925 	bl	80026d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800248a:	f000 f977 	bl	800277c <MX_TIM3_Init>
  MX_TIM4_Init();
 800248e:	f000 f9ef 	bl	8002870 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  while(MPU6050_Init()==1);
 8002492:	bf00      	nop
 8002494:	f7ff f96c 	bl	8001770 <MPU6050_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d0fa      	beq.n	8002494 <main+0x24>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800249e:	2100      	movs	r1, #0
 80024a0:	4835      	ldr	r0, [pc, #212]	; (8002578 <main+0x108>)
 80024a2:	f002 fe2d 	bl	8005100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80024a6:	2104      	movs	r1, #4
 80024a8:	4833      	ldr	r0, [pc, #204]	; (8002578 <main+0x108>)
 80024aa:	f002 fe29 	bl	8005100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80024ae:	2108      	movs	r1, #8
 80024b0:	4831      	ldr	r0, [pc, #196]	; (8002578 <main+0x108>)
 80024b2:	f002 fe25 	bl	8005100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80024b6:	210c      	movs	r1, #12
 80024b8:	482f      	ldr	r0, [pc, #188]	; (8002578 <main+0x108>)
 80024ba:	f002 fe21 	bl	8005100 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80024be:	213c      	movs	r1, #60	; 0x3c
 80024c0:	482e      	ldr	r0, [pc, #184]	; (800257c <main+0x10c>)
 80024c2:	f002 ff8b 	bl	80053dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80024c6:	213c      	movs	r1, #60	; 0x3c
 80024c8:	482d      	ldr	r0, [pc, #180]	; (8002580 <main+0x110>)
 80024ca:	f002 ff87 	bl	80053dc <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_L, &htim2, 370, 0.01);
 80024ce:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8002570 <main+0x100>
 80024d2:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80024d6:	4929      	ldr	r1, [pc, #164]	; (800257c <main+0x10c>)
 80024d8:	482a      	ldr	r0, [pc, #168]	; (8002584 <main+0x114>)
 80024da:	f7fe fcdb 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_R, &htim4, 370, 0.01);
 80024de:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8002570 <main+0x100>
 80024e2:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80024e6:	4926      	ldr	r1, [pc, #152]	; (8002580 <main+0x110>)
 80024e8:	4827      	ldr	r0, [pc, #156]	; (8002588 <main+0x118>)
 80024ea:	f7fe fcd3 	bl	8000e94 <EncoderSetting>

  LQR_Init();
 80024ee:	f7ff fc53 	bl	8001d98 <LQR_Init>
  PID_Init();
 80024f2:	f7ff fef9 	bl	80022e8 <PID_Init>
  StopandReset(&MPU6050);
 80024f6:	4825      	ldr	r0, [pc, #148]	; (800258c <main+0x11c>)
 80024f8:	f7ff fc1e 	bl	8001d38 <StopandReset>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, StartMPU6050ask, osPriorityBelowNormal, 0, 128);
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <main+0x120>)
 80024fe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002502:	461d      	mov	r5, r3
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800250c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 8002510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fcf9 	bl	8005f0e <osThreadCreate>
 800251c:	4603      	mov	r3, r0
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <main+0x124>)
 8002520:	6013      	str	r3, [r2, #0]

  /* definition and creation of FunctionTask */
  osThreadDef(FunctionTask, StartTaskFunction, osPriorityNormal, 0, 128);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <main+0x128>)
 8002524:	f107 0420 	add.w	r4, r7, #32
 8002528:	461d      	mov	r5, r3
 800252a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FunctionTaskHandle = osThreadCreate(osThread(FunctionTask), NULL);
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f003 fce6 	bl	8005f0e <osThreadCreate>
 8002542:	4603      	mov	r3, r0
 8002544:	4a15      	ldr	r2, [pc, #84]	; (800259c <main+0x12c>)
 8002546:	6013      	str	r3, [r2, #0]

  /* definition and creation of Cal_PID */
  osThreadDef(Cal_PID, StartTaskCalPID, osPriorityNormal, 0, 128);
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <main+0x130>)
 800254a:	1d3c      	adds	r4, r7, #4
 800254c:	461d      	mov	r5, r3
 800254e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Cal_PIDHandle = osThreadCreate(osThread(Cal_PID), NULL);
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fcd5 	bl	8005f0e <osThreadCreate>
 8002564:	4603      	mov	r3, r0
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <main+0x134>)
 8002568:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800256a:	f003 fcc9 	bl	8005f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800256e:	e7fe      	b.n	800256e <main+0xfe>
 8002570:	47ae147b 	.word	0x47ae147b
 8002574:	3f847ae1 	.word	0x3f847ae1
 8002578:	2000040c 	.word	0x2000040c
 800257c:	200003c4 	.word	0x200003c4
 8002580:	20000454 	.word	0x20000454
 8002584:	200005a8 	.word	0x200005a8
 8002588:	200005f0 	.word	0x200005f0
 800258c:	20000550 	.word	0x20000550
 8002590:	08007aec 	.word	0x08007aec
 8002594:	2000049c 	.word	0x2000049c
 8002598:	08007b18 	.word	0x08007b18
 800259c:	200004a0 	.word	0x200004a0
 80025a0:	08007b3c 	.word	0x08007b3c
 80025a4:	200004a4 	.word	0x200004a4

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b094      	sub	sp, #80	; 0x50
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0320 	add.w	r3, r7, #32
 80025b2:	2230      	movs	r2, #48	; 0x30
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fed8 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <SystemClock_Config+0xc8>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <SystemClock_Config+0xc8>)
 80025d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <SystemClock_Config+0xc8>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <SystemClock_Config+0xcc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <SystemClock_Config+0xcc>)
 80025f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <SystemClock_Config+0xcc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002604:	2301      	movs	r3, #1
 8002606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260e:	2302      	movs	r3, #2
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002618:	2304      	movs	r3, #4
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800261c:	2348      	movs	r3, #72	; 0x48
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002620:	2302      	movs	r3, #2
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002624:	2304      	movs	r3, #4
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	4618      	mov	r0, r3
 800262e:	f001 ff97 	bl	8004560 <HAL_RCC_OscConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002638:	f000 fa64 	bl	8002b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263c:	230f      	movs	r3, #15
 800263e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002640:	2302      	movs	r3, #2
 8002642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	2102      	movs	r1, #2
 8002658:	4618      	mov	r0, r3
 800265a:	f002 f9f9 	bl	8004a50 <HAL_RCC_ClockConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002664:	f000 fa4e 	bl	8002b04 <Error_Handler>
  }
}
 8002668:	bf00      	nop
 800266a:	3750      	adds	r7, #80	; 0x50
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000

08002678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <MX_I2C1_Init+0x50>)
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <MX_I2C1_Init+0x54>)
 8002680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_I2C1_Init+0x50>)
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <MX_I2C1_Init+0x58>)
 8002686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_I2C1_Init+0x50>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_I2C1_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_I2C1_Init+0x50>)
 8002696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800269a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <MX_I2C1_Init+0x50>)
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_I2C1_Init+0x50>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <MX_I2C1_Init+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_I2C1_Init+0x50>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_I2C1_Init+0x50>)
 80026b6:	f000 ff2f 	bl	8003518 <HAL_I2C_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026c0:	f000 fa20 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000370 	.word	0x20000370
 80026cc:	40005400 	.word	0x40005400
 80026d0:	000186a0 	.word	0x000186a0

080026d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fe42 	bl	800736c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MX_TIM2_Init+0xa4>)
 80026f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_TIM2_Init+0xa4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_TIM2_Init+0xa4>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_TIM2_Init+0xa4>)
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_TIM2_Init+0xa4>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MX_TIM2_Init+0xa4>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002718:	2303      	movs	r3, #3
 800271a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002730:	2301      	movs	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <MX_TIM2_Init+0xa4>)
 8002744:	f002 fda4 	bl	8005290 <HAL_TIM_Encoder_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800274e:	f000 f9d9 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <MX_TIM2_Init+0xa4>)
 8002760:	f003 fb26 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800276a:	f000 f9cb 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	3730      	adds	r7, #48	; 0x30
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200003c4 	.word	0x200003c4

0800277c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002782:	f107 0320 	add.w	r3, r7, #32
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <MX_TIM3_Init+0xec>)
 80027a0:	4a32      	ldr	r2, [pc, #200]	; (800286c <MX_TIM3_Init+0xf0>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <MX_TIM3_Init+0xec>)
 80027a6:	2206      	movs	r2, #6
 80027a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <MX_TIM3_Init+0xec>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80027b0:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <MX_TIM3_Init+0xec>)
 80027b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <MX_TIM3_Init+0xec>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <MX_TIM3_Init+0xec>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027c4:	4828      	ldr	r0, [pc, #160]	; (8002868 <MX_TIM3_Init+0xec>)
 80027c6:	f002 fc4b 	bl	8005060 <HAL_TIM_PWM_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027d0:	f000 f998 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	4619      	mov	r1, r3
 80027e2:	4821      	ldr	r0, [pc, #132]	; (8002868 <MX_TIM3_Init+0xec>)
 80027e4:	f003 fae4 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80027ee:	f000 f989 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f2:	2360      	movs	r3, #96	; 0x60
 80027f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2200      	movs	r2, #0
 8002806:	4619      	mov	r1, r3
 8002808:	4817      	ldr	r0, [pc, #92]	; (8002868 <MX_TIM3_Init+0xec>)
 800280a:	f002 ff65 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002814:	f000 f976 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2204      	movs	r2, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4812      	ldr	r0, [pc, #72]	; (8002868 <MX_TIM3_Init+0xec>)
 8002820:	f002 ff5a 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800282a:	f000 f96b 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2208      	movs	r2, #8
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <MX_TIM3_Init+0xec>)
 8002836:	f002 ff4f 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002840:	f000 f960 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	220c      	movs	r2, #12
 8002848:	4619      	mov	r1, r3
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM3_Init+0xec>)
 800284c:	f002 ff44 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002856:	f000 f955 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800285a:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM3_Init+0xec>)
 800285c:	f000 fa6a 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8002860:	bf00      	nop
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000040c 	.word	0x2000040c
 800286c:	40000400 	.word	0x40000400

08002870 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fd74 	bl	800736c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <MX_TIM4_Init+0xa0>)
 800288e:	4a21      	ldr	r2, [pc, #132]	; (8002914 <MX_TIM4_Init+0xa4>)
 8002890:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002892:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <MX_TIM4_Init+0xa0>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_TIM4_Init+0xa0>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_TIM4_Init+0xa0>)
 80028a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_TIM4_Init+0xa0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_TIM4_Init+0xa0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028b2:	2303      	movs	r3, #3
 80028b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028ca:	2301      	movs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	4619      	mov	r1, r3
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <MX_TIM4_Init+0xa0>)
 80028de:	f002 fcd7 	bl	8005290 <HAL_TIM_Encoder_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80028e8:	f000 f90c 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_TIM4_Init+0xa0>)
 80028fa:	f003 fa59 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002904:	f000 f8fe 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000454 	.word	0x20000454
 8002914:	40000800 	.word	0x40000800

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MX_GPIO_Init+0x84>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <MX_GPIO_Init+0x84>)
 8002928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <MX_GPIO_Init+0x84>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_GPIO_Init+0x84>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <MX_GPIO_Init+0x84>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_GPIO_Init+0x84>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_GPIO_Init+0x84>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <MX_GPIO_Init+0x84>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <MX_GPIO_Init+0x84>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_GPIO_Init+0x84>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <MX_GPIO_Init+0x84>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_GPIO_Init+0x84>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <StartMPU6050ask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPU6050ask */
void StartMPU6050ask(void const * argument)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_All(&MPU6050);
 80029a8:	4812      	ldr	r0, [pc, #72]	; (80029f4 <StartMPU6050ask+0x54>)
 80029aa:	f7fe ff35 	bl	8001818 <MPU6050_Read_All>
	enc_l=CountRead(&ENC_L, count_ModeX1);
 80029ae:	2100      	movs	r1, #0
 80029b0:	4811      	ldr	r0, [pc, #68]	; (80029f8 <StartMPU6050ask+0x58>)
 80029b2:	f7fe fb17 	bl	8000fe4 <CountRead>
 80029b6:	ec53 2b10 	vmov	r2, r3, d0
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f873 	bl	8000aa8 <__aeabi_d2iz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <StartMPU6050ask+0x5c>)
 80029c6:	6013      	str	r3, [r2, #0]
	enc_r=CountRead(&ENC_R, count_ModeX1);
 80029c8:	2100      	movs	r1, #0
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <StartMPU6050ask+0x60>)
 80029cc:	f7fe fb0a 	bl	8000fe4 <CountRead>
 80029d0:	ec53 2b10 	vmov	r2, r3, d0
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f866 	bl	8000aa8 <__aeabi_d2iz>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <StartMPU6050ask+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]
	PID_Cal_Left();
 80029e2:	f7ff fcd5 	bl	8002390 <PID_Cal_Left>
	PID_Cal_Right();
 80029e6:	f7ff fd0b 	bl	8002400 <PID_Cal_Right>
    osDelay(10);
 80029ea:	200a      	movs	r0, #10
 80029ec:	f003 fadb 	bl	8005fa6 <osDelay>
	MPU6050_Read_All(&MPU6050);
 80029f0:	e7da      	b.n	80029a8 <StartMPU6050ask+0x8>
 80029f2:	bf00      	nop
 80029f4:	20000550 	.word	0x20000550
 80029f8:	200005a8 	.word	0x200005a8
 80029fc:	20000668 	.word	0x20000668
 8002a00:	200005f0 	.word	0x200005f0
 8002a04:	2000066c 	.word	0x2000066c

08002a08 <StartTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFunction */
void StartTaskFunction(void const * argument)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	getfunctionLQR(&MPU6050);
 8002a10:	4824      	ldr	r0, [pc, #144]	; (8002aa4 <StartTaskFunction+0x9c>)
 8002a12:	f7ff fb31 	bl	8002078 <getfunctionLQR>
	if(MPU6050.KalmanAngleY > 3 || MPU6050.KalmanAngleY <-7)
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <StartTaskFunction+0x9c>)
 8002a18:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <StartTaskFunction+0xa0>)
 8002a22:	f7fe f821 	bl	8000a68 <__aeabi_dcmpgt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <StartTaskFunction+0x3a>
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <StartTaskFunction+0x9c>)
 8002a2e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <StartTaskFunction+0xa4>)
 8002a38:	f7fd fff8 	bl	8000a2c <__aeabi_dcmplt>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d015      	beq.n	8002a6e <StartTaskFunction+0x66>
	{
		PID_DC_SPEED_L.kP = 10;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <StartTaskFunction+0xac>)
 8002a46:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 10;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <StartTaskFunction+0xac>)
 8002a4c:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <StartTaskFunction+0xb0>)
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 10;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <StartTaskFunction+0xb4>)
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <StartTaskFunction+0xac>)
 8002a58:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 10;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <StartTaskFunction+0xb4>)
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <StartTaskFunction+0xac>)
 8002a5e:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <StartTaskFunction+0xb4>)
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <StartTaskFunction+0xb0>)
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -15000;
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <StartTaskFunction+0xb8>)
 8002a68:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <StartTaskFunction+0xbc>)
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e016      	b.n	8002a9c <StartTaskFunction+0x94>
	}
	else{
		PID_DC_SPEED_L.kP = 1;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a74:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 30;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <StartTaskFunction+0xc0>)
 8002a7a:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <StartTaskFunction+0xa8>)
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <StartTaskFunction+0xb0>)
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 1;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <StartTaskFunction+0xb4>)
 8002a84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a88:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 30;
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <StartTaskFunction+0xb4>)
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <StartTaskFunction+0xc0>)
 8002a8e:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <StartTaskFunction+0xb4>)
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <StartTaskFunction+0xb0>)
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -8000;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <StartTaskFunction+0xb8>)
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <StartTaskFunction+0xc4>)
 8002a9a:	601a      	str	r2, [r3, #0]
	}


    osDelay(10);
 8002a9c:	200a      	movs	r0, #10
 8002a9e:	f003 fa82 	bl	8005fa6 <osDelay>
	getfunctionLQR(&MPU6050);
 8002aa2:	e7b5      	b.n	8002a10 <StartTaskFunction+0x8>
 8002aa4:	20000550 	.word	0x20000550
 8002aa8:	40080000 	.word	0x40080000
 8002aac:	c01c0000 	.word	0xc01c0000
 8002ab0:	200004a8 	.word	0x200004a8
 8002ab4:	41200000 	.word	0x41200000
 8002ab8:	3a83126f 	.word	0x3a83126f
 8002abc:	200004f8 	.word	0x200004f8
 8002ac0:	200006a0 	.word	0x200006a0
 8002ac4:	c66a6000 	.word	0xc66a6000
 8002ac8:	41f00000 	.word	0x41f00000
 8002acc:	c5fa0000 	.word	0xc5fa0000

08002ad0 <StartTaskCalPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalPID */
void StartTaskCalPID(void const * argument)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCalPID */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002ad8:	200a      	movs	r0, #10
 8002ada:	f003 fa64 	bl	8005fa6 <osDelay>
 8002ade:	e7fb      	b.n	8002ad8 <StartTaskCalPID+0x8>

08002ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002af2:	f000 fa73 	bl	8002fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40002000 	.word	0x40002000

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <Error_Handler+0x8>
	...

08002b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_MspInit+0x54>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_MspInit+0x54>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_MspInit+0x54>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_MspInit+0x54>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_MspInit+0x54>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_MspInit+0x54>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	210f      	movs	r1, #15
 8002b52:	f06f 0001 	mvn.w	r0, #1
 8002b56:	f000 fb19 	bl	800318c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_I2C_MspInit+0x84>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12b      	bne.n	8002be2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002baa:	2312      	movs	r3, #18
 8002bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <HAL_I2C_MspInit+0x8c>)
 8002bc2:	f000 fb0d 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c18:	d12c      	bne.n	8002c74 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a2f      	ldr	r2, [pc, #188]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c52:	2303      	movs	r3, #3
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c62:	2301      	movs	r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	481d      	ldr	r0, [pc, #116]	; (8002ce4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c6e:	f000 fab7 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c72:	e031      	b.n	8002cd8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d12c      	bne.n	8002cd8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <HAL_TIM_Encoder_MspInit+0xf4>)
 8002cd4:	f000 fa84 	bl	80031e0 <HAL_GPIO_Init>
}
 8002cd8:	bf00      	nop
 8002cda:	3730      	adds	r7, #48	; 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40020c00 	.word	0x40020c00

08002cf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_TIM_PWM_MspInit+0x40>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_TIM_PWM_MspInit+0x40>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_TIM_PWM_MspInit+0x40>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_MspPostInit+0xa4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d13b      	bne.n	8002dce <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_TIM_MspPostInit+0xa8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d8e:	23c0      	movs	r3, #192	; 0xc0
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002daa:	f000 fa19 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dae:	2303      	movs	r3, #3
 8002db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4806      	ldr	r0, [pc, #24]	; (8002de4 <HAL_TIM_MspPostInit+0xb0>)
 8002dca:	f000 fa09 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400

08002de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08e      	sub	sp, #56	; 0x38
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_InitTick+0xe4>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_InitTick+0xe4>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_InitTick+0xe4>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e14:	f107 0210 	add.w	r2, r7, #16
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 f822 	bl	8004e68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f002 f807 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8002e32:	6378      	str	r0, [r7, #52]	; 0x34
 8002e34:	e004      	b.n	8002e40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e36:	f002 f803 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <HAL_InitTick+0xe8>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_InitTick+0xf0>)
 8002e52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e5a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002e74:	4817      	ldr	r0, [pc, #92]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e76:	f002 f829 	bl	8004ecc <HAL_TIM_Base_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11b      	bne.n	8002ec0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002e88:	4812      	ldr	r0, [pc, #72]	; (8002ed4 <HAL_InitTick+0xec>)
 8002e8a:	f002 f879 	bl	8004f80 <HAL_TIM_Base_Start_IT>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e9c:	202d      	movs	r0, #45	; 0x2d
 8002e9e:	f000 f991 	bl	80031c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d808      	bhi.n	8002eba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	202d      	movs	r0, #45	; 0x2d
 8002eae:	f000 f96d 	bl	800318c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_InitTick+0xf4>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	e002      	b.n	8002ec0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	; 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	431bde83 	.word	0x431bde83
 8002ed4:	200006bc 	.word	0x200006bc
 8002ed8:	40002000 	.word	0x40002000
 8002edc:	20000094 	.word	0x20000094

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eea:	e7fe      	b.n	8002eea <HardFault_Handler+0x4>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler+0x4>

08002ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef6:	e7fe      	b.n	8002ef6 <BusFault_Handler+0x4>

08002ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <UsageFault_Handler+0x4>

08002efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002f12:	f002 faf1 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200006bc 	.word	0x200006bc

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f48:	f7ff ffea 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4e:	490d      	ldr	r1, [pc, #52]	; (8002f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f64:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f72:	f004 fa09 	bl	8007388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7ff fa7b 	bl	8002470 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002f88:	08007bf8 	.word	0x08007bf8
  ldr r2, =_sbss
 8002f8c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002f90:	20004594 	.word	0x20004594

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_Init+0x40>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_Init+0x40>)
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_Init+0x40>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f8d8 	bl	8003176 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc6:	200f      	movs	r0, #15
 8002fc8:	f7ff ff0e 	bl	8002de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fcc:	f7ff fda0 	bl	8002b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x24>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_IncTick+0x24>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000098 	.word	0x20000098
 8003000:	20000704 	.word	0x20000704

08003004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return uwTick;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_GetTick+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000704 	.word	0x20000704

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304e:	4a04      	ldr	r2, [pc, #16]	; (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	60d3      	str	r3, [r2, #12]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	; (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff4c 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319e:	f7ff ff61 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f7ff ffb1 	bl	8003110 <NVIC_EncodePriority>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff80 	bl	80030bc <__NVIC_SetPriority>
}
 80031bc:	bf00      	nop
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff54 	bl	8003080 <__NVIC_EnableIRQ>
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e16b      	b.n	80034d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 815a 	bne.w	80034ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d005      	beq.n	8003232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322e:	2b02      	cmp	r3, #2
 8003230:	d130      	bne.n	8003294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003268:	2201      	movs	r2, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0201 	and.w	r2, r3, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d017      	beq.n	80032d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80b4 	beq.w	80034ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b60      	ldr	r3, [pc, #384]	; (80034ec <HAL_GPIO_Init+0x30c>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a5f      	ldr	r2, [pc, #380]	; (80034ec <HAL_GPIO_Init+0x30c>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b5d      	ldr	r3, [pc, #372]	; (80034ec <HAL_GPIO_Init+0x30c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003382:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_GPIO_Init+0x310>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_GPIO_Init+0x314>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_Init+0x226>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <HAL_GPIO_Init+0x318>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_Init+0x222>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a50      	ldr	r2, [pc, #320]	; (80034fc <HAL_GPIO_Init+0x31c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_Init+0x21e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4f      	ldr	r2, [pc, #316]	; (8003500 <HAL_GPIO_Init+0x320>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x21a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4e      	ldr	r2, [pc, #312]	; (8003504 <HAL_GPIO_Init+0x324>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x216>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <HAL_GPIO_Init+0x328>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4c      	ldr	r2, [pc, #304]	; (800350c <HAL_GPIO_Init+0x32c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x20e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_GPIO_Init+0x330>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x20a>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e00e      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e00c      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00a      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e008      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x228>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x228>
 8003406:	2300      	movs	r3, #0
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003418:	4935      	ldr	r1, [pc, #212]	; (80034f0 <HAL_GPIO_Init+0x310>)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003426:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_GPIO_Init+0x334>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344a:	4a32      	ldr	r2, [pc, #200]	; (8003514 <HAL_GPIO_Init+0x334>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_GPIO_Init+0x334>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_GPIO_Init+0x334>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_GPIO_Init+0x334>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_GPIO_Init+0x334>)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_GPIO_Init+0x334>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_GPIO_Init+0x334>)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3301      	adds	r3, #1
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	f67f ae90 	bls.w	80031fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40020000 	.word	0x40020000
 80034f8:	40020400 	.word	0x40020400
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020c00 	.word	0x40020c00
 8003504:	40021000 	.word	0x40021000
 8003508:	40021400 	.word	0x40021400
 800350c:	40021800 	.word	0x40021800
 8003510:	40021c00 	.word	0x40021c00
 8003514:	40013c00 	.word	0x40013c00

08003518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e12b      	b.n	8003782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fb12 	bl	8002b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800357c:	f001 fc60 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a81      	ldr	r2, [pc, #516]	; (800378c <HAL_I2C_Init+0x274>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d807      	bhi.n	800359c <HAL_I2C_Init+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_I2C_Init+0x278>)
 8003590:	4293      	cmp	r3, r2
 8003592:	bf94      	ite	ls
 8003594:	2301      	movls	r3, #1
 8003596:	2300      	movhi	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e006      	b.n	80035aa <HAL_I2C_Init+0x92>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a7d      	ldr	r2, [pc, #500]	; (8003794 <HAL_I2C_Init+0x27c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0e7      	b.n	8003782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a78      	ldr	r2, [pc, #480]	; (8003798 <HAL_I2C_Init+0x280>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0c9b      	lsrs	r3, r3, #18
 80035bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_I2C_Init+0x274>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <HAL_I2C_Init+0xd4>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	e009      	b.n	8003600 <HAL_I2C_Init+0xe8>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_I2C_Init+0x284>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	3301      	adds	r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	495c      	ldr	r1, [pc, #368]	; (800378c <HAL_I2C_Init+0x274>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d819      	bhi.n	8003654 <HAL_I2C_Init+0x13c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e59      	subs	r1, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fbb1 f3f3 	udiv	r3, r1, r3
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003634:	400b      	ands	r3, r1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_I2C_Init+0x138>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e59      	subs	r1, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fbb1 f3f3 	udiv	r3, r1, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364e:	e051      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003650:	2304      	movs	r3, #4
 8003652:	e04f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <HAL_I2C_Init+0x168>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Init+0x18e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x196>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_I2C_Init+0x1bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e58      	subs	r0, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	440b      	add	r3, r1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6911      	ldr	r1, [r2, #16]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000186a0 	.word	0x000186a0
 8003790:	001e847f 	.word	0x001e847f
 8003794:	003d08ff 	.word	0x003d08ff
 8003798:	431bde83 	.word	0x431bde83
 800379c:	10624dd3 	.word	0x10624dd3

080037a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7ff fc23 	bl	8003004 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80d9 	bne.w	8003980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	496d      	ldr	r1, [pc, #436]	; (800398c <HAL_I2C_Mem_Write+0x1ec>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc8b 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0cc      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x56>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0c5      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_I2C_Mem_Write+0x1f0>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	88f8      	ldrh	r0, [r7, #6]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fac2 	bl	8003df8 <I2C_RequestMemoryWrite>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d052      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e081      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fd50 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d11b      	bne.n	8003920 <HAL_I2C_Mem_Write+0x180>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1aa      	bne.n	800387e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fd43 	bl	80043b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e016      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000

08003994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7ff fb29 	bl	8003004 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	f040 8214 	bne.w	8003dea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2319      	movs	r3, #25
 80039c8:	2201      	movs	r2, #1
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_I2C_Mem_Read+0x224>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fb91 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	e207      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x56>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e200      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2222      	movs	r2, #34	; 0x22
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_I2C_Mem_Read+0x228>)
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a52:	88f8      	ldrh	r0, [r7, #6]
 8003a54:	893a      	ldrh	r2, [r7, #8]
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4603      	mov	r3, r0
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa5e 	bl	8003f24 <I2C_RequestMemoryRead>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1bc      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e190      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e170      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d11b      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	e150      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b38:	e144      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 80f1 	bhi.w	8003d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d123      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fc79 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e145      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b92:	e117      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d14e      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_I2C_Mem_Read+0x22c>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 faa4 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e11a      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c38:	e0c4      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	496c      	ldr	r1, [pc, #432]	; (8003df4 <HAL_I2C_Mem_Read+0x460>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa55 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0cb      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4955      	ldr	r1, [pc, #340]	; (8003df4 <HAL_I2C_Mem_Read+0x460>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa27 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e09d      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d24:	e04e      	b.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fb8c 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e058      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d124      	bne.n	8003dc4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d107      	bne.n	8003d92 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f aeb6 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00010004 	.word	0x00010004

08003df8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f960 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e48:	d103      	bne.n	8003e52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e05f      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	492d      	ldr	r1, [pc, #180]	; (8003f20 <I2C_RequestMemoryWrite+0x128>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f9bb 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04c      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa46 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e02b      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	e021      	b.n	8003f14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed0:	893b      	ldrh	r3, [r7, #8]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa20 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e005      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0a:	893b      	ldrh	r3, [r7, #8]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00010002 	.word	0x00010002

08003f24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8c2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f84:	d103      	bne.n	8003f8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0aa      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	4952      	ldr	r1, [pc, #328]	; (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f91d 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e097      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9a8 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e076      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e021      	b.n	8004050 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f982 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e050      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	6a39      	ldr	r1, [r7, #32]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f967 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d107      	bne.n	8004078 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e035      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2200      	movs	r2, #0
 8004094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f82b 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d103      	bne.n	80040bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e013      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	4906      	ldr	r1, [pc, #24]	; (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f886 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e048      	b.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d044      	beq.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe ff79 	bl	8003004 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d139      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10d      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x56>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	e00c      	b.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	d116      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e023      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10d      	bne.n	80041be <I2C_WaitOnFlagUntilTimeout+0xca>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	e00c      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d093      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	e071      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d123      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e067      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d041      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fe fed4 	bl	8003004 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d136      	bne.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e021      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10c      	bne.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e00b      	b.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f af6d 	bne.w	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f8e3 	bl	8004502 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fe fe59 	bl	8003004 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	e034      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f89b 	bl	8004502 <I2C_IsAcknowledgeFailed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e034      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d028      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fe11 	bl	8003004 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d016      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d1c3      	bne.n	80043c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004454:	e049      	b.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d119      	bne.n	8004498 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e030      	b.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fe fdb4 	bl	8003004 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11d      	bne.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d016      	beq.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d1ae      	bne.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004518:	d11b      	bne.n	8004552 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004522:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e267      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b85      	ldr	r3, [pc, #532]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004592:	2b08      	cmp	r3, #8
 8004594:	d112      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a2:	d10b      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	4b7e      	ldr	r3, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05b      	beq.n	8004668 <HAL_RCC_OscConfig+0x108>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d157      	bne.n	8004668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e242      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0x74>
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e01d      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6f      	ldr	r2, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6c      	ldr	r2, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045f8:	4b69      	ldr	r3, [pc, #420]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe fcf4 	bl	8003004 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fe fcf0 	bl	8003004 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e207      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0xc0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fe fce0 	bl	8003004 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fe fcdc 	bl	8003004 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1f3      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b51      	ldr	r3, [pc, #324]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0xe8>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1c7      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fe fc95 	bl	8003004 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fe fc91 	bl	8003004 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1a8      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fe fc74 	bl	8003004 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fe fc70 	bl	8003004 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e187      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fe fc54 	bl	8003004 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fe fc50 	bl	8003004 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e167      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x200>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fe fc3d 	bl	8003004 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fe fc39 	bl	8003004 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e150      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b77      	ldr	r3, [pc, #476]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b74      	ldr	r3, [pc, #464]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fe fbf9 	bl	8003004 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fe fbf5 	bl	8003004 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e10c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x2ea>
 800483c:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a63      	ldr	r2, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x30c>
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800486c:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fe fbba 	bl	8003004 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fe fbb6 	bl	8003004 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0cb      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x334>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fe fba4 	bl	8003004 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fe fba0 	bl	8003004 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0b5      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a1 	beq.w	8004a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d05c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d141      	bne.n	8004996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe fb74 	bl	8003004 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fe fb70 	bl	8003004 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e087      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	491b      	ldr	r1, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fe fb49 	bl	8003004 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fe fb45 	bl	8003004 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e05c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x416>
 8004994:	e054      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe fb32 	bl	8003004 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fe fb2e 	bl	8003004 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
 80049c2:	e03d      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e038      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40007000 	.word	0x40007000
 80049d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x4ec>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d028      	beq.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d121      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cc      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d90c      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494d      	ldr	r1, [pc, #308]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e067      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4934      	ldr	r1, [pc, #208]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fe fa60 	bl	8003004 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fe fa5c 	bl	8003004 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 020c 	and.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1eb      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20c      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e032      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4916      	ldr	r1, [pc, #88]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd6:	f000 f821 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490a      	ldr	r1, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe f8f6 	bl	8002de8 <HAL_InitTick>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	08007b60 	.word	0x08007b60
 8004c14:	20000090 	.word	0x20000090
 8004c18:	20000094 	.word	0x20000094

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b094      	sub	sp, #80	; 0x50
 8004c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c34:	4b79      	ldr	r3, [pc, #484]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d00d      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x40>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	f200 80e1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c4e:	e0db      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b73      	ldr	r3, [pc, #460]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c54:	e0db      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5a:	e0d8      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5c:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c66:	4b6d      	ldr	r3, [pc, #436]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	2200      	movs	r2, #0
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	0159      	lsls	r1, r3, #5
 8004c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca0:	0150      	lsls	r0, r2, #5
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	1a51      	subs	r1, r2, r1
 8004caa:	6139      	str	r1, [r7, #16]
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	018b      	lsls	r3, r1, #6
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cca:	4651      	mov	r1, sl
 8004ccc:	018a      	lsls	r2, r1, #6
 8004cce:	4651      	mov	r1, sl
 8004cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	eb49 0303 	adc.w	r3, r9, r3
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	024b      	lsls	r3, r1, #9
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d18:	4621      	mov	r1, r4
 8004d1a:	024a      	lsls	r2, r1, #9
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d22:	2200      	movs	r2, #0
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2c:	f7fb ff34 	bl	8000b98 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e058      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	4611      	mov	r1, r2
 8004d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d66:	0150      	lsls	r0, r2, #5
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d90:	eb63 050b 	sbc.w	r5, r3, fp
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	00eb      	lsls	r3, r5, #3
 8004d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da2:	00e2      	lsls	r2, r4, #3
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb45 0303 	adc.w	r3, r5, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de0:	f7fb feda 	bl	8000b98 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3750      	adds	r7, #80	; 0x50
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000090 	.word	0x20000090

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	08007b70 	.word	0x08007b70

08004e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	220f      	movs	r2, #15
 8004e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0203 	and.w	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_RCC_GetClockConfig+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0207 	and.w	r2, r3, #7
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e041      	b.n	8004f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f839 	bl	8004f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f000 fcce 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e04e      	b.n	8005036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800

08005060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e041      	b.n	80050f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fd fe32 	bl	8002cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f000 fc04 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start+0x24>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e022      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d109      	bne.n	800513e <HAL_TIM_PWM_Start+0x3e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e015      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start+0x58>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e008      	b.n	800516a <HAL_TIM_PWM_Start+0x6a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07c      	b.n	800526c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start+0x82>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005180:	e013      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0x92>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	e00b      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a0:	e003      	b.n	80051aa <HAL_TIM_PWM_Start+0xaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fdd6 	bl	8005d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <HAL_TIM_PWM_Start+0x174>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_TIM_PWM_Start+0xcc>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <HAL_TIM_PWM_Start+0x178>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_PWM_Start+0xd0>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_Start+0xd2>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <HAL_TIM_PWM_Start+0x174>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d022      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d01d      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_TIM_PWM_Start+0x17c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d018      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <HAL_TIM_PWM_Start+0x180>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <HAL_TIM_PWM_Start+0x184>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_TIM_PWM_Start+0x178>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d009      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIM_PWM_Start+0x188>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <HAL_TIM_PWM_Start+0x136>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_TIM_PWM_Start+0x18c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d111      	bne.n	800525a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b06      	cmp	r3, #6
 8005246:	d010      	beq.n	800526a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	e007      	b.n	800526a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40010000 	.word	0x40010000
 8005278:	40010400 	.word	0x40010400
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40001800 	.word	0x40001800

08005290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e097      	b.n	80053d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fd fc9d 	bl	8002bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f000 fae1 	bl	80058ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	4313      	orrs	r3, r2
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005330:	f023 030c 	bic.w	r3, r3, #12
 8005334:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	4313      	orrs	r3, r2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	011a      	lsls	r2, r3, #4
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	031b      	lsls	r3, r3, #12
 8005360:	4313      	orrs	r3, r2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	4313      	orrs	r3, r2
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005404:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d102      	bne.n	8005418 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005412:	7b7b      	ldrb	r3, [r7, #13]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e069      	b.n	80054f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542c:	e031      	b.n	8005492 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d110      	bne.n	8005456 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d102      	bne.n	8005440 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800543a:	7b3b      	ldrb	r3, [r7, #12]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e055      	b.n	80054f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005454:	e01d      	b.n	8005492 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d108      	bne.n	800546e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005462:	7b7b      	ldrb	r3, [r7, #13]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005468:	7b3b      	ldrb	r3, [r7, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e03e      	b.n	80054f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_Encoder_Start+0xc4>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b04      	cmp	r3, #4
 800549c:	d008      	beq.n	80054b0 <HAL_TIM_Encoder_Start+0xd4>
 800549e:	e00f      	b.n	80054c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fc5b 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 80054ae:	e016      	b.n	80054de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	2104      	movs	r1, #4
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fc53 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 80054be:	e00e      	b.n	80054de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fc4b 	bl	8005d64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	2104      	movs	r1, #4
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fc44 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 80054dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0202 	mvn.w	r2, #2
 800552c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f994 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f986 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f997 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0204 	mvn.w	r2, #4
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f96e 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f960 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f971 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d020      	beq.n	80055f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0208 	mvn.w	r2, #8
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2204      	movs	r2, #4
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f948 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f93a 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f94b 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d020      	beq.n	8005640 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01b      	beq.n	8005640 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0210 	mvn.w	r2, #16
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2208      	movs	r2, #8
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f922 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f914 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f925 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0201 	mvn.w	r2, #1
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd fa3e 	bl	8002ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fc1a 	bl	8005ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8f6 	bl	8005898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0220 	mvn.w	r2, #32
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fbec 	bl	8005ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0ae      	b.n	8005854 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	f200 809f 	bhi.w	8005844 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005741 	.word	0x08005741
 8005710:	08005845 	.word	0x08005845
 8005714:	08005845 	.word	0x08005845
 8005718:	08005845 	.word	0x08005845
 800571c:	08005781 	.word	0x08005781
 8005720:	08005845 	.word	0x08005845
 8005724:	08005845 	.word	0x08005845
 8005728:	08005845 	.word	0x08005845
 800572c:	080057c3 	.word	0x080057c3
 8005730:	08005845 	.word	0x08005845
 8005734:	08005845 	.word	0x08005845
 8005738:	08005845 	.word	0x08005845
 800573c:	08005803 	.word	0x08005803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f95c 	bl	8005a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0208 	orr.w	r2, r2, #8
 800575a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0204 	bic.w	r2, r2, #4
 800576a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6999      	ldr	r1, [r3, #24]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	619a      	str	r2, [r3, #24]
      break;
 800577e:	e064      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f9ac 	bl	8005ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	619a      	str	r2, [r3, #24]
      break;
 80057c0:	e043      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fa01 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0208 	orr.w	r2, r2, #8
 80057dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0204 	bic.w	r2, r2, #4
 80057ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	61da      	str	r2, [r3, #28]
      break;
 8005800:	e023      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fa55 	bl	8005cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	021a      	lsls	r2, r3, #8
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	61da      	str	r2, [r3, #28]
      break;
 8005842:	e002      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a46      	ldr	r2, [pc, #280]	; (80059d8 <TIM_Base_SetConfig+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a43      	ldr	r2, [pc, #268]	; (80059dc <TIM_Base_SetConfig+0x130>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a42      	ldr	r2, [pc, #264]	; (80059e0 <TIM_Base_SetConfig+0x134>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a41      	ldr	r2, [pc, #260]	; (80059e4 <TIM_Base_SetConfig+0x138>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a40      	ldr	r2, [pc, #256]	; (80059e8 <TIM_Base_SetConfig+0x13c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a35      	ldr	r2, [pc, #212]	; (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d027      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a32      	ldr	r2, [pc, #200]	; (80059dc <TIM_Base_SetConfig+0x130>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a31      	ldr	r2, [pc, #196]	; (80059e0 <TIM_Base_SetConfig+0x134>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <TIM_Base_SetConfig+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <TIM_Base_SetConfig+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <TIM_Base_SetConfig+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <TIM_Base_SetConfig+0x144>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2c      	ldr	r2, [pc, #176]	; (80059f4 <TIM_Base_SetConfig+0x148>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2b      	ldr	r2, [pc, #172]	; (80059f8 <TIM_Base_SetConfig+0x14c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <TIM_Base_SetConfig+0x150>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <TIM_Base_SetConfig+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]
  }
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40001800 	.word	0x40001800
 80059fc:	40001c00 	.word	0x40001c00
 8005a00:	40002000 	.word	0x40002000

08005a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 0201 	bic.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0302 	bic.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x64>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC1_SetConfig+0x8e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f023 0210 	bic.w	r2, r3, #16
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0x68>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10d      	bne.n	8005b68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC2_SetConfig+0x94>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a21      	ldr	r2, [pc, #132]	; (8005cb0 <TIM_OC3_SetConfig+0xe0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x66>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a20      	ldr	r2, [pc, #128]	; (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10d      	bne.n	8005c52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <TIM_OC3_SetConfig+0xe0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC3_SetConfig+0x92>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d113      	bne.n	8005c8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <TIM_OC4_SetConfig+0xa4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC4_SetConfig+0x68>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <TIM_OC4_SetConfig+0xa8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d109      	bne.n	8005d34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400

08005d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2201      	movs	r2, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1a      	ldr	r2, [r3, #32]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	401a      	ands	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e05a      	b.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d022      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d01d      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d018      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00e      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a18      	ldr	r2, [pc, #96]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d10c      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40001800 	.word	0x40001800

08005ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ee2:	2b84      	cmp	r3, #132	; 0x84
 8005ee4:	d005      	beq.n	8005ef2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ee6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	3303      	adds	r3, #3
 8005ef0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f04:	f000 fade 	bl	80064c4 <vTaskStartScheduler>
  
  return osOK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f10:	b089      	sub	sp, #36	; 0x24
 8005f12:	af04      	add	r7, sp, #16
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d020      	beq.n	8005f62 <osThreadCreate+0x54>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01c      	beq.n	8005f62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685c      	ldr	r4, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691e      	ldr	r6, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff ffc8 	bl	8005ed0 <makeFreeRtosPriority>
 8005f40:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f4a:	9202      	str	r2, [sp, #8]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	9100      	str	r1, [sp, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	4632      	mov	r2, r6
 8005f54:	4629      	mov	r1, r5
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f8ed 	bl	8006136 <xTaskCreateStatic>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e01c      	b.n	8005f9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685c      	ldr	r4, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff ffaa 	bl	8005ed0 <makeFreeRtosPriority>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	9200      	str	r2, [sp, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	4632      	mov	r2, r6
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 f92f 	bl	80061f0 <xTaskCreate>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fa6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <osDelay+0x16>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e000      	b.n	8005fbe <osDelay+0x18>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa4c 	bl	800645c <vTaskDelay>
  
  return osOK;
 8005fc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f103 0208 	add.w	r2, r3, #8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f103 0208 	add.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f103 0208 	add.w	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d103      	bne.n	8006090 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e00c      	b.n	80060aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3308      	adds	r3, #8
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e002      	b.n	800609e <vListInsert+0x2e>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d2f6      	bcs.n	8006098 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6892      	ldr	r2, [r2, #8]
 80060f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6852      	ldr	r2, [r2, #4]
 8006102:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d103      	bne.n	8006116 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	1e5a      	subs	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08e      	sub	sp, #56	; 0x38
 800613a:	af04      	add	r7, sp, #16
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <xTaskCreateStatic+0x46>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	61fb      	str	r3, [r7, #28]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617c:	2354      	movs	r3, #84	; 0x54
 800617e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b54      	cmp	r3, #84	; 0x54
 8006184:	d00a      	beq.n	800619c <xTaskCreateStatic+0x66>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	61bb      	str	r3, [r7, #24]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800619c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <xTaskCreateStatic+0xac>
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01b      	beq.n	80061e2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061bc:	2300      	movs	r3, #0
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f850 	bl	800627a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061dc:	f000 f8d4 	bl	8006388 <prvAddNewTaskToReadyList>
 80061e0:	e001      	b.n	80061e6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	; 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	; 0x30
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fec7 	bl	8006f98 <pvPortMalloc>
 800620a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006212:	2054      	movs	r0, #84	; 0x54
 8006214:	f000 fec0 	bl	8006f98 <pvPortMalloc>
 8006218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
 8006226:	e005      	b.n	8006234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f000 ff81 	bl	8007130 <vPortFree>
 800622e:	e001      	b.n	8006234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	2300      	movs	r3, #0
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f80e 	bl	800627a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625e:	69f8      	ldr	r0, [r7, #28]
 8006260:	f000 f892 	bl	8006388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e002      	b.n	8006270 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800626a:	f04f 33ff 	mov.w	r3, #4294967295
 800626e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006270:	69bb      	ldr	r3, [r7, #24]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b088      	sub	sp, #32
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006292:	3b01      	subs	r3, #1
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	617b      	str	r3, [r7, #20]
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01f      	beq.n	8006308 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062c8:	2300      	movs	r3, #0
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e012      	b.n	80062f4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	7819      	ldrb	r1, [r3, #0]
 80062d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	3334      	adds	r3, #52	; 0x34
 80062de:	460a      	mov	r2, r1
 80062e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3301      	adds	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d9e9      	bls.n	80062ce <prvInitialiseNewTask+0x54>
 80062fa:	e000      	b.n	80062fe <prvInitialiseNewTask+0x84>
			{
				break;
 80062fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006306:	e003      	b.n	8006310 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b06      	cmp	r3, #6
 8006314:	d901      	bls.n	800631a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006316:	2306      	movs	r3, #6
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	2200      	movs	r2, #0
 800632a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fe6c 	bl	800600e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	3318      	adds	r3, #24
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fe67 	bl	800600e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006344:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f1c3 0207 	rsb	r2, r3, #7
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2200      	movs	r2, #0
 800635a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	69b8      	ldr	r0, [r7, #24]
 800636a:	f000 fc05 	bl	8006b78 <pxPortInitialiseStack>
 800636e:	4602      	mov	r2, r0
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006390:	f000 fd20 	bl	8006dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006394:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a29      	ldr	r2, [pc, #164]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 800639c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063a6:	4a27      	ldr	r2, [pc, #156]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <prvAddNewTaskToReadyList+0xb8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d110      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b4:	f000 fabc 	bl	8006930 <prvInitialiseTaskLists>
 80063b8:	e00d      	b.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <prvAddNewTaskToReadyList+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c2:	4b20      	ldr	r3, [pc, #128]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d802      	bhi.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	2201      	movs	r2, #1
 80063e6:	409a      	lsls	r2, r3
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	4a18      	ldr	r2, [pc, #96]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f7ff fe0d 	bl	8006028 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800640e:	f000 fd11 	bl	8006e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <prvAddNewTaskToReadyList+0xc0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00e      	beq.n	8006438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <prvAddNewTaskToReadyList+0xbc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	429a      	cmp	r2, r3
 8006426:	d207      	bcs.n	8006438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000808 	.word	0x20000808
 8006444:	20000708 	.word	0x20000708
 8006448:	20000814 	.word	0x20000814
 800644c:	20000824 	.word	0x20000824
 8006450:	20000810 	.word	0x20000810
 8006454:	2000070c 	.word	0x2000070c
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d017      	beq.n	800649e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <vTaskDelay+0x60>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <vTaskDelay+0x30>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	60bb      	str	r3, [r7, #8]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800648c:	f000 f87a 	bl	8006584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006490:	2100      	movs	r1, #0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fb0a 	bl	8006aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006498:	f000 f882 	bl	80065a0 <xTaskResumeAll>
 800649c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d107      	bne.n	80064b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <vTaskDelay+0x64>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000830 	.word	0x20000830
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064d2:	463a      	mov	r2, r7
 80064d4:	1d39      	adds	r1, r7, #4
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa ffd2 	bl	8001484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	9202      	str	r2, [sp, #8]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	2300      	movs	r3, #0
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2300      	movs	r3, #0
 80064f0:	460a      	mov	r2, r1
 80064f2:	491e      	ldr	r1, [pc, #120]	; (800656c <vTaskStartScheduler+0xa8>)
 80064f4:	481e      	ldr	r0, [pc, #120]	; (8006570 <vTaskStartScheduler+0xac>)
 80064f6:	f7ff fe1e 	bl	8006136 <xTaskCreateStatic>
 80064fa:	4603      	mov	r3, r0
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <vTaskStartScheduler+0xb0>)
 80064fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <vTaskStartScheduler+0xb0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e001      	b.n	8006512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d116      	bne.n	8006546 <vTaskStartScheduler+0x82>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	613b      	str	r3, [r7, #16]
}
 800652a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <vTaskStartScheduler+0xb4>)
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <vTaskStartScheduler+0xb8>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <vTaskStartScheduler+0xbc>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006540:	f000 fba6 	bl	8006c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006544:	e00e      	b.n	8006564 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d10a      	bne.n	8006564 <vTaskStartScheduler+0xa0>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60fb      	str	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vTaskStartScheduler+0x9e>
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	08007b58 	.word	0x08007b58
 8006570:	08006901 	.word	0x08006901
 8006574:	2000082c 	.word	0x2000082c
 8006578:	20000828 	.word	0x20000828
 800657c:	20000814 	.word	0x20000814
 8006580:	2000080c 	.word	0x2000080c

08006584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <vTaskSuspendAll+0x18>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	4a03      	ldr	r2, [pc, #12]	; (800659c <vTaskSuspendAll+0x18>)
 8006590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000830 	.word	0x20000830

080065a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ae:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <xTaskResumeAll+0x114>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xTaskResumeAll+0x2c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	603b      	str	r3, [r7, #0]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065cc:	f000 fc02 	bl	8006dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065d0:	4b38      	ldr	r3, [pc, #224]	; (80066b4 <xTaskResumeAll+0x114>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <xTaskResumeAll+0x114>)
 80065d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065da:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <xTaskResumeAll+0x114>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d161      	bne.n	80066a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e2:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <xTaskResumeAll+0x118>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05d      	beq.n	80066a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ea:	e02e      	b.n	800664a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ec:	4b33      	ldr	r3, [pc, #204]	; (80066bc <xTaskResumeAll+0x11c>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fd72 	bl	80060e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fd6d 	bl	80060e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	2201      	movs	r2, #1
 800660e:	409a      	lsls	r2, r3
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <xTaskResumeAll+0x120>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4313      	orrs	r3, r2
 8006616:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <xTaskResumeAll+0x120>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <xTaskResumeAll+0x124>)
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7ff fcf9 	bl	8006028 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <xTaskResumeAll+0x128>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006644:	4b21      	ldr	r3, [pc, #132]	; (80066cc <xTaskResumeAll+0x12c>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664a:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <xTaskResumeAll+0x11c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1cc      	bne.n	80065ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006658:	f000 fa08 	bl	8006a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800665c:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <xTaskResumeAll+0x130>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006668:	f000 f836 	bl	80066d8 <xTaskIncrementTick>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <xTaskResumeAll+0x12c>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3b01      	subs	r3, #1
 800667c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f1      	bne.n	8006668 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <xTaskResumeAll+0x130>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <xTaskResumeAll+0x12c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <xTaskResumeAll+0x134>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f000 fbc5 	bl	8006e34 <vPortExitCritical>

	return xAlreadyYielded;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000830 	.word	0x20000830
 80066b8:	20000808 	.word	0x20000808
 80066bc:	200007c8 	.word	0x200007c8
 80066c0:	20000810 	.word	0x20000810
 80066c4:	2000070c 	.word	0x2000070c
 80066c8:	20000708 	.word	0x20000708
 80066cc:	2000081c 	.word	0x2000081c
 80066d0:	20000818 	.word	0x20000818
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e2:	4b4e      	ldr	r3, [pc, #312]	; (800681c <xTaskIncrementTick+0x144>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f040 808e 	bne.w	8006808 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066ec:	4b4c      	ldr	r3, [pc, #304]	; (8006820 <xTaskIncrementTick+0x148>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066f4:	4a4a      	ldr	r2, [pc, #296]	; (8006820 <xTaskIncrementTick+0x148>)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d120      	bne.n	8006742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006700:	4b48      	ldr	r3, [pc, #288]	; (8006824 <xTaskIncrementTick+0x14c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <xTaskIncrementTick+0x48>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xTaskIncrementTick+0x46>
 8006720:	4b40      	ldr	r3, [pc, #256]	; (8006824 <xTaskIncrementTick+0x14c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b40      	ldr	r3, [pc, #256]	; (8006828 <xTaskIncrementTick+0x150>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <xTaskIncrementTick+0x14c>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4a3e      	ldr	r2, [pc, #248]	; (8006828 <xTaskIncrementTick+0x150>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <xTaskIncrementTick+0x154>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	4a3c      	ldr	r2, [pc, #240]	; (800682c <xTaskIncrementTick+0x154>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	f000 f995 	bl	8006a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006742:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <xTaskIncrementTick+0x158>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d348      	bcc.n	80067de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674c:	4b35      	ldr	r3, [pc, #212]	; (8006824 <xTaskIncrementTick+0x14c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006756:	4b36      	ldr	r3, [pc, #216]	; (8006830 <xTaskIncrementTick+0x158>)
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	601a      	str	r2, [r3, #0]
					break;
 800675e:	e03e      	b.n	80067de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006760:	4b30      	ldr	r3, [pc, #192]	; (8006824 <xTaskIncrementTick+0x14c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	d203      	bcs.n	8006780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006778:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <xTaskIncrementTick+0x158>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800677e:	e02e      	b.n	80067de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fcac 	bl	80060e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3318      	adds	r3, #24
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fca3 	bl	80060e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	2201      	movs	r2, #1
 80067a2:	409a      	lsls	r2, r3
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <xTaskIncrementTick+0x15c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	4a22      	ldr	r2, [pc, #136]	; (8006834 <xTaskIncrementTick+0x15c>)
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <xTaskIncrementTick+0x160>)
 80067bc:	441a      	add	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f7ff fc2f 	bl	8006028 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	4b1b      	ldr	r3, [pc, #108]	; (800683c <xTaskIncrementTick+0x164>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3b9      	bcc.n	800674c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067dc:	e7b6      	b.n	800674c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067de:	4b17      	ldr	r3, [pc, #92]	; (800683c <xTaskIncrementTick+0x164>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	4914      	ldr	r1, [pc, #80]	; (8006838 <xTaskIncrementTick+0x160>)
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d901      	bls.n	80067fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80067f6:	2301      	movs	r3, #1
 80067f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067fa:	4b11      	ldr	r3, [pc, #68]	; (8006840 <xTaskIncrementTick+0x168>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e004      	b.n	8006812 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <xTaskIncrementTick+0x16c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	4a0d      	ldr	r2, [pc, #52]	; (8006844 <xTaskIncrementTick+0x16c>)
 8006810:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006812:	697b      	ldr	r3, [r7, #20]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000830 	.word	0x20000830
 8006820:	2000080c 	.word	0x2000080c
 8006824:	200007c0 	.word	0x200007c0
 8006828:	200007c4 	.word	0x200007c4
 800682c:	20000820 	.word	0x20000820
 8006830:	20000828 	.word	0x20000828
 8006834:	20000810 	.word	0x20000810
 8006838:	2000070c 	.word	0x2000070c
 800683c:	20000708 	.word	0x20000708
 8006840:	2000081c 	.word	0x2000081c
 8006844:	20000818 	.word	0x20000818

08006848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800684e:	4b27      	ldr	r3, [pc, #156]	; (80068ec <vTaskSwitchContext+0xa4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <vTaskSwitchContext+0xa8>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800685c:	e03f      	b.n	80068de <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800685e:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <vTaskSwitchContext+0xa8>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <vTaskSwitchContext+0xac>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	fab3 f383 	clz	r3, r3
 8006870:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	f1c3 031f 	rsb	r3, r3, #31
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	491f      	ldr	r1, [pc, #124]	; (80068f8 <vTaskSwitchContext+0xb0>)
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vTaskSwitchContext+0x5a>
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <vTaskSwitchContext+0xb0>)
 80068b0:	4413      	add	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3308      	adds	r3, #8
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d104      	bne.n	80068d4 <vTaskSwitchContext+0x8c>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	4a08      	ldr	r2, [pc, #32]	; (80068fc <vTaskSwitchContext+0xb4>)
 80068dc:	6013      	str	r3, [r2, #0]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000830 	.word	0x20000830
 80068f0:	2000081c 	.word	0x2000081c
 80068f4:	20000810 	.word	0x20000810
 80068f8:	2000070c 	.word	0x2000070c
 80068fc:	20000708 	.word	0x20000708

08006900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006908:	f000 f852 	bl	80069b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <prvIdleTask+0x28>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d9f9      	bls.n	8006908 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <prvIdleTask+0x2c>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006924:	e7f0      	b.n	8006908 <prvIdleTask+0x8>
 8006926:	bf00      	nop
 8006928:	2000070c 	.word	0x2000070c
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	e00c      	b.n	8006956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <prvInitialiseTaskLists+0x60>)
 8006948:	4413      	add	r3, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fb3f 	bl	8005fce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	607b      	str	r3, [r7, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b06      	cmp	r3, #6
 800695a:	d9ef      	bls.n	800693c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800695c:	480d      	ldr	r0, [pc, #52]	; (8006994 <prvInitialiseTaskLists+0x64>)
 800695e:	f7ff fb36 	bl	8005fce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <prvInitialiseTaskLists+0x68>)
 8006964:	f7ff fb33 	bl	8005fce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006968:	480c      	ldr	r0, [pc, #48]	; (800699c <prvInitialiseTaskLists+0x6c>)
 800696a:	f7ff fb30 	bl	8005fce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800696e:	480c      	ldr	r0, [pc, #48]	; (80069a0 <prvInitialiseTaskLists+0x70>)
 8006970:	f7ff fb2d 	bl	8005fce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006974:	480b      	ldr	r0, [pc, #44]	; (80069a4 <prvInitialiseTaskLists+0x74>)
 8006976:	f7ff fb2a 	bl	8005fce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <prvInitialiseTaskLists+0x78>)
 800697c:	4a05      	ldr	r2, [pc, #20]	; (8006994 <prvInitialiseTaskLists+0x64>)
 800697e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvInitialiseTaskLists+0x7c>)
 8006982:	4a05      	ldr	r2, [pc, #20]	; (8006998 <prvInitialiseTaskLists+0x68>)
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000070c 	.word	0x2000070c
 8006994:	20000798 	.word	0x20000798
 8006998:	200007ac 	.word	0x200007ac
 800699c:	200007c8 	.word	0x200007c8
 80069a0:	200007dc 	.word	0x200007dc
 80069a4:	200007f4 	.word	0x200007f4
 80069a8:	200007c0 	.word	0x200007c0
 80069ac:	200007c4 	.word	0x200007c4

080069b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b6:	e019      	b.n	80069ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069b8:	f000 fa0c 	bl	8006dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <prvCheckTasksWaitingTermination+0x50>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fb8a 	bl	80060e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <prvCheckTasksWaitingTermination+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <prvCheckTasksWaitingTermination+0x54>)
 80069d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3b01      	subs	r3, #1
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069e2:	f000 fa27 	bl	8006e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f810 	bl	8006a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e1      	bne.n	80069b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	200007dc 	.word	0x200007dc
 8006a04:	20000808 	.word	0x20000808
 8006a08:	200007f0 	.word	0x200007f0

08006a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fb84 	bl	8007130 <vPortFree>
				vPortFree( pxTCB );
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fb81 	bl	8007130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a2e:	e018      	b.n	8006a62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d103      	bne.n	8006a42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb78 	bl	8007130 <vPortFree>
	}
 8006a40:	e00f      	b.n	8006a62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d00a      	beq.n	8006a62 <prvDeleteTCB+0x56>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60fb      	str	r3, [r7, #12]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <prvDeleteTCB+0x54>
	}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a72:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a84:	e008      	b.n	8006a98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a86:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <prvResetNextTaskUnblockTime+0x38>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a04      	ldr	r2, [pc, #16]	; (8006aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a96:	6013      	str	r3, [r2, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	200007c0 	.word	0x200007c0
 8006aa8:	20000828 	.word	0x20000828

08006aac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006abc:	4b28      	ldr	r3, [pc, #160]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fb0d 	bl	80060e2 <uxListRemove>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10b      	bne.n	8006ae6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43da      	mvns	r2, r3
 8006adc:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	4a20      	ldr	r2, [pc, #128]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ae4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d10a      	bne.n	8006b04 <prvAddCurrentTaskToDelayedList+0x58>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af4:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	481a      	ldr	r0, [pc, #104]	; (8006b68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006afe:	f7ff fa93 	bl	8006028 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b02:	e026      	b.n	8006b52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d209      	bcs.n	8006b30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7ff faa1 	bl	8006070 <vListInsert>
}
 8006b2e:	e010      	b.n	8006b52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7ff fa97 	bl	8006070 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d202      	bcs.n	8006b52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b4c:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2000080c 	.word	0x2000080c
 8006b60:	20000708 	.word	0x20000708
 8006b64:	20000810 	.word	0x20000810
 8006b68:	200007f4 	.word	0x200007f4
 8006b6c:	200007c4 	.word	0x200007c4
 8006b70:	200007c0 	.word	0x200007c0
 8006b74:	20000828 	.word	0x20000828

08006b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3b04      	subs	r3, #4
 8006b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3b04      	subs	r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0201 	bic.w	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <pxPortInitialiseStack+0x64>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b14      	subs	r3, #20
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f06f 0202 	mvn.w	r2, #2
 8006bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b20      	subs	r3, #32
 8006bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	08006be1 	.word	0x08006be1

08006be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <prvTaskExitError+0x54>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d00a      	beq.n	8006c0a <prvTaskExitError+0x2a>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <prvTaskExitError+0x28>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c1e:	bf00      	nop
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0fc      	beq.n	8006c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	2000009c 	.word	0x2000009c
	...

08006c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	4770      	bx	lr
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst2>:
 8006c60:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <prvPortStartFirstTask+0x24>)
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f380 8808 	msr	MSP, r0
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8814 	msr	CONTROL, r0
 8006c7a:	b662      	cpsie	i
 8006c7c:	b661      	cpsie	f
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	df00      	svc	0
 8006c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c8a:	bf00      	nop
 8006c8c:	e000ed08 	.word	0xe000ed08

08006c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c96:	4b46      	ldr	r3, [pc, #280]	; (8006db0 <xPortStartScheduler+0x120>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a46      	ldr	r2, [pc, #280]	; (8006db4 <xPortStartScheduler+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10a      	bne.n	8006cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	613b      	str	r3, [r7, #16]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cb6:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <xPortStartScheduler+0x120>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <xPortStartScheduler+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10a      	bne.n	8006cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cd6:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cfe:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d04:	e009      	b.n	8006d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d06:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4a2d      	ldr	r2, [pc, #180]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d0ef      	beq.n	8006d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1c3 0307 	rsb	r3, r3, #7
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00a      	beq.n	8006d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d5a:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d7e:	f000 f8dd 	bl	8006f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <xPortStartScheduler+0x13c>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d88:	f000 f8fc 	bl	8006f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xPortStartScheduler+0x140>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0f      	ldr	r2, [pc, #60]	; (8006dd0 <xPortStartScheduler+0x140>)
 8006d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d98:	f7ff ff66 	bl	8006c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d9c:	f7ff fd54 	bl	8006848 <vTaskSwitchContext>
	prvTaskExitError();
 8006da0:	f7ff ff1e 	bl	8006be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	e000ed00 	.word	0xe000ed00
 8006db4:	410fc271 	.word	0x410fc271
 8006db8:	410fc270 	.word	0x410fc270
 8006dbc:	e000e400 	.word	0xe000e400
 8006dc0:	20000834 	.word	0x20000834
 8006dc4:	20000838 	.word	0x20000838
 8006dc8:	e000ed20 	.word	0xe000ed20
 8006dcc:	2000009c 	.word	0x2000009c
 8006dd0:	e000ef34 	.word	0xe000ef34

08006dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	607b      	str	r3, [r7, #4]
}
 8006dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <vPortEnterCritical+0x58>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <vPortEnterCritical+0x58>)
 8006df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <vPortEnterCritical+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10f      	bne.n	8006e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <vPortEnterCritical+0x5c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	603b      	str	r3, [r7, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortEnterCritical+0x4a>
	}
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	2000009c 	.word	0x2000009c
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <vPortExitCritical+0x50>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <vPortExitCritical+0x24>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	607b      	str	r3, [r7, #4]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <vPortExitCritical+0x50>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <vPortExitCritical+0x50>)
 8006e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <vPortExitCritical+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <vPortExitCritical+0x42>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	2000009c 	.word	0x2000009c
	...

08006e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e90:	f3ef 8009 	mrs	r0, PSP
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <pxCurrentTCBConst>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f01e 0f10 	tst.w	lr, #16
 8006ea0:	bf08      	it	eq
 8006ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006eb4:	f380 8811 	msr	BASEPRI, r0
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f7ff fcc2 	bl	8006848 <vTaskSwitchContext>
 8006ec4:	f04f 0000 	mov.w	r0, #0
 8006ec8:	f380 8811 	msr	BASEPRI, r0
 8006ecc:	bc09      	pop	{r0, r3}
 8006ece:	6819      	ldr	r1, [r3, #0]
 8006ed0:	6808      	ldr	r0, [r1, #0]
 8006ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	f01e 0f10 	tst.w	lr, #16
 8006eda:	bf08      	it	eq
 8006edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ee0:	f380 8809 	msr	PSP, r0
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w

08006ef0 <pxCurrentTCBConst>:
 8006ef0:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	607b      	str	r3, [r7, #4]
}
 8006f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f7ff fbe1 	bl	80066d8 <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <SysTick_Handler+0x40>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
}
 8006f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <vPortSetupTimerInterrupt+0x38>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <vPortSetupTimerInterrupt+0x3c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <vPortSetupTimerInterrupt+0x40>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <vPortSetupTimerInterrupt+0x44>)
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000e010 	.word	0xe000e010
 8006f74:	e000e018 	.word	0xe000e018
 8006f78:	20000090 	.word	0x20000090
 8006f7c:	10624dd3 	.word	0x10624dd3
 8006f80:	e000e014 	.word	0xe000e014

08006f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f94 <vPortEnableVFP+0x10>
 8006f88:	6801      	ldr	r1, [r0, #0]
 8006f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f8e:	6001      	str	r1, [r0, #0]
 8006f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f92:	bf00      	nop
 8006f94:	e000ed88 	.word	0xe000ed88

08006f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fa4:	f7ff faee 	bl	8006584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fa8:	4b5b      	ldr	r3, [pc, #364]	; (8007118 <pvPortMalloc+0x180>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fb0:	f000 f920 	bl	80071f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fb4:	4b59      	ldr	r3, [pc, #356]	; (800711c <pvPortMalloc+0x184>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f040 8093 	bne.w	80070e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01d      	beq.n	8007004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fc8:	2208      	movs	r2, #8
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d014      	beq.n	8007004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <pvPortMalloc+0x6c>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	617b      	str	r3, [r7, #20]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d06e      	beq.n	80070e8 <pvPortMalloc+0x150>
 800700a:	4b45      	ldr	r3, [pc, #276]	; (8007120 <pvPortMalloc+0x188>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d869      	bhi.n	80070e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007014:	4b43      	ldr	r3, [pc, #268]	; (8007124 <pvPortMalloc+0x18c>)
 8007016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007018:	4b42      	ldr	r3, [pc, #264]	; (8007124 <pvPortMalloc+0x18c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800701e:	e004      	b.n	800702a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d903      	bls.n	800703c <pvPortMalloc+0xa4>
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1f1      	bne.n	8007020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800703c:	4b36      	ldr	r3, [pc, #216]	; (8007118 <pvPortMalloc+0x180>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	429a      	cmp	r2, r3
 8007044:	d050      	beq.n	80070e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2208      	movs	r2, #8
 800704c:	4413      	add	r3, r2
 800704e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	2308      	movs	r3, #8
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	429a      	cmp	r2, r3
 8007066:	d91f      	bls.n	80070a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <pvPortMalloc+0xf8>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	613b      	str	r3, [r7, #16]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070a2:	69b8      	ldr	r0, [r7, #24]
 80070a4:	f000 f908 	bl	80072b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <pvPortMalloc+0x188>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <pvPortMalloc+0x188>)
 80070b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070b6:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <pvPortMalloc+0x188>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <pvPortMalloc+0x190>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d203      	bcs.n	80070ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070c2:	4b17      	ldr	r3, [pc, #92]	; (8007120 <pvPortMalloc+0x188>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a18      	ldr	r2, [pc, #96]	; (8007128 <pvPortMalloc+0x190>)
 80070c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <pvPortMalloc+0x184>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <pvPortMalloc+0x194>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <pvPortMalloc+0x194>)
 80070e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e8:	f7ff fa5a 	bl	80065a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <pvPortMalloc+0x174>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <pvPortMalloc+0x172>
	return pvReturn;
 800710c:	69fb      	ldr	r3, [r7, #28]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3728      	adds	r7, #40	; 0x28
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20004444 	.word	0x20004444
 800711c:	20004458 	.word	0x20004458
 8007120:	20004448 	.word	0x20004448
 8007124:	2000443c 	.word	0x2000443c
 8007128:	2000444c 	.word	0x2000444c
 800712c:	20004450 	.word	0x20004450

08007130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d04d      	beq.n	80071de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007142:	2308      	movs	r3, #8
 8007144:	425b      	negs	r3, r3
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <vPortFree+0xb8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <vPortFree+0x44>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60fb      	str	r3, [r7, #12]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <vPortFree+0x62>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60bb      	str	r3, [r7, #8]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <vPortFree+0xb8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01e      	beq.n	80071de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11a      	bne.n	80071de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <vPortFree+0xb8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	401a      	ands	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071b8:	f7ff f9e4 	bl	8006584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <vPortFree+0xbc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <vPortFree+0xbc>)
 80071c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f000 f874 	bl	80072b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <vPortFree+0xc0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <vPortFree+0xc0>)
 80071d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071da:	f7ff f9e1 	bl	80065a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071de:	bf00      	nop
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20004458 	.word	0x20004458
 80071ec:	20004448 	.word	0x20004448
 80071f0:	20004454 	.word	0x20004454

080071f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007200:	4b27      	ldr	r3, [pc, #156]	; (80072a0 <prvHeapInit+0xac>)
 8007202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00c      	beq.n	8007228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3307      	adds	r3, #7
 8007212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0307 	bic.w	r3, r3, #7
 800721a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	4a1f      	ldr	r2, [pc, #124]	; (80072a0 <prvHeapInit+0xac>)
 8007224:	4413      	add	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <prvHeapInit+0xb0>)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007232:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <prvHeapInit+0xb0>)
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	4413      	add	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007240:	2208      	movs	r2, #8
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <prvHeapInit+0xb4>)
 8007254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <prvHeapInit+0xb4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <prvHeapInit+0xb4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <prvHeapInit+0xb4>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <prvHeapInit+0xb8>)
 8007282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <prvHeapInit+0xbc>)
 800728a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <prvHeapInit+0xc0>)
 800728e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	2000083c 	.word	0x2000083c
 80072a4:	2000443c 	.word	0x2000443c
 80072a8:	20004444 	.word	0x20004444
 80072ac:	2000444c 	.word	0x2000444c
 80072b0:	20004448 	.word	0x20004448
 80072b4:	20004458 	.word	0x20004458

080072b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072c0:	4b28      	ldr	r3, [pc, #160]	; (8007364 <prvInsertBlockIntoFreeList+0xac>)
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e002      	b.n	80072cc <prvInsertBlockIntoFreeList+0x14>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d8f7      	bhi.n	80072c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d108      	bne.n	80072fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	441a      	add	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d118      	bne.n	8007340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <prvInsertBlockIntoFreeList+0xb0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d00d      	beq.n	8007336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	441a      	add	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e008      	b.n	8007348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <prvInsertBlockIntoFreeList+0xb0>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e003      	b.n	8007348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	429a      	cmp	r2, r3
 800734e:	d002      	beq.n	8007356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000443c 	.word	0x2000443c
 8007368:	20004444 	.word	0x20004444

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <__errno>:
 800737c:	4b01      	ldr	r3, [pc, #4]	; (8007384 <__errno+0x8>)
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	200000ec 	.word	0x200000ec

08007388 <__libc_init_array>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4d0d      	ldr	r5, [pc, #52]	; (80073c0 <__libc_init_array+0x38>)
 800738c:	4c0d      	ldr	r4, [pc, #52]	; (80073c4 <__libc_init_array+0x3c>)
 800738e:	1b64      	subs	r4, r4, r5
 8007390:	10a4      	asrs	r4, r4, #2
 8007392:	2600      	movs	r6, #0
 8007394:	42a6      	cmp	r6, r4
 8007396:	d109      	bne.n	80073ac <__libc_init_array+0x24>
 8007398:	4d0b      	ldr	r5, [pc, #44]	; (80073c8 <__libc_init_array+0x40>)
 800739a:	4c0c      	ldr	r4, [pc, #48]	; (80073cc <__libc_init_array+0x44>)
 800739c:	f000 fb92 	bl	8007ac4 <_init>
 80073a0:	1b64      	subs	r4, r4, r5
 80073a2:	10a4      	asrs	r4, r4, #2
 80073a4:	2600      	movs	r6, #0
 80073a6:	42a6      	cmp	r6, r4
 80073a8:	d105      	bne.n	80073b6 <__libc_init_array+0x2e>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b0:	4798      	blx	r3
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7ee      	b.n	8007394 <__libc_init_array+0xc>
 80073b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ba:	4798      	blx	r3
 80073bc:	3601      	adds	r6, #1
 80073be:	e7f2      	b.n	80073a6 <__libc_init_array+0x1e>
 80073c0:	08007bf0 	.word	0x08007bf0
 80073c4:	08007bf0 	.word	0x08007bf0
 80073c8:	08007bf0 	.word	0x08007bf0
 80073cc:	08007bf4 	.word	0x08007bf4

080073d0 <atan2>:
 80073d0:	f000 bab2 	b.w	8007938 <__ieee754_atan2>

080073d4 <sqrt>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	ed2d 8b02 	vpush	{d8}
 80073da:	ec55 4b10 	vmov	r4, r5, d0
 80073de:	f000 f9d1 	bl	8007784 <__ieee754_sqrt>
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	eeb0 8a40 	vmov.f32	s16, s0
 80073ee:	eef0 8a60 	vmov.f32	s17, s1
 80073f2:	f7f9 fb43 	bl	8000a7c <__aeabi_dcmpun>
 80073f6:	b990      	cbnz	r0, 800741e <sqrt+0x4a>
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f9 fb14 	bl	8000a2c <__aeabi_dcmplt>
 8007404:	b158      	cbz	r0, 800741e <sqrt+0x4a>
 8007406:	f7ff ffb9 	bl	800737c <__errno>
 800740a:	2321      	movs	r3, #33	; 0x21
 800740c:	6003      	str	r3, [r0, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	2300      	movs	r3, #0
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	f7f9 f9c1 	bl	800079c <__aeabi_ddiv>
 800741a:	ec41 0b18 	vmov	d8, r0, r1
 800741e:	eeb0 0a48 	vmov.f32	s0, s16
 8007422:	eef0 0a68 	vmov.f32	s1, s17
 8007426:	ecbd 8b02 	vpop	{d8}
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	0000      	movs	r0, r0
	...

08007430 <atan>:
 8007430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	ec55 4b10 	vmov	r4, r5, d0
 8007438:	4bc3      	ldr	r3, [pc, #780]	; (8007748 <atan+0x318>)
 800743a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800743e:	429e      	cmp	r6, r3
 8007440:	46ab      	mov	fp, r5
 8007442:	dd18      	ble.n	8007476 <atan+0x46>
 8007444:	4bc1      	ldr	r3, [pc, #772]	; (800774c <atan+0x31c>)
 8007446:	429e      	cmp	r6, r3
 8007448:	dc01      	bgt.n	800744e <atan+0x1e>
 800744a:	d109      	bne.n	8007460 <atan+0x30>
 800744c:	b144      	cbz	r4, 8007460 <atan+0x30>
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	4620      	mov	r0, r4
 8007454:	4629      	mov	r1, r5
 8007456:	f7f8 fec1 	bl	80001dc <__adddf3>
 800745a:	4604      	mov	r4, r0
 800745c:	460d      	mov	r5, r1
 800745e:	e006      	b.n	800746e <atan+0x3e>
 8007460:	f1bb 0f00 	cmp.w	fp, #0
 8007464:	f300 8131 	bgt.w	80076ca <atan+0x29a>
 8007468:	a59b      	add	r5, pc, #620	; (adr r5, 80076d8 <atan+0x2a8>)
 800746a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800746e:	ec45 4b10 	vmov	d0, r4, r5
 8007472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007476:	4bb6      	ldr	r3, [pc, #728]	; (8007750 <atan+0x320>)
 8007478:	429e      	cmp	r6, r3
 800747a:	dc14      	bgt.n	80074a6 <atan+0x76>
 800747c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007480:	429e      	cmp	r6, r3
 8007482:	dc0d      	bgt.n	80074a0 <atan+0x70>
 8007484:	a396      	add	r3, pc, #600	; (adr r3, 80076e0 <atan+0x2b0>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	ee10 0a10 	vmov	r0, s0
 800748e:	4629      	mov	r1, r5
 8007490:	f7f8 fea4 	bl	80001dc <__adddf3>
 8007494:	4baf      	ldr	r3, [pc, #700]	; (8007754 <atan+0x324>)
 8007496:	2200      	movs	r2, #0
 8007498:	f7f9 fae6 	bl	8000a68 <__aeabi_dcmpgt>
 800749c:	2800      	cmp	r0, #0
 800749e:	d1e6      	bne.n	800746e <atan+0x3e>
 80074a0:	f04f 3aff 	mov.w	sl, #4294967295
 80074a4:	e02b      	b.n	80074fe <atan+0xce>
 80074a6:	f000 f963 	bl	8007770 <fabs>
 80074aa:	4bab      	ldr	r3, [pc, #684]	; (8007758 <atan+0x328>)
 80074ac:	429e      	cmp	r6, r3
 80074ae:	ec55 4b10 	vmov	r4, r5, d0
 80074b2:	f300 80bf 	bgt.w	8007634 <atan+0x204>
 80074b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80074ba:	429e      	cmp	r6, r3
 80074bc:	f300 80a0 	bgt.w	8007600 <atan+0x1d0>
 80074c0:	ee10 2a10 	vmov	r2, s0
 80074c4:	ee10 0a10 	vmov	r0, s0
 80074c8:	462b      	mov	r3, r5
 80074ca:	4629      	mov	r1, r5
 80074cc:	f7f8 fe86 	bl	80001dc <__adddf3>
 80074d0:	4ba0      	ldr	r3, [pc, #640]	; (8007754 <atan+0x324>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	f7f8 fe80 	bl	80001d8 <__aeabi_dsub>
 80074d8:	2200      	movs	r2, #0
 80074da:	4606      	mov	r6, r0
 80074dc:	460f      	mov	r7, r1
 80074de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f8 fe79 	bl	80001dc <__adddf3>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4630      	mov	r0, r6
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f9 f953 	bl	800079c <__aeabi_ddiv>
 80074f6:	f04f 0a00 	mov.w	sl, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	460d      	mov	r5, r1
 80074fe:	4622      	mov	r2, r4
 8007500:	462b      	mov	r3, r5
 8007502:	4620      	mov	r0, r4
 8007504:	4629      	mov	r1, r5
 8007506:	f7f9 f81f 	bl	8000548 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4680      	mov	r8, r0
 8007510:	4689      	mov	r9, r1
 8007512:	f7f9 f819 	bl	8000548 <__aeabi_dmul>
 8007516:	a374      	add	r3, pc, #464	; (adr r3, 80076e8 <atan+0x2b8>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	4606      	mov	r6, r0
 800751e:	460f      	mov	r7, r1
 8007520:	f7f9 f812 	bl	8000548 <__aeabi_dmul>
 8007524:	a372      	add	r3, pc, #456	; (adr r3, 80076f0 <atan+0x2c0>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f8 fe57 	bl	80001dc <__adddf3>
 800752e:	4632      	mov	r2, r6
 8007530:	463b      	mov	r3, r7
 8007532:	f7f9 f809 	bl	8000548 <__aeabi_dmul>
 8007536:	a370      	add	r3, pc, #448	; (adr r3, 80076f8 <atan+0x2c8>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f7f8 fe4e 	bl	80001dc <__adddf3>
 8007540:	4632      	mov	r2, r6
 8007542:	463b      	mov	r3, r7
 8007544:	f7f9 f800 	bl	8000548 <__aeabi_dmul>
 8007548:	a36d      	add	r3, pc, #436	; (adr r3, 8007700 <atan+0x2d0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f8 fe45 	bl	80001dc <__adddf3>
 8007552:	4632      	mov	r2, r6
 8007554:	463b      	mov	r3, r7
 8007556:	f7f8 fff7 	bl	8000548 <__aeabi_dmul>
 800755a:	a36b      	add	r3, pc, #428	; (adr r3, 8007708 <atan+0x2d8>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fe3c 	bl	80001dc <__adddf3>
 8007564:	4632      	mov	r2, r6
 8007566:	463b      	mov	r3, r7
 8007568:	f7f8 ffee 	bl	8000548 <__aeabi_dmul>
 800756c:	a368      	add	r3, pc, #416	; (adr r3, 8007710 <atan+0x2e0>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fe33 	bl	80001dc <__adddf3>
 8007576:	4642      	mov	r2, r8
 8007578:	464b      	mov	r3, r9
 800757a:	f7f8 ffe5 	bl	8000548 <__aeabi_dmul>
 800757e:	a366      	add	r3, pc, #408	; (adr r3, 8007718 <atan+0x2e8>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 ffdc 	bl	8000548 <__aeabi_dmul>
 8007590:	a363      	add	r3, pc, #396	; (adr r3, 8007720 <atan+0x2f0>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f8 fe1f 	bl	80001d8 <__aeabi_dsub>
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	f7f8 ffd3 	bl	8000548 <__aeabi_dmul>
 80075a2:	a361      	add	r3, pc, #388	; (adr r3, 8007728 <atan+0x2f8>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f8 fe16 	bl	80001d8 <__aeabi_dsub>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	f7f8 ffca 	bl	8000548 <__aeabi_dmul>
 80075b4:	a35e      	add	r3, pc, #376	; (adr r3, 8007730 <atan+0x300>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe0d 	bl	80001d8 <__aeabi_dsub>
 80075be:	4632      	mov	r2, r6
 80075c0:	463b      	mov	r3, r7
 80075c2:	f7f8 ffc1 	bl	8000548 <__aeabi_dmul>
 80075c6:	a35c      	add	r3, pc, #368	; (adr r3, 8007738 <atan+0x308>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 fe04 	bl	80001d8 <__aeabi_dsub>
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	f7f8 ffb8 	bl	8000548 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fdfc 	bl	80001dc <__adddf3>
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	f7f8 ffae 	bl	8000548 <__aeabi_dmul>
 80075ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	d14b      	bne.n	800768e <atan+0x25e>
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f8 fded 	bl	80001d8 <__aeabi_dsub>
 80075fe:	e72c      	b.n	800745a <atan+0x2a>
 8007600:	ee10 0a10 	vmov	r0, s0
 8007604:	4b53      	ldr	r3, [pc, #332]	; (8007754 <atan+0x324>)
 8007606:	2200      	movs	r2, #0
 8007608:	4629      	mov	r1, r5
 800760a:	f7f8 fde5 	bl	80001d8 <__aeabi_dsub>
 800760e:	4b51      	ldr	r3, [pc, #324]	; (8007754 <atan+0x324>)
 8007610:	4606      	mov	r6, r0
 8007612:	460f      	mov	r7, r1
 8007614:	2200      	movs	r2, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f8 fddf 	bl	80001dc <__adddf3>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4630      	mov	r0, r6
 8007624:	4639      	mov	r1, r7
 8007626:	f7f9 f8b9 	bl	800079c <__aeabi_ddiv>
 800762a:	f04f 0a01 	mov.w	sl, #1
 800762e:	4604      	mov	r4, r0
 8007630:	460d      	mov	r5, r1
 8007632:	e764      	b.n	80074fe <atan+0xce>
 8007634:	4b49      	ldr	r3, [pc, #292]	; (800775c <atan+0x32c>)
 8007636:	429e      	cmp	r6, r3
 8007638:	da1d      	bge.n	8007676 <atan+0x246>
 800763a:	ee10 0a10 	vmov	r0, s0
 800763e:	4b48      	ldr	r3, [pc, #288]	; (8007760 <atan+0x330>)
 8007640:	2200      	movs	r2, #0
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 fdc8 	bl	80001d8 <__aeabi_dsub>
 8007648:	4b45      	ldr	r3, [pc, #276]	; (8007760 <atan+0x330>)
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	2200      	movs	r2, #0
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f8 ff78 	bl	8000548 <__aeabi_dmul>
 8007658:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <atan+0x324>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fdbe 	bl	80001dc <__adddf3>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 f898 	bl	800079c <__aeabi_ddiv>
 800766c:	f04f 0a02 	mov.w	sl, #2
 8007670:	4604      	mov	r4, r0
 8007672:	460d      	mov	r5, r1
 8007674:	e743      	b.n	80074fe <atan+0xce>
 8007676:	462b      	mov	r3, r5
 8007678:	ee10 2a10 	vmov	r2, s0
 800767c:	4939      	ldr	r1, [pc, #228]	; (8007764 <atan+0x334>)
 800767e:	2000      	movs	r0, #0
 8007680:	f7f9 f88c 	bl	800079c <__aeabi_ddiv>
 8007684:	f04f 0a03 	mov.w	sl, #3
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	e737      	b.n	80074fe <atan+0xce>
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <atan+0x338>)
 8007690:	4e36      	ldr	r6, [pc, #216]	; (800776c <atan+0x33c>)
 8007692:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 fd9d 	bl	80001d8 <__aeabi_dsub>
 800769e:	4622      	mov	r2, r4
 80076a0:	462b      	mov	r3, r5
 80076a2:	f7f8 fd99 	bl	80001d8 <__aeabi_dsub>
 80076a6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80076b2:	f7f8 fd91 	bl	80001d8 <__aeabi_dsub>
 80076b6:	f1bb 0f00 	cmp.w	fp, #0
 80076ba:	4604      	mov	r4, r0
 80076bc:	460d      	mov	r5, r1
 80076be:	f6bf aed6 	bge.w	800746e <atan+0x3e>
 80076c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076c6:	461d      	mov	r5, r3
 80076c8:	e6d1      	b.n	800746e <atan+0x3e>
 80076ca:	a51d      	add	r5, pc, #116	; (adr r5, 8007740 <atan+0x310>)
 80076cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076d0:	e6cd      	b.n	800746e <atan+0x3e>
 80076d2:	bf00      	nop
 80076d4:	f3af 8000 	nop.w
 80076d8:	54442d18 	.word	0x54442d18
 80076dc:	bff921fb 	.word	0xbff921fb
 80076e0:	8800759c 	.word	0x8800759c
 80076e4:	7e37e43c 	.word	0x7e37e43c
 80076e8:	e322da11 	.word	0xe322da11
 80076ec:	3f90ad3a 	.word	0x3f90ad3a
 80076f0:	24760deb 	.word	0x24760deb
 80076f4:	3fa97b4b 	.word	0x3fa97b4b
 80076f8:	a0d03d51 	.word	0xa0d03d51
 80076fc:	3fb10d66 	.word	0x3fb10d66
 8007700:	c54c206e 	.word	0xc54c206e
 8007704:	3fb745cd 	.word	0x3fb745cd
 8007708:	920083ff 	.word	0x920083ff
 800770c:	3fc24924 	.word	0x3fc24924
 8007710:	5555550d 	.word	0x5555550d
 8007714:	3fd55555 	.word	0x3fd55555
 8007718:	2c6a6c2f 	.word	0x2c6a6c2f
 800771c:	bfa2b444 	.word	0xbfa2b444
 8007720:	52defd9a 	.word	0x52defd9a
 8007724:	3fadde2d 	.word	0x3fadde2d
 8007728:	af749a6d 	.word	0xaf749a6d
 800772c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007730:	fe231671 	.word	0xfe231671
 8007734:	3fbc71c6 	.word	0x3fbc71c6
 8007738:	9998ebc4 	.word	0x9998ebc4
 800773c:	3fc99999 	.word	0x3fc99999
 8007740:	54442d18 	.word	0x54442d18
 8007744:	3ff921fb 	.word	0x3ff921fb
 8007748:	440fffff 	.word	0x440fffff
 800774c:	7ff00000 	.word	0x7ff00000
 8007750:	3fdbffff 	.word	0x3fdbffff
 8007754:	3ff00000 	.word	0x3ff00000
 8007758:	3ff2ffff 	.word	0x3ff2ffff
 800775c:	40038000 	.word	0x40038000
 8007760:	3ff80000 	.word	0x3ff80000
 8007764:	bff00000 	.word	0xbff00000
 8007768:	08007b98 	.word	0x08007b98
 800776c:	08007b78 	.word	0x08007b78

08007770 <fabs>:
 8007770:	ec51 0b10 	vmov	r0, r1, d0
 8007774:	ee10 2a10 	vmov	r2, s0
 8007778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800777c:	ec43 2b10 	vmov	d0, r2, r3
 8007780:	4770      	bx	lr
	...

08007784 <__ieee754_sqrt>:
 8007784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	ec55 4b10 	vmov	r4, r5, d0
 800778c:	4e67      	ldr	r6, [pc, #412]	; (800792c <__ieee754_sqrt+0x1a8>)
 800778e:	43ae      	bics	r6, r5
 8007790:	ee10 0a10 	vmov	r0, s0
 8007794:	ee10 2a10 	vmov	r2, s0
 8007798:	4629      	mov	r1, r5
 800779a:	462b      	mov	r3, r5
 800779c:	d10d      	bne.n	80077ba <__ieee754_sqrt+0x36>
 800779e:	f7f8 fed3 	bl	8000548 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd17 	bl	80001dc <__adddf3>
 80077ae:	4604      	mov	r4, r0
 80077b0:	460d      	mov	r5, r1
 80077b2:	ec45 4b10 	vmov	d0, r4, r5
 80077b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	dc0b      	bgt.n	80077d6 <__ieee754_sqrt+0x52>
 80077be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077c2:	4326      	orrs	r6, r4
 80077c4:	d0f5      	beq.n	80077b2 <__ieee754_sqrt+0x2e>
 80077c6:	b135      	cbz	r5, 80077d6 <__ieee754_sqrt+0x52>
 80077c8:	f7f8 fd06 	bl	80001d8 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	f7f8 ffe4 	bl	800079c <__aeabi_ddiv>
 80077d4:	e7eb      	b.n	80077ae <__ieee754_sqrt+0x2a>
 80077d6:	1509      	asrs	r1, r1, #20
 80077d8:	f000 808d 	beq.w	80078f6 <__ieee754_sqrt+0x172>
 80077dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80077e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e8:	07c9      	lsls	r1, r1, #31
 80077ea:	bf5c      	itt	pl
 80077ec:	005b      	lslpl	r3, r3, #1
 80077ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80077f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f6:	bf58      	it	pl
 80077f8:	0052      	lslpl	r2, r2, #1
 80077fa:	2500      	movs	r5, #0
 80077fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007800:	1076      	asrs	r6, r6, #1
 8007802:	0052      	lsls	r2, r2, #1
 8007804:	f04f 0e16 	mov.w	lr, #22
 8007808:	46ac      	mov	ip, r5
 800780a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800780e:	eb0c 0001 	add.w	r0, ip, r1
 8007812:	4298      	cmp	r0, r3
 8007814:	bfde      	ittt	le
 8007816:	1a1b      	suble	r3, r3, r0
 8007818:	eb00 0c01 	addle.w	ip, r0, r1
 800781c:	186d      	addle	r5, r5, r1
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	f1be 0e01 	subs.w	lr, lr, #1
 8007824:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007828:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800782c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007830:	d1ed      	bne.n	800780e <__ieee754_sqrt+0x8a>
 8007832:	4674      	mov	r4, lr
 8007834:	2720      	movs	r7, #32
 8007836:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800783a:	4563      	cmp	r3, ip
 800783c:	eb01 000e 	add.w	r0, r1, lr
 8007840:	dc02      	bgt.n	8007848 <__ieee754_sqrt+0xc4>
 8007842:	d113      	bne.n	800786c <__ieee754_sqrt+0xe8>
 8007844:	4290      	cmp	r0, r2
 8007846:	d811      	bhi.n	800786c <__ieee754_sqrt+0xe8>
 8007848:	2800      	cmp	r0, #0
 800784a:	eb00 0e01 	add.w	lr, r0, r1
 800784e:	da57      	bge.n	8007900 <__ieee754_sqrt+0x17c>
 8007850:	f1be 0f00 	cmp.w	lr, #0
 8007854:	db54      	blt.n	8007900 <__ieee754_sqrt+0x17c>
 8007856:	f10c 0801 	add.w	r8, ip, #1
 800785a:	eba3 030c 	sub.w	r3, r3, ip
 800785e:	4290      	cmp	r0, r2
 8007860:	bf88      	it	hi
 8007862:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007866:	1a12      	subs	r2, r2, r0
 8007868:	440c      	add	r4, r1
 800786a:	46c4      	mov	ip, r8
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	3f01      	subs	r7, #1
 8007870:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007874:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007878:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800787c:	d1dd      	bne.n	800783a <__ieee754_sqrt+0xb6>
 800787e:	4313      	orrs	r3, r2
 8007880:	d01b      	beq.n	80078ba <__ieee754_sqrt+0x136>
 8007882:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007930 <__ieee754_sqrt+0x1ac>
 8007886:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007934 <__ieee754_sqrt+0x1b0>
 800788a:	e9da 0100 	ldrd	r0, r1, [sl]
 800788e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007892:	f7f8 fca1 	bl	80001d8 <__aeabi_dsub>
 8007896:	e9da 8900 	ldrd	r8, r9, [sl]
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f9 f8cd 	bl	8000a40 <__aeabi_dcmple>
 80078a6:	b140      	cbz	r0, 80078ba <__ieee754_sqrt+0x136>
 80078a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80078ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80078b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80078b4:	d126      	bne.n	8007904 <__ieee754_sqrt+0x180>
 80078b6:	3501      	adds	r5, #1
 80078b8:	463c      	mov	r4, r7
 80078ba:	106a      	asrs	r2, r5, #1
 80078bc:	0863      	lsrs	r3, r4, #1
 80078be:	07e9      	lsls	r1, r5, #31
 80078c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80078c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80078c8:	bf48      	it	mi
 80078ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80078ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80078d2:	461c      	mov	r4, r3
 80078d4:	e76d      	b.n	80077b2 <__ieee754_sqrt+0x2e>
 80078d6:	0ad3      	lsrs	r3, r2, #11
 80078d8:	3815      	subs	r0, #21
 80078da:	0552      	lsls	r2, r2, #21
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0fa      	beq.n	80078d6 <__ieee754_sqrt+0x152>
 80078e0:	02dc      	lsls	r4, r3, #11
 80078e2:	d50a      	bpl.n	80078fa <__ieee754_sqrt+0x176>
 80078e4:	f1c1 0420 	rsb	r4, r1, #32
 80078e8:	fa22 f404 	lsr.w	r4, r2, r4
 80078ec:	1e4d      	subs	r5, r1, #1
 80078ee:	408a      	lsls	r2, r1
 80078f0:	4323      	orrs	r3, r4
 80078f2:	1b41      	subs	r1, r0, r5
 80078f4:	e772      	b.n	80077dc <__ieee754_sqrt+0x58>
 80078f6:	4608      	mov	r0, r1
 80078f8:	e7f0      	b.n	80078dc <__ieee754_sqrt+0x158>
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	3101      	adds	r1, #1
 80078fe:	e7ef      	b.n	80078e0 <__ieee754_sqrt+0x15c>
 8007900:	46e0      	mov	r8, ip
 8007902:	e7aa      	b.n	800785a <__ieee754_sqrt+0xd6>
 8007904:	f7f8 fc6a 	bl	80001dc <__adddf3>
 8007908:	e9da 8900 	ldrd	r8, r9, [sl]
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4640      	mov	r0, r8
 8007912:	4649      	mov	r1, r9
 8007914:	f7f9 f88a 	bl	8000a2c <__aeabi_dcmplt>
 8007918:	b120      	cbz	r0, 8007924 <__ieee754_sqrt+0x1a0>
 800791a:	1ca0      	adds	r0, r4, #2
 800791c:	bf08      	it	eq
 800791e:	3501      	addeq	r5, #1
 8007920:	3402      	adds	r4, #2
 8007922:	e7ca      	b.n	80078ba <__ieee754_sqrt+0x136>
 8007924:	3401      	adds	r4, #1
 8007926:	f024 0401 	bic.w	r4, r4, #1
 800792a:	e7c6      	b.n	80078ba <__ieee754_sqrt+0x136>
 800792c:	7ff00000 	.word	0x7ff00000
 8007930:	200000f0 	.word	0x200000f0
 8007934:	200000f8 	.word	0x200000f8

08007938 <__ieee754_atan2>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	ec57 6b11 	vmov	r6, r7, d1
 8007940:	4273      	negs	r3, r6
 8007942:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007ac0 <__ieee754_atan2+0x188>
 8007946:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800794a:	4333      	orrs	r3, r6
 800794c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007950:	4543      	cmp	r3, r8
 8007952:	ec51 0b10 	vmov	r0, r1, d0
 8007956:	ee11 5a10 	vmov	r5, s2
 800795a:	d80a      	bhi.n	8007972 <__ieee754_atan2+0x3a>
 800795c:	4244      	negs	r4, r0
 800795e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007962:	4304      	orrs	r4, r0
 8007964:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007968:	4544      	cmp	r4, r8
 800796a:	ee10 9a10 	vmov	r9, s0
 800796e:	468e      	mov	lr, r1
 8007970:	d907      	bls.n	8007982 <__ieee754_atan2+0x4a>
 8007972:	4632      	mov	r2, r6
 8007974:	463b      	mov	r3, r7
 8007976:	f7f8 fc31 	bl	80001dc <__adddf3>
 800797a:	ec41 0b10 	vmov	d0, r0, r1
 800797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007982:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007986:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800798a:	4334      	orrs	r4, r6
 800798c:	d103      	bne.n	8007996 <__ieee754_atan2+0x5e>
 800798e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007992:	f7ff bd4d 	b.w	8007430 <atan>
 8007996:	17bc      	asrs	r4, r7, #30
 8007998:	f004 0402 	and.w	r4, r4, #2
 800799c:	ea53 0909 	orrs.w	r9, r3, r9
 80079a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80079a4:	d107      	bne.n	80079b6 <__ieee754_atan2+0x7e>
 80079a6:	2c02      	cmp	r4, #2
 80079a8:	d05f      	beq.n	8007a6a <__ieee754_atan2+0x132>
 80079aa:	2c03      	cmp	r4, #3
 80079ac:	d1e5      	bne.n	800797a <__ieee754_atan2+0x42>
 80079ae:	a140      	add	r1, pc, #256	; (adr r1, 8007ab0 <__ieee754_atan2+0x178>)
 80079b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b4:	e7e1      	b.n	800797a <__ieee754_atan2+0x42>
 80079b6:	4315      	orrs	r5, r2
 80079b8:	d106      	bne.n	80079c8 <__ieee754_atan2+0x90>
 80079ba:	f1be 0f00 	cmp.w	lr, #0
 80079be:	da5f      	bge.n	8007a80 <__ieee754_atan2+0x148>
 80079c0:	a13d      	add	r1, pc, #244	; (adr r1, 8007ab8 <__ieee754_atan2+0x180>)
 80079c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c6:	e7d8      	b.n	800797a <__ieee754_atan2+0x42>
 80079c8:	4542      	cmp	r2, r8
 80079ca:	d10f      	bne.n	80079ec <__ieee754_atan2+0xb4>
 80079cc:	4293      	cmp	r3, r2
 80079ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80079d2:	d107      	bne.n	80079e4 <__ieee754_atan2+0xac>
 80079d4:	2c02      	cmp	r4, #2
 80079d6:	d84c      	bhi.n	8007a72 <__ieee754_atan2+0x13a>
 80079d8:	4b33      	ldr	r3, [pc, #204]	; (8007aa8 <__ieee754_atan2+0x170>)
 80079da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e2:	e7ca      	b.n	800797a <__ieee754_atan2+0x42>
 80079e4:	2c02      	cmp	r4, #2
 80079e6:	d848      	bhi.n	8007a7a <__ieee754_atan2+0x142>
 80079e8:	4b30      	ldr	r3, [pc, #192]	; (8007aac <__ieee754_atan2+0x174>)
 80079ea:	e7f6      	b.n	80079da <__ieee754_atan2+0xa2>
 80079ec:	4543      	cmp	r3, r8
 80079ee:	d0e4      	beq.n	80079ba <__ieee754_atan2+0x82>
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80079f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079fa:	da1e      	bge.n	8007a3a <__ieee754_atan2+0x102>
 80079fc:	2f00      	cmp	r7, #0
 80079fe:	da01      	bge.n	8007a04 <__ieee754_atan2+0xcc>
 8007a00:	323c      	adds	r2, #60	; 0x3c
 8007a02:	db1e      	blt.n	8007a42 <__ieee754_atan2+0x10a>
 8007a04:	4632      	mov	r2, r6
 8007a06:	463b      	mov	r3, r7
 8007a08:	f7f8 fec8 	bl	800079c <__aeabi_ddiv>
 8007a0c:	ec41 0b10 	vmov	d0, r0, r1
 8007a10:	f7ff feae 	bl	8007770 <fabs>
 8007a14:	f7ff fd0c 	bl	8007430 <atan>
 8007a18:	ec51 0b10 	vmov	r0, r1, d0
 8007a1c:	2c01      	cmp	r4, #1
 8007a1e:	d013      	beq.n	8007a48 <__ieee754_atan2+0x110>
 8007a20:	2c02      	cmp	r4, #2
 8007a22:	d015      	beq.n	8007a50 <__ieee754_atan2+0x118>
 8007a24:	2c00      	cmp	r4, #0
 8007a26:	d0a8      	beq.n	800797a <__ieee754_atan2+0x42>
 8007a28:	a317      	add	r3, pc, #92	; (adr r3, 8007a88 <__ieee754_atan2+0x150>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fbd3 	bl	80001d8 <__aeabi_dsub>
 8007a32:	a317      	add	r3, pc, #92	; (adr r3, 8007a90 <__ieee754_atan2+0x158>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	e014      	b.n	8007a64 <__ieee754_atan2+0x12c>
 8007a3a:	a117      	add	r1, pc, #92	; (adr r1, 8007a98 <__ieee754_atan2+0x160>)
 8007a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a40:	e7ec      	b.n	8007a1c <__ieee754_atan2+0xe4>
 8007a42:	2000      	movs	r0, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	e7e9      	b.n	8007a1c <__ieee754_atan2+0xe4>
 8007a48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	e794      	b.n	800797a <__ieee754_atan2+0x42>
 8007a50:	a30d      	add	r3, pc, #52	; (adr r3, 8007a88 <__ieee754_atan2+0x150>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fbbf 	bl	80001d8 <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	a10c      	add	r1, pc, #48	; (adr r1, 8007a90 <__ieee754_atan2+0x158>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	f7f8 fbb8 	bl	80001d8 <__aeabi_dsub>
 8007a68:	e787      	b.n	800797a <__ieee754_atan2+0x42>
 8007a6a:	a109      	add	r1, pc, #36	; (adr r1, 8007a90 <__ieee754_atan2+0x158>)
 8007a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a70:	e783      	b.n	800797a <__ieee754_atan2+0x42>
 8007a72:	a10b      	add	r1, pc, #44	; (adr r1, 8007aa0 <__ieee754_atan2+0x168>)
 8007a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a78:	e77f      	b.n	800797a <__ieee754_atan2+0x42>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	e77c      	b.n	800797a <__ieee754_atan2+0x42>
 8007a80:	a105      	add	r1, pc, #20	; (adr r1, 8007a98 <__ieee754_atan2+0x160>)
 8007a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a86:	e778      	b.n	800797a <__ieee754_atan2+0x42>
 8007a88:	33145c07 	.word	0x33145c07
 8007a8c:	3ca1a626 	.word	0x3ca1a626
 8007a90:	54442d18 	.word	0x54442d18
 8007a94:	400921fb 	.word	0x400921fb
 8007a98:	54442d18 	.word	0x54442d18
 8007a9c:	3ff921fb 	.word	0x3ff921fb
 8007aa0:	54442d18 	.word	0x54442d18
 8007aa4:	3fe921fb 	.word	0x3fe921fb
 8007aa8:	08007bb8 	.word	0x08007bb8
 8007aac:	08007bd0 	.word	0x08007bd0
 8007ab0:	54442d18 	.word	0x54442d18
 8007ab4:	c00921fb 	.word	0xc00921fb
 8007ab8:	54442d18 	.word	0x54442d18
 8007abc:	bff921fb 	.word	0xbff921fb
 8007ac0:	7ff00000 	.word	0x7ff00000

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
