
Board_Laban.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003f38  08003f38  00013f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd8  08003fd8  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd8  08003fd8  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd8  08003fd8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08003fe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000100  080040e0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080040e0  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c90  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001279  00000000  00000000  00025dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  00027078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051b  00000000  00000000  00027720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167ad  00000000  00000000  00027c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000895b  00000000  00000000  0003e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081e93  00000000  00000000  00046d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fb4  00000000  00000000  000c8bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000cab8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f1c 	.word	0x08003f1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08003f1c 	.word	0x08003f1c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <Kalman_getAngle>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};
int Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b092      	sub	sp, #72	; 0x48
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f4a:	f7ff f905 	bl	8000158 <__aeabi_dsub>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000f5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000f64:	f7ff fab0 	bl	80004c8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	4629      	mov	r1, r5
 8000f70:	f7ff f8f4 	bl	800015c <__adddf3>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	68f9      	ldr	r1, [r7, #12]
 8000f7a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000f8e:	f7ff fa9b 	bl	80004c8 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000fa0:	f7ff f8da 	bl	8000158 <__aeabi_dsub>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000fb2:	f7ff f8d1 	bl	8000158 <__aeabi_dsub>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff f8ca 	bl	800015c <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000fd4:	f7ff fa78 	bl	80004c8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff f8bc 	bl	800015c <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000ffa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ffe:	f7ff fa63 	bl	80004c8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f8a5 	bl	8000158 <__aeabi_dsub>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001024:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001028:	f7ff fa4e 	bl	80004c8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f890 	bl	8000158 <__aeabi_dsub>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	68f9      	ldr	r1, [r7, #12]
 800103e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800104e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001052:	f7ff fa39 	bl	80004c8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff f87d 	bl	800015c <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001078:	f7ff f870 	bl	800015c <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800108a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800108e:	f7ff fb45 	bl	800071c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80010a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010a4:	f7ff fb3a 	bl	800071c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ba:	f7ff f84d 	bl	8000158 <__aeabi_dsub>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80010cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010d4:	f7ff f9f8 	bl	80004c8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff f83c 	bl	800015c <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	68f9      	ldr	r1, [r7, #12]
 80010ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80010f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010fc:	f7ff f9e4 	bl	80004c8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff f828 	bl	800015c <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800111c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001126:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001138:	f7ff f9c6 	bl	80004c8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f808 	bl	8000158 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001158:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800115c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001160:	f7ff f9b2 	bl	80004c8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7fe fff4 	bl	8000158 <__aeabi_dsub>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001180:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001188:	f7ff f99e 	bl	80004c8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7fe ffe0 	bl	8000158 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80011a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	f7ff f98a 	bl	80004c8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7fe ffcc 	bl	8000158 <__aeabi_dsub>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc28 	bl	8000a28 <__aeabi_d2iz>
 80011d8:	4603      	mov	r3, r0
};
 80011da:	4618      	mov	r0, r3
 80011dc:	3748      	adds	r7, #72	; 0x48
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011e4 <MPU6050_Init>:

uint8_t MPU6050_Init()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2275      	movs	r2, #117	; 0x75
 80011fa:	21d0      	movs	r1, #208	; 0xd0
 80011fc:	4822      	ldr	r0, [pc, #136]	; (8001288 <MPU6050_Init+0xa4>)
 80011fe:	f001 f8e5 	bl	80023cc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b68      	cmp	r3, #104	; 0x68
 8001206:	d139      	bne.n	800127c <MPU6050_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	226b      	movs	r2, #107	; 0x6b
 800121c:	21d0      	movs	r1, #208	; 0xd0
 800121e:	481a      	ldr	r0, [pc, #104]	; (8001288 <MPU6050_Init+0xa4>)
 8001220:	f000 ffda 	bl	80021d8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001224:	2307      	movs	r3, #7
 8001226:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	2219      	movs	r2, #25
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <MPU6050_Init+0xa4>)
 800123c:	f000 ffcc 	bl	80021d8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001240:	2300      	movs	r3, #0
 8001242:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	1dbb      	adds	r3, r7, #6
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221c      	movs	r2, #28
 8001254:	21d0      	movs	r1, #208	; 0xd0
 8001256:	480c      	ldr	r0, [pc, #48]	; (8001288 <MPU6050_Init+0xa4>)
 8001258:	f000 ffbe 	bl	80021d8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2301      	movs	r3, #1
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	1dbb      	adds	r3, r7, #6
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	221b      	movs	r2, #27
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MPU6050_Init+0xa4>)
 8001274:	f000 ffb0 	bl	80021d8 <HAL_I2C_Mem_Write>
        return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <MPU6050_Init+0x9a>
    }
    return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000011c 	.word	0x2000011c
 800128c:	00000000 	.word	0x00000000

08001290 <MPU6050_Read_All>:
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 8001290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001294:	b094      	sub	sp, #80	; 0x50
 8001296:	af04      	add	r7, sp, #16
 8001298:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	230e      	movs	r3, #14
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	223b      	movs	r2, #59	; 0x3b
 80012ac:	21d0      	movs	r1, #208	; 0xd0
 80012ae:	488c      	ldr	r0, [pc, #560]	; (80014e0 <MPU6050_Read_All+0x250>)
 80012b0:	f001 f88c 	bl	80023cc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80012b4:	7a3b      	ldrb	r3, [r7, #8]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7a7b      	ldrb	r3, [r7, #9]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80012f8:	7c3b      	ldrb	r3, [r7, #16]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7c7b      	ldrb	r3, [r7, #17]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800130a:	7cbb      	ldrb	r3, [r7, #18]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	7cfb      	ldrb	r3, [r7, #19]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800131c:	7d3b      	ldrb	r3, [r7, #20]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	7d7b      	ldrb	r3, [r7, #21]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f85d 	bl	80003f4 <__aeabi_i2d>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <MPU6050_Read_All+0x254>)
 8001340:	f7ff f9ec 	bl	800071c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f84d 	bl	80003f4 <__aeabi_i2d>
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <MPU6050_Read_All+0x254>)
 8001360:	f7ff f9dc 	bl	800071c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f83d 	bl	80003f4 <__aeabi_i2d>
 800137a:	a353      	add	r3, pc, #332	; (adr r3, 80014c8 <MPU6050_Read_All+0x238>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f9cc 	bl	800071c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800138e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc2a 	bl	8000bec <__aeabi_i2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4953      	ldr	r1, [pc, #332]	; (80014e8 <MPU6050_Read_All+0x258>)
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd2d 	bl	8000dfc <__aeabi_fdiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4951      	ldr	r1, [pc, #324]	; (80014ec <MPU6050_Read_All+0x25c>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb6c 	bl	8000a84 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f81a 	bl	80003f4 <__aeabi_i2d>
 80013c0:	a343      	add	r3, pc, #268	; (adr r3, 80014d0 <MPU6050_Read_All+0x240>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f9a9 	bl	800071c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f80a 	bl	80003f4 <__aeabi_i2d>
 80013e0:	a33b      	add	r3, pc, #236	; (adr r3, 80014d0 <MPU6050_Read_All+0x240>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f999 	bl	800071c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fffa 	bl	80003f4 <__aeabi_i2d>
 8001400:	a333      	add	r3, pc, #204	; (adr r3, 80014d0 <MPU6050_Read_All+0x240>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f989 	bl	800071c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001414:	f000 fb06 	bl	8001a24 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <MPU6050_Read_All+0x260>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ffd7 	bl	80003d4 <__aeabi_ui2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <MPU6050_Read_All+0x264>)
 800142c:	f7ff f976 	bl	800071c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001438:	f000 faf4 	bl	8001a24 <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MPU6050_Read_All+0x260>)
 8001440:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	fb03 f202 	mul.w	r2, r3, r2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffc3 	bl	80003f4 <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f002 f9f5 	bl	8003864 <sqrt>
 800147a:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800148a:	f7ff fa85 	bl	8000998 <__aeabi_dcmpeq>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d131      	bne.n	80014f8 <MPU6050_Read_All+0x268>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffaa 	bl	80003f4 <__aeabi_i2d>
 80014a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014a4:	f7ff f93a 	bl	800071c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f002 f9fe 	bl	80038b0 <atan>
 80014b4:	a308      	add	r3, pc, #32	; (adr r3, 80014d8 <MPU6050_Read_All+0x248>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f805 	bl	80004c8 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80014c6:	e01d      	b.n	8001504 <MPU6050_Read_All+0x274>
 80014c8:	00000000 	.word	0x00000000
 80014cc:	40cc2900 	.word	0x40cc2900
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40606000 	.word	0x40606000
 80014d8:	1a63c1f8 	.word	0x1a63c1f8
 80014dc:	404ca5dc 	.word	0x404ca5dc
 80014e0:	2000011c 	.word	0x2000011c
 80014e4:	40d00000 	.word	0x40d00000
 80014e8:	43aa0000 	.word	0x43aa0000
 80014ec:	42121eb8 	.word	0x42121eb8
 80014f0:	20000170 	.word	0x20000170
 80014f4:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	425b      	negs	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe ff71 	bl	80003f4 <__aeabi_i2d>
 8001512:	4682      	mov	sl, r0
 8001514:	468b      	mov	fp, r1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff69 	bl	80003f4 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4650      	mov	r0, sl
 8001528:	4659      	mov	r1, fp
 800152a:	f002 f999 	bl	8003860 <atan2>
 800152e:	a346      	add	r3, pc, #280	; (adr r3, 8001648 <MPU6050_Read_All+0x3b8>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7fe ffc8 	bl	80004c8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MPU6050_Read_All+0x3c0>)
 8001546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800154a:	f7ff fa2f 	bl	80009ac <__aeabi_dcmplt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <MPU6050_Read_All+0x2da>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <MPU6050_Read_All+0x3c4>)
 8001560:	f7ff fa42 	bl	80009e8 <__aeabi_dcmpgt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d114      	bne.n	8001594 <MPU6050_Read_All+0x304>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <MPU6050_Read_All+0x3c4>)
 8001570:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001574:	f7ff fa38 	bl	80009e8 <__aeabi_dcmpgt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <MPU6050_Read_All+0x31a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <MPU6050_Read_All+0x3c0>)
 800158a:	f7ff fa0f 	bl	80009ac <__aeabi_dcmplt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00a      	beq.n	80015aa <MPU6050_Read_All+0x31a>
    {
        KalmanY.angle = pitch;
 8001594:	4930      	ldr	r1, [pc, #192]	; (8001658 <MPU6050_Read_All+0x3c8>)
 8001596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800159a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80015a8:	e016      	b.n	80015d8 <MPU6050_Read_All+0x348>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015b8:	e9cd 2300 	strd	r2, r3, [sp]
 80015bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c0:	4825      	ldr	r0, [pc, #148]	; (8001658 <MPU6050_Read_All+0x3c8>)
 80015c2:	f7ff fcb7 	bl	8000f34 <Kalman_getAngle>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff13 	bl	80003f4 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015de:	4690      	mov	r8, r2
 80015e0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MPU6050_Read_All+0x3c4>)
 80015ea:	4640      	mov	r0, r8
 80015ec:	4649      	mov	r1, r9
 80015ee:	f7ff f9fb 	bl	80009e8 <__aeabi_dcmpgt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <MPU6050_Read_All+0x37a>
        DataStruct->Gx = -DataStruct->Gx;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015fe:	4614      	mov	r4, r2
 8001600:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001610:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001618:	e9cd 2300 	strd	r2, r3, [sp]
 800161c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <MPU6050_Read_All+0x3cc>)
 8001622:	f7ff fc87 	bl	8000f34 <Kalman_getAngle>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fee3 	bl	80003f4 <__aeabi_i2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001638:	bf00      	nop
 800163a:	3740      	adds	r7, #64	; 0x40
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	1a63c1f8 	.word	0x1a63c1f8
 800164c:	404ca5dc 	.word	0x404ca5dc
 8001650:	c0568000 	.word	0xc0568000
 8001654:	40568000 	.word	0x40568000
 8001658:	20000048 	.word	0x20000048
 800165c:	20000000 	.word	0x20000000

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 f986 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f818 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f000 f88a 	bl	8001784 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001670:	f000 f85a 	bl	8001728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while(MPU6050_Init()==1);
 8001674:	bf00      	nop
 8001676:	f7ff fdb5 	bl	80011e4 <MPU6050_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d0fa      	beq.n	8001676 <main+0x16>
  HAL_Delay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001684:	f000 f9d8 	bl	8001a38 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&MPU6050);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <main+0x38>)
 800168a:	f7ff fe01 	bl	8001290 <MPU6050_Read_All>
	 HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f000 f9d2 	bl	8001a38 <HAL_Delay>
	  MPU6050_Read_All(&MPU6050);
 8001694:	e7f8      	b.n	8001688 <main+0x28>
 8001696:	bf00      	nop
 8001698:	20000178 	.word	0x20000178

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b090      	sub	sp, #64	; 0x40
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	2228      	movs	r2, #40	; 0x28
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 f8a6 	bl	80037fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fc8d 	bl	8003004 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016f0:	f000 f876 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fefa 	bl	8003508 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800171a:	f000 f861 	bl	80017e0 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3740      	adds	r7, #64	; 0x40
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_I2C1_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x50>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_I2C1_Init+0x58>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_I2C1_Init+0x50>)
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C1_Init+0x50>)
 8001766:	f000 fbf3 	bl	8001f50 <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 f836 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000011c 	.word	0x2000011c
 800177c:	40005400 	.word	0x40005400
 8001780:	000186a0 	.word	0x000186a0

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_GPIO_Init+0x58>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <MX_GPIO_Init+0x58>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_GPIO_Init+0x58>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_GPIO_Init+0x58>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <MX_GPIO_Init+0x58>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_GPIO_Init+0x58>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_GPIO_Init+0x58>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <MX_GPIO_Init+0x58>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <MX_GPIO_Init+0x58>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_MspInit+0x5c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_MspInit+0x5c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_MspInit+0x60>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_MspInit+0x60>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000

08001850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_I2C_MspInit+0x70>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d123      	bne.n	80018b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a13      	ldr	r2, [pc, #76]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001888:	23c0      	movs	r3, #192	; 0xc0
 800188a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188c:	2312      	movs	r3, #18
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <HAL_I2C_MspInit+0x78>)
 800189c:	f000 f9d4 	bl	8001c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 80018a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018aa:	61d3      	str	r3, [r2, #28]
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_I2C_MspInit+0x74>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010c00 	.word	0x40010c00

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f875 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
	...

08001928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001928:	f7ff fff7 	bl	800191a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800192e:	490c      	ldr	r1, [pc, #48]	; (8001960 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001944:	4c09      	ldr	r4, [pc, #36]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f001 ff61 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff fe83 	bl	8001660 <main>
  bx lr
 800195a:	4770      	bx	lr
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001964:	08003fe0 	.word	0x08003fe0
  ldr r2, =_sbss
 8001968:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800196c:	2000030c 	.word	0x2000030c

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f92b 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff ff2c 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f935 	bl	8001c2e <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f90b 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000090 	.word	0x20000090
 80019f8:	20000098 	.word	0x20000098
 80019fc:	20000094 	.word	0x20000094

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000098 	.word	0x20000098
 8001a20:	200001d0 	.word	0x200001d0

08001a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	200001d0 	.word	0x200001d0

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffe0 	bl	8001a24 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000098 	.word	0x20000098

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff90 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff49 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff5e 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff90 	bl	8001b38 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5f 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffb0 	bl	8001b9c <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	e169      	b.n	8001f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8158 	bne.w	8001f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d05e      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c84:	4a98      	ldr	r2, [pc, #608]	; (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d875      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a98      	ldr	r2, [pc, #608]	; (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d058      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c90:	4a96      	ldr	r2, [pc, #600]	; (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d86f      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c96:	4a96      	ldr	r2, [pc, #600]	; (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d052      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c9c:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d869      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a94      	ldr	r2, [pc, #592]	; (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04c      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001ca8:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d863      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cae:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d046      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a90      	ldr	r2, [pc, #576]	; (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d85d      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d82a      	bhi.n	8001d14 <HAL_GPIO_Init+0xcc>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d859      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_GPIO_Init+0x80>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001d43 	.word	0x08001d43
 8001ccc:	08001d1d 	.word	0x08001d1d
 8001cd0:	08001d2f 	.word	0x08001d2f
 8001cd4:	08001d71 	.word	0x08001d71
 8001cd8:	08001d77 	.word	0x08001d77
 8001cdc:	08001d77 	.word	0x08001d77
 8001ce0:	08001d77 	.word	0x08001d77
 8001ce4:	08001d77 	.word	0x08001d77
 8001ce8:	08001d77 	.word	0x08001d77
 8001cec:	08001d77 	.word	0x08001d77
 8001cf0:	08001d77 	.word	0x08001d77
 8001cf4:	08001d77 	.word	0x08001d77
 8001cf8:	08001d77 	.word	0x08001d77
 8001cfc:	08001d77 	.word	0x08001d77
 8001d00:	08001d77 	.word	0x08001d77
 8001d04:	08001d77 	.word	0x08001d77
 8001d08:	08001d77 	.word	0x08001d77
 8001d0c:	08001d25 	.word	0x08001d25
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	4a79      	ldr	r2, [pc, #484]	; (8001efc <HAL_GPIO_Init+0x2b4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1a:	e02c      	b.n	8001d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e029      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e024      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	3308      	adds	r3, #8
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e01f      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	623b      	str	r3, [r7, #32]
          break;
 8001d40:	e01a      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e013      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	611a      	str	r2, [r3, #16]
          break;
 8001d62:	e009      	b.n	8001d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	615a      	str	r2, [r3, #20]
          break;
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          break;
 8001d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	; 0xff
 8001d7c:	d801      	bhi.n	8001d82 <HAL_GPIO_Init+0x13a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_Init+0x13e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d802      	bhi.n	8001d94 <HAL_GPIO_Init+0x14c>
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x152>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	3b08      	subs	r3, #8
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	210f      	movs	r1, #15
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80b1 	beq.w	8001f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de0:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_GPIO_Init+0x2c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <HAL_GPIO_Init+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <HAL_GPIO_Init+0x2c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <HAL_GPIO_Init+0x2cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1e0>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e28:	2304      	movs	r3, #4
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e34:	2300      	movs	r3, #0
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e46:	492f      	ldr	r1, [pc, #188]	; (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	492c      	ldr	r1, [pc, #176]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4928      	ldr	r1, [pc, #160]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4922      	ldr	r1, [pc, #136]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	491e      	ldr	r1, [pc, #120]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4918      	ldr	r1, [pc, #96]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4914      	ldr	r1, [pc, #80]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d021      	beq.n	8001f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e021      	b.n	8001f2a <HAL_GPIO_Init+0x2e2>
 8001ee6:	bf00      	nop
 8001ee8:	10320000 	.word	0x10320000
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	10220000 	.word	0x10220000
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	10110000 	.word	0x10110000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40011400 	.word	0x40011400
 8001f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	4909      	ldr	r1, [pc, #36]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f ae8e 	bne.w	8001c5c <HAL_GPIO_Init+0x14>
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	372c      	adds	r7, #44	; 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e12b      	b.n	80021ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fc6a 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f001 fbf0 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a81      	ldr	r2, [pc, #516]	; (80021c4 <HAL_I2C_Init+0x274>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d807      	bhi.n	8001fd4 <HAL_I2C_Init+0x84>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a80      	ldr	r2, [pc, #512]	; (80021c8 <HAL_I2C_Init+0x278>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e006      	b.n	8001fe2 <HAL_I2C_Init+0x92>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a7d      	ldr	r2, [pc, #500]	; (80021cc <HAL_I2C_Init+0x27c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0e7      	b.n	80021ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a78      	ldr	r2, [pc, #480]	; (80021d0 <HAL_I2C_Init+0x280>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_I2C_Init+0x274>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d802      	bhi.n	8002024 <HAL_I2C_Init+0xd4>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	e009      	b.n	8002038 <HAL_I2C_Init+0xe8>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_I2C_Init+0x284>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	495c      	ldr	r1, [pc, #368]	; (80021c4 <HAL_I2C_Init+0x274>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d819      	bhi.n	800208c <HAL_I2C_Init+0x13c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e59      	subs	r1, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fbb1 f3f3 	udiv	r3, r1, r3
 8002066:	1c59      	adds	r1, r3, #1
 8002068:	f640 73fc 	movw	r3, #4092	; 0xffc
 800206c:	400b      	ands	r3, r1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_I2C_Init+0x138>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e59      	subs	r1, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002086:	e051      	b.n	800212c <HAL_I2C_Init+0x1dc>
 8002088:	2304      	movs	r3, #4
 800208a:	e04f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d111      	bne.n	80020b8 <HAL_I2C_Init+0x168>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	440b      	add	r3, r1
 80020a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e012      	b.n	80020de <HAL_I2C_Init+0x18e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x196>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e022      	b.n	800212c <HAL_I2C_Init+0x1dc>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <HAL_I2C_Init+0x1bc>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e58      	subs	r0, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	440b      	add	r3, r1
 80020fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210a:	e00f      	b.n	800212c <HAL_I2C_Init+0x1dc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6809      	ldr	r1, [r1, #0]
 8002130:	4313      	orrs	r3, r2
 8002132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6911      	ldr	r1, [r2, #16]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	000186a0 	.word	0x000186a0
 80021c8:	001e847f 	.word	0x001e847f
 80021cc:	003d08ff 	.word	0x003d08ff
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	817b      	strh	r3, [r7, #10]
 80021ea:	460b      	mov	r3, r1
 80021ec:	813b      	strh	r3, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f2:	f7ff fc17 	bl	8001a24 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	f040 80d9 	bne.w	80023b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2319      	movs	r3, #25
 800220c:	2201      	movs	r2, #1
 800220e:	496d      	ldr	r1, [pc, #436]	; (80023c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fcc1 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	e0cc      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_I2C_Mem_Write+0x56>
 800222a:	2302      	movs	r3, #2
 800222c:	e0c5      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d007      	beq.n	8002254 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2221      	movs	r2, #33	; 0x21
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002296:	88f8      	ldrh	r0, [r7, #6]
 8002298:	893a      	ldrh	r2, [r7, #8]
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	4603      	mov	r3, r0
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 faf8 	bl	800289c <I2C_RequestMemoryWrite>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d052      	beq.n	8002358 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e081      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fd86 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_I2C_Mem_Write+0x180>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1aa      	bne.n	80022b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fd79 	bl	8002e5c <I2C_WaitOnBTFFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2b04      	cmp	r3, #4
 8002376:	d107      	bne.n	8002388 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e016      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000

080023cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ea:	f7ff fb1b 	bl	8001a24 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	f040 8244 	bne.w	8002886 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2319      	movs	r3, #25
 8002404:	2201      	movs	r2, #1
 8002406:	4982      	ldr	r1, [pc, #520]	; (8002610 <HAL_I2C_Mem_Read+0x244>)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fbc5 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
 8002416:	e237      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Mem_Read+0x5a>
 8002422:	2302      	movs	r3, #2
 8002424:	e230      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2222      	movs	r2, #34	; 0x22
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a62      	ldr	r2, [pc, #392]	; (8002614 <HAL_I2C_Mem_Read+0x248>)
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800248e:	88f8      	ldrh	r0, [r7, #6]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	8979      	ldrh	r1, [r7, #10]
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4603      	mov	r3, r0
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa92 	bl	80029c8 <I2C_RequestMemoryRead>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1ec      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d113      	bne.n	80024de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e1c0      	b.n	8002860 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d11e      	bne.n	8002524 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f6:	b672      	cpsid	i
}
 80024f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002520:	b662      	cpsie	i
}
 8002522:	e035      	b.n	8002590 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b02      	cmp	r3, #2
 800252a:	d11e      	bne.n	800256a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002566:	b662      	cpsie	i
}
 8002568:	e012      	b.n	8002590 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002590:	e166      	b.n	8002860 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	2b03      	cmp	r3, #3
 8002598:	f200 811f 	bhi.w	80027da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d123      	bne.n	80025ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fc9f 	bl	8002eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e167      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ea:	e139      	b.n	8002860 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d152      	bne.n	800269a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	2200      	movs	r2, #0
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_I2C_Mem_Read+0x24c>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 faca 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e13c      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000
 8002618:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002662:	b662      	cpsie	i
}
 8002664:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002698:	e0e2      	b.n	8002860 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2200      	movs	r2, #0
 80026a2:	497b      	ldr	r1, [pc, #492]	; (8002890 <HAL_I2C_Mem_Read+0x4c4>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fa77 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0e9      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_I2C_Mem_Read+0x4c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_I2C_Mem_Read+0x4cc>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a1a      	lsrs	r2, r3, #8
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00da      	lsls	r2, r3, #3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	3b01      	subs	r3, #1
 8002718:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
}
 8002744:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e09a      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d1d9      	bne.n	8002714 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027a2:	b662      	cpsie	i
}
 80027a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d8:	e042      	b.n	8002860 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb84 	bl	8002eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e04c      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d118      	bne.n	8002860 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f ae94 	bne.w	8002592 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	00010004 	.word	0x00010004
 8002894:	20000090 	.word	0x20000090
 8002898:	14f8b589 	.word	0x14f8b589

0800289c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	817b      	strh	r3, [r7, #10]
 80028ae:	460b      	mov	r3, r1
 80028b0:	813b      	strh	r3, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f960 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ec:	d103      	bne.n	80028f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e05f      	b.n	80029ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	492d      	ldr	r1, [pc, #180]	; (80029c4 <I2C_RequestMemoryWrite+0x128>)
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f9bb 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04c      	b.n	80029ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa46 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e02b      	b.n	80029ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002968:	893b      	ldrh	r3, [r7, #8]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]
 8002972:	e021      	b.n	80029b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002974:	893b      	ldrh	r3, [r7, #8]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa20 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e005      	b.n	80029ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ae:	893b      	ldrh	r3, [r7, #8]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	00010002 	.word	0x00010002

080029c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f8c2 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a28:	d103      	bne.n	8002a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0aa      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	4952      	ldr	r1, [pc, #328]	; (8002b94 <I2C_RequestMemoryRead+0x1cc>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f91d 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e097      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f9a8 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d107      	bne.n	8002a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e076      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e021      	b.n	8002af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	6a39      	ldr	r1, [r7, #32]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f982 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d107      	bne.n	8002ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e050      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aea:	893b      	ldrh	r3, [r7, #8]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f967 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e035      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f82b 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d103      	bne.n	8002b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e013      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <I2C_RequestMemoryRead+0x1cc>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f886 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba8:	e048      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d044      	beq.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe ff37 	bl	8001a24 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d139      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	e00c      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d116      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e023      	b.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10d      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	e00c      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d093      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	e071      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d123      	bne.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e067      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d041      	beq.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe fe92 	bl	8001a24 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d136      	bne.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10c      	bne.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e00b      	b.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e021      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10c      	bne.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e00b      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f af6d 	bne.w	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd8:	e034      	b.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8e3 	bl	8002fa6 <I2C_IsAcknowledgeFailed>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e034      	b.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d028      	beq.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fe17 	bl	8001a24 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d016      	beq.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d1c3      	bne.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e68:	e034      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f89b 	bl	8002fa6 <I2C_IsAcknowledgeFailed>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e034      	b.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d028      	beq.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7fe fdcf 	bl	8001a24 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11d      	bne.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d016      	beq.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e007      	b.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d1c3      	bne.n	8002e6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef8:	e049      	b.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d119      	bne.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0210 	mvn.w	r2, #16
 8002f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e030      	b.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fe fd72 	bl	8001a24 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11d      	bne.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d016      	beq.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d1ae      	bne.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d11b      	bne.n	8002ff6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
	...

08003004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e272      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8087 	beq.w	8003132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b04      	cmp	r3, #4
 800302e:	d00c      	beq.n	800304a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d112      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
 800303c:	4b8c      	ldr	r3, [pc, #560]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d10b      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304a:	4b89      	ldr	r3, [pc, #548]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06c      	beq.n	8003130 <HAL_RCC_OscConfig+0x12c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d168      	bne.n	8003130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e24c      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x76>
 800306c:	4b80      	ldr	r3, [pc, #512]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7f      	ldr	r2, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e02e      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x98>
 8003082:	4b7b      	ldr	r3, [pc, #492]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7a      	ldr	r2, [pc, #488]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b78      	ldr	r3, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a77      	ldr	r2, [pc, #476]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xbc>
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a71      	ldr	r2, [pc, #452]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6e      	ldr	r2, [pc, #440]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 80030c0:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a67      	ldr	r2, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fca0 	bl	8001a24 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fc9c 	bl	8001a24 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e200      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe4>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fc8c 	bl	8001a24 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fc88 	bl	8001a24 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ec      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x10c>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313e:	4b4c      	ldr	r3, [pc, #304]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
 8003156:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c0      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4939      	ldr	r1, [pc, #228]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fc41 	bl	8001a24 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe fc3d 	bl	8001a24 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4927      	ldr	r1, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fc20 	bl	8001a24 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fc1c 	bl	8001a24 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e180      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03a      	beq.n	8003288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fe fc00 	bl	8001a24 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe fbfc 	bl	8001a24 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e160      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003246:	2001      	movs	r0, #1
 8003248:	f000 faba 	bl	80037c0 <RCC_Delay>
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe fbe6 	bl	8001a24 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fbe2 	bl	8001a24 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d908      	bls.n	800327c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e146      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	42420000 	.word	0x42420000
 8003278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e9      	bne.n	800325c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a6 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a87      	ldr	r2, [pc, #540]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7e      	ldr	r2, [pc, #504]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe fba3 	bl	8001a24 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe fb9f 	bl	8001a24 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e103      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b75      	ldr	r3, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x312>
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x334>
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4a66      	ldr	r2, [pc, #408]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6213      	str	r3, [r2, #32]
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x356>
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4b5e      	ldr	r3, [pc, #376]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe fb53 	bl	8001a24 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe fb4f 	bl	8001a24 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0b1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x37e>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fb3d 	bl	8001a24 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe fb39 	bl	8001a24 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e09b      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8087 	beq.w	80034fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d061      	beq.n	80034bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d146      	bne.n	800348e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fb0d 	bl	8001a24 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe fb09 	bl	8001a24 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e06d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d108      	bne.n	8003448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4921      	ldr	r1, [pc, #132]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a19      	ldr	r1, [r3, #32]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	430b      	orrs	r3, r1
 800345a:	491b      	ldr	r1, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe fadd 	bl	8001a24 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fad9 	bl	8001a24 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x46a>
 800348c:	e035      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fac6 	bl	8001a24 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fac2 	bl	8001a24 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x498>
 80034ba:	e01e      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e019      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x500>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0d0      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d910      	bls.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4965      	ldr	r1, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800356e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d040      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e073      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4936      	ldr	r1, [pc, #216]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fa14 	bl	8001a24 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fa10 	bl	8001a24 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e053      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d210      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	4922      	ldr	r1, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1cc>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f972 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08003f38 	.word	0x08003f38
 80036d4:	20000090 	.word	0x20000090
 80036d8:	20000094 	.word	0x20000094

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x30>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x36>
 800370a:	e027      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800370e:	613b      	str	r3, [r7, #16]
      break;
 8003710:	e027      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	0c9b      	lsrs	r3, r3, #18
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0c5b      	lsrs	r3, r3, #17
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800373e:	fb03 f202 	mul.w	r2, r3, r2
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e004      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	613b      	str	r3, [r7, #16]
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800375e:	613b      	str	r3, [r7, #16]
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	693b      	ldr	r3, [r7, #16]
}
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08003f50 	.word	0x08003f50
 800377c:	08003f60 	.word	0x08003f60
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <HAL_RCC_GetHCLKFreq+0x10>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	20000090 	.word	0x20000090

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff2 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08003f48 	.word	0x08003f48

080037c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <RCC_Delay+0x34>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <RCC_Delay+0x38>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a5b      	lsrs	r3, r3, #9
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037dc:	bf00      	nop
  }
  while (Delay --);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f9      	bne.n	80037dc <RCC_Delay+0x1c>
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	20000090 	.word	0x20000090
 80037f8:	10624dd3 	.word	0x10624dd3

080037fc <memset>:
 80037fc:	4603      	mov	r3, r0
 80037fe:	4402      	add	r2, r0
 8003800:	4293      	cmp	r3, r2
 8003802:	d100      	bne.n	8003806 <memset+0xa>
 8003804:	4770      	bx	lr
 8003806:	f803 1b01 	strb.w	r1, [r3], #1
 800380a:	e7f9      	b.n	8003800 <memset+0x4>

0800380c <__errno>:
 800380c:	4b01      	ldr	r3, [pc, #4]	; (8003814 <__errno+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200000e8 	.word	0x200000e8

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	2600      	movs	r6, #0
 800381c:	4d0c      	ldr	r5, [pc, #48]	; (8003850 <__libc_init_array+0x38>)
 800381e:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	f000 fb78 	bl	8003f1c <_init>
 800382c:	2600      	movs	r6, #0
 800382e:	4d0a      	ldr	r5, [pc, #40]	; (8003858 <__libc_init_array+0x40>)
 8003830:	4c0a      	ldr	r4, [pc, #40]	; (800385c <__libc_init_array+0x44>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08003fd8 	.word	0x08003fd8
 8003854:	08003fd8 	.word	0x08003fd8
 8003858:	08003fd8 	.word	0x08003fd8
 800385c:	08003fdc 	.word	0x08003fdc

08003860 <atan2>:
 8003860:	f000 ba8e 	b.w	8003d80 <__ieee754_atan2>

08003864 <sqrt>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	4606      	mov	r6, r0
 8003868:	460f      	mov	r7, r1
 800386a:	f000 f9af 	bl	8003bcc <__ieee754_sqrt>
 800386e:	4632      	mov	r2, r6
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
 8003874:	463b      	mov	r3, r7
 8003876:	4630      	mov	r0, r6
 8003878:	4639      	mov	r1, r7
 800387a:	f7fd f8bf 	bl	80009fc <__aeabi_dcmpun>
 800387e:	b990      	cbnz	r0, 80038a6 <sqrt+0x42>
 8003880:	2200      	movs	r2, #0
 8003882:	2300      	movs	r3, #0
 8003884:	4630      	mov	r0, r6
 8003886:	4639      	mov	r1, r7
 8003888:	f7fd f890 	bl	80009ac <__aeabi_dcmplt>
 800388c:	b158      	cbz	r0, 80038a6 <sqrt+0x42>
 800388e:	f7ff ffbd 	bl	800380c <__errno>
 8003892:	2321      	movs	r3, #33	; 0x21
 8003894:	2200      	movs	r2, #0
 8003896:	6003      	str	r3, [r0, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f7fc ff3d 	bl	800071c <__aeabi_ddiv>
 80038a2:	4604      	mov	r4, r0
 80038a4:	460d      	mov	r5, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	0000      	movs	r0, r0
	...

080038b0 <atan>:
 80038b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	4bb6      	ldr	r3, [pc, #728]	; (8003b90 <atan+0x2e0>)
 80038b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80038ba:	429e      	cmp	r6, r3
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	468b      	mov	fp, r1
 80038c2:	dd17      	ble.n	80038f4 <atan+0x44>
 80038c4:	4bb3      	ldr	r3, [pc, #716]	; (8003b94 <atan+0x2e4>)
 80038c6:	429e      	cmp	r6, r3
 80038c8:	dc01      	bgt.n	80038ce <atan+0x1e>
 80038ca:	d109      	bne.n	80038e0 <atan+0x30>
 80038cc:	b140      	cbz	r0, 80038e0 <atan+0x30>
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fc fc41 	bl	800015c <__adddf3>
 80038da:	4604      	mov	r4, r0
 80038dc:	460d      	mov	r5, r1
 80038de:	e005      	b.n	80038ec <atan+0x3c>
 80038e0:	f1bb 0f00 	cmp.w	fp, #0
 80038e4:	4cac      	ldr	r4, [pc, #688]	; (8003b98 <atan+0x2e8>)
 80038e6:	f300 8121 	bgt.w	8003b2c <atan+0x27c>
 80038ea:	4dac      	ldr	r5, [pc, #688]	; (8003b9c <atan+0x2ec>)
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f4:	4baa      	ldr	r3, [pc, #680]	; (8003ba0 <atan+0x2f0>)
 80038f6:	429e      	cmp	r6, r3
 80038f8:	dc11      	bgt.n	800391e <atan+0x6e>
 80038fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80038fe:	429e      	cmp	r6, r3
 8003900:	dc0a      	bgt.n	8003918 <atan+0x68>
 8003902:	a38b      	add	r3, pc, #556	; (adr r3, 8003b30 <atan+0x280>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc fc28 	bl	800015c <__adddf3>
 800390c:	2200      	movs	r2, #0
 800390e:	4ba5      	ldr	r3, [pc, #660]	; (8003ba4 <atan+0x2f4>)
 8003910:	f7fd f86a 	bl	80009e8 <__aeabi_dcmpgt>
 8003914:	2800      	cmp	r0, #0
 8003916:	d1e9      	bne.n	80038ec <atan+0x3c>
 8003918:	f04f 3aff 	mov.w	sl, #4294967295
 800391c:	e027      	b.n	800396e <atan+0xbe>
 800391e:	f000 f951 	bl	8003bc4 <fabs>
 8003922:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <atan+0x2f8>)
 8003924:	4604      	mov	r4, r0
 8003926:	429e      	cmp	r6, r3
 8003928:	460d      	mov	r5, r1
 800392a:	f300 80b8 	bgt.w	8003a9e <atan+0x1ee>
 800392e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003932:	429e      	cmp	r6, r3
 8003934:	f300 809c 	bgt.w	8003a70 <atan+0x1c0>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	f7fc fc0e 	bl	800015c <__adddf3>
 8003940:	2200      	movs	r2, #0
 8003942:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <atan+0x2f4>)
 8003944:	f7fc fc08 	bl	8000158 <__aeabi_dsub>
 8003948:	2200      	movs	r2, #0
 800394a:	4606      	mov	r6, r0
 800394c:	460f      	mov	r7, r1
 800394e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fc01 	bl	800015c <__adddf3>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	f7fc fedb 	bl	800071c <__aeabi_ddiv>
 8003966:	f04f 0a00 	mov.w	sl, #0
 800396a:	4604      	mov	r4, r0
 800396c:	460d      	mov	r5, r1
 800396e:	4622      	mov	r2, r4
 8003970:	462b      	mov	r3, r5
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fda7 	bl	80004c8 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4680      	mov	r8, r0
 8003980:	4689      	mov	r9, r1
 8003982:	f7fc fda1 	bl	80004c8 <__aeabi_dmul>
 8003986:	a36c      	add	r3, pc, #432	; (adr r3, 8003b38 <atan+0x288>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	4606      	mov	r6, r0
 800398e:	460f      	mov	r7, r1
 8003990:	f7fc fd9a 	bl	80004c8 <__aeabi_dmul>
 8003994:	a36a      	add	r3, pc, #424	; (adr r3, 8003b40 <atan+0x290>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fc fbdf 	bl	800015c <__adddf3>
 800399e:	4632      	mov	r2, r6
 80039a0:	463b      	mov	r3, r7
 80039a2:	f7fc fd91 	bl	80004c8 <__aeabi_dmul>
 80039a6:	a368      	add	r3, pc, #416	; (adr r3, 8003b48 <atan+0x298>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fbd6 	bl	800015c <__adddf3>
 80039b0:	4632      	mov	r2, r6
 80039b2:	463b      	mov	r3, r7
 80039b4:	f7fc fd88 	bl	80004c8 <__aeabi_dmul>
 80039b8:	a365      	add	r3, pc, #404	; (adr r3, 8003b50 <atan+0x2a0>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fbcd 	bl	800015c <__adddf3>
 80039c2:	4632      	mov	r2, r6
 80039c4:	463b      	mov	r3, r7
 80039c6:	f7fc fd7f 	bl	80004c8 <__aeabi_dmul>
 80039ca:	a363      	add	r3, pc, #396	; (adr r3, 8003b58 <atan+0x2a8>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fbc4 	bl	800015c <__adddf3>
 80039d4:	4632      	mov	r2, r6
 80039d6:	463b      	mov	r3, r7
 80039d8:	f7fc fd76 	bl	80004c8 <__aeabi_dmul>
 80039dc:	a360      	add	r3, pc, #384	; (adr r3, 8003b60 <atan+0x2b0>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fbbb 	bl	800015c <__adddf3>
 80039e6:	4642      	mov	r2, r8
 80039e8:	464b      	mov	r3, r9
 80039ea:	f7fc fd6d 	bl	80004c8 <__aeabi_dmul>
 80039ee:	a35e      	add	r3, pc, #376	; (adr r3, 8003b68 <atan+0x2b8>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	4680      	mov	r8, r0
 80039f6:	4689      	mov	r9, r1
 80039f8:	4630      	mov	r0, r6
 80039fa:	4639      	mov	r1, r7
 80039fc:	f7fc fd64 	bl	80004c8 <__aeabi_dmul>
 8003a00:	a35b      	add	r3, pc, #364	; (adr r3, 8003b70 <atan+0x2c0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fba7 	bl	8000158 <__aeabi_dsub>
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	f7fc fd5b 	bl	80004c8 <__aeabi_dmul>
 8003a12:	a359      	add	r3, pc, #356	; (adr r3, 8003b78 <atan+0x2c8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fb9e 	bl	8000158 <__aeabi_dsub>
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	463b      	mov	r3, r7
 8003a20:	f7fc fd52 	bl	80004c8 <__aeabi_dmul>
 8003a24:	a356      	add	r3, pc, #344	; (adr r3, 8003b80 <atan+0x2d0>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f7fc fb95 	bl	8000158 <__aeabi_dsub>
 8003a2e:	4632      	mov	r2, r6
 8003a30:	463b      	mov	r3, r7
 8003a32:	f7fc fd49 	bl	80004c8 <__aeabi_dmul>
 8003a36:	a354      	add	r3, pc, #336	; (adr r3, 8003b88 <atan+0x2d8>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f7fc fb8c 	bl	8000158 <__aeabi_dsub>
 8003a40:	4632      	mov	r2, r6
 8003a42:	463b      	mov	r3, r7
 8003a44:	f7fc fd40 	bl	80004c8 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc fb84 	bl	800015c <__adddf3>
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	f7fc fd36 	bl	80004c8 <__aeabi_dmul>
 8003a5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	d144      	bne.n	8003af0 <atan+0x240>
 8003a66:	4620      	mov	r0, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f7fc fb75 	bl	8000158 <__aeabi_dsub>
 8003a6e:	e734      	b.n	80038da <atan+0x2a>
 8003a70:	2200      	movs	r2, #0
 8003a72:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <atan+0x2f4>)
 8003a74:	f7fc fb70 	bl	8000158 <__aeabi_dsub>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <atan+0x2f4>)
 8003a84:	f7fc fb6a 	bl	800015c <__adddf3>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	4639      	mov	r1, r7
 8003a90:	f7fc fe44 	bl	800071c <__aeabi_ddiv>
 8003a94:	f04f 0a01 	mov.w	sl, #1
 8003a98:	4604      	mov	r4, r0
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	e767      	b.n	800396e <atan+0xbe>
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <atan+0x2fc>)
 8003aa0:	429e      	cmp	r6, r3
 8003aa2:	da1a      	bge.n	8003ada <atan+0x22a>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <atan+0x300>)
 8003aa8:	f7fc fb56 	bl	8000158 <__aeabi_dsub>
 8003aac:	2200      	movs	r2, #0
 8003aae:	4606      	mov	r6, r0
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4b3e      	ldr	r3, [pc, #248]	; (8003bb0 <atan+0x300>)
 8003ab8:	f7fc fd06 	bl	80004c8 <__aeabi_dmul>
 8003abc:	2200      	movs	r2, #0
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <atan+0x2f4>)
 8003ac0:	f7fc fb4c 	bl	800015c <__adddf3>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4630      	mov	r0, r6
 8003aca:	4639      	mov	r1, r7
 8003acc:	f7fc fe26 	bl	800071c <__aeabi_ddiv>
 8003ad0:	f04f 0a02 	mov.w	sl, #2
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	460d      	mov	r5, r1
 8003ad8:	e749      	b.n	800396e <atan+0xbe>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	2000      	movs	r0, #0
 8003ae0:	4934      	ldr	r1, [pc, #208]	; (8003bb4 <atan+0x304>)
 8003ae2:	f7fc fe1b 	bl	800071c <__aeabi_ddiv>
 8003ae6:	f04f 0a03 	mov.w	sl, #3
 8003aea:	4604      	mov	r4, r0
 8003aec:	460d      	mov	r5, r1
 8003aee:	e73e      	b.n	800396e <atan+0xbe>
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <atan+0x308>)
 8003af2:	4e32      	ldr	r6, [pc, #200]	; (8003bbc <atan+0x30c>)
 8003af4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fb2c 	bl	8000158 <__aeabi_dsub>
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	f7fc fb28 	bl	8000158 <__aeabi_dsub>
 8003b08:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003b14:	f7fc fb20 	bl	8000158 <__aeabi_dsub>
 8003b18:	f1bb 0f00 	cmp.w	fp, #0
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	460d      	mov	r5, r1
 8003b20:	f6bf aee4 	bge.w	80038ec <atan+0x3c>
 8003b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b28:	461d      	mov	r5, r3
 8003b2a:	e6df      	b.n	80038ec <atan+0x3c>
 8003b2c:	4d24      	ldr	r5, [pc, #144]	; (8003bc0 <atan+0x310>)
 8003b2e:	e6dd      	b.n	80038ec <atan+0x3c>
 8003b30:	8800759c 	.word	0x8800759c
 8003b34:	7e37e43c 	.word	0x7e37e43c
 8003b38:	e322da11 	.word	0xe322da11
 8003b3c:	3f90ad3a 	.word	0x3f90ad3a
 8003b40:	24760deb 	.word	0x24760deb
 8003b44:	3fa97b4b 	.word	0x3fa97b4b
 8003b48:	a0d03d51 	.word	0xa0d03d51
 8003b4c:	3fb10d66 	.word	0x3fb10d66
 8003b50:	c54c206e 	.word	0xc54c206e
 8003b54:	3fb745cd 	.word	0x3fb745cd
 8003b58:	920083ff 	.word	0x920083ff
 8003b5c:	3fc24924 	.word	0x3fc24924
 8003b60:	5555550d 	.word	0x5555550d
 8003b64:	3fd55555 	.word	0x3fd55555
 8003b68:	2c6a6c2f 	.word	0x2c6a6c2f
 8003b6c:	bfa2b444 	.word	0xbfa2b444
 8003b70:	52defd9a 	.word	0x52defd9a
 8003b74:	3fadde2d 	.word	0x3fadde2d
 8003b78:	af749a6d 	.word	0xaf749a6d
 8003b7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8003b80:	fe231671 	.word	0xfe231671
 8003b84:	3fbc71c6 	.word	0x3fbc71c6
 8003b88:	9998ebc4 	.word	0x9998ebc4
 8003b8c:	3fc99999 	.word	0x3fc99999
 8003b90:	440fffff 	.word	0x440fffff
 8003b94:	7ff00000 	.word	0x7ff00000
 8003b98:	54442d18 	.word	0x54442d18
 8003b9c:	bff921fb 	.word	0xbff921fb
 8003ba0:	3fdbffff 	.word	0x3fdbffff
 8003ba4:	3ff00000 	.word	0x3ff00000
 8003ba8:	3ff2ffff 	.word	0x3ff2ffff
 8003bac:	40038000 	.word	0x40038000
 8003bb0:	3ff80000 	.word	0x3ff80000
 8003bb4:	bff00000 	.word	0xbff00000
 8003bb8:	08003f88 	.word	0x08003f88
 8003bbc:	08003f68 	.word	0x08003f68
 8003bc0:	3ff921fb 	.word	0x3ff921fb

08003bc4 <fabs>:
 8003bc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4770      	bx	lr

08003bcc <__ieee754_sqrt>:
 8003bcc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003d70 <__ieee754_sqrt+0x1a4>
 8003bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	ea3c 0c01 	bics.w	ip, ip, r1
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4606      	mov	r6, r0
 8003bdc:	460d      	mov	r5, r1
 8003bde:	460a      	mov	r2, r1
 8003be0:	4604      	mov	r4, r0
 8003be2:	d10e      	bne.n	8003c02 <__ieee754_sqrt+0x36>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f7fc fc6f 	bl	80004c8 <__aeabi_dmul>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4630      	mov	r0, r6
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc fab3 	bl	800015c <__adddf3>
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	2900      	cmp	r1, #0
 8003c04:	dc0d      	bgt.n	8003c22 <__ieee754_sqrt+0x56>
 8003c06:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003c0a:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003c0e:	d0f4      	beq.n	8003bfa <__ieee754_sqrt+0x2e>
 8003c10:	b139      	cbz	r1, 8003c22 <__ieee754_sqrt+0x56>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f7fc faa0 	bl	8000158 <__aeabi_dsub>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	f7fc fd7e 	bl	800071c <__aeabi_ddiv>
 8003c20:	e7e9      	b.n	8003bf6 <__ieee754_sqrt+0x2a>
 8003c22:	1512      	asrs	r2, r2, #20
 8003c24:	f000 8089 	beq.w	8003d3a <__ieee754_sqrt+0x16e>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c36:	07d2      	lsls	r2, r2, #31
 8003c38:	bf5c      	itt	pl
 8003c3a:	005b      	lslpl	r3, r3, #1
 8003c3c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c44:	bf58      	it	pl
 8003c46:	0064      	lslpl	r4, r4, #1
 8003c48:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003c4c:	0062      	lsls	r2, r4, #1
 8003c4e:	2016      	movs	r0, #22
 8003c50:	4629      	mov	r1, r5
 8003c52:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8003c56:	1076      	asrs	r6, r6, #1
 8003c58:	190f      	adds	r7, r1, r4
 8003c5a:	429f      	cmp	r7, r3
 8003c5c:	bfde      	ittt	le
 8003c5e:	1bdb      	suble	r3, r3, r7
 8003c60:	1939      	addle	r1, r7, r4
 8003c62:	192d      	addle	r5, r5, r4
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	3801      	subs	r0, #1
 8003c68:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003c6c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003c70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003c74:	d1f0      	bne.n	8003c58 <__ieee754_sqrt+0x8c>
 8003c76:	4604      	mov	r4, r0
 8003c78:	2720      	movs	r7, #32
 8003c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	eb0c 0e00 	add.w	lr, ip, r0
 8003c84:	dc02      	bgt.n	8003c8c <__ieee754_sqrt+0xc0>
 8003c86:	d113      	bne.n	8003cb0 <__ieee754_sqrt+0xe4>
 8003c88:	4596      	cmp	lr, r2
 8003c8a:	d811      	bhi.n	8003cb0 <__ieee754_sqrt+0xe4>
 8003c8c:	f1be 0f00 	cmp.w	lr, #0
 8003c90:	eb0e 000c 	add.w	r0, lr, ip
 8003c94:	da56      	bge.n	8003d44 <__ieee754_sqrt+0x178>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	db54      	blt.n	8003d44 <__ieee754_sqrt+0x178>
 8003c9a:	f101 0801 	add.w	r8, r1, #1
 8003c9e:	1a5b      	subs	r3, r3, r1
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	4596      	cmp	lr, r2
 8003ca4:	bf88      	it	hi
 8003ca6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003caa:	eba2 020e 	sub.w	r2, r2, lr
 8003cae:	4464      	add	r4, ip
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	3f01      	subs	r7, #1
 8003cb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003cb8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003cbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003cc0:	d1dd      	bne.n	8003c7e <__ieee754_sqrt+0xb2>
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <__ieee754_sqrt+0x132>
 8003cc6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003d74 <__ieee754_sqrt+0x1a8>
 8003cca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003d78 <__ieee754_sqrt+0x1ac>
 8003cce:	e9da 0100 	ldrd	r0, r1, [sl]
 8003cd2:	e9db 2300 	ldrd	r2, r3, [fp]
 8003cd6:	f7fc fa3f 	bl	8000158 <__aeabi_dsub>
 8003cda:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fe6b 	bl	80009c0 <__aeabi_dcmple>
 8003cea:	b140      	cbz	r0, 8003cfe <__ieee754_sqrt+0x132>
 8003cec:	e9da 0100 	ldrd	r0, r1, [sl]
 8003cf0:	e9db 2300 	ldrd	r2, r3, [fp]
 8003cf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003cf8:	d126      	bne.n	8003d48 <__ieee754_sqrt+0x17c>
 8003cfa:	463c      	mov	r4, r7
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	106b      	asrs	r3, r5, #1
 8003d00:	0864      	lsrs	r4, r4, #1
 8003d02:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003d06:	07ea      	lsls	r2, r5, #31
 8003d08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003d0c:	bf48      	it	mi
 8003d0e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8003d12:	4620      	mov	r0, r4
 8003d14:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003d18:	e76d      	b.n	8003bf6 <__ieee754_sqrt+0x2a>
 8003d1a:	0ae3      	lsrs	r3, r4, #11
 8003d1c:	3915      	subs	r1, #21
 8003d1e:	0564      	lsls	r4, r4, #21
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0fa      	beq.n	8003d1a <__ieee754_sqrt+0x14e>
 8003d24:	02d8      	lsls	r0, r3, #11
 8003d26:	d50a      	bpl.n	8003d3e <__ieee754_sqrt+0x172>
 8003d28:	f1c2 0020 	rsb	r0, r2, #32
 8003d2c:	fa24 f000 	lsr.w	r0, r4, r0
 8003d30:	1e55      	subs	r5, r2, #1
 8003d32:	4094      	lsls	r4, r2
 8003d34:	4303      	orrs	r3, r0
 8003d36:	1b4a      	subs	r2, r1, r5
 8003d38:	e776      	b.n	8003c28 <__ieee754_sqrt+0x5c>
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	e7f0      	b.n	8003d20 <__ieee754_sqrt+0x154>
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	3201      	adds	r2, #1
 8003d42:	e7ef      	b.n	8003d24 <__ieee754_sqrt+0x158>
 8003d44:	4688      	mov	r8, r1
 8003d46:	e7aa      	b.n	8003c9e <__ieee754_sqrt+0xd2>
 8003d48:	f7fc fa08 	bl	800015c <__adddf3>
 8003d4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4640      	mov	r0, r8
 8003d56:	4649      	mov	r1, r9
 8003d58:	f7fc fe28 	bl	80009ac <__aeabi_dcmplt>
 8003d5c:	b120      	cbz	r0, 8003d68 <__ieee754_sqrt+0x19c>
 8003d5e:	1ca1      	adds	r1, r4, #2
 8003d60:	bf08      	it	eq
 8003d62:	3501      	addeq	r5, #1
 8003d64:	3402      	adds	r4, #2
 8003d66:	e7ca      	b.n	8003cfe <__ieee754_sqrt+0x132>
 8003d68:	3401      	adds	r4, #1
 8003d6a:	f024 0401 	bic.w	r4, r4, #1
 8003d6e:	e7c6      	b.n	8003cfe <__ieee754_sqrt+0x132>
 8003d70:	7ff00000 	.word	0x7ff00000
 8003d74:	200000f0 	.word	0x200000f0
 8003d78:	200000f8 	.word	0x200000f8
 8003d7c:	00000000 	.word	0x00000000

08003d80 <__ieee754_atan2>:
 8003d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	4617      	mov	r7, r2
 8003d86:	4692      	mov	sl, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d8e:	427b      	negs	r3, r7
 8003d90:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8003f10 <__ieee754_atan2+0x190>
 8003d94:	433b      	orrs	r3, r7
 8003d96:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003d9a:	4543      	cmp	r3, r8
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	460d      	mov	r5, r1
 8003da0:	d809      	bhi.n	8003db6 <__ieee754_atan2+0x36>
 8003da2:	4246      	negs	r6, r0
 8003da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003da8:	4306      	orrs	r6, r0
 8003daa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003dae:	4546      	cmp	r6, r8
 8003db0:	468e      	mov	lr, r1
 8003db2:	4683      	mov	fp, r0
 8003db4:	d908      	bls.n	8003dc8 <__ieee754_atan2+0x48>
 8003db6:	4652      	mov	r2, sl
 8003db8:	464b      	mov	r3, r9
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc f9cd 	bl	800015c <__adddf3>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	e019      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003dc8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8003dcc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003dd0:	433e      	orrs	r6, r7
 8003dd2:	d103      	bne.n	8003ddc <__ieee754_atan2+0x5c>
 8003dd4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	f7ff bd6a 	b.w	80038b0 <atan>
 8003ddc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8003de0:	f006 0602 	and.w	r6, r6, #2
 8003de4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8003de8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003dec:	d10a      	bne.n	8003e04 <__ieee754_atan2+0x84>
 8003dee:	2e02      	cmp	r6, #2
 8003df0:	d067      	beq.n	8003ec2 <__ieee754_atan2+0x142>
 8003df2:	2e03      	cmp	r6, #3
 8003df4:	d102      	bne.n	8003dfc <__ieee754_atan2+0x7c>
 8003df6:	a53a      	add	r5, pc, #232	; (adr r5, 8003ee0 <__ieee754_atan2+0x160>)
 8003df8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e04:	4317      	orrs	r7, r2
 8003e06:	d106      	bne.n	8003e16 <__ieee754_atan2+0x96>
 8003e08:	f1be 0f00 	cmp.w	lr, #0
 8003e0c:	da64      	bge.n	8003ed8 <__ieee754_atan2+0x158>
 8003e0e:	a536      	add	r5, pc, #216	; (adr r5, 8003ee8 <__ieee754_atan2+0x168>)
 8003e10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e14:	e7f2      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003e16:	4542      	cmp	r2, r8
 8003e18:	d10f      	bne.n	8003e3a <__ieee754_atan2+0xba>
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f106 36ff 	add.w	r6, r6, #4294967295
 8003e20:	d107      	bne.n	8003e32 <__ieee754_atan2+0xb2>
 8003e22:	2e02      	cmp	r6, #2
 8003e24:	d851      	bhi.n	8003eca <__ieee754_atan2+0x14a>
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <__ieee754_atan2+0x194>)
 8003e28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e30:	e7e4      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003e32:	2e02      	cmp	r6, #2
 8003e34:	d84d      	bhi.n	8003ed2 <__ieee754_atan2+0x152>
 8003e36:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <__ieee754_atan2+0x198>)
 8003e38:	e7f6      	b.n	8003e28 <__ieee754_atan2+0xa8>
 8003e3a:	4543      	cmp	r3, r8
 8003e3c:	d0e4      	beq.n	8003e08 <__ieee754_atan2+0x88>
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003e44:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003e48:	da21      	bge.n	8003e8e <__ieee754_atan2+0x10e>
 8003e4a:	f1b9 0f00 	cmp.w	r9, #0
 8003e4e:	da01      	bge.n	8003e54 <__ieee754_atan2+0xd4>
 8003e50:	323c      	adds	r2, #60	; 0x3c
 8003e52:	db20      	blt.n	8003e96 <__ieee754_atan2+0x116>
 8003e54:	4652      	mov	r2, sl
 8003e56:	464b      	mov	r3, r9
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7fc fc5e 	bl	800071c <__aeabi_ddiv>
 8003e60:	f7ff feb0 	bl	8003bc4 <fabs>
 8003e64:	f7ff fd24 	bl	80038b0 <atan>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	2e01      	cmp	r6, #1
 8003e6e:	d015      	beq.n	8003e9c <__ieee754_atan2+0x11c>
 8003e70:	2e02      	cmp	r6, #2
 8003e72:	d017      	beq.n	8003ea4 <__ieee754_atan2+0x124>
 8003e74:	2e00      	cmp	r6, #0
 8003e76:	d0c1      	beq.n	8003dfc <__ieee754_atan2+0x7c>
 8003e78:	a31d      	add	r3, pc, #116	; (adr r3, 8003ef0 <__ieee754_atan2+0x170>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc f969 	bl	8000158 <__aeabi_dsub>
 8003e86:	a31c      	add	r3, pc, #112	; (adr r3, 8003ef8 <__ieee754_atan2+0x178>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	e016      	b.n	8003ebc <__ieee754_atan2+0x13c>
 8003e8e:	a51c      	add	r5, pc, #112	; (adr r5, 8003f00 <__ieee754_atan2+0x180>)
 8003e90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e94:	e7ea      	b.n	8003e6c <__ieee754_atan2+0xec>
 8003e96:	2400      	movs	r4, #0
 8003e98:	2500      	movs	r5, #0
 8003e9a:	e7e7      	b.n	8003e6c <__ieee754_atan2+0xec>
 8003e9c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	e7ab      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003ea4:	a312      	add	r3, pc, #72	; (adr r3, 8003ef0 <__ieee754_atan2+0x170>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	f7fc f953 	bl	8000158 <__aeabi_dsub>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	a110      	add	r1, pc, #64	; (adr r1, 8003ef8 <__ieee754_atan2+0x178>)
 8003eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ebc:	f7fc f94c 	bl	8000158 <__aeabi_dsub>
 8003ec0:	e77f      	b.n	8003dc2 <__ieee754_atan2+0x42>
 8003ec2:	a50d      	add	r5, pc, #52	; (adr r5, 8003ef8 <__ieee754_atan2+0x178>)
 8003ec4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ec8:	e798      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003eca:	a50f      	add	r5, pc, #60	; (adr r5, 8003f08 <__ieee754_atan2+0x188>)
 8003ecc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ed0:	e794      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003ed2:	2400      	movs	r4, #0
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	e791      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003ed8:	a509      	add	r5, pc, #36	; (adr r5, 8003f00 <__ieee754_atan2+0x180>)
 8003eda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ede:	e78d      	b.n	8003dfc <__ieee754_atan2+0x7c>
 8003ee0:	54442d18 	.word	0x54442d18
 8003ee4:	c00921fb 	.word	0xc00921fb
 8003ee8:	54442d18 	.word	0x54442d18
 8003eec:	bff921fb 	.word	0xbff921fb
 8003ef0:	33145c07 	.word	0x33145c07
 8003ef4:	3ca1a626 	.word	0x3ca1a626
 8003ef8:	54442d18 	.word	0x54442d18
 8003efc:	400921fb 	.word	0x400921fb
 8003f00:	54442d18 	.word	0x54442d18
 8003f04:	3ff921fb 	.word	0x3ff921fb
 8003f08:	54442d18 	.word	0x54442d18
 8003f0c:	3fe921fb 	.word	0x3fe921fb
 8003f10:	7ff00000 	.word	0x7ff00000
 8003f14:	08003fa8 	.word	0x08003fa8
 8003f18:	08003fc0 	.word	0x08003fc0

08003f1c <_init>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr

08003f28 <_fini>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr
