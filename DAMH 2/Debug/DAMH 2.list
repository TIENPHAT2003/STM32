
DAMH 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c130  0800c130  0001c130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d8  0800c5d8  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e0  0800c5e0  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e0  0800c5e0  0001c5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800c5e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020280  2**0
                  CONTENTS
 10 .bss          000045dc  20000280  20000280  00020280  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000485c  2000485c  00020280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017cf6  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003819  00000000  00000000  00037fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001638  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000115a  00000000  00000000  0003ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024beb  00000000  00000000  0003df9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b133  00000000  00000000  00062b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8e2d  00000000  00000000  0007dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007038  00000000  00000000  00156ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0015db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c114 	.word	0x0800c114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	0800c114 	.word	0x0800c114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6178      	str	r0, [r7, #20]
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	60fa      	str	r2, [r7, #12]
 8000f50:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f98:	441a      	add	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000fbe:	f7ff fc45 	bl	800084c <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	461d      	mov	r5, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faa7 	bl	8000524 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff fc35 	bl	800084c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SpeedReadNonReset+0x118>)
 8000ff0:	f7ff fb02 	bl	80005f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001004:	a31e      	add	r3, pc, #120	; (adr r3, 8001080 <SpeedReadNonReset+0x108>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4614      	mov	r4, r2
 8001014:	461d      	mov	r5, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800101c:	a31a      	add	r3, pc, #104	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f92d 	bl	800028c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4614      	mov	r4, r2
 8001038:	461d      	mov	r5, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001040:	a311      	add	r3, pc, #68	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fad7 	bl	80005f8 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff f91b 	bl	800028c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	f3af 8000 	nop.w
 8001080:	ced91687 	.word	0xced91687
 8001084:	3feb53f7 	.word	0x3feb53f7
 8001088:	532617c2 	.word	0x532617c2
 800108c:	3fb2a305 	.word	0x3fb2a305
 8001090:	404e0000 	.word	0x404e0000

08001094 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010be:	441a      	add	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e1b      	ldrb	r3, [r3, #24]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <CountRead+0x52>
	{
		return enc->count_X4;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa22 	bl	8000524 <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e033      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da00      	bge.n	80010f8 <CountRead+0x64>
 80010f6:	3303      	adds	r3, #3
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa0d 	bl	8000524 <__aeabi_i2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e01e      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d116      	bne.n	8001146 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001120:	fb03 f202 	mul.w	r2, r3, r2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9f8 	bl	8000524 <__aeabi_i2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001144:	e003      	b.n	800114e <CountRead+0xba>
	}else {
		return 0;
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
	}
}
 800114e:	ec43 2b17 	vmov	d7, r2, r3
 8001152:	eeb0 0a47 	vmov.f32	s0, s14
 8001156:	eef0 0a67 	vmov.f32	s1, s15
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <checkNull>:

char txLogBuffer[150] = {0};
bool isTransmitComplete = true;
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <checkNull+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <checkNull+0x10>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <checkNull+0x12>
	return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000334 	.word	0x20000334

08001180 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <log_Init+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000334 	.word	0x20000334

080011a0 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <log_TransmitCompleteHandle+0x34>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d10c      	bne.n	80011cc <log_TransmitCompleteHandle+0x2c>
	isTransmitComplete = true;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <log_TransmitCompleteHandle+0x38>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
	memset(txLogBuffer,0,strlen(txLogBuffer));
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <log_TransmitCompleteHandle+0x3c>)
 80011ba:	f7ff f859 	bl	8000270 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <log_TransmitCompleteHandle+0x3c>)
 80011c6:	f008 fb2c 	bl	8009822 <memset>
 80011ca:	e000      	b.n	80011ce <log_TransmitCompleteHandle+0x2e>
	if(huart != targetUART) return;
 80011cc:	bf00      	nop

}
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000334 	.word	0x20000334
 80011d8:	20000000 	.word	0x20000000
 80011dc:	2000029c 	.word	0x2000029c

080011e0 <log_SendString>:

void log_SendString(){
 80011e0:	b598      	push	{r3, r4, r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK && isTransmitComplete) return;
 80011e4:	f7ff ffbc 	bl	8001160 <checkNull>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <log_SendString+0x16>
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <log_SendString+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d114      	bne.n	8001220 <log_SendString+0x40>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <log_SendString+0x48>)
 80011f8:	f7ff f83a 	bl	8000270 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <log_SendString+0x48>)
 8001202:	210a      	movs	r1, #10
 8001204:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <log_SendString+0x4c>)
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <log_SendString+0x48>)
 800120c:	f7ff f830 	bl	8000270 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4904      	ldr	r1, [pc, #16]	; (8001228 <log_SendString+0x48>)
 8001218:	4620      	mov	r0, r4
 800121a:	f005 fc31 	bl	8006a80 <HAL_UART_Transmit_IT>
 800121e:	e000      	b.n	8001222 <log_SendString+0x42>
	if(checkNull() != HAL_OK && isTransmitComplete) return;
 8001220:	bf00      	nop
}
 8001222:	bd98      	pop	{r3, r4, r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	2000029c 	.word	0x2000029c
 800122c:	20000334 	.word	0x20000334

08001230 <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f008 fb68 	bl	8009922 <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <log_AddHeaderArgumentToBuffer+0x48>)
 8001254:	f7ff f80c 	bl	8000270 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <log_AddHeaderArgumentToBuffer+0x48>)
 800125c:	4413      	add	r3, r2
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	4906      	ldr	r1, [pc, #24]	; (800127c <log_AddHeaderArgumentToBuffer+0x4c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f008 fa79 	bl	800975c <siprintf>
	isTransmitComplete = false;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <log_AddHeaderArgumentToBuffer+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000029c 	.word	0x2000029c
 800127c:	0800c130 	.word	0x0800c130
 8001280:	20000000 	.word	0x20000000

08001284 <log_AddArgumentToBuffer>:

void log_AddArgumentToBuffer(void *data, DataType type){
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	switch(type){
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d84b      	bhi.n	800132e <log_AddArgumentToBuffer+0xaa>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <log_AddArgumentToBuffer+0x18>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012d5 	.word	0x080012d5
 80012a0:	080012f3 	.word	0x080012f3
 80012a4:	080012ad 	.word	0x080012ad
 80012a8:	08001311 	.word	0x08001311
	case TYPE_FLOAT:
		float *fData = (float*)data;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	613b      	str	r3, [r7, #16]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%.2f,",*fData);
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012b2:	f7fe ffdd 	bl	8000270 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012ba:	189c      	adds	r4, r3, r2
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f941 	bl	8000548 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	491d      	ldr	r1, [pc, #116]	; (8001340 <log_AddArgumentToBuffer+0xbc>)
 80012cc:	4620      	mov	r0, r4
 80012ce:	f008 fa45 	bl	800975c <siprintf>
		break;
 80012d2:	e02c      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT8:
		uint8_t *uData = (uint8_t*)data;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60bb      	str	r3, [r7, #8]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%u,",*uData);
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012da:	f7fe ffc9 	bl	8000270 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012e2:	1898      	adds	r0, r3, r2
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4916      	ldr	r1, [pc, #88]	; (8001344 <log_AddArgumentToBuffer+0xc0>)
 80012ec:	f008 fa36 	bl	800975c <siprintf>
		break;
 80012f0:	e01d      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_INT:
		int *iData = (int*)data;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%d,",*iData);
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 80012f8:	f7fe ffba 	bl	8000270 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 8001300:	1898      	adds	r0, r3, r2
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <log_AddArgumentToBuffer+0xc4>)
 800130a:	f008 fa27 	bl	800975c <siprintf>
		break;
 800130e:	e00e      	b.n	800132e <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT32:
		uint32_t *u32Data = (uint32_t*)data;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	617b      	str	r3, [r7, #20]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%ld,",*u32Data);
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 8001316:	f7fe ffab 	bl	8000270 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <log_AddArgumentToBuffer+0xb8>)
 800131e:	1898      	adds	r0, r3, r2
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4909      	ldr	r1, [pc, #36]	; (800134c <log_AddArgumentToBuffer+0xc8>)
 8001328:	f008 fa18 	bl	800975c <siprintf>
		break;
 800132c:	bf00      	nop
	}
	isTransmitComplete = false;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <log_AddArgumentToBuffer+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	2000029c 	.word	0x2000029c
 8001340:	0800c134 	.word	0x0800c134
 8001344:	0800c13c 	.word	0x0800c13c
 8001348:	0800c140 	.word	0x0800c140
 800134c:	0800c144 	.word	0x0800c144
 8001350:	20000000 	.word	0x20000000

08001354 <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	615a      	str	r2, [r3, #20]

	if(Input<0){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da4d      	bge.n	8001424 <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <Drive+0x48>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
 800139a:	e018      	b.n	80013ce <Drive+0x7a>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d105      	bne.n	80013b0 <Drive+0x5c>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38
 80013ae:	e00e      	b.n	80013ce <Drive+0x7a>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d105      	bne.n	80013c4 <Drive+0x70>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013c2:	e004      	b.n	80013ce <Drive+0x7a>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <Drive+0x90>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	89da      	ldrh	r2, [r3, #14]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80013e2:	e0b7      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <Drive+0xa8>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	89d9      	ldrh	r1, [r3, #14]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	6393      	str	r3, [r2, #56]	; 0x38
 80013fa:	e0ab      	b.n	8001554 <Drive+0x200>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d107      	bne.n	8001414 <Drive+0xc0>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	89d9      	ldrh	r1, [r3, #14]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001412:	e09f      	b.n	8001554 <Drive+0x200>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	89d9      	ldrh	r1, [r3, #14]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001422:	e097      	b.n	8001554 <Drive+0x200>
	else if(Input>0){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	dd4d      	ble.n	80014c6 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <Drive+0xec>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	89da      	ldrh	r2, [r3, #14]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	e01e      	b.n	800147e <Drive+0x12a>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <Drive+0x104>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	89d9      	ldrh	r1, [r3, #14]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	6393      	str	r3, [r2, #56]	; 0x38
 8001456:	e012      	b.n	800147e <Drive+0x12a>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d107      	bne.n	8001470 <Drive+0x11c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	89d9      	ldrh	r1, [r3, #14]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	460b      	mov	r3, r1
 800146c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800146e:	e006      	b.n	800147e <Drive+0x12a>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	89d9      	ldrh	r1, [r3, #14]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	460b      	mov	r3, r1
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <Drive+0x13e>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001490:	e060      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d105      	bne.n	80014a6 <Drive+0x152>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	6393      	str	r3, [r2, #56]	; 0x38
 80014a4:	e056      	b.n	8001554 <Drive+0x200>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d105      	bne.n	80014ba <Drive+0x166>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014b8:	e04c      	b.n	8001554 <Drive+0x200>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014c4:	e046      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <Drive+0x186>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
 80014d8:	e018      	b.n	800150c <Drive+0x1b8>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d105      	bne.n	80014ee <Drive+0x19a>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
 80014ec:	e00e      	b.n	800150c <Drive+0x1b8>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d105      	bne.n	8001502 <Drive+0x1ae>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001500:	e004      	b.n	800150c <Drive+0x1b8>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <Drive+0x1cc>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800151e:	e019      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d105      	bne.n	8001534 <Drive+0x1e0>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001532:	e00f      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d105      	bne.n	8001548 <Drive+0x1f4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001546:	e005      	b.n	8001554 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001552:	e7ff      	b.n	8001554 <Drive+0x200>
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	ed87 0a02 	vstr	s0, [r7, #8]
 800156c:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edd3 7a01 	vldr	s15, [r3, #4]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	ed93 7a05 	vldr	s14, [r3, #20]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	edd3 7a02 	vldr	s15, [r3, #8]
 800159e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd06      	ble.n	80015fc <Pid_Cal+0x9c>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	e002      	b.n	8001602 <Pid_Cal+0xa2>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	ed93 7a08 	vldr	s14, [r3, #32]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	d506      	bpl.n	8001632 <Pid_Cal+0xd2>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	e002      	b.n	8001638 <Pid_Cal+0xd8>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 7a08 	vldr	s15, [r3, #32]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 6a02 	vldr	s13, [r3, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001650:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001654:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	ed93 7a04 	vldr	s14, [r3, #16]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd02      	ble.n	80016ee <Pid_Cal+0x18e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	e001      	b.n	80016f2 <Pid_Cal+0x192>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d502      	bpl.n	8001712 <Pid_Cal+0x1b2>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	e001      	b.n	8001716 <Pid_Cal+0x1b6>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <vApplicationGetIdleTaskMemory+0x2c>)
 8001738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <vApplicationGetIdleTaskMemory+0x30>)
 800173e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000338 	.word	0x20000338
 8001758:	2000038c 	.word	0x2000038c

0800175c <Kalman_getAngle>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};
int Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0
 8001762:	61f8      	str	r0, [r7, #28]
 8001764:	ed87 0b04 	vstr	d0, [r7, #16]
 8001768:	ed87 1b02 	vstr	d1, [r7, #8]
 800176c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800177a:	f7fe fd85 	bl	8000288 <__aeabi_dsub>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800178c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	69f9      	ldr	r1, [r7, #28]
 80017aa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017d0:	f7fe fd5a 	bl	8000288 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017e2:	f7fe fd51 	bl	8000288 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fd4a 	bl	800028c <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001804:	f7fe fef8 	bl	80005f8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe fd3c 	bl	800028c <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	69f9      	ldr	r1, [r7, #28]
 800181a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800182a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fd25 	bl	8000288 <__aeabi_dsub>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	69f9      	ldr	r1, [r7, #28]
 8001844:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001858:	f7fe fece 	bl	80005f8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fd10 	bl	8000288 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	69f9      	ldr	r1, [r7, #28]
 800186e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800187e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fcfd 	bl	800028c <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	69f9      	ldr	r1, [r7, #28]
 8001898:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018a8:	f7fe fcf0 	bl	800028c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018be:	f7fe ffc5 	bl	800084c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80018d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ea:	f7fe fccd 	bl	8000288 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcbc 	bl	800028c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	69f9      	ldr	r1, [r7, #28]
 800191a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001924:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fca8 	bl	800028c <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	69f9      	ldr	r1, [r7, #28]
 8001942:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800194c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001956:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001960:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001968:	f7fe fe46 	bl	80005f8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc88 	bl	8000288 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001988:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800198c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001990:	f7fe fe32 	bl	80005f8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fc74 	bl	8000288 <__aeabi_dsub>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	69f9      	ldr	r1, [r7, #28]
 80019a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80019b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019b8:	f7fe fe1e 	bl	80005f8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc60 	bl	8000288 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	69f9      	ldr	r1, [r7, #28]
 80019ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80019d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019e0:	f7fe fe0a 	bl	80005f8 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fc4c 	bl	8000288 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	69f9      	ldr	r1, [r7, #28]
 80019f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8a8 	bl	8000b58 <__aeabi_d2iz>
 8001a08:	4603      	mov	r3, r0
};
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3758      	adds	r7, #88	; 0x58
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a14 <MPU6050_Init>:

uint8_t MPU6050_Init()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2275      	movs	r2, #117	; 0x75
 8001a2a:	21d0      	movs	r1, #208	; 0xd0
 8001a2c:	4822      	ldr	r0, [pc, #136]	; (8001ab8 <MPU6050_Init+0xa4>)
 8001a2e:	f002 fbcd 	bl	80041cc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b68      	cmp	r3, #104	; 0x68
 8001a36:	d139      	bne.n	8001aac <MPU6050_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	226b      	movs	r2, #107	; 0x6b
 8001a4c:	21d0      	movs	r1, #208	; 0xd0
 8001a4e:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <MPU6050_Init+0xa4>)
 8001a50:	f002 fac2 	bl	8003fd8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a54:	2307      	movs	r3, #7
 8001a56:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2301      	movs	r3, #1
 8001a66:	2219      	movs	r2, #25
 8001a68:	21d0      	movs	r1, #208	; 0xd0
 8001a6a:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MPU6050_Init+0xa4>)
 8001a6c:	f002 fab4 	bl	8003fd8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	1dbb      	adds	r3, r7, #6
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	221c      	movs	r2, #28
 8001a84:	21d0      	movs	r1, #208	; 0xd0
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MPU6050_Init+0xa4>)
 8001a88:	f002 faa6 	bl	8003fd8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	221b      	movs	r2, #27
 8001aa0:	21d0      	movs	r1, #208	; 0xd0
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MPU6050_Init+0xa4>)
 8001aa4:	f002 fa98 	bl	8003fd8 <HAL_I2C_Mem_Write>
        return 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <MPU6050_Init+0x9a>
    }
    return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000058c 	.word	0x2000058c
 8001abc:	00000000 	.word	0x00000000

08001ac0 <MPU6050_Read_All>:
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b094      	sub	sp, #80	; 0x50
 8001ac6:	af04      	add	r7, sp, #16
 8001ac8:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	230e      	movs	r3, #14
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	223b      	movs	r2, #59	; 0x3b
 8001adc:	21d0      	movs	r1, #208	; 0xd0
 8001ade:	488e      	ldr	r0, [pc, #568]	; (8001d18 <MPU6050_Read_All+0x258>)
 8001ae0:	f002 fb74 	bl	80041cc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001ae4:	7a3b      	ldrb	r3, [r7, #8]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	7a7b      	ldrb	r3, [r7, #9]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001af6:	7abb      	ldrb	r3, [r7, #10]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7b7b      	ldrb	r3, [r7, #13]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	7c7b      	ldrb	r3, [r7, #17]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001b3a:	7cbb      	ldrb	r3, [r7, #18]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b4c:	7d3b      	ldrb	r3, [r7, #20]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcdd 	bl	8000524 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <MPU6050_Read_All+0x25c>)
 8001b70:	f7fe fe6c 	bl	800084c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fccd 	bl	8000524 <__aeabi_i2d>
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <MPU6050_Read_All+0x25c>)
 8001b90:	f7fe fe5c 	bl	800084c <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcbd 	bl	8000524 <__aeabi_i2d>
 8001baa:	a355      	add	r3, pc, #340	; (adr r3, 8001d00 <MPU6050_Read_All+0x240>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fe4c 	bl	800084c <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001bbe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bca:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001d20 <MPU6050_Read_All+0x260>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d24 <MPU6050_Read_All+0x264>
 8001bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc9c 	bl	8000524 <__aeabi_i2d>
 8001bec:	a346      	add	r3, pc, #280	; (adr r3, 8001d08 <MPU6050_Read_All+0x248>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fe2b 	bl	800084c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	a33e      	add	r3, pc, #248	; (adr r3, 8001d08 <MPU6050_Read_All+0x248>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fe1b 	bl	800084c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc7c 	bl	8000524 <__aeabi_i2d>
 8001c2c:	a336      	add	r3, pc, #216	; (adr r3, 8001d08 <MPU6050_Read_All+0x248>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fe0b 	bl	800084c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001c40:	f001 fd6a 	bl	8003718 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <MPU6050_Read_All+0x268>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc59 	bl	8000504 <__aeabi_ui2d>
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <MPU6050_Read_All+0x26c>)
 8001c58:	f7fe fdf8 	bl	800084c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001c64:	f001 fd58 	bl	8003718 <HAL_GetTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <MPU6050_Read_All+0x268>)
 8001c6c:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	fb03 f202 	mul.w	r2, r3, r2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c86:	4619      	mov	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc45 	bl	8000524 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	ec43 2b10 	vmov	d0, r2, r3
 8001ca2:	f009 fec1 	bl	800ba28 <sqrt>
 8001ca6:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cb6:	f7fe ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d137      	bne.n	8001d30 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cd0:	f7fe fdbc 	bl	800084c <__aeabi_ddiv>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b17 	vmov	d7, r2, r3
 8001cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce0:	eef0 0a67 	vmov.f32	s1, s15
 8001ce4:	f009 fecc 	bl	800ba80 <atan>
 8001ce8:	ec51 0b10 	vmov	r0, r1, d0
 8001cec:	a308      	add	r3, pc, #32	; (adr r3, 8001d10 <MPU6050_Read_All+0x250>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc81 	bl	80005f8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001cfe:	e01d      	b.n	8001d3c <MPU6050_Read_All+0x27c>
 8001d00:	00000000 	.word	0x00000000
 8001d04:	40cc2900 	.word	0x40cc2900
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40606000 	.word	0x40606000
 8001d10:	1a63c1f8 	.word	0x1a63c1f8
 8001d14:	404ca5dc 	.word	0x404ca5dc
 8001d18:	2000058c 	.word	0x2000058c
 8001d1c:	40d00000 	.word	0x40d00000
 8001d20:	43aa0000 	.word	0x43aa0000
 8001d24:	42121eb8 	.word	0x42121eb8
 8001d28:	200007f8 	.word	0x200007f8
 8001d2c:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	425b      	negs	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbed 	bl	8000524 <__aeabi_i2d>
 8001d4a:	4682      	mov	sl, r0
 8001d4c:	468b      	mov	fp, r1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbe5 	bl	8000524 <__aeabi_i2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ec43 2b11 	vmov	d1, r2, r3
 8001d62:	ec4b ab10 	vmov	d0, sl, fp
 8001d66:	f009 fe5d 	bl	800ba24 <atan2>
 8001d6a:	ec51 0b10 	vmov	r0, r1, d0
 8001d6e:	a34a      	add	r3, pc, #296	; (adr r3, 8001e98 <MPU6050_Read_All+0x3d8>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <MPU6050_Read_All+0x3c8>)
 8001d86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8a:	f7fe fea7 	bl	8000adc <__aeabi_dcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <MPU6050_Read_All+0x2ea>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <MPU6050_Read_All+0x3cc>)
 8001da0:	f7fe feba 	bl	8000b18 <__aeabi_dcmpgt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d114      	bne.n	8001dd4 <MPU6050_Read_All+0x314>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <MPU6050_Read_All+0x3cc>)
 8001db0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db4:	f7fe feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <MPU6050_Read_All+0x32a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <MPU6050_Read_All+0x3c8>)
 8001dca:	f7fe fe87 	bl	8000adc <__aeabi_dcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <MPU6050_Read_All+0x32a>
    {
        KalmanY.angle = pitch;
 8001dd4:	492e      	ldr	r1, [pc, #184]	; (8001e90 <MPU6050_Read_All+0x3d0>)
 8001dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dda:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001de8:	e016      	b.n	8001e18 <MPU6050_Read_All+0x358>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001df0:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001df4:	eeb0 1a47 	vmov.f32	s2, s14
 8001df8:	eef0 1a67 	vmov.f32	s3, s15
 8001dfc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e00:	4823      	ldr	r0, [pc, #140]	; (8001e90 <MPU6050_Read_All+0x3d0>)
 8001e02:	f7ff fcab 	bl	800175c <Kalman_getAngle>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb8b 	bl	8000524 <__aeabi_i2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001e1e:	4690      	mov	r8, r2
 8001e20:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MPU6050_Read_All+0x3cc>)
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	f7fe fe73 	bl	8000b18 <__aeabi_dcmpgt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <MPU6050_Read_All+0x38a>
        DataStruct->Gx = -DataStruct->Gx;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e3e:	4614      	mov	r4, r2
 8001e40:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001e50:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e54:	eeb0 1a47 	vmov.f32	s2, s14
 8001e58:	eef0 1a67 	vmov.f32	s3, s15
 8001e5c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <MPU6050_Read_All+0x3d4>)
 8001e62:	f7ff fc7b 	bl	800175c <Kalman_getAngle>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb5b 	bl	8000524 <__aeabi_i2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001e78:	bf00      	nop
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	c0568000 	.word	0xc0568000
 8001e8c:	40568000 	.word	0x40568000
 8001e90:	20000050 	.word	0x20000050
 8001e94:	20000008 	.word	0x20000008
 8001e98:	1a63c1f8 	.word	0x1a63c1f8
 8001e9c:	404ca5dc 	.word	0x404ca5dc

08001ea0 <gettheta>:

float leftvolt = 0, rightvolt = 0;

float PWM_L = 0,PWM_R = 0;

float gettheta(int enc_l, int enc_r){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
	float angle =(0.5*360/370)*(enc_l+ enc_r);
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	a30a      	add	r3, pc, #40	; (adr r3, 8001ee0 <gettheta+0x40>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fe6e 	bl	8000ba8 <__aeabi_d2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]
	return angle;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	ee07 3a90 	vmov	s15, r3
}
 8001ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	3759f22a 	.word	0x3759f22a
 8001ee4:	3fdf2298 	.word	0x3fdf2298

08001ee8 <getphi>:

float getphi(int enc_l, int enc_r){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	float angle = (3.2/22.5)*(enc_l - enc_r)*(360/370);
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb13 	bl	8000524 <__aeabi_i2d>
 8001efe:	a310      	add	r3, pc, #64	; (adr r3, 8001f40 <getphi+0x58>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fb78 	bl	80005f8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
	return angle;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	ee07 3a90 	vmov	s15, r3
}
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	f3af 8000 	nop.w
 8001f40:	789abcdf 	.word	0x789abcdf
 8001f44:	3fc23456 	.word	0x3fc23456

08001f48 <map>:
float map(float x, float in_max, float in_min, float out_max, float out_min){
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f52:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f56:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f5e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x-in_min)*(out_max-out_min)/(in_max-in_min) + out_min;
 8001f62:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f6e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001f96:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <constrain>:
float constrain(float x, float a, float b){
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fae:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fb2:	ed87 1a01 	vstr	s2, [r7, #4]
	if(x<a) 			return a;
 8001fb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d501      	bpl.n	8001fcc <constrain+0x28>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	e00b      	b.n	8001fe4 <constrain+0x40>

	else if(x>b) 		return b;
 8001fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	dd01      	ble.n	8001fe2 <constrain+0x3e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e000      	b.n	8001fe4 <constrain+0x40>

	else 			 	return x;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <StopandReset>:

//LQR function
void StopandReset(MPU6050_t *DataStruct){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
	Drive(&Motor_R, &htim3, 0, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002000:	2304      	movs	r3, #4
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2300      	movs	r3, #0
 8002006:	2200      	movs	r2, #0
 8002008:	490e      	ldr	r1, [pc, #56]	; (8002044 <StopandReset+0x4c>)
 800200a:	480f      	ldr	r0, [pc, #60]	; (8002048 <StopandReset+0x50>)
 800200c:	f7ff f9a2 	bl	8001354 <Drive>
	Drive(&Motor_L, &htim3, 0, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002010:	230c      	movs	r3, #12
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2308      	movs	r3, #8
 8002016:	2200      	movs	r2, #0
 8002018:	490a      	ldr	r1, [pc, #40]	; (8002044 <StopandReset+0x4c>)
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <StopandReset+0x54>)
 800201c:	f7ff f99a 	bl	8001354 <Drive>
	enc_l    = 0;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <StopandReset+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
	enc_r	 = 0;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <StopandReset+0x5c>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
	DataStruct->KalmanAngleY=-2;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002036:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000628 	.word	0x20000628
 8002048:	20000900 	.word	0x20000900
 800204c:	200008e8 	.word	0x200008e8
 8002050:	20000918 	.word	0x20000918
 8002054:	2000091c 	.word	0x2000091c

08002058 <LQR_Init>:
void LQR_Init(){
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

	 k1 =	-1;						// k1*theta
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <LQR_Init+0x38>)
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <LQR_Init+0x3c>)
 8002060:	601a      	str	r2, [r3, #0]
	 k2 =	-100;					// k2*thetadot
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <LQR_Init+0x40>)
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <LQR_Init+0x44>)
 8002066:	601a      	str	r2, [r3, #0]
	 k3 =	-80000;					// k3*psi
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <LQR_Init+0x48>)
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LQR_Init+0x4c>)
 800206c:	601a      	str	r2, [r3, #0]
	 k4 =	-8000;					// k4*psidot
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <LQR_Init+0x50>)
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <LQR_Init+0x54>)
 8002072:	601a      	str	r2, [r3, #0]
	 k5 =	-0.5;					// k5*phi
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <LQR_Init+0x58>)
 8002076:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800207a:	601a      	str	r2, [r3, #0]
	 k6 =	-0.5;					// k6*phidot
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <LQR_Init+0x5c>)
 800207e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002082:	601a      	str	r2, [r3, #0]

}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000944 	.word	0x20000944
 8002094:	bf800000 	.word	0xbf800000
 8002098:	20000948 	.word	0x20000948
 800209c:	c2c80000 	.word	0xc2c80000
 80020a0:	2000094c 	.word	0x2000094c
 80020a4:	c79c4000 	.word	0xc79c4000
 80020a8:	20000950 	.word	0x20000950
 80020ac:	c5fa0000 	.word	0xc5fa0000
 80020b0:	20000954 	.word	0x20000954
 80020b4:	20000958 	.word	0x20000958

080020b8 <getLQR>:
void getLQR(float theta_,float thetadot_,float psi_,float psidot_,float phi_,float phidot_){
 80020b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020bc:	ed2d 8b02 	vpush	{d8}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	ed87 0a05 	vstr	s0, [r7, #20]
 80020c8:	edc7 0a04 	vstr	s1, [r7, #16]
 80020cc:	ed87 1a03 	vstr	s2, [r7, #12]
 80020d0:	edc7 1a02 	vstr	s3, [r7, #8]
 80020d4:	ed87 2a01 	vstr	s4, [r7, #4]
 80020d8:	edc7 2a00 	vstr	s5, [r7]
	leftvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ - k5*phi_ - k6*phidot_;
 80020dc:	4b88      	ldr	r3, [pc, #544]	; (8002300 <getLQR+0x248>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ea:	4b86      	ldr	r3, [pc, #536]	; (8002304 <getLQR+0x24c>)
 80020ec:	edd3 6a00 	vldr	s13, [r3]
 80020f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fc:	4b82      	ldr	r3, [pc, #520]	; (8002308 <getLQR+0x250>)
 80020fe:	edd3 6a00 	vldr	s13, [r3]
 8002102:	edd7 7a03 	vldr	s15, [r7, #12]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <getLQR+0x254>)
 8002110:	edd3 6a00 	vldr	s13, [r3]
 8002114:	edd7 7a02 	vldr	s15, [r7, #8]
 8002118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002120:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <getLQR+0x258>)
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	edd7 7a01 	vldr	s15, [r7, #4]
 800212a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002132:	4b78      	ldr	r3, [pc, #480]	; (8002314 <getLQR+0x25c>)
 8002134:	edd3 6a00 	vldr	s13, [r3]
 8002138:	edd7 7a00 	vldr	s15, [r7]
 800213c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002144:	4b74      	ldr	r3, [pc, #464]	; (8002318 <getLQR+0x260>)
 8002146:	edc3 7a00 	vstr	s15, [r3]
	rightvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ + k5*phi_ + k6*phidot_;
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <getLQR+0x248>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	edd7 7a05 	vldr	s15, [r7, #20]
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <getLQR+0x24c>)
 800215a:	edd3 6a00 	vldr	s13, [r3]
 800215e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <getLQR+0x250>)
 800216c:	edd3 6a00 	vldr	s13, [r3]
 8002170:	edd7 7a03 	vldr	s15, [r7, #12]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	4b63      	ldr	r3, [pc, #396]	; (800230c <getLQR+0x254>)
 800217e:	edd3 6a00 	vldr	s13, [r3]
 8002182:	edd7 7a02 	vldr	s15, [r7, #8]
 8002186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218e:	4b60      	ldr	r3, [pc, #384]	; (8002310 <getLQR+0x258>)
 8002190:	edd3 6a00 	vldr	s13, [r3]
 8002194:	edd7 7a01 	vldr	s15, [r7, #4]
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <getLQR+0x25c>)
 80021a2:	edd3 6a00 	vldr	s13, [r3]
 80021a6:	edd7 7a00 	vldr	s15, [r7]
 80021aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <getLQR+0x264>)
 80021b4:	edc3 7a00 	vstr	s15, [r3]
	PWM_L = map(leftvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);		//Limit 15 deg.
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <getLQR+0x260>)
 80021ba:	ed93 8a00 	vldr	s16, [r3]
 80021be:	4b52      	ldr	r3, [pc, #328]	; (8002308 <getLQR+0x250>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9c0 	bl	8000548 <__aeabi_f2d>
 80021c8:	a34b      	add	r3, pc, #300	; (adr r3, 80022f8 <getLQR+0x240>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa13 	bl	80005f8 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4690      	mov	r8, r2
 80021d8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b4f      	ldr	r3, [pc, #316]	; (8002320 <getLQR+0x268>)
 80021e2:	4640      	mov	r0, r8
 80021e4:	4649      	mov	r1, r9
 80021e6:	f7fe fb31 	bl	800084c <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fcd9 	bl	8000ba8 <__aeabi_d2f>
 80021f6:	4606      	mov	r6, r0
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <getLQR+0x250>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9a3 	bl	8000548 <__aeabi_f2d>
 8002202:	a33d      	add	r3, pc, #244	; (adr r3, 80022f8 <getLQR+0x240>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe f9f6 	bl	80005f8 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <getLQR+0x268>)
 800221a:	f7fe fb17 	bl	800084c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcbf 	bl	8000ba8 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8002324 <getLQR+0x26c>
 8002230:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002328 <getLQR+0x270>
 8002234:	ee01 3a10 	vmov	s2, r3
 8002238:	ee00 6a90 	vmov	s1, r6
 800223c:	eeb0 0a48 	vmov.f32	s0, s16
 8002240:	f7ff fe82 	bl	8001f48 <map>
 8002244:	eef0 7a40 	vmov.f32	s15, s0
 8002248:	4b38      	ldr	r3, [pc, #224]	; (800232c <getLQR+0x274>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
	PWM_R = map(rightvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <getLQR+0x264>)
 8002250:	ed93 8a00 	vldr	s16, [r3]
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <getLQR+0x250>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f975 	bl	8000548 <__aeabi_f2d>
 800225e:	a326      	add	r3, pc, #152	; (adr r3, 80022f8 <getLQR+0x240>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f9c8 	bl	80005f8 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <getLQR+0x268>)
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe fae6 	bl	800084c <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc8e 	bl	8000ba8 <__aeabi_d2f>
 800228c:	4604      	mov	r4, r0
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <getLQR+0x250>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	a317      	add	r3, pc, #92	; (adr r3, 80022f8 <getLQR+0x240>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fe f9ab 	bl	80005f8 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <getLQR+0x268>)
 80022b0:	f7fe facc 	bl	800084c <__aeabi_ddiv>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc74 	bl	8000ba8 <__aeabi_d2f>
 80022c0:	4603      	mov	r3, r0
 80022c2:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8002324 <getLQR+0x26c>
 80022c6:	eddf 1a18 	vldr	s3, [pc, #96]	; 8002328 <getLQR+0x270>
 80022ca:	ee01 3a10 	vmov	s2, r3
 80022ce:	ee00 4a90 	vmov	s1, r4
 80022d2:	eeb0 0a48 	vmov.f32	s0, s16
 80022d6:	f7ff fe37 	bl	8001f48 <map>
 80022da:	eef0 7a40 	vmov.f32	s15, s0
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <getLQR+0x278>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	ecbd 8b02 	vpop	{d8}
 80022ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	54442d18 	.word	0x54442d18
 80022fc:	400921fb 	.word	0x400921fb
 8002300:	20000944 	.word	0x20000944
 8002304:	20000948 	.word	0x20000948
 8002308:	2000094c 	.word	0x2000094c
 800230c:	20000950 	.word	0x20000950
 8002310:	20000954 	.word	0x20000954
 8002314:	20000958 	.word	0x20000958
 8002318:	2000095c 	.word	0x2000095c
 800231c:	20000960 	.word	0x20000960
 8002320:	402e0000 	.word	0x402e0000
 8002324:	447a0000 	.word	0x447a0000
 8002328:	c47a0000 	.word	0xc47a0000
 800232c:	20000964 	.word	0x20000964
 8002330:	20000968 	.word	0x20000968
 8002334:	00000000 	.word	0x00000000

08002338 <getfunctionLQR>:
void getfunctionLQR(MPU6050_t *DataStruct){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - timerloop) > 6) {									//Set time loop update and control motor
 8002340:	f001 f9ea 	bl	8003718 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	4b86      	ldr	r3, [pc, #536]	; (8002560 <getfunctionLQR+0x228>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b06      	cmp	r3, #6
 800234e:	f240 80fc 	bls.w	800254a <getfunctionLQR+0x212>
	    theta = gettheta(enc_l, enc_r)*DEG_TO_RAD; 							//Read theta value and convert to Rad
 8002352:	4b84      	ldr	r3, [pc, #528]	; (8002564 <getfunctionLQR+0x22c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a84      	ldr	r2, [pc, #528]	; (8002568 <getfunctionLQR+0x230>)
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fd9f 	bl	8001ea0 <gettheta>
 8002362:	ee10 3a10 	vmov	r3, s0
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8ee 	bl	8000548 <__aeabi_f2d>
 800236c:	a37a      	add	r3, pc, #488	; (adr r3, 8002558 <getfunctionLQR+0x220>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc13 	bl	8000ba8 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	4a79      	ldr	r2, [pc, #484]	; (800256c <getfunctionLQR+0x234>)
 8002386:	6013      	str	r3, [r2, #0]
	    psi = (DataStruct->KalmanAngleY + 2)*DEG_TO_RAD;    				//Read psi value and convert to Rad
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002396:	f7fd ff79 	bl	800028c <__adddf3>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	a36d      	add	r3, pc, #436	; (adr r3, 8002558 <getfunctionLQR+0x220>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f926 	bl	80005f8 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fbf8 	bl	8000ba8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a6d      	ldr	r2, [pc, #436]	; (8002570 <getfunctionLQR+0x238>)
 80023bc:	6013      	str	r3, [r2, #0]
	    phi =  getphi(enc_l, enc_r)*DEG_TO_RAD;    							//Read phi value and convert to Rad
 80023be:	4b69      	ldr	r3, [pc, #420]	; (8002564 <getfunctionLQR+0x22c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a69      	ldr	r2, [pc, #420]	; (8002568 <getfunctionLQR+0x230>)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fd8d 	bl	8001ee8 <getphi>
 80023ce:	ee10 3a10 	vmov	r3, s0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8b8 	bl	8000548 <__aeabi_f2d>
 80023d8:	a35f      	add	r3, pc, #380	; (adr r3, 8002558 <getfunctionLQR+0x220>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f90b 	bl	80005f8 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fbdd 	bl	8000ba8 <__aeabi_d2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a60      	ldr	r2, [pc, #384]	; (8002574 <getfunctionLQR+0x23c>)
 80023f2:	6013      	str	r3, [r2, #0]
	    if(abs(DataStruct->KalmanAngleY) <=2) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbab 	bl	8000b58 <__aeabi_d2iz>
 8002402:	4603      	mov	r3, r0
 8002404:	f113 0f02 	cmn.w	r3, #2
 8002408:	db11      	blt.n	800242e <getfunctionLQR+0xf6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fba0 	bl	8000b58 <__aeabi_d2iz>
 8002418:	4603      	mov	r3, r0
 800241a:	2b02      	cmp	r3, #2
 800241c:	dc07      	bgt.n	800242e <getfunctionLQR+0xf6>
	    	PWM_L = 0;
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <getfunctionLQR+0x240>)
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
	    	PWM_R = 0;
 8002426:	4b55      	ldr	r3, [pc, #340]	; (800257c <getfunctionLQR+0x244>)
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
	    }
	    //Update time compare with timeloop
	    float dt = (float)(HAL_GetTick() - timer) / 100;
 800242e:	f001 f973 	bl	8003718 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	4b52      	ldr	r3, [pc, #328]	; (8002580 <getfunctionLQR+0x248>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002442:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002584 <getfunctionLQR+0x24c>
 8002446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800244a:	edc7 7a03 	vstr	s15, [r7, #12]
	    timerloop = HAL_GetTick();
 800244e:	f001 f963 	bl	8003718 <HAL_GetTick>
 8002452:	4603      	mov	r3, r0
 8002454:	4a42      	ldr	r2, [pc, #264]	; (8002560 <getfunctionLQR+0x228>)
 8002456:	6013      	str	r3, [r2, #0]

	    //Update input angle value
	    thetadot 	= (theta - theta_old)/dt;
 8002458:	4b44      	ldr	r3, [pc, #272]	; (800256c <getfunctionLQR+0x234>)
 800245a:	ed93 7a00 	vldr	s14, [r3]
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <getfunctionLQR+0x250>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002468:	ed97 7a03 	vldr	s14, [r7, #12]
 800246c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <getfunctionLQR+0x254>)
 8002472:	edc3 7a00 	vstr	s15, [r3]
	    psidot 		= (psi - psi_old)/dt;
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <getfunctionLQR+0x238>)
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <getfunctionLQR+0x258>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002486:	ed97 7a03 	vldr	s14, [r7, #12]
 800248a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <getfunctionLQR+0x25c>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
	    phidot 		= (phi - phi_old)/dt;
 8002494:	4b37      	ldr	r3, [pc, #220]	; (8002574 <getfunctionLQR+0x23c>)
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <getfunctionLQR+0x260>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <getfunctionLQR+0x264>)
 80024ae:	edc3 7a00 	vstr	s15, [r3]

	    //Update old angle value
	    theta_old = theta;
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <getfunctionLQR+0x234>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a34      	ldr	r2, [pc, #208]	; (8002588 <getfunctionLQR+0x250>)
 80024b8:	6013      	str	r3, [r2, #0]
	    psi_old = psi;
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <getfunctionLQR+0x238>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a34      	ldr	r2, [pc, #208]	; (8002590 <getfunctionLQR+0x258>)
 80024c0:	6013      	str	r3, [r2, #0]
	    phi_old = phi;
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <getfunctionLQR+0x23c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <getfunctionLQR+0x260>)
 80024c8:	6013      	str	r3, [r2, #0]

	    getLQR(theta, thetadot, psi, psidot, phi, phidot);
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <getfunctionLQR+0x234>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <getfunctionLQR+0x254>)
 80024d2:	ed93 7a00 	vldr	s14, [r3]
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <getfunctionLQR+0x238>)
 80024d8:	edd3 6a00 	vldr	s13, [r3]
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <getfunctionLQR+0x25c>)
 80024de:	ed93 6a00 	vldr	s12, [r3]
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <getfunctionLQR+0x23c>)
 80024e4:	edd3 5a00 	vldr	s11, [r3]
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <getfunctionLQR+0x264>)
 80024ea:	ed93 5a00 	vldr	s10, [r3]
 80024ee:	eef0 2a45 	vmov.f32	s5, s10
 80024f2:	eeb0 2a65 	vmov.f32	s4, s11
 80024f6:	eef0 1a46 	vmov.f32	s3, s12
 80024fa:	eeb0 1a66 	vmov.f32	s2, s13
 80024fe:	eef0 0a47 	vmov.f32	s1, s14
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	f7ff fdd7 	bl	80020b8 <getLQR>
	    PWM_L = constrain(PWM_L, -200, 200);
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <getfunctionLQR+0x240>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80025a0 <getfunctionLQR+0x268>
 8002514:	eddf 0a23 	vldr	s1, [pc, #140]	; 80025a4 <getfunctionLQR+0x26c>
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f7ff fd42 	bl	8001fa4 <constrain>
 8002520:	eef0 7a40 	vmov.f32	s15, s0
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <getfunctionLQR+0x240>)
 8002526:	edc3 7a00 	vstr	s15, [r3]
		PWM_R = constrain(PWM_R, -200, 200);
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <getfunctionLQR+0x244>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80025a0 <getfunctionLQR+0x268>
 8002534:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80025a4 <getfunctionLQR+0x26c>
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	f7ff fd32 	bl	8001fa4 <constrain>
 8002540:	eef0 7a40 	vmov.f32	s15, s0
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <getfunctionLQR+0x244>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	a2529d39 	.word	0xa2529d39
 800255c:	3f91df46 	.word	0x3f91df46
 8002560:	200007fc 	.word	0x200007fc
 8002564:	20000918 	.word	0x20000918
 8002568:	2000091c 	.word	0x2000091c
 800256c:	20000920 	.word	0x20000920
 8002570:	20000924 	.word	0x20000924
 8002574:	20000928 	.word	0x20000928
 8002578:	20000964 	.word	0x20000964
 800257c:	20000968 	.word	0x20000968
 8002580:	200007f8 	.word	0x200007f8
 8002584:	42c80000 	.word	0x42c80000
 8002588:	20000938 	.word	0x20000938
 800258c:	2000092c 	.word	0x2000092c
 8002590:	2000093c 	.word	0x2000093c
 8002594:	20000930 	.word	0x20000930
 8002598:	20000940 	.word	0x20000940
 800259c:	20000934 	.word	0x20000934
 80025a0:	43480000 	.word	0x43480000
 80025a4:	c3480000 	.word	0xc3480000

080025a8 <PID_Init>:
//--------------------------------LQR-------------------------------------------------//
void PID_Init()
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
	PID_DC_SPEED_L.kP = 1;
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <PID_Init+0x88>)
 80025ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025b2:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_L.kI = 30;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <PID_Init+0x88>)
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <PID_Init+0x8c>)
 80025b8:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_L.kD = 0.001;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <PID_Init+0x88>)
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <PID_Init+0x90>)
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_L.alpha = 0;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <PID_Init+0x88>)
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_L.deltaT = 0.01;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <PID_Init+0x88>)
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <PID_Init+0x94>)
 80025cc:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_L.uI_AboveLimit = 1000;
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <PID_Init+0x88>)
 80025d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_L.uI_BelowLimit = -1000;
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <PID_Init+0x88>)
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <PID_Init+0x98>)
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_L.u_AboveLimit  = 1000;
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <PID_Init+0x88>)
 80025de:	4a19      	ldr	r2, [pc, #100]	; (8002644 <PID_Init+0x9c>)
 80025e0:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_L.u_BelowLimit  = -1000;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <PID_Init+0x88>)
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <PID_Init+0xa0>)
 80025e6:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_SPEED_R.kP = 1;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <PID_Init+0xa4>)
 80025ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025ee:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_R.kI = 30;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <PID_Init+0xa4>)
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <PID_Init+0x8c>)
 80025f4:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_R.kD = 0.001;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <PID_Init+0xa4>)
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <PID_Init+0x90>)
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_R.alpha = 0;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <PID_Init+0xa4>)
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_R.deltaT = 0.01;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <PID_Init+0xa4>)
 8002606:	4a0d      	ldr	r2, [pc, #52]	; (800263c <PID_Init+0x94>)
 8002608:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_R.uI_AboveLimit = 1000;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <PID_Init+0xa4>)
 800260c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_R.uI_BelowLimit = -1000;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <PID_Init+0xa4>)
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <PID_Init+0x98>)
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_R.u_AboveLimit  = 1000;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <PID_Init+0xa4>)
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <PID_Init+0x9c>)
 800261c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_R.u_BelowLimit  = -1000;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <PID_Init+0xa4>)
 8002620:	4a09      	ldr	r2, [pc, #36]	; (8002648 <PID_Init+0xa0>)
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000758 	.word	0x20000758
 8002634:	41f00000 	.word	0x41f00000
 8002638:	3a83126f 	.word	0x3a83126f
 800263c:	3c23d70a 	.word	0x3c23d70a
 8002640:	fffffc18 	.word	0xfffffc18
 8002644:	447a0000 	.word	0x447a0000
 8002648:	c47a0000 	.word	0xc47a0000
 800264c:	200007a8 	.word	0x200007a8

08002650 <PID_Cal_Left>:
void PID_Cal_Left(){
 8002650:	b580      	push	{r7, lr}
 8002652:	ed2d 8b02 	vpush	{d8}
 8002656:	b082      	sub	sp, #8
 8002658:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_L);
 800265a:	4814      	ldr	r0, [pc, #80]	; (80026ac <PID_Cal_Left+0x5c>)
 800265c:	f7fe fc8c 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_L, PWM_L, ENC_L.vel_Real);
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <PID_Cal_Left+0x60>)
 8002662:	ed93 8a00 	vldr	s16, [r3]
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <PID_Cal_Left+0x5c>)
 8002668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f7fe fa9a 	bl	8000ba8 <__aeabi_d2f>
 8002674:	4603      	mov	r3, r0
 8002676:	ee00 3a90 	vmov	s1, r3
 800267a:	eeb0 0a48 	vmov.f32	s0, s16
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <PID_Cal_Left+0x64>)
 8002680:	f7fe ff6e 	bl	8001560 <Pid_Cal>
	Drive(&Motor_L, &htim3, PID_DC_SPEED_L.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <PID_Cal_Left+0x64>)
 8002686:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800268a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268e:	230c      	movs	r3, #12
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2308      	movs	r3, #8
 8002694:	ee17 2a90 	vmov	r2, s15
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <PID_Cal_Left+0x68>)
 800269a:	4808      	ldr	r0, [pc, #32]	; (80026bc <PID_Cal_Left+0x6c>)
 800269c:	f7fe fe5a 	bl	8001354 <Drive>
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	ecbd 8b02 	vpop	{d8}
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000858 	.word	0x20000858
 80026b0:	20000964 	.word	0x20000964
 80026b4:	20000758 	.word	0x20000758
 80026b8:	20000628 	.word	0x20000628
 80026bc:	200008e8 	.word	0x200008e8

080026c0 <PID_Cal_Right>:
void PID_Cal_Right(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	ed2d 8b02 	vpush	{d8}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_R);
 80026ca:	4814      	ldr	r0, [pc, #80]	; (800271c <PID_Cal_Right+0x5c>)
 80026cc:	f7fe fc54 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_R, PWM_R, ENC_R.vel_Real);
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <PID_Cal_Right+0x60>)
 80026d2:	ed93 8a00 	vldr	s16, [r3]
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <PID_Cal_Right+0x5c>)
 80026d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe fa62 	bl	8000ba8 <__aeabi_d2f>
 80026e4:	4603      	mov	r3, r0
 80026e6:	ee00 3a90 	vmov	s1, r3
 80026ea:	eeb0 0a48 	vmov.f32	s0, s16
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <PID_Cal_Right+0x64>)
 80026f0:	f7fe ff36 	bl	8001560 <Pid_Cal>
	Drive(&Motor_R, &htim3, PID_DC_SPEED_R.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <PID_Cal_Right+0x64>)
 80026f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fe:	2304      	movs	r3, #4
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	ee17 2a90 	vmov	r2, s15
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <PID_Cal_Right+0x68>)
 800270a:	4808      	ldr	r0, [pc, #32]	; (800272c <PID_Cal_Right+0x6c>)
 800270c:	f7fe fe22 	bl	8001354 <Drive>
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	ecbd 8b02 	vpop	{d8}
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200008a0 	.word	0x200008a0
 8002720:	20000968 	.word	0x20000968
 8002724:	200007a8 	.word	0x200007a8
 8002728:	20000628 	.word	0x20000628
 800272c:	20000900 	.word	0x20000900

08002730 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_UART_TxCpltCallback+0x20>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d102      	bne.n	8002748 <HAL_UART_TxCpltCallback+0x18>
		log_TransmitCompleteHandle(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fd2c 	bl	80011a0 <log_TransmitCompleteHandle>
	}

}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40011000 	.word	0x40011000
 8002754:	00000000 	.word	0x00000000

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b096      	sub	sp, #88	; 0x58
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275e:	f000 ffa5 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002762:	f000 f8b7 	bl	80028d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f000 fae5 	bl	8002d34 <MX_GPIO_Init>
  MX_I2C1_Init();
 800276a:	f000 f91b 	bl	80029a4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800276e:	f000 f947 	bl	8002a00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002772:	f000 f999 	bl	8002aa8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002776:	f000 fa11 	bl	8002b9c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800277a:	f000 fab1 	bl	8002ce0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800277e:	f000 fa61 	bl	8002c44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  while(MPU6050_Init()==1);
 8002782:	bf00      	nop
 8002784:	f7ff f946 	bl	8001a14 <MPU6050_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d0fa      	beq.n	8002784 <main+0x2c>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800278e:	2100      	movs	r1, #0
 8002790:	483f      	ldr	r0, [pc, #252]	; (8002890 <main+0x138>)
 8002792:	f003 f8db 	bl	800594c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002796:	2104      	movs	r1, #4
 8002798:	483d      	ldr	r0, [pc, #244]	; (8002890 <main+0x138>)
 800279a:	f003 f8d7 	bl	800594c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800279e:	2108      	movs	r1, #8
 80027a0:	483b      	ldr	r0, [pc, #236]	; (8002890 <main+0x138>)
 80027a2:	f003 f8d3 	bl	800594c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80027a6:	210c      	movs	r1, #12
 80027a8:	4839      	ldr	r0, [pc, #228]	; (8002890 <main+0x138>)
 80027aa:	f003 f8cf 	bl	800594c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80027ae:	213c      	movs	r1, #60	; 0x3c
 80027b0:	4838      	ldr	r0, [pc, #224]	; (8002894 <main+0x13c>)
 80027b2:	f003 fa39 	bl	8005c28 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80027b6:	213c      	movs	r1, #60	; 0x3c
 80027b8:	4837      	ldr	r0, [pc, #220]	; (8002898 <main+0x140>)
 80027ba:	f003 fa35 	bl	8005c28 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80027be:	4837      	ldr	r0, [pc, #220]	; (800289c <main+0x144>)
 80027c0:	f003 f804 	bl	80057cc <HAL_TIM_Base_Start_IT>
  EncoderSetting(&ENC_L, &htim2, 370, 0.01);
 80027c4:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8002888 <main+0x130>
 80027c8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80027cc:	4931      	ldr	r1, [pc, #196]	; (8002894 <main+0x13c>)
 80027ce:	4834      	ldr	r0, [pc, #208]	; (80028a0 <main+0x148>)
 80027d0:	f7fe fbb8 	bl	8000f44 <EncoderSetting>
  EncoderSetting(&ENC_R, &htim4, 370, 0.01);
 80027d4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8002888 <main+0x130>
 80027d8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80027dc:	492e      	ldr	r1, [pc, #184]	; (8002898 <main+0x140>)
 80027de:	4831      	ldr	r0, [pc, #196]	; (80028a4 <main+0x14c>)
 80027e0:	f7fe fbb0 	bl	8000f44 <EncoderSetting>

  LQR_Init();
 80027e4:	f7ff fc38 	bl	8002058 <LQR_Init>
  PID_Init();
 80027e8:	f7ff fede 	bl	80025a8 <PID_Init>
  StopandReset(&MPU6050);
 80027ec:	482e      	ldr	r0, [pc, #184]	; (80028a8 <main+0x150>)
 80027ee:	f7ff fc03 	bl	8001ff8 <StopandReset>

  log_Init(&huart1);
 80027f2:	482e      	ldr	r0, [pc, #184]	; (80028ac <main+0x154>)
 80027f4:	f7fe fcc4 	bl	8001180 <log_Init>
  log_AddHeaderArgumentToBuffer("Theta");
 80027f8:	482d      	ldr	r0, [pc, #180]	; (80028b0 <main+0x158>)
 80027fa:	f7fe fd19 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_AddHeaderArgumentToBuffer("Psi");
 80027fe:	482d      	ldr	r0, [pc, #180]	; (80028b4 <main+0x15c>)
 8002800:	f7fe fd16 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_AddHeaderArgumentToBuffer("Phi");
 8002804:	482c      	ldr	r0, [pc, #176]	; (80028b8 <main+0x160>)
 8002806:	f7fe fd13 	bl	8001230 <log_AddHeaderArgumentToBuffer>
  log_SendString();
 800280a:	f7fe fce9 	bl	80011e0 <log_SendString>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, StartMPU6050ask, osPriorityBelowNormal, 0, 128);
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <main+0x164>)
 8002810:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002814:	461d      	mov	r5, r3
 8002816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800281a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800281e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 8002822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f005 f842 	bl	80078b2 <osThreadCreate>
 800282e:	4603      	mov	r3, r0
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <main+0x168>)
 8002832:	6013      	str	r3, [r2, #0]

  /* definition and creation of FunctionTask */
  osThreadDef(FunctionTask, StartTaskFunction, osPriorityNormal, 0, 128);
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <main+0x16c>)
 8002836:	f107 0420 	add.w	r4, r7, #32
 800283a:	461d      	mov	r5, r3
 800283c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FunctionTaskHandle = osThreadCreate(osThread(FunctionTask), NULL);
 8002848:	f107 0320 	add.w	r3, r7, #32
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f005 f82f 	bl	80078b2 <osThreadCreate>
 8002854:	4603      	mov	r3, r0
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <main+0x170>)
 8002858:	6013      	str	r3, [r2, #0]

  /* definition and creation of Cal_PID */
  osThreadDef(Cal_PID, StartTaskCalPID, osPriorityLow, 0, 128);
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <main+0x174>)
 800285c:	1d3c      	adds	r4, r7, #4
 800285e:	461d      	mov	r5, r3
 8002860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002864:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Cal_PIDHandle = osThreadCreate(osThread(Cal_PID), NULL);
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f005 f81e 	bl	80078b2 <osThreadCreate>
 8002876:	4603      	mov	r3, r0
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <main+0x178>)
 800287a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800287c:	f005 f812 	bl	80078a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002880:	e7fe      	b.n	8002880 <main+0x128>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	47ae147b 	.word	0x47ae147b
 800288c:	3f847ae1 	.word	0x3f847ae1
 8002890:	20000628 	.word	0x20000628
 8002894:	200005e0 	.word	0x200005e0
 8002898:	20000670 	.word	0x20000670
 800289c:	200006b8 	.word	0x200006b8
 80028a0:	20000858 	.word	0x20000858
 80028a4:	200008a0 	.word	0x200008a0
 80028a8:	20000800 	.word	0x20000800
 80028ac:	20000700 	.word	0x20000700
 80028b0:	0800c14c 	.word	0x0800c14c
 80028b4:	0800c154 	.word	0x0800c154
 80028b8:	0800c158 	.word	0x0800c158
 80028bc:	0800c168 	.word	0x0800c168
 80028c0:	20000748 	.word	0x20000748
 80028c4:	0800c194 	.word	0x0800c194
 80028c8:	2000074c 	.word	0x2000074c
 80028cc:	0800c1b8 	.word	0x0800c1b8
 80028d0:	20000750 	.word	0x20000750

080028d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b094      	sub	sp, #80	; 0x50
 80028d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	2230      	movs	r2, #48	; 0x30
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 ff9d 	bl	8009822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <SystemClock_Config+0xc8>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <SystemClock_Config+0xc8>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <SystemClock_Config+0xc8>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <SystemClock_Config+0xcc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <SystemClock_Config+0xcc>)
 800291e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <SystemClock_Config+0xcc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002930:	2301      	movs	r3, #1
 8002932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800293a:	2302      	movs	r3, #2
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800293e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002944:	2304      	movs	r3, #4
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002948:	2348      	movs	r3, #72	; 0x48
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800294c:	2302      	movs	r3, #2
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002950:	2304      	movs	r3, #4
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002954:	f107 0320 	add.w	r3, r7, #32
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fa1d 	bl	8004d98 <HAL_RCC_OscConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002964:	f000 fb06 	bl	8002f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002968:	230f      	movs	r3, #15
 800296a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2102      	movs	r1, #2
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fc7f 	bl	8005288 <HAL_RCC_ClockConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002990:	f000 faf0 	bl	8002f74 <Error_Handler>
  }
}
 8002994:	bf00      	nop
 8002996:	3750      	adds	r7, #80	; 0x50
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000

080029a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <MX_I2C1_Init+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_I2C1_Init+0x58>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029e2:	f001 f9b5 	bl	8003d50 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029ec:	f000 fac2 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000058c 	.word	0x2000058c
 80029f8:	40005400 	.word	0x40005400
 80029fc:	000186a0 	.word	0x000186a0

08002a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f006 ff07 	bl	8009822 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a32:	f04f 32ff 	mov.w	r2, #4294967295
 8002a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a44:	2303      	movs	r3, #3
 8002a46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a70:	f003 f834 	bl	8005adc <HAL_TIM_Encoder_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a7a:	f000 fa7b 	bl	8002f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_TIM2_Init+0xa4>)
 8002a8c:	f003 ff18 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a96:	f000 fa6d 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200005e0 	.word	0x200005e0

08002aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aae:	f107 0320 	add.w	r3, r7, #32
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aca:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002acc:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <MX_TIM3_Init+0xf0>)
 8002ace:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002af0:	4828      	ldr	r0, [pc, #160]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002af2:	f002 fedb 	bl	80058ac <HAL_TIM_PWM_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002afc:	f000 fa3a 	bl	8002f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4821      	ldr	r0, [pc, #132]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b10:	f003 fed6 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002b1a:	f000 fa2b 	bl	8002f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1e:	2360      	movs	r3, #96	; 0x60
 8002b20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	2200      	movs	r2, #0
 8002b32:	4619      	mov	r1, r3
 8002b34:	4817      	ldr	r0, [pc, #92]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b36:	f003 f9f5 	bl	8005f24 <HAL_TIM_PWM_ConfigChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002b40:	f000 fa18 	bl	8002f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	2204      	movs	r2, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b4c:	f003 f9ea 	bl	8005f24 <HAL_TIM_PWM_ConfigChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002b56:	f000 fa0d 	bl	8002f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480c      	ldr	r0, [pc, #48]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b62:	f003 f9df 	bl	8005f24 <HAL_TIM_PWM_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002b6c:	f000 fa02 	bl	8002f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	220c      	movs	r2, #12
 8002b74:	4619      	mov	r1, r3
 8002b76:	4807      	ldr	r0, [pc, #28]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b78:	f003 f9d4 	bl	8005f24 <HAL_TIM_PWM_ConfigChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002b82:	f000 f9f7 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b86:	4803      	ldr	r0, [pc, #12]	; (8002b94 <MX_TIM3_Init+0xec>)
 8002b88:	f000 fb34 	bl	80031f4 <HAL_TIM_MspPostInit>

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000628 	.word	0x20000628
 8002b98:	40000400 	.word	0x40000400

08002b9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f006 fe39 	bl	8009822 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <MX_TIM4_Init+0xa4>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bde:	2303      	movs	r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	4619      	mov	r1, r3
 8002c08:	480c      	ldr	r0, [pc, #48]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002c0a:	f002 ff67 	bl	8005adc <HAL_TIM_Encoder_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c14:	f000 f9ae 	bl	8002f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_TIM4_Init+0xa0>)
 8002c26:	f003 fe4b 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002c30:	f000 f9a0 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	; 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000670 	.word	0x20000670
 8002c40:	40000800 	.word	0x40000800

08002c44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c62:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <MX_TIM5_Init+0x98>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c68:	2247      	movs	r2, #71	; 0x47
 8002c6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c86:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002c88:	f002 fd50 	bl	800572c <HAL_TIM_Base_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c92:	f000 f96f 	bl	8002f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002ca4:	f003 fa00 	bl	80060a8 <HAL_TIM_ConfigClockSource>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002cae:	f000 f961 	bl	8002f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <MX_TIM5_Init+0x94>)
 8002cc0:	f003 fdfe 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002cca:	f000 f953 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200006b8 	.word	0x200006b8
 8002cdc:	40000c00 	.word	0x40000c00

08002ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <MX_USART1_UART_Init+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d06:	220c      	movs	r2, #12
 8002d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d18:	f003 fe62 	bl	80069e0 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d22:	f000 f927 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000700 	.word	0x20000700
 8002d30:	40011000 	.word	0x40011000

08002d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <MX_GPIO_Init+0x84>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <StartMPU6050ask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPU6050ask */
void StartMPU6050ask(void const * argument)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_All(&MPU6050);
 8002dc4:	4812      	ldr	r0, [pc, #72]	; (8002e10 <StartMPU6050ask+0x54>)
 8002dc6:	f7fe fe7b 	bl	8001ac0 <MPU6050_Read_All>
	enc_l=CountRead(&ENC_L, count_ModeX1);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4811      	ldr	r0, [pc, #68]	; (8002e14 <StartMPU6050ask+0x58>)
 8002dce:	f7fe f961 	bl	8001094 <CountRead>
 8002dd2:	ec53 2b10 	vmov	r2, r3, d0
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd febd 	bl	8000b58 <__aeabi_d2iz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <StartMPU6050ask+0x5c>)
 8002de2:	6013      	str	r3, [r2, #0]
	enc_r=CountRead(&ENC_R, count_ModeX1);
 8002de4:	2100      	movs	r1, #0
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <StartMPU6050ask+0x60>)
 8002de8:	f7fe f954 	bl	8001094 <CountRead>
 8002dec:	ec53 2b10 	vmov	r2, r3, d0
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd feb0 	bl	8000b58 <__aeabi_d2iz>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <StartMPU6050ask+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]
	PID_Cal_Left();
 8002dfe:	f7ff fc27 	bl	8002650 <PID_Cal_Left>
	PID_Cal_Right();
 8002e02:	f7ff fc5d 	bl	80026c0 <PID_Cal_Right>

    osDelay(10);
 8002e06:	200a      	movs	r0, #10
 8002e08:	f004 fd9f 	bl	800794a <osDelay>
	MPU6050_Read_All(&MPU6050);
 8002e0c:	e7da      	b.n	8002dc4 <StartMPU6050ask+0x8>
 8002e0e:	bf00      	nop
 8002e10:	20000800 	.word	0x20000800
 8002e14:	20000858 	.word	0x20000858
 8002e18:	20000918 	.word	0x20000918
 8002e1c:	200008a0 	.word	0x200008a0
 8002e20:	2000091c 	.word	0x2000091c

08002e24 <StartTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFunction */
void StartTaskFunction(void const * argument)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	getfunctionLQR(&MPU6050);
 8002e2c:	4824      	ldr	r0, [pc, #144]	; (8002ec0 <StartTaskFunction+0x9c>)
 8002e2e:	f7ff fa83 	bl	8002338 <getfunctionLQR>
	if(MPU6050.KalmanAngleY > 3 || MPU6050.KalmanAngleY <-7)
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <StartTaskFunction+0x9c>)
 8002e34:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <StartTaskFunction+0xa0>)
 8002e3e:	f7fd fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <StartTaskFunction+0x3a>
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <StartTaskFunction+0x9c>)
 8002e4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <StartTaskFunction+0xa4>)
 8002e54:	f7fd fe42 	bl	8000adc <__aeabi_dcmplt>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d015      	beq.n	8002e8a <StartTaskFunction+0x66>
	{
		PID_DC_SPEED_L.kP = 10;
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <StartTaskFunction+0xac>)
 8002e62:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 10;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <StartTaskFunction+0xac>)
 8002e68:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <StartTaskFunction+0xb0>)
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 10;
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <StartTaskFunction+0xac>)
 8002e74:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 10;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002e78:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <StartTaskFunction+0xac>)
 8002e7a:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <StartTaskFunction+0xb0>)
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -15000;
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <StartTaskFunction+0xb8>)
 8002e84:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <StartTaskFunction+0xbc>)
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e016      	b.n	8002eb8 <StartTaskFunction+0x94>
	}
	else{
		PID_DC_SPEED_L.kP = 1;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e90:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 30;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <StartTaskFunction+0xc0>)
 8002e96:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <StartTaskFunction+0xa8>)
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <StartTaskFunction+0xb0>)
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 1;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002ea0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ea4:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 30;
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <StartTaskFunction+0xc0>)
 8002eaa:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <StartTaskFunction+0xb4>)
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <StartTaskFunction+0xb0>)
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -8000;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <StartTaskFunction+0xb8>)
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <StartTaskFunction+0xc4>)
 8002eb6:	601a      	str	r2, [r3, #0]
	}


    osDelay(10);
 8002eb8:	200a      	movs	r0, #10
 8002eba:	f004 fd46 	bl	800794a <osDelay>
	getfunctionLQR(&MPU6050);
 8002ebe:	e7b5      	b.n	8002e2c <StartTaskFunction+0x8>
 8002ec0:	20000800 	.word	0x20000800
 8002ec4:	40080000 	.word	0x40080000
 8002ec8:	c01c0000 	.word	0xc01c0000
 8002ecc:	20000758 	.word	0x20000758
 8002ed0:	41200000 	.word	0x41200000
 8002ed4:	3a83126f 	.word	0x3a83126f
 8002ed8:	200007a8 	.word	0x200007a8
 8002edc:	20000950 	.word	0x20000950
 8002ee0:	c66a6000 	.word	0xc66a6000
 8002ee4:	41f00000 	.word	0x41f00000
 8002ee8:	c5fa0000 	.word	0xc5fa0000

08002eec <StartTaskCalPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalPID */
void StartTaskCalPID(void const * argument)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCalPID */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f004 fd28 	bl	800794a <osDelay>
 8002efa:	e7fb      	b.n	8002ef4 <StartTaskCalPID+0x8>

08002efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f0e:	f000 fbef 	bl	80036f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM5)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d11a      	bne.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x56>
  {
		count++;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f26:	701a      	strb	r2, [r3, #0]
		if(count>=50)
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b31      	cmp	r3, #49	; 0x31
 8002f2e:	d910      	bls.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			log_AddArgumentToBuffer((void*)&theta,TYPE_FLOAT);
 8002f30:	2102      	movs	r1, #2
 8002f32:	480d      	ldr	r0, [pc, #52]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002f34:	f7fe f9a6 	bl	8001284 <log_AddArgumentToBuffer>
			log_AddArgumentToBuffer((void*)&psi,TYPE_FLOAT);
 8002f38:	2102      	movs	r1, #2
 8002f3a:	480c      	ldr	r0, [pc, #48]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f3c:	f7fe f9a2 	bl	8001284 <log_AddArgumentToBuffer>
			log_AddArgumentToBuffer((void*)&phi,TYPE_FLOAT);
 8002f40:	2102      	movs	r1, #2
 8002f42:	480b      	ldr	r0, [pc, #44]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002f44:	f7fe f99e 	bl	8001284 <log_AddArgumentToBuffer>
			log_SendString();
 8002f48:	f7fe f94a 	bl	80011e0 <log_SendString>
			count = 0;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
		}

  }
  /* USER CODE END Callback 1 */
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40002000 	.word	0x40002000
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	20000754 	.word	0x20000754
 8002f68:	20000920 	.word	0x20000920
 8002f6c:	20000924 	.word	0x20000924
 8002f70:	20000928 	.word	0x20000928

08002f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f78:	b672      	cpsid	i
}
 8002f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <Error_Handler+0x8>
	...

08002f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_MspInit+0x54>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_MspInit+0x54>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_MspInit+0x54>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_MspInit+0x54>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_MspInit+0x54>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_MspInit+0x54>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	f06f 0001 	mvn.w	r0, #1
 8002fc6:	f000 fc6b 	bl	80038a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_I2C_MspInit+0x84>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12b      	bne.n	8003052 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_I2C_MspInit+0x88>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_I2C_MspInit+0x88>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_I2C_MspInit+0x88>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003016:	23c0      	movs	r3, #192	; 0xc0
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301a:	2312      	movs	r3, #18
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003026:	2304      	movs	r3, #4
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <HAL_I2C_MspInit+0x8c>)
 8003032:	f000 fcf1 	bl	8003a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_I2C_MspInit+0x88>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_I2C_MspInit+0x88>)
 8003040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_I2C_MspInit+0x88>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40005400 	.word	0x40005400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020400 	.word	0x40020400

08003068 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d12c      	bne.n	80030e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030c2:	2303      	movs	r3, #3
 80030c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	4619      	mov	r1, r3
 80030dc:	481d      	ldr	r0, [pc, #116]	; (8003154 <HAL_TIM_Encoder_MspInit+0xec>)
 80030de:	f000 fc9b 	bl	8003a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030e2:	e031      	b.n	8003148 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_TIM_Encoder_MspInit+0xf0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d12c      	bne.n	8003148 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_TIM_Encoder_MspInit+0xe8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003138:	2302      	movs	r3, #2
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003144:	f000 fc68 	bl	8003a18 <HAL_GPIO_Init>
}
 8003148:	bf00      	nop
 800314a:	3730      	adds	r7, #48	; 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	40020000 	.word	0x40020000
 8003158:	40000800 	.word	0x40000800
 800315c:	40020c00 	.word	0x40020c00

08003160 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_TIM_PWM_MspInit+0x3c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10d      	bne.n	800318e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <HAL_TIM_PWM_MspInit+0x40>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40000400 	.word	0x40000400
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_TIM_Base_MspInit+0x48>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d115      	bne.n	80031e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_TIM_Base_MspInit+0x4c>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_TIM_Base_MspInit+0x4c>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_TIM_Base_MspInit+0x4c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	2032      	movs	r0, #50	; 0x32
 80031d8:	f000 fb62 	bl	80038a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031dc:	2032      	movs	r0, #50	; 0x32
 80031de:	f000 fb7b 	bl	80038d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_TIM_MspPostInit+0xa4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d13b      	bne.n	800328e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_TIM_MspPostInit+0xa8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800324e:	23c0      	movs	r3, #192	; 0xc0
 8003250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800325e:	2302      	movs	r3, #2
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <HAL_TIM_MspPostInit+0xac>)
 800326a:	f000 fbd5 	bl	8003a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800326e:	2303      	movs	r3, #3
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800327e:	2302      	movs	r3, #2
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	4806      	ldr	r0, [pc, #24]	; (80032a4 <HAL_TIM_MspPostInit+0xb0>)
 800328a:	f000 fbc5 	bl	8003a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40000400 	.word	0x40000400
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	40020400 	.word	0x40020400

080032a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_UART_MspInit+0x94>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d134      	bne.n	8003334 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032d4:	f043 0310 	orr.w	r3, r3, #16
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_UART_MspInit+0x98>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003302:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003314:	2307      	movs	r3, #7
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4619      	mov	r1, r3
 800331e:	4809      	ldr	r0, [pc, #36]	; (8003344 <HAL_UART_MspInit+0x9c>)
 8003320:	f000 fb7a 	bl	8003a18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003324:	2200      	movs	r2, #0
 8003326:	2105      	movs	r1, #5
 8003328:	2025      	movs	r0, #37	; 0x25
 800332a:	f000 fab9 	bl	80038a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800332e:	2025      	movs	r0, #37	; 0x25
 8003330:	f000 fad2 	bl	80038d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40011000 	.word	0x40011000
 8003340:	40023800 	.word	0x40023800
 8003344:	40020000 	.word	0x40020000

08003348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	4b33      	ldr	r3, [pc, #204]	; (800342c <HAL_InitTick+0xe4>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	4a32      	ldr	r2, [pc, #200]	; (800342c <HAL_InitTick+0xe4>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6413      	str	r3, [r2, #64]	; 0x40
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_InitTick+0xe4>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003374:	f107 0210 	add.w	r2, r7, #16
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f002 f9a2 	bl	80056c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800338e:	f002 f973 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8003392:	6378      	str	r0, [r7, #52]	; 0x34
 8003394:	e004      	b.n	80033a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003396:	f002 f96f 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 800339a:	4603      	mov	r3, r0
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_InitTick+0xe8>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	3b01      	subs	r3, #1
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_InitTick+0xec>)
 80033b0:	4a21      	ldr	r2, [pc, #132]	; (8003438 <HAL_InitTick+0xf0>)
 80033b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <HAL_InitTick+0xec>)
 80033b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033ba:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_InitTick+0xec>)
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_InitTick+0xec>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_InitTick+0xec>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_InitTick+0xec>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80033d4:	4817      	ldr	r0, [pc, #92]	; (8003434 <HAL_InitTick+0xec>)
 80033d6:	f002 f9a9 	bl	800572c <HAL_TIM_Base_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80033e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11b      	bne.n	8003420 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80033e8:	4812      	ldr	r0, [pc, #72]	; (8003434 <HAL_InitTick+0xec>)
 80033ea:	f002 f9ef 	bl	80057cc <HAL_TIM_Base_Start_IT>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80033f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d111      	bne.n	8003420 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80033fc:	202d      	movs	r0, #45	; 0x2d
 80033fe:	f000 fa6b 	bl	80038d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d808      	bhi.n	800341a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003408:	2200      	movs	r2, #0
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	202d      	movs	r0, #45	; 0x2d
 800340e:	f000 fa47 	bl	80038a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_InitTick+0xf4>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e002      	b.n	8003420 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003424:	4618      	mov	r0, r3
 8003426:	3738      	adds	r7, #56	; 0x38
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	431bde83 	.word	0x431bde83
 8003434:	2000096c 	.word	0x2000096c
 8003438:	40002000 	.word	0x40002000
 800343c:	2000009c 	.word	0x2000009c

08003440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003444:	e7fe      	b.n	8003444 <NMI_Handler+0x4>

08003446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <HardFault_Handler+0x4>

0800344c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <MemManage_Handler+0x4>

08003452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <BusFault_Handler+0x4>

08003458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <UsageFault_Handler+0x4>

0800345e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART1_IRQHandler+0x10>)
 8003472:	f003 fb3b 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000700 	.word	0x20000700

08003480 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003486:	f002 fc5d 	bl	8005d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000096c 	.word	0x2000096c

08003494 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <TIM5_IRQHandler+0x10>)
 800349a:	f002 fc53 	bl	8005d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200006b8 	.word	0x200006b8

080034a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return 1;
 80034ac:	2301      	movs	r3, #1
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_kill>:

int _kill(int pid, int sig)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034c2:	f006 fa01 	bl	80098c8 <__errno>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2216      	movs	r2, #22
 80034ca:	601a      	str	r2, [r3, #0]
  return -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_exit>:

void _exit (int status)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffe7 	bl	80034b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ea:	e7fe      	b.n	80034ea <_exit+0x12>

080034ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034fe:	f3af 8000 	nop.w
 8003502:	4601      	mov	r1, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf0      	blt.n	80034fe <_read+0x12>
  }

  return len;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e009      	b.n	800354c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	dbf1      	blt.n	8003538 <_write+0x12>
  }
  return len;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_close>:

int _close(int file)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003586:	605a      	str	r2, [r3, #4]
  return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_isatty>:

int _isatty(int file)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f8:	f006 f966 	bl	80098c8 <__errno>
 80035fc:	4603      	mov	r3, r0
 80035fe:	220c      	movs	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20020000 	.word	0x20020000
 8003628:	00000400 	.word	0x00000400
 800362c:	200009b4 	.word	0x200009b4
 8003630:	20004860 	.word	0x20004860

08003634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <SystemInit+0x20>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <SystemInit+0x20>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003690 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800365c:	f7ff ffea 	bl	8003634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003662:	490d      	ldr	r1, [pc, #52]	; (8003698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003668:	e002      	b.n	8003670 <LoopCopyDataInit>

0800366a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800366c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800366e:	3304      	adds	r3, #4

08003670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003674:	d3f9      	bcc.n	800366a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003678:	4c0a      	ldr	r4, [pc, #40]	; (80036a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800367a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800367c:	e001      	b.n	8003682 <LoopFillZerobss>

0800367e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800367e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003680:	3204      	adds	r2, #4

08003682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003684:	d3fb      	bcc.n	800367e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003686:	f006 f925 	bl	80098d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800368a:	f7ff f865 	bl	8002758 <main>
  bx  lr    
 800368e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003698:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 800369c:	0800c5e8 	.word	0x0800c5e8
  ldr r2, =_sbss
 80036a0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80036a4:	2000485c 	.word	0x2000485c

080036a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC_IRQHandler>
	...

080036ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_Init+0x40>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_Init+0x40>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_Init+0x40>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 f8d8 	bl	800388a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036da:	200f      	movs	r0, #15
 80036dc:	f7ff fe34 	bl	8003348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e0:	f7ff fc4e 	bl	8002f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023c00 	.word	0x40023c00

080036f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200000a0 	.word	0x200000a0
 8003714:	200009b8 	.word	0x200009b8

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	200009b8 	.word	0x200009b8

08003730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0b      	blt.n	80037be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	; (80037cc <__NVIC_EnableIRQ+0x38>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	; (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f1c3 0307 	rsb	r3, r3, #7
 800383e:	2b04      	cmp	r3, #4
 8003840:	bf28      	it	cs
 8003842:	2304      	movcs	r3, #4
 8003844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3304      	adds	r3, #4
 800384a:	2b06      	cmp	r3, #6
 800384c:	d902      	bls.n	8003854 <NVIC_EncodePriority+0x30>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b03      	subs	r3, #3
 8003852:	e000      	b.n	8003856 <NVIC_EncodePriority+0x32>
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 32ff 	mov.w	r2, #4294967295
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43d9      	mvns	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	4313      	orrs	r3, r2
         );
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	; 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff4c 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b2:	f7ff ff61 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7ff ffb1 	bl	8003824 <NVIC_EncodePriority>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff80 	bl	80037d0 <__NVIC_SetPriority>
}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff54 	bl	8003794 <__NVIC_EnableIRQ>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7ff ff09 	bl	8003718 <HAL_GetTick>
 8003906:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d008      	beq.n	8003926 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e052      	b.n	80039cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0216 	bic.w	r2, r2, #22
 8003934:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_DMA_Abort+0x62>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003976:	e013      	b.n	80039a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003978:	f7ff fece 	bl	8003718 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d90c      	bls.n	80039a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2203      	movs	r2, #3
 8003990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e015      	b.n	80039cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e00c      	b.n	8003a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2205      	movs	r2, #5
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e16b      	b.n	8003d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a34:	2201      	movs	r2, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	f040 815a 	bne.w	8003d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d005      	beq.n	8003a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d130      	bne.n	8003acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d017      	beq.n	8003b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d123      	bne.n	8003b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80b4 	beq.w	8003d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <HAL_GPIO_Init+0x30c>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4a5f      	ldr	r2, [pc, #380]	; (8003d24 <HAL_GPIO_Init+0x30c>)
 8003ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bac:	6453      	str	r3, [r2, #68]	; 0x44
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <HAL_GPIO_Init+0x30c>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bba:	4a5b      	ldr	r2, [pc, #364]	; (8003d28 <HAL_GPIO_Init+0x310>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_GPIO_Init+0x314>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02b      	beq.n	8003c3e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_GPIO_Init+0x318>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x31c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x320>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_Init+0x21a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_GPIO_Init+0x324>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0x216>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_GPIO_Init+0x328>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_Init+0x212>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x32c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0x20e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x330>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_Init+0x20a>
 8003c1e:	2307      	movs	r3, #7
 8003c20:	e00e      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c22:	2308      	movs	r3, #8
 8003c24:	e00c      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c26:	2306      	movs	r3, #6
 8003c28:	e00a      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c2a:	2305      	movs	r3, #5
 8003c2c:	e008      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c32:	2303      	movs	r3, #3
 8003c34:	e004      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_GPIO_Init+0x228>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	f002 0203 	and.w	r2, r2, #3
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	4093      	lsls	r3, r2
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c50:	4935      	ldr	r1, [pc, #212]	; (8003d28 <HAL_GPIO_Init+0x310>)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c82:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c88:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd6:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d00:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <HAL_GPIO_Init+0x334>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b0f      	cmp	r3, #15
 8003d10:	f67f ae90 	bls.w	8003a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40013800 	.word	0x40013800
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	40020400 	.word	0x40020400
 8003d34:	40020800 	.word	0x40020800
 8003d38:	40020c00 	.word	0x40020c00
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40021400 	.word	0x40021400
 8003d44:	40021800 	.word	0x40021800
 8003d48:	40021c00 	.word	0x40021c00
 8003d4c:	40013c00 	.word	0x40013c00

08003d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e12b      	b.n	8003fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff f92e 	bl	8002fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003db4:	f001 fc60 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4a81      	ldr	r2, [pc, #516]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d807      	bhi.n	8003dd4 <HAL_I2C_Init+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a80      	ldr	r2, [pc, #512]	; (8003fc8 <HAL_I2C_Init+0x278>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e006      	b.n	8003de2 <HAL_I2C_Init+0x92>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a7d      	ldr	r2, [pc, #500]	; (8003fcc <HAL_I2C_Init+0x27c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bf94      	ite	ls
 8003ddc:	2301      	movls	r3, #1
 8003dde:	2300      	movhi	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0e7      	b.n	8003fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a78      	ldr	r2, [pc, #480]	; (8003fd0 <HAL_I2C_Init+0x280>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0c9b      	lsrs	r3, r3, #18
 8003df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a6a      	ldr	r2, [pc, #424]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d802      	bhi.n	8003e24 <HAL_I2C_Init+0xd4>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3301      	adds	r3, #1
 8003e22:	e009      	b.n	8003e38 <HAL_I2C_Init+0xe8>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	4a69      	ldr	r2, [pc, #420]	; (8003fd4 <HAL_I2C_Init+0x284>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	099b      	lsrs	r3, r3, #6
 8003e36:	3301      	adds	r3, #1
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	495c      	ldr	r1, [pc, #368]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003e54:	428b      	cmp	r3, r1
 8003e56:	d819      	bhi.n	8003e8c <HAL_I2C_Init+0x13c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e59      	subs	r1, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_I2C_Init+0x138>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e59      	subs	r1, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e86:	e051      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e04f      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d111      	bne.n	8003eb8 <HAL_I2C_Init+0x168>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1e58      	subs	r0, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e012      	b.n	8003ede <HAL_I2C_Init+0x18e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1e58      	subs	r0, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	0099      	lsls	r1, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Init+0x196>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <HAL_I2C_Init+0x1bc>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e58      	subs	r0, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	440b      	add	r3, r1
 8003efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	e00f      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	0099      	lsls	r1, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6809      	ldr	r1, [r1, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6911      	ldr	r1, [r2, #16]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68d2      	ldr	r2, [r2, #12]
 8003f66:	4311      	orrs	r1, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	000186a0 	.word	0x000186a0
 8003fc8:	001e847f 	.word	0x001e847f
 8003fcc:	003d08ff 	.word	0x003d08ff
 8003fd0:	431bde83 	.word	0x431bde83
 8003fd4:	10624dd3 	.word	0x10624dd3

08003fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff2:	f7ff fb91 	bl	8003718 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	f040 80d9 	bne.w	80041b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2319      	movs	r3, #25
 800400c:	2201      	movs	r2, #1
 800400e:	496d      	ldr	r1, [pc, #436]	; (80041c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fc8b 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	e0cc      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_I2C_Mem_Write+0x56>
 800402a:	2302      	movs	r3, #2
 800402c:	e0c5      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d007      	beq.n	8004054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2221      	movs	r2, #33	; 0x21
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a4d      	ldr	r2, [pc, #308]	; (80041c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004096:	88f8      	ldrh	r0, [r7, #6]
 8004098:	893a      	ldrh	r2, [r7, #8]
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4603      	mov	r3, r0
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fac2 	bl	8004630 <I2C_RequestMemoryWrite>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d052      	beq.n	8004158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e081      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fd50 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_I2C_Mem_Write+0x180>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1aa      	bne.n	80040b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fd43 	bl	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00d      	beq.n	800418c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b04      	cmp	r3, #4
 8004176:	d107      	bne.n	8004188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e016      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7ff fa97 	bl	8003718 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	f040 8214 	bne.w	8004622 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2319      	movs	r3, #25
 8004200:	2201      	movs	r2, #1
 8004202:	497b      	ldr	r1, [pc, #492]	; (80043f0 <HAL_I2C_Mem_Read+0x224>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fb91 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	e207      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Read+0x56>
 800421e:	2302      	movs	r3, #2
 8004220:	e200      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2222      	movs	r2, #34	; 0x22
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a5b      	ldr	r2, [pc, #364]	; (80043f4 <HAL_I2C_Mem_Read+0x228>)
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428a:	88f8      	ldrh	r0, [r7, #6]
 800428c:	893a      	ldrh	r2, [r7, #8]
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4603      	mov	r3, r0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fa5e 	bl	800475c <I2C_RequestMemoryRead>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1bc      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e190      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d11b      	bne.n	800431a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e170      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	2b02      	cmp	r3, #2
 8004320:	d11b      	bne.n	800435a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	e150      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004370:	e144      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004376:	2b03      	cmp	r3, #3
 8004378:	f200 80f1 	bhi.w	800455e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b01      	cmp	r3, #1
 8004382:	d123      	bne.n	80043cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fc79 	bl	8004c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e145      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ca:	e117      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d14e      	bne.n	8004472 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	2200      	movs	r2, #0
 80043dc:	4906      	ldr	r1, [pc, #24]	; (80043f8 <HAL_I2C_Mem_Read+0x22c>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 faa4 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e11a      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
 80043ee:	bf00      	nop
 80043f0:	00100002 	.word	0x00100002
 80043f4:	ffff0000 	.word	0xffff0000
 80043f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004470:	e0c4      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2200      	movs	r2, #0
 800447a:	496c      	ldr	r1, [pc, #432]	; (800462c <HAL_I2C_Mem_Read+0x460>)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa55 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0cb      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2200      	movs	r2, #0
 80044d6:	4955      	ldr	r1, [pc, #340]	; (800462c <HAL_I2C_Mem_Read+0x460>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fa27 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e09d      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455c:	e04e      	b.n	80045fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fb8c 	bl	8004c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e058      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d124      	bne.n	80045fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d107      	bne.n	80045ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f aeb6 	bne.w	8004372 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00010004 	.word	0x00010004

08004630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	461a      	mov	r2, r3
 800463e:	4603      	mov	r3, r0
 8004640:	817b      	strh	r3, [r7, #10]
 8004642:	460b      	mov	r3, r1
 8004644:	813b      	strh	r3, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2200      	movs	r2, #0
 8004662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f960 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004680:	d103      	bne.n	800468a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e05f      	b.n	800474e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800469c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	492d      	ldr	r1, [pc, #180]	; (8004758 <I2C_RequestMemoryWrite+0x128>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f9bb 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e04c      	b.n	800474e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa46 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e02b      	b.n	800474e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
 8004706:	e021      	b.n	800474c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	b29b      	uxth	r3, r3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004718:	6a39      	ldr	r1, [r7, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fa20 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d107      	bne.n	800473e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e005      	b.n	800474e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004742:	893b      	ldrh	r3, [r7, #8]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	00010002 	.word	0x00010002

0800475c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	4608      	mov	r0, r1
 8004766:	4611      	mov	r1, r2
 8004768:	461a      	mov	r2, r3
 800476a:	4603      	mov	r3, r0
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	460b      	mov	r3, r1
 8004770:	813b      	strh	r3, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004784:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004794:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	2200      	movs	r2, #0
 800479e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f8c2 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047bc:	d103      	bne.n	80047c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0aa      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ca:	897b      	ldrh	r3, [r7, #10]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	4952      	ldr	r1, [pc, #328]	; (8004928 <I2C_RequestMemoryRead+0x1cc>)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f91d 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e097      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	6a39      	ldr	r1, [r7, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f9a8 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b04      	cmp	r3, #4
 800481c:	d107      	bne.n	800482e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e076      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]
 8004842:	e021      	b.n	8004888 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004844:	893b      	ldrh	r3, [r7, #8]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	6a39      	ldr	r1, [r7, #32]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f982 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b04      	cmp	r3, #4
 8004868:	d107      	bne.n	800487a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004878:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e050      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800487e:	893b      	ldrh	r3, [r7, #8]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6a39      	ldr	r1, [r7, #32]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f967 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b04      	cmp	r3, #4
 800489e:	d107      	bne.n	80048b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e035      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f82b 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d103      	bne.n	80048f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e013      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048f8:	897b      	ldrh	r3, [r7, #10]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	4906      	ldr	r1, [pc, #24]	; (8004928 <I2C_RequestMemoryRead+0x1cc>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f886 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	00010002 	.word	0x00010002

0800492c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493c:	e048      	b.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d044      	beq.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fe fee7 	bl	8003718 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d139      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10d      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	43da      	mvns	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	e00c      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d116      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e023      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10d      	bne.n	80049f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	e00c      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	43da      	mvns	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d093      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2e:	e071      	b.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d123      	bne.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e067      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d041      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fe fe42 	bl	8003718 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d136      	bne.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10c      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e00b      	b.n	8004ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e021      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10c      	bne.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	43da      	mvns	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00b      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af6d 	bne.w	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e034      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8e3 	bl	8004d3a <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e034      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d028      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fe fdc7 	bl	8003718 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11d      	bne.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d016      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e007      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d1c3      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfc:	e034      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f89b 	bl	8004d3a <I2C_IsAcknowledgeFailed>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d028      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fe fd7f 	bl	8003718 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11d      	bne.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d016      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e007      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d1c3      	bne.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c8c:	e049      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d119      	bne.n	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0210 	mvn.w	r2, #16
 8004ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e030      	b.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fe fd22 	bl	8003718 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11d      	bne.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d016      	beq.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d1ae      	bne.n	8004c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d50:	d11b      	bne.n	8004d8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0204 	orr.w	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e267      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d075      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004db6:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc2:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4b7e      	ldr	r3, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d05b      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x108>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d157      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e242      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x74>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x98>
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6c      	ldr	r2, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e30:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe fc62 	bl	8003718 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fe fc5e 	bl	8003718 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e207      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0xc0>
 8004e76:	e014      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fe fc4e 	bl	8003718 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fe fc4a 	bl	8003718 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1f3      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	4b51      	ldr	r3, [pc, #324]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0xe8>
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b44      	ldr	r3, [pc, #272]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d116      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1c7      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4937      	ldr	r1, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	e03a      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fc03 	bl	8003718 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fe fbff 	bl	8003718 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1a8      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4925      	ldr	r1, [pc, #148]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fbe2 	bl	8003718 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f58:	f7fe fbde 	bl	8003718 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e187      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fe fbc2 	bl	8003718 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fe fbbe 	bl	8003718 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e167      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x200>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7fe fbab 	bl	8003718 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fe fba7 	bl	8003718 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d907      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e150      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470000 	.word	0x42470000
 8004fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ea      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b81      	ldr	r3, [pc, #516]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b7d      	ldr	r3, [pc, #500]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a7c      	ldr	r2, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
 800501e:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x474>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fe fb67 	bl	8003718 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fe fb63 	bl	8003718 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e10c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_OscConfig+0x474>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x2ea>
 8005074:	4b64      	ldr	r3, [pc, #400]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	e01c      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x30c>
 800508a:	4b5f      	ldr	r3, [pc, #380]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
 8005096:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	4a5b      	ldr	r2, [pc, #364]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	; 0x70
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	4a57      	ldr	r2, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70
 80050b0:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a54      	ldr	r2, [pc, #336]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f023 0304 	bic.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fe fb28 	bl	8003718 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fe fb24 	bl	8003718 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0cb      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ee      	beq.n	80050cc <HAL_RCC_OscConfig+0x334>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f0:	f7fe fb12 	bl	8003718 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fe fb0e 	bl	8003718 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0b5      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510e:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	4a38      	ldr	r2, [pc, #224]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a1 	beq.w	8005278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005136:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d05c      	beq.n	80051fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d141      	bne.n	80051ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fe fae2 	bl	8003718 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005158:	f7fe fade 	bl	8003718 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e087      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	491b      	ldr	r1, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fe fab7 	bl	8003718 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fe fab3 	bl	8003718 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e05c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x416>
 80051cc:	e054      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_OscConfig+0x478>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe faa0 	bl	8003718 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fe fa9c 	bl	8003718 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e045      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_OscConfig+0x470>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x444>
 80051fa:	e03d      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e038      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d028      	beq.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d121      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d11a      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d111      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cc      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b68      	ldr	r3, [pc, #416]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90c      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b63      	ldr	r3, [pc, #396]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b8      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a58      	ldr	r2, [pc, #352]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	4b50      	ldr	r3, [pc, #320]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	494d      	ldr	r1, [pc, #308]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d044      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d003      	beq.n	8005346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fe f9ce 	bl	8003718 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fe f9ca 	bl	8003718 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20c      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e032      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4916      	ldr	r1, [pc, #88]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	490e      	ldr	r1, [pc, #56]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800540e:	f000 f821 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd ff8a 	bl	8003348 <HAL_InitTick>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00
 8005444:	40023800 	.word	0x40023800
 8005448:	0800c1dc 	.word	0x0800c1dc
 800544c:	20000098 	.word	0x20000098
 8005450:	2000009c 	.word	0x2000009c

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b094      	sub	sp, #80	; 0x50
 800545a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	647b      	str	r3, [r7, #68]	; 0x44
 8005460:	2300      	movs	r3, #0
 8005462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005464:	2300      	movs	r3, #0
 8005466:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546c:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d00d      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x40>
 8005478:	2b08      	cmp	r3, #8
 800547a:	f200 80e1 	bhi.w	8005640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x34>
 8005482:	2b04      	cmp	r3, #4
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x3a>
 8005486:	e0db      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b73      	ldr	r3, [pc, #460]	; (8005658 <HAL_RCC_GetSysClockFreq+0x204>)
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800548c:	e0db      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b73      	ldr	r3, [pc, #460]	; (800565c <HAL_RCC_GetSysClockFreq+0x208>)
 8005490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005492:	e0d8      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005494:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549e:	4b6d      	ldr	r3, [pc, #436]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054aa:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	099b      	lsrs	r3, r3, #6
 80054b0:	2200      	movs	r2, #0
 80054b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054c6:	4622      	mov	r2, r4
 80054c8:	462b      	mov	r3, r5
 80054ca:	f04f 0000 	mov.w	r0, #0
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	0159      	lsls	r1, r3, #5
 80054d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d8:	0150      	lsls	r0, r2, #5
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4621      	mov	r1, r4
 80054e0:	1a51      	subs	r1, r2, r1
 80054e2:	6139      	str	r1, [r7, #16]
 80054e4:	4629      	mov	r1, r5
 80054e6:	eb63 0301 	sbc.w	r3, r3, r1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f8:	4659      	mov	r1, fp
 80054fa:	018b      	lsls	r3, r1, #6
 80054fc:	4651      	mov	r1, sl
 80054fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005502:	4651      	mov	r1, sl
 8005504:	018a      	lsls	r2, r1, #6
 8005506:	4651      	mov	r1, sl
 8005508:	ebb2 0801 	subs.w	r8, r2, r1
 800550c:	4659      	mov	r1, fp
 800550e:	eb63 0901 	sbc.w	r9, r3, r1
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800551e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005526:	4690      	mov	r8, r2
 8005528:	4699      	mov	r9, r3
 800552a:	4623      	mov	r3, r4
 800552c:	eb18 0303 	adds.w	r3, r8, r3
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	462b      	mov	r3, r5
 8005534:	eb49 0303 	adc.w	r3, r9, r3
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005546:	4629      	mov	r1, r5
 8005548:	024b      	lsls	r3, r1, #9
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005550:	4621      	mov	r1, r4
 8005552:	024a      	lsls	r2, r1, #9
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555a:	2200      	movs	r2, #0
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005564:	f7fb fb70 	bl	8000c48 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005570:	e058      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005572:	4b38      	ldr	r3, [pc, #224]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	2200      	movs	r2, #0
 800557a:	4618      	mov	r0, r3
 800557c:	4611      	mov	r1, r2
 800557e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	f04f 0000 	mov.w	r0, #0
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	0159      	lsls	r1, r3, #5
 800559a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800559e:	0150      	lsls	r0, r2, #5
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4641      	mov	r1, r8
 80055a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055aa:	4649      	mov	r1, r9
 80055ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055c4:	ebb2 040a 	subs.w	r4, r2, sl
 80055c8:	eb63 050b 	sbc.w	r5, r3, fp
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	00eb      	lsls	r3, r5, #3
 80055d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055da:	00e2      	lsls	r2, r4, #3
 80055dc:	4614      	mov	r4, r2
 80055de:	461d      	mov	r5, r3
 80055e0:	4643      	mov	r3, r8
 80055e2:	18e3      	adds	r3, r4, r3
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	464b      	mov	r3, r9
 80055e8:	eb45 0303 	adc.w	r3, r5, r3
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055fa:	4629      	mov	r1, r5
 80055fc:	028b      	lsls	r3, r1, #10
 80055fe:	4621      	mov	r1, r4
 8005600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005604:	4621      	mov	r1, r4
 8005606:	028a      	lsls	r2, r1, #10
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560e:	2200      	movs	r2, #0
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	61fa      	str	r2, [r7, #28]
 8005614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005618:	f7fb fb16 	bl	8000c48 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4613      	mov	r3, r2
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800563e:	e002      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetSysClockFreq+0x204>)
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005648:	4618      	mov	r0, r3
 800564a:	3750      	adds	r7, #80	; 0x50
 800564c:	46bd      	mov	sp, r7
 800564e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	00f42400 	.word	0x00f42400
 800565c:	007a1200 	.word	0x007a1200

08005660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000098 	.word	0x20000098

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a9b      	lsrs	r3, r3, #10
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800c1ec 	.word	0x0800c1ec

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a4:	f7ff ffdc 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0b5b      	lsrs	r3, r3, #13
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4903      	ldr	r1, [pc, #12]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40023800 	.word	0x40023800
 80056c4:	0800c1ec 	.word	0x0800c1ec

080056c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	220f      	movs	r2, #15
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <HAL_RCC_GetClockConfig+0x60>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0207 	and.w	r2, r3, #7
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	40023c00 	.word	0x40023c00

0800572c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e041      	b.n	80057c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fd fd26 	bl	80031a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 fd8c 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e04e      	b.n	8005882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a23      	ldr	r2, [pc, #140]	; (8005890 <HAL_TIM_Base_Start_IT+0xc4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d01d      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <HAL_TIM_Base_Start_IT+0xc8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <HAL_TIM_Base_Start_IT+0xcc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <HAL_TIM_Base_Start_IT+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x80>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d010      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	e007      	b.n	8005880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800

080058ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e041      	b.n	8005942 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fd fc44 	bl	8003160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 fccc 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <HAL_TIM_PWM_Start+0x24>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e022      	b.n	80059b6 <HAL_TIM_PWM_Start+0x6a>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d109      	bne.n	800598a <HAL_TIM_PWM_Start+0x3e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e015      	b.n	80059b6 <HAL_TIM_PWM_Start+0x6a>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d109      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x58>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e008      	b.n	80059b6 <HAL_TIM_PWM_Start+0x6a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e07c      	b.n	8005ab8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0x82>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	e013      	b.n	80059f6 <HAL_TIM_PWM_Start+0xaa>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0x92>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059dc:	e00b      	b.n	80059f6 <HAL_TIM_PWM_Start+0xaa>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	e003      	b.n	80059f6 <HAL_TIM_PWM_Start+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2201      	movs	r2, #1
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 ff38 	bl	8006874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <HAL_TIM_PWM_Start+0x174>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIM_PWM_Start+0xcc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <HAL_TIM_PWM_Start+0x178>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_TIM_PWM_Start+0xd0>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_TIM_PWM_Start+0xd2>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_TIM_PWM_Start+0x174>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d01d      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_TIM_PWM_Start+0x17c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_TIM_PWM_Start+0x180>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_TIM_PWM_Start+0x184>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <HAL_TIM_PWM_Start+0x178>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_TIM_PWM_Start+0x188>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x136>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_TIM_PWM_Start+0x18c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d111      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d010      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	e007      	b.n	8005ab6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40010400 	.word	0x40010400
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40001800 	.word	0x40001800

08005adc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e097      	b.n	8005c20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7fd faaf 	bl	8003068 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f000 fba9 	bl	8006288 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b7c:	f023 030c 	bic.w	r3, r3, #12
 8005b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	031b      	lsls	r3, r3, #12
 8005bac:	4313      	orrs	r3, r2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d102      	bne.n	8005c64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c5e:	7b7b      	ldrb	r3, [r7, #13]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e069      	b.n	8005d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c78:	e031      	b.n	8005cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d110      	bne.n	8005ca2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d102      	bne.n	8005c8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c86:	7b3b      	ldrb	r3, [r7, #12]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e055      	b.n	8005d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca0:	e01d      	b.n	8005cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d108      	bne.n	8005cba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d105      	bne.n	8005cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cae:	7b7b      	ldrb	r3, [r7, #13]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d102      	bne.n	8005cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cb4:	7b3b      	ldrb	r3, [r7, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d001      	beq.n	8005cbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e03e      	b.n	8005d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_TIM_Encoder_Start+0xc4>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d008      	beq.n	8005cfc <HAL_TIM_Encoder_Start+0xd4>
 8005cea:	e00f      	b.n	8005d0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fdbd 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 8005cfa:	e016      	b.n	8005d2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	2104      	movs	r1, #4
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fdb5 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 8005d0a:	e00e      	b.n	8005d2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fdad 	bl	8006874 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	2104      	movs	r1, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fda6 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 8005d28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d020      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0202 	mvn.w	r2, #2
 8005d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa5b 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa4d 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa5e 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d020      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0204 	mvn.w	r2, #4
 8005dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa35 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa27 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa38 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0208 	mvn.w	r2, #8
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa0f 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa01 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa12 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d020      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0210 	mvn.w	r2, #16
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2208      	movs	r2, #8
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9e9 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9db 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f9ec 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00c      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0201 	mvn.w	r2, #1
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fd f826 	bl	8002efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fd7c 	bl	80069cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9bd 	bl	8006272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0220 	mvn.w	r2, #32
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fd4e 	bl	80069b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e0ae      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	f200 809f 	bhi.w	8006090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08006091 	.word	0x08006091
 8005f60:	08006091 	.word	0x08006091
 8005f64:	08006091 	.word	0x08006091
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08006091 	.word	0x08006091
 8005f70:	08006091 	.word	0x08006091
 8005f74:	08006091 	.word	0x08006091
 8005f78:	0800600f 	.word	0x0800600f
 8005f7c:	08006091 	.word	0x08006091
 8005f80:	08006091 	.word	0x08006091
 8005f84:	08006091 	.word	0x08006091
 8005f88:	0800604f 	.word	0x0800604f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fa24 	bl	80063e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6999      	ldr	r1, [r3, #24]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	619a      	str	r2, [r3, #24]
      break;
 8005fca:	e064      	b.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fa74 	bl	80064c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6999      	ldr	r1, [r3, #24]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	021a      	lsls	r2, r3, #8
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	619a      	str	r2, [r3, #24]
      break;
 800600c:	e043      	b.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fac9 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0208 	orr.w	r2, r2, #8
 8006028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0204 	bic.w	r2, r2, #4
 8006038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
      break;
 800604c:	e023      	b.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fb1d 	bl	8006694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
      break;
 800608e:	e002      	b.n	8006096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800609e:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e0b4      	b.n	800622e <HAL_TIM_ConfigClockSource+0x186>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fc:	d03e      	beq.n	800617c <HAL_TIM_ConfigClockSource+0xd4>
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006102:	f200 8087 	bhi.w	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	f000 8086 	beq.w	800621a <HAL_TIM_ConfigClockSource+0x172>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d87f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d01a      	beq.n	800614e <HAL_TIM_ConfigClockSource+0xa6>
 8006118:	2b70      	cmp	r3, #112	; 0x70
 800611a:	d87b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b60      	cmp	r3, #96	; 0x60
 800611e:	d050      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006120:	2b60      	cmp	r3, #96	; 0x60
 8006122:	d877      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b50      	cmp	r3, #80	; 0x50
 8006126:	d03c      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006128:	2b50      	cmp	r3, #80	; 0x50
 800612a:	d873      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d058      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d86f      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b30      	cmp	r3, #48	; 0x30
 8006136:	d064      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b30      	cmp	r3, #48	; 0x30
 800613a:	d86b      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d060      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b20      	cmp	r3, #32
 8006142:	d867      	bhi.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b10      	cmp	r3, #16
 800614a:	d05a      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x15a>
 800614c:	e062      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800615e:	f000 fb69 	bl	8006834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	609a      	str	r2, [r3, #8]
      break;
 800617a:	e04f      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800618c:	f000 fb52 	bl	8006834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619e:	609a      	str	r2, [r3, #8]
      break;
 80061a0:	e03c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 fac6 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2150      	movs	r1, #80	; 0x50
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fb1f 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80061c0:	e02c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 fae5 	bl	800679e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2160      	movs	r1, #96	; 0x60
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fb0f 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80061e0:	e01c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 faa6 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2140      	movs	r1, #64	; 0x40
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 faff 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006200:	e00c      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f000 faf6 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006212:	e003      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e000      	b.n	800621c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800621a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a46      	ldr	r2, [pc, #280]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d00f      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a43      	ldr	r2, [pc, #268]	; (80063b8 <TIM_Base_SetConfig+0x130>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a42      	ldr	r2, [pc, #264]	; (80063bc <TIM_Base_SetConfig+0x134>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a41      	ldr	r2, [pc, #260]	; (80063c0 <TIM_Base_SetConfig+0x138>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a40      	ldr	r2, [pc, #256]	; (80063c4 <TIM_Base_SetConfig+0x13c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a35      	ldr	r2, [pc, #212]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d027      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a32      	ldr	r2, [pc, #200]	; (80063b8 <TIM_Base_SetConfig+0x130>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d023      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a31      	ldr	r2, [pc, #196]	; (80063bc <TIM_Base_SetConfig+0x134>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01f      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <TIM_Base_SetConfig+0x138>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2f      	ldr	r2, [pc, #188]	; (80063c4 <TIM_Base_SetConfig+0x13c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d017      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2e      	ldr	r2, [pc, #184]	; (80063c8 <TIM_Base_SetConfig+0x140>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <TIM_Base_SetConfig+0x144>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00f      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2c      	ldr	r2, [pc, #176]	; (80063d0 <TIM_Base_SetConfig+0x148>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a2b      	ldr	r2, [pc, #172]	; (80063d4 <TIM_Base_SetConfig+0x14c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2a      	ldr	r2, [pc, #168]	; (80063d8 <TIM_Base_SetConfig+0x150>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a29      	ldr	r2, [pc, #164]	; (80063dc <TIM_Base_SetConfig+0x154>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d108      	bne.n	800634c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <TIM_Base_SetConfig+0x13c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]
  }
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40014400 	.word	0x40014400
 80063d0:	40014800 	.word	0x40014800
 80063d4:	40001800 	.word	0x40001800
 80063d8:	40001c00 	.word	0x40001c00
 80063dc:	40002000 	.word	0x40002000

080063e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f023 0201 	bic.w	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0302 	bic.w	r3, r3, #2
 8006428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <TIM_OC1_SetConfig+0xd8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC1_SetConfig+0x64>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <TIM_OC1_SetConfig+0xdc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0308 	bic.w	r3, r3, #8
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <TIM_OC1_SetConfig+0xd8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0x8e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a14      	ldr	r2, [pc, #80]	; (80064bc <TIM_OC1_SetConfig+0xdc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f023 0210 	bic.w	r2, r3, #16
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <TIM_OC2_SetConfig+0xe4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC2_SetConfig+0x68>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <TIM_OC2_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <TIM_OC2_SetConfig+0xe4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC2_SetConfig+0x94>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <TIM_OC2_SetConfig+0xe8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d113      	bne.n	800657c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40010400 	.word	0x40010400

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x66>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10d      	bne.n	800662e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC3_SetConfig+0xe0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC3_SetConfig+0x92>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <TIM_OC3_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d113      	bne.n	8006666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a12      	ldr	r2, [pc, #72]	; (8006738 <TIM_OC4_SetConfig+0xa4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x68>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a11      	ldr	r2, [pc, #68]	; (800673c <TIM_OC4_SetConfig+0xa8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b087      	sub	sp, #28
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f023 0210 	bic.w	r2, r3, #16
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	f043 0307 	orr.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	431a      	orrs	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2201      	movs	r2, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	43db      	mvns	r3, r3
 8006896:	401a      	ands	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e05a      	b.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d022      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006924:	d01d      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d018      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10c      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4313      	orrs	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40001800 	.word	0x40001800

080069b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e042      	b.n	8006a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fc fc4e 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2224      	movs	r2, #36	; 0x24
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fcb1 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d121      	bne.n	8006ade <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_UART_Transmit_IT+0x26>
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e01a      	b.n	8006ae0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	88fa      	ldrh	r2, [r7, #6]
 8006aba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e000      	b.n	8006ae0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
  }
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b0ba      	sub	sp, #232	; 0xe8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10f      	bne.n	8006b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fb5f 	bl	800720e <UART_Receive_IT>
      return;
 8006b50:	e25b      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80de 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
 8006b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80d1 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	f043 0202 	orr.w	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
 8006bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	f043 0204 	orr.w	r2, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	f043 0208 	orr.w	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81f2 	beq.w	8007000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faea 	bl	800720e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <HAL_UART_IRQHandler+0x17a>
 8006c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04f      	beq.n	8006d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9f2 	bl	8007050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d141      	bne.n	8006cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d013      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	4a7e      	ldr	r2, [pc, #504]	; (8006ecc <HAL_UART_IRQHandler+0x3e0>)
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc fe7a 	bl	80039d4 <HAL_DMA_Abort_IT>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00e      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f994 	bl	8007024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e00a      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f990 	bl	8007024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	e006      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f98c 	bl	8007024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006d12:	e175      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	bf00      	nop
    return;
 8006d16:	e173      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 814f 	bne.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8148 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8141 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	f040 80b6 	bne.w	8006ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8145 	beq.w	8007004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f080 813e 	bcs.w	8007004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9a:	f000 8088 	beq.w	8006eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1d9      	bne.n	8006d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3314      	adds	r3, #20
 8006df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e1      	bne.n	8006dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7e:	f023 0310 	bic.w	r3, r3, #16
 8006e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e3      	bne.n	8006e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fc fd23 	bl	80038f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8b7 	bl	8007038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eca:	e09b      	b.n	8007004 <HAL_UART_IRQHandler+0x518>
 8006ecc:	08007117 	.word	0x08007117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 808e 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8089 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f52:	633a      	str	r2, [r7, #48]	; 0x30
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e3      	bne.n	8006f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f83d 	bl	8007038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fbe:	e023      	b.n	8007008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8b0 	bl	800713e <UART_Transmit_IT>
    return;
 8006fde:	e014      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f8f0 	bl	80071de <UART_EndTransmit_IT>
    return;
 8006ffe:	e004      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    return;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007008:	bf00      	nop
  }
}
 800700a:	37e8      	adds	r7, #232	; 0xe8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007050:	b480      	push	{r7}
 8007052:	b095      	sub	sp, #84	; 0x54
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007078:	643a      	str	r2, [r7, #64]	; 0x40
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800707e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	61fb      	str	r3, [r7, #28]
   return(result);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3314      	adds	r3, #20
 80070aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e5      	bne.n	800708c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d119      	bne.n	80070fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	647b      	str	r3, [r7, #68]	; 0x44
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e8:	61ba      	str	r2, [r7, #24]
 80070ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	613b      	str	r3, [r7, #16]
   return(result);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800710a:	bf00      	nop
 800710c:	3754      	adds	r7, #84	; 0x54
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff ff77 	bl	8007024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b21      	cmp	r3, #33	; 0x21
 8007150:	d13e      	bne.n	80071d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	d114      	bne.n	8007186 <UART_Transmit_IT+0x48>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d110      	bne.n	8007186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	1c9a      	adds	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	621a      	str	r2, [r3, #32]
 8007184:	e008      	b.n	8007198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6211      	str	r1, [r2, #32]
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4619      	mov	r1, r3
 80071a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10f      	bne.n	80071cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fb fa96 	bl	8002730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b22      	cmp	r3, #34	; 0x22
 8007220:	f040 80ae 	bne.w	8007380 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722c:	d117      	bne.n	800725e <UART_Receive_IT+0x50>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d113      	bne.n	800725e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	b29a      	uxth	r2, r3
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	1c9a      	adds	r2, r3, #2
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
 800725c:	e026      	b.n	80072ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007270:	d007      	beq.n	8007282 <UART_Receive_IT+0x74>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <UART_Receive_IT+0x82>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e008      	b.n	80072a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729c:	b2da      	uxtb	r2, r3
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4619      	mov	r1, r3
 80072ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d15d      	bne.n	800737c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0220 	bic.w	r2, r2, #32
 80072ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	2b01      	cmp	r3, #1
 8007304:	d135      	bne.n	8007372 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	613b      	str	r3, [r7, #16]
   return(result);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732c:	623a      	str	r2, [r7, #32]
 800732e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	61bb      	str	r3, [r7, #24]
   return(result);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b10      	cmp	r3, #16
 800734c:	d10a      	bne.n	8007364 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe64 	bl	8007038 <HAL_UARTEx_RxEventCallback>
 8007370:	e002      	b.n	8007378 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fe4c 	bl	8007010 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e002      	b.n	8007382 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3730      	adds	r7, #48	; 0x30
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c0      	sub	sp, #256	; 0x100
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073e4:	f021 010c 	bic.w	r1, r1, #12
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	ea40 0301 	orr.w	r3, r0, r1
 8007412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8f      	ldr	r3, [pc, #572]	; (8007658 <UART_SetConfig+0x2cc>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <UART_SetConfig+0xa0>
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8d      	ldr	r3, [pc, #564]	; (800765c <UART_SetConfig+0x2d0>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fe f938 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8007430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007434:	e003      	b.n	800743e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fe f91f 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 800743a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007448:	f040 810c 	bne.w	8007664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800745a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	1891      	adds	r1, r2, r2
 8007464:	65b9      	str	r1, [r7, #88]	; 0x58
 8007466:	415b      	adcs	r3, r3
 8007468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800746e:	4621      	mov	r1, r4
 8007470:	eb12 0801 	adds.w	r8, r2, r1
 8007474:	4629      	mov	r1, r5
 8007476:	eb43 0901 	adc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800749c:	462b      	mov	r3, r5
 800749e:	eb49 0303 	adc.w	r3, r9, r3
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	18db      	adds	r3, r3, r3
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
 80074c0:	4613      	mov	r3, r2
 80074c2:	eb42 0303 	adc.w	r3, r2, r3
 80074c6:	657b      	str	r3, [r7, #84]	; 0x54
 80074c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074d0:	f7f9 fbba 	bl	8000c48 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b61      	ldr	r3, [pc, #388]	; (8007660 <UART_SetConfig+0x2d4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80074fc:	415b      	adcs	r3, r3
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007504:	4641      	mov	r1, r8
 8007506:	eb12 0a01 	adds.w	sl, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0b01 	adc.w	fp, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	4692      	mov	sl, r2
 8007526:	469b      	mov	fp, r3
 8007528:	4643      	mov	r3, r8
 800752a:	eb1a 0303 	adds.w	r3, sl, r3
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007532:	464b      	mov	r3, r9
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800754c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	643b      	str	r3, [r7, #64]	; 0x40
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
 800755e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007566:	f7f9 fb6f 	bl	8000c48 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b3b      	ldr	r3, [pc, #236]	; (8007660 <UART_SetConfig+0x2d4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	; 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <UART_SetConfig+0x2d4>)
 8007588:	fba3 2302 	umull	r2, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80075b0:	415b      	adcs	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6339      	str	r1, [r7, #48]	; 0x30
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ec:	464b      	mov	r3, r9
 80075ee:	460a      	mov	r2, r1
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800760c:	460b      	mov	r3, r1
 800760e:	18db      	adds	r3, r3, r3
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
 8007612:	4613      	mov	r3, r2
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800761e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007622:	f7f9 fb11 	bl	8000c48 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <UART_SetConfig+0x2d4>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	; 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	; 0x32
 800763e:	4a08      	ldr	r2, [pc, #32]	; (8007660 <UART_SetConfig+0x2d4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4422      	add	r2, r4
 8007652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007654:	e106      	b.n	8007864 <UART_SetConfig+0x4d8>
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800766e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007676:	4642      	mov	r2, r8
 8007678:	464b      	mov	r3, r9
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6239      	str	r1, [r7, #32]
 800767e:	415b      	adcs	r3, r3
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
 8007682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007686:	4641      	mov	r1, r8
 8007688:	1854      	adds	r4, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0501 	adc.w	r5, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	00eb      	lsls	r3, r5, #3
 800769a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769e:	00e2      	lsls	r2, r4, #3
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	18e3      	adds	r3, r4, r3
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ac:	464b      	mov	r3, r9
 80076ae:	eb45 0303 	adc.w	r3, r5, r3
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076d2:	4629      	mov	r1, r5
 80076d4:	008b      	lsls	r3, r1, #2
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076dc:	4621      	mov	r1, r4
 80076de:	008a      	lsls	r2, r1, #2
 80076e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076e4:	f7f9 fab0 	bl	8000c48 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4b60      	ldr	r3, [pc, #384]	; (8007870 <UART_SetConfig+0x4e4>)
 80076ee:	fba3 2302 	umull	r2, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	011c      	lsls	r4, r3, #4
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	61b9      	str	r1, [r7, #24]
 8007710:	415b      	adcs	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	67bb      	str	r3, [r7, #120]	; 0x78
 8007762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007770:	4649      	mov	r1, r9
 8007772:	008b      	lsls	r3, r1, #2
 8007774:	4641      	mov	r1, r8
 8007776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777a:	4641      	mov	r1, r8
 800777c:	008a      	lsls	r2, r1, #2
 800777e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007782:	f7f9 fa61 	bl	8000c48 <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4611      	mov	r1, r2
 800778c:	4b38      	ldr	r3, [pc, #224]	; (8007870 <UART_SetConfig+0x4e4>)
 800778e:	fba3 2301 	umull	r2, r3, r3, r1
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2264      	movs	r2, #100	; 0x64
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	3332      	adds	r3, #50	; 0x32
 80077a0:	4a33      	ldr	r2, [pc, #204]	; (8007870 <UART_SetConfig+0x4e4>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ac:	441c      	add	r4, r3
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	673b      	str	r3, [r7, #112]	; 0x70
 80077b6:	677a      	str	r2, [r7, #116]	; 0x74
 80077b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	1891      	adds	r1, r2, r2
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	415b      	adcs	r3, r3
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077cc:	4641      	mov	r1, r8
 80077ce:	1851      	adds	r1, r2, r1
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	4649      	mov	r1, r9
 80077d4:	414b      	adcs	r3, r1
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e4:	4659      	mov	r1, fp
 80077e6:	00cb      	lsls	r3, r1, #3
 80077e8:	4651      	mov	r1, sl
 80077ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ee:	4651      	mov	r1, sl
 80077f0:	00ca      	lsls	r2, r1, #3
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	4642      	mov	r2, r8
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fe:	464b      	mov	r3, r9
 8007800:	460a      	mov	r2, r1
 8007802:	eb42 0303 	adc.w	r3, r2, r3
 8007806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	663b      	str	r3, [r7, #96]	; 0x60
 8007812:	667a      	str	r2, [r7, #100]	; 0x64
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007820:	4649      	mov	r1, r9
 8007822:	008b      	lsls	r3, r1, #2
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800782a:	4641      	mov	r1, r8
 800782c:	008a      	lsls	r2, r1, #2
 800782e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007832:	f7f9 fa09 	bl	8000c48 <__aeabi_uldivmod>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <UART_SetConfig+0x4e4>)
 800783c:	fba3 1302 	umull	r1, r3, r3, r2
 8007840:	095b      	lsrs	r3, r3, #5
 8007842:	2164      	movs	r1, #100	; 0x64
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	3332      	adds	r3, #50	; 0x32
 800784e:	4a08      	ldr	r2, [pc, #32]	; (8007870 <UART_SetConfig+0x4e4>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4422      	add	r2, r4
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800786a:	46bd      	mov	sp, r7
 800786c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007886:	2b84      	cmp	r3, #132	; 0x84
 8007888:	d005      	beq.n	8007896 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800788a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	3303      	adds	r3, #3
 8007894:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007896:	68fb      	ldr	r3, [r7, #12]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078a8:	f000 fade 	bl	8007e68 <vTaskStartScheduler>
  
  return osOK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b4:	b089      	sub	sp, #36	; 0x24
 80078b6:	af04      	add	r7, sp, #16
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <osThreadCreate+0x54>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01c      	beq.n	8007906 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685c      	ldr	r4, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691e      	ldr	r6, [r3, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff ffc8 	bl	8007874 <makeFreeRtosPriority>
 80078e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ee:	9202      	str	r2, [sp, #8]
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	9100      	str	r1, [sp, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	4632      	mov	r2, r6
 80078f8:	4629      	mov	r1, r5
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 f8ed 	bl	8007ada <xTaskCreateStatic>
 8007900:	4603      	mov	r3, r0
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e01c      	b.n	8007940 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685c      	ldr	r4, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007912:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ffaa 	bl	8007874 <makeFreeRtosPriority>
 8007920:	4602      	mov	r2, r0
 8007922:	f107 030c 	add.w	r3, r7, #12
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	9200      	str	r2, [sp, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	4632      	mov	r2, r6
 800792e:	4629      	mov	r1, r5
 8007930:	4620      	mov	r0, r4
 8007932:	f000 f92f 	bl	8007b94 <xTaskCreate>
 8007936:	4603      	mov	r3, r0
 8007938:	2b01      	cmp	r3, #1
 800793a:	d001      	beq.n	8007940 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007940:	68fb      	ldr	r3, [r7, #12]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800794a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <osDelay+0x16>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	e000      	b.n	8007962 <osDelay+0x18>
 8007960:	2301      	movs	r3, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fa4c 	bl	8007e00 <vTaskDelay>
  
  return osOK;
 8007968:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 0208 	add.w	r2, r3, #8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f04f 32ff 	mov.w	r2, #4294967295
 800798a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f103 0208 	add.w	r2, r3, #8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f103 0208 	add.w	r2, r3, #8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d103      	bne.n	8007a34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e00c      	b.n	8007a4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3308      	adds	r3, #8
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e002      	b.n	8007a42 <vListInsert+0x2e>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d2f6      	bcs.n	8007a3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6892      	ldr	r2, [r2, #8]
 8007a9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6852      	ldr	r2, [r2, #4]
 8007aa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d103      	bne.n	8007aba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	1e5a      	subs	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b08e      	sub	sp, #56	; 0x38
 8007ade:	af04      	add	r7, sp, #16
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	61fb      	str	r3, [r7, #28]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b20:	2354      	movs	r3, #84	; 0x54
 8007b22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b54      	cmp	r3, #84	; 0x54
 8007b28:	d00a      	beq.n	8007b40 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	61bb      	str	r3, [r7, #24]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01e      	beq.n	8007b86 <xTaskCreateStatic+0xac>
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b60:	2300      	movs	r3, #0
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f850 	bl	8007c1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b80:	f000 f8d4 	bl	8007d2c <prvAddNewTaskToReadyList>
 8007b84:	e001      	b.n	8007b8a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b8a:	697b      	ldr	r3, [r7, #20]
	}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3728      	adds	r7, #40	; 0x28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08c      	sub	sp, #48	; 0x30
 8007b98:	af04      	add	r7, sp, #16
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fec5 	bl	8008938 <pvPortMalloc>
 8007bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bb6:	2054      	movs	r0, #84	; 0x54
 8007bb8:	f000 febe 	bl	8008938 <pvPortMalloc>
 8007bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8007bca:	e005      	b.n	8007bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bcc:	6978      	ldr	r0, [r7, #20]
 8007bce:	f000 ff7f 	bl	8008ad0 <vPortFree>
 8007bd2:	e001      	b.n	8007bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d017      	beq.n	8007c0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f80e 	bl	8007c1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c02:	69f8      	ldr	r0, [r7, #28]
 8007c04:	f000 f892 	bl	8007d2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	61bb      	str	r3, [r7, #24]
 8007c0c:	e002      	b.n	8007c14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c14:	69bb      	ldr	r3, [r7, #24]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c36:	3b01      	subs	r3, #1
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f023 0307 	bic.w	r3, r3, #7
 8007c44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	617b      	str	r3, [r7, #20]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01f      	beq.n	8007cac <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e012      	b.n	8007c98 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	4413      	add	r3, r2
 8007c78:	7819      	ldrb	r1, [r3, #0]
 8007c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	3334      	adds	r3, #52	; 0x34
 8007c82:	460a      	mov	r2, r1
 8007c84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d006      	beq.n	8007ca0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	2b0f      	cmp	r3, #15
 8007c9c:	d9e9      	bls.n	8007c72 <prvInitialiseNewTask+0x54>
 8007c9e:	e000      	b.n	8007ca2 <prvInitialiseNewTask+0x84>
			{
				break;
 8007ca0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007caa:	e003      	b.n	8007cb4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d901      	bls.n	8007cbe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cba:	2306      	movs	r3, #6
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	2200      	movs	r2, #0
 8007cce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff fe6c 	bl	80079b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	3318      	adds	r3, #24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fe67 	bl	80079b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	f1c3 0207 	rsb	r2, r3, #7
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	69b8      	ldr	r0, [r7, #24]
 8007d0e:	f000 fc05 	bl	800851c <pxPortInitialiseStack>
 8007d12:	4602      	mov	r2, r0
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d24:	bf00      	nop
 8007d26:	3720      	adds	r7, #32
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d34:	f000 fd1e 	bl	8008774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d38:	4b2a      	ldr	r3, [pc, #168]	; (8007de4 <prvAddNewTaskToReadyList+0xb8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	4a29      	ldr	r2, [pc, #164]	; (8007de4 <prvAddNewTaskToReadyList+0xb8>)
 8007d40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d42:	4b29      	ldr	r3, [pc, #164]	; (8007de8 <prvAddNewTaskToReadyList+0xbc>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d4a:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <prvAddNewTaskToReadyList+0xbc>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d50:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <prvAddNewTaskToReadyList+0xb8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d110      	bne.n	8007d7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d58:	f000 fabc 	bl	80082d4 <prvInitialiseTaskLists>
 8007d5c:	e00d      	b.n	8007d7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d5e:	4b23      	ldr	r3, [pc, #140]	; (8007dec <prvAddNewTaskToReadyList+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d66:	4b20      	ldr	r3, [pc, #128]	; (8007de8 <prvAddNewTaskToReadyList+0xbc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d802      	bhi.n	8007d7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <prvAddNewTaskToReadyList+0xbc>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <prvAddNewTaskToReadyList+0xc4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <prvAddNewTaskToReadyList+0xc4>)
 8007d82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <prvAddNewTaskToReadyList+0xc8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <prvAddNewTaskToReadyList+0xc8>)
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <prvAddNewTaskToReadyList+0xcc>)
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7ff fe0d 	bl	80079cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007db2:	f000 fd0f 	bl	80087d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <prvAddNewTaskToReadyList+0xc0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00e      	beq.n	8007ddc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <prvAddNewTaskToReadyList+0xbc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d207      	bcs.n	8007ddc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <prvAddNewTaskToReadyList+0xd0>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000abc 	.word	0x20000abc
 8007de8:	200009bc 	.word	0x200009bc
 8007dec:	20000ac8 	.word	0x20000ac8
 8007df0:	20000ad8 	.word	0x20000ad8
 8007df4:	20000ac4 	.word	0x20000ac4
 8007df8:	200009c0 	.word	0x200009c0
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d017      	beq.n	8007e42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <vTaskDelay+0x60>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <vTaskDelay+0x30>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60bb      	str	r3, [r7, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e30:	f000 f87a 	bl	8007f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb0a 	bl	8008450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e3c:	f000 f882 	bl	8007f44 <xTaskResumeAll>
 8007e40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d107      	bne.n	8007e58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <vTaskDelay+0x64>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000ae4 	.word	0x20000ae4
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e76:	463a      	mov	r2, r7
 8007e78:	1d39      	adds	r1, r7, #4
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fc52 	bl	8001728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	9202      	str	r2, [sp, #8]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	2300      	movs	r3, #0
 8007e94:	460a      	mov	r2, r1
 8007e96:	491e      	ldr	r1, [pc, #120]	; (8007f10 <vTaskStartScheduler+0xa8>)
 8007e98:	481e      	ldr	r0, [pc, #120]	; (8007f14 <vTaskStartScheduler+0xac>)
 8007e9a:	f7ff fe1e 	bl	8007ada <xTaskCreateStatic>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	; (8007f18 <vTaskStartScheduler+0xb0>)
 8007ea2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <vTaskStartScheduler+0xb0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007eac:	2301      	movs	r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e001      	b.n	8007eb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d116      	bne.n	8007eea <vTaskStartScheduler+0x82>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	613b      	str	r3, [r7, #16]
}
 8007ece:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ed0:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <vTaskStartScheduler+0xb4>)
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <vTaskStartScheduler+0xb8>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <vTaskStartScheduler+0xbc>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ee4:	f000 fba4 	bl	8008630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ee8:	e00e      	b.n	8007f08 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef0:	d10a      	bne.n	8007f08 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	60fb      	str	r3, [r7, #12]
}
 8007f04:	bf00      	nop
 8007f06:	e7fe      	b.n	8007f06 <vTaskStartScheduler+0x9e>
}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	0800c1d4 	.word	0x0800c1d4
 8007f14:	080082a5 	.word	0x080082a5
 8007f18:	20000ae0 	.word	0x20000ae0
 8007f1c:	20000adc 	.word	0x20000adc
 8007f20:	20000ac8 	.word	0x20000ac8
 8007f24:	20000ac0 	.word	0x20000ac0

08007f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <vTaskSuspendAll+0x18>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a03      	ldr	r2, [pc, #12]	; (8007f40 <vTaskSuspendAll+0x18>)
 8007f34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f36:	bf00      	nop
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000ae4 	.word	0x20000ae4

08007f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f52:	4b41      	ldr	r3, [pc, #260]	; (8008058 <xTaskResumeAll+0x114>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f70:	f000 fc00 	bl	8008774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f74:	4b38      	ldr	r3, [pc, #224]	; (8008058 <xTaskResumeAll+0x114>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	4a37      	ldr	r2, [pc, #220]	; (8008058 <xTaskResumeAll+0x114>)
 8007f7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f7e:	4b36      	ldr	r3, [pc, #216]	; (8008058 <xTaskResumeAll+0x114>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d161      	bne.n	800804a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f86:	4b35      	ldr	r3, [pc, #212]	; (800805c <xTaskResumeAll+0x118>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d05d      	beq.n	800804a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f8e:	e02e      	b.n	8007fee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b33      	ldr	r3, [pc, #204]	; (8008060 <xTaskResumeAll+0x11c>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fd72 	bl	8007a86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fd6d 	bl	8007a86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	409a      	lsls	r2, r3
 8007fb4:	4b2b      	ldr	r3, [pc, #172]	; (8008064 <xTaskResumeAll+0x120>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <xTaskResumeAll+0x120>)
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4a27      	ldr	r2, [pc, #156]	; (8008068 <xTaskResumeAll+0x124>)
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7ff fcf9 	bl	80079cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4b23      	ldr	r3, [pc, #140]	; (800806c <xTaskResumeAll+0x128>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007fe8:	4b21      	ldr	r3, [pc, #132]	; (8008070 <xTaskResumeAll+0x12c>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fee:	4b1c      	ldr	r3, [pc, #112]	; (8008060 <xTaskResumeAll+0x11c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1cc      	bne.n	8007f90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ffc:	f000 fa08 	bl	8008410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <xTaskResumeAll+0x130>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800800c:	f000 f836 	bl	800807c <xTaskIncrementTick>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <xTaskResumeAll+0x12c>)
 8008018:	2201      	movs	r2, #1
 800801a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3b01      	subs	r3, #1
 8008020:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f1      	bne.n	800800c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <xTaskResumeAll+0x130>)
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <xTaskResumeAll+0x12c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008036:	2301      	movs	r3, #1
 8008038:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800803a:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <xTaskResumeAll+0x134>)
 800803c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800804a:	f000 fbc3 	bl	80087d4 <vPortExitCritical>

	return xAlreadyYielded;
 800804e:	68bb      	ldr	r3, [r7, #8]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000ae4 	.word	0x20000ae4
 800805c:	20000abc 	.word	0x20000abc
 8008060:	20000a7c 	.word	0x20000a7c
 8008064:	20000ac4 	.word	0x20000ac4
 8008068:	200009c0 	.word	0x200009c0
 800806c:	200009bc 	.word	0x200009bc
 8008070:	20000ad0 	.word	0x20000ad0
 8008074:	20000acc 	.word	0x20000acc
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008086:	4b4e      	ldr	r3, [pc, #312]	; (80081c0 <xTaskIncrementTick+0x144>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 808e 	bne.w	80081ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008090:	4b4c      	ldr	r3, [pc, #304]	; (80081c4 <xTaskIncrementTick+0x148>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008098:	4a4a      	ldr	r2, [pc, #296]	; (80081c4 <xTaskIncrementTick+0x148>)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d120      	bne.n	80080e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080a4:	4b48      	ldr	r3, [pc, #288]	; (80081c8 <xTaskIncrementTick+0x14c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	603b      	str	r3, [r7, #0]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <xTaskIncrementTick+0x46>
 80080c4:	4b40      	ldr	r3, [pc, #256]	; (80081c8 <xTaskIncrementTick+0x14c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	4b40      	ldr	r3, [pc, #256]	; (80081cc <xTaskIncrementTick+0x150>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a3e      	ldr	r2, [pc, #248]	; (80081c8 <xTaskIncrementTick+0x14c>)
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4a3e      	ldr	r2, [pc, #248]	; (80081cc <xTaskIncrementTick+0x150>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <xTaskIncrementTick+0x154>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	4a3c      	ldr	r2, [pc, #240]	; (80081d0 <xTaskIncrementTick+0x154>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	f000 f995 	bl	8008410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080e6:	4b3b      	ldr	r3, [pc, #236]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d348      	bcc.n	8008182 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f0:	4b35      	ldr	r3, [pc, #212]	; (80081c8 <xTaskIncrementTick+0x14c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fa:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	601a      	str	r2, [r3, #0]
					break;
 8008102:	e03e      	b.n	8008182 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <xTaskIncrementTick+0x14c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d203      	bcs.n	8008124 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800811c:	4a2d      	ldr	r2, [pc, #180]	; (80081d4 <xTaskIncrementTick+0x158>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008122:	e02e      	b.n	8008182 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3304      	adds	r3, #4
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fcac 	bl	8007a86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3318      	adds	r3, #24
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff fca3 	bl	8007a86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <xTaskIncrementTick+0x15c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4313      	orrs	r3, r2
 800814e:	4a22      	ldr	r2, [pc, #136]	; (80081d8 <xTaskIncrementTick+0x15c>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <xTaskIncrementTick+0x160>)
 8008160:	441a      	add	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f7ff fc2f 	bl	80079cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <xTaskIncrementTick+0x164>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	429a      	cmp	r2, r3
 800817a:	d3b9      	bcc.n	80080f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008180:	e7b6      	b.n	80080f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008182:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <xTaskIncrementTick+0x164>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	4914      	ldr	r1, [pc, #80]	; (80081dc <xTaskIncrementTick+0x160>)
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d901      	bls.n	800819e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800819e:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <xTaskIncrementTick+0x168>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e004      	b.n	80081b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <xTaskIncrementTick+0x16c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3301      	adds	r3, #1
 80081b2:	4a0d      	ldr	r2, [pc, #52]	; (80081e8 <xTaskIncrementTick+0x16c>)
 80081b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081b6:	697b      	ldr	r3, [r7, #20]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20000ae4 	.word	0x20000ae4
 80081c4:	20000ac0 	.word	0x20000ac0
 80081c8:	20000a74 	.word	0x20000a74
 80081cc:	20000a78 	.word	0x20000a78
 80081d0:	20000ad4 	.word	0x20000ad4
 80081d4:	20000adc 	.word	0x20000adc
 80081d8:	20000ac4 	.word	0x20000ac4
 80081dc:	200009c0 	.word	0x200009c0
 80081e0:	200009bc 	.word	0x200009bc
 80081e4:	20000ad0 	.word	0x20000ad0
 80081e8:	20000acc 	.word	0x20000acc

080081ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081f2:	4b27      	ldr	r3, [pc, #156]	; (8008290 <vTaskSwitchContext+0xa4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081fa:	4b26      	ldr	r3, [pc, #152]	; (8008294 <vTaskSwitchContext+0xa8>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008200:	e03f      	b.n	8008282 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008202:	4b24      	ldr	r3, [pc, #144]	; (8008294 <vTaskSwitchContext+0xa8>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	4b23      	ldr	r3, [pc, #140]	; (8008298 <vTaskSwitchContext+0xac>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	fab3 f383 	clz	r3, r3
 8008214:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	f1c3 031f 	rsb	r3, r3, #31
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	491f      	ldr	r1, [pc, #124]	; (800829c <vTaskSwitchContext+0xb0>)
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	607b      	str	r3, [r7, #4]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <vTaskSwitchContext+0x5a>
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4a12      	ldr	r2, [pc, #72]	; (800829c <vTaskSwitchContext+0xb0>)
 8008254:	4413      	add	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3308      	adds	r3, #8
 800826a:	429a      	cmp	r2, r3
 800826c:	d104      	bne.n	8008278 <vTaskSwitchContext+0x8c>
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	4a08      	ldr	r2, [pc, #32]	; (80082a0 <vTaskSwitchContext+0xb4>)
 8008280:	6013      	str	r3, [r2, #0]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000ae4 	.word	0x20000ae4
 8008294:	20000ad0 	.word	0x20000ad0
 8008298:	20000ac4 	.word	0x20000ac4
 800829c:	200009c0 	.word	0x200009c0
 80082a0:	200009bc 	.word	0x200009bc

080082a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082ac:	f000 f852 	bl	8008354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082b0:	4b06      	ldr	r3, [pc, #24]	; (80082cc <prvIdleTask+0x28>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d9f9      	bls.n	80082ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <prvIdleTask+0x2c>)
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082c8:	e7f0      	b.n	80082ac <prvIdleTask+0x8>
 80082ca:	bf00      	nop
 80082cc:	200009c0 	.word	0x200009c0
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	e00c      	b.n	80082fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4a12      	ldr	r2, [pc, #72]	; (8008334 <prvInitialiseTaskLists+0x60>)
 80082ec:	4413      	add	r3, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff fb3f 	bl	8007972 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3301      	adds	r3, #1
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	d9ef      	bls.n	80082e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008300:	480d      	ldr	r0, [pc, #52]	; (8008338 <prvInitialiseTaskLists+0x64>)
 8008302:	f7ff fb36 	bl	8007972 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008306:	480d      	ldr	r0, [pc, #52]	; (800833c <prvInitialiseTaskLists+0x68>)
 8008308:	f7ff fb33 	bl	8007972 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800830c:	480c      	ldr	r0, [pc, #48]	; (8008340 <prvInitialiseTaskLists+0x6c>)
 800830e:	f7ff fb30 	bl	8007972 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008312:	480c      	ldr	r0, [pc, #48]	; (8008344 <prvInitialiseTaskLists+0x70>)
 8008314:	f7ff fb2d 	bl	8007972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008318:	480b      	ldr	r0, [pc, #44]	; (8008348 <prvInitialiseTaskLists+0x74>)
 800831a:	f7ff fb2a 	bl	8007972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <prvInitialiseTaskLists+0x78>)
 8008320:	4a05      	ldr	r2, [pc, #20]	; (8008338 <prvInitialiseTaskLists+0x64>)
 8008322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <prvInitialiseTaskLists+0x7c>)
 8008326:	4a05      	ldr	r2, [pc, #20]	; (800833c <prvInitialiseTaskLists+0x68>)
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	200009c0 	.word	0x200009c0
 8008338:	20000a4c 	.word	0x20000a4c
 800833c:	20000a60 	.word	0x20000a60
 8008340:	20000a7c 	.word	0x20000a7c
 8008344:	20000a90 	.word	0x20000a90
 8008348:	20000aa8 	.word	0x20000aa8
 800834c:	20000a74 	.word	0x20000a74
 8008350:	20000a78 	.word	0x20000a78

08008354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800835a:	e019      	b.n	8008390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800835c:	f000 fa0a 	bl	8008774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008360:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <prvCheckTasksWaitingTermination+0x50>)
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff fb8a 	bl	8007a86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <prvCheckTasksWaitingTermination+0x54>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3b01      	subs	r3, #1
 8008378:	4a0b      	ldr	r2, [pc, #44]	; (80083a8 <prvCheckTasksWaitingTermination+0x54>)
 800837a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <prvCheckTasksWaitingTermination+0x58>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3b01      	subs	r3, #1
 8008382:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <prvCheckTasksWaitingTermination+0x58>)
 8008384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008386:	f000 fa25 	bl	80087d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f810 	bl	80083b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <prvCheckTasksWaitingTermination+0x58>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e1      	bne.n	800835c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000a90 	.word	0x20000a90
 80083a8:	20000abc 	.word	0x20000abc
 80083ac:	20000aa4 	.word	0x20000aa4

080083b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d108      	bne.n	80083d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fb82 	bl	8008ad0 <vPortFree>
				vPortFree( pxTCB );
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb7f 	bl	8008ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083d2:	e018      	b.n	8008406 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d103      	bne.n	80083e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fb76 	bl	8008ad0 <vPortFree>
	}
 80083e4:	e00f      	b.n	8008406 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d00a      	beq.n	8008406 <prvDeleteTCB+0x56>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60fb      	str	r3, [r7, #12]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <prvDeleteTCB+0x54>
	}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <prvResetNextTaskUnblockTime+0x38>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d104      	bne.n	800842a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <prvResetNextTaskUnblockTime+0x3c>)
 8008422:	f04f 32ff 	mov.w	r2, #4294967295
 8008426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008428:	e008      	b.n	800843c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <prvResetNextTaskUnblockTime+0x38>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	4a04      	ldr	r2, [pc, #16]	; (800844c <prvResetNextTaskUnblockTime+0x3c>)
 800843a:	6013      	str	r3, [r2, #0]
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	20000a74 	.word	0x20000a74
 800844c:	20000adc 	.word	0x20000adc

08008450 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800845a:	4b29      	ldr	r3, [pc, #164]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008460:	4b28      	ldr	r3, [pc, #160]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3304      	adds	r3, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fb0d 	bl	8007a86 <uxListRemove>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	2201      	movs	r2, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43da      	mvns	r2, r3
 8008480:	4b21      	ldr	r3, [pc, #132]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4013      	ands	r3, r2
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008488:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d10a      	bne.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008498:	4b1a      	ldr	r3, [pc, #104]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	481a      	ldr	r0, [pc, #104]	; (800850c <prvAddCurrentTaskToDelayedList+0xbc>)
 80084a2:	f7ff fa93 	bl	80079cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a6:	e026      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084b0:	4b14      	ldr	r3, [pc, #80]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d209      	bcs.n	80084d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084c0:	4b13      	ldr	r3, [pc, #76]	; (8008510 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7ff faa1 	bl	8007a14 <vListInsert>
}
 80084d2:	e010      	b.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7ff fa97 	bl	8007a14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d202      	bcs.n	80084f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084f0:	4a09      	ldr	r2, [pc, #36]	; (8008518 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6013      	str	r3, [r2, #0]
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000ac0 	.word	0x20000ac0
 8008504:	200009bc 	.word	0x200009bc
 8008508:	20000ac4 	.word	0x20000ac4
 800850c:	20000aa8 	.word	0x20000aa8
 8008510:	20000a78 	.word	0x20000a78
 8008514:	20000a74 	.word	0x20000a74
 8008518:	20000adc 	.word	0x20000adc

0800851c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3b04      	subs	r3, #4
 800852c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b04      	subs	r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3b04      	subs	r3, #4
 800854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800854c:	4a0c      	ldr	r2, [pc, #48]	; (8008580 <pxPortInitialiseStack+0x64>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b14      	subs	r3, #20
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b04      	subs	r3, #4
 8008562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f06f 0202 	mvn.w	r2, #2
 800856a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3b20      	subs	r3, #32
 8008570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	08008585 	.word	0x08008585

08008584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <prvTaskExitError+0x54>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	d00a      	beq.n	80085ae <prvTaskExitError+0x2a>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	60fb      	str	r3, [r7, #12]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <prvTaskExitError+0x28>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	60bb      	str	r3, [r7, #8]
}
 80085c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085c2:	bf00      	nop
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0fc      	beq.n	80085c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	200000a4 	.word	0x200000a4
 80085dc:	00000000 	.word	0x00000000

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	4770      	bx	lr
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst2>:
 8008600:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <prvPortStartFirstTask+0x24>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8814 	msr	CONTROL, r0
 800861a:	b662      	cpsie	i
 800861c:	b661      	cpsie	f
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	df00      	svc	0
 8008628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800862a:	bf00      	nop
 800862c:	e000ed08 	.word	0xe000ed08

08008630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008636:	4b46      	ldr	r3, [pc, #280]	; (8008750 <xPortStartScheduler+0x120>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a46      	ldr	r2, [pc, #280]	; (8008754 <xPortStartScheduler+0x124>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10a      	bne.n	8008656 <xPortStartScheduler+0x26>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008656:	4b3e      	ldr	r3, [pc, #248]	; (8008750 <xPortStartScheduler+0x120>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a3f      	ldr	r2, [pc, #252]	; (8008758 <xPortStartScheduler+0x128>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10a      	bne.n	8008676 <xPortStartScheduler+0x46>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008676:	4b39      	ldr	r3, [pc, #228]	; (800875c <xPortStartScheduler+0x12c>)
 8008678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	22ff      	movs	r2, #255	; 0xff
 8008686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008698:	b2da      	uxtb	r2, r3
 800869a:	4b31      	ldr	r3, [pc, #196]	; (8008760 <xPortStartScheduler+0x130>)
 800869c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800869e:	4b31      	ldr	r3, [pc, #196]	; (8008764 <xPortStartScheduler+0x134>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a4:	e009      	b.n	80086ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80086a6:	4b2f      	ldr	r3, [pc, #188]	; (8008764 <xPortStartScheduler+0x134>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	4a2d      	ldr	r2, [pc, #180]	; (8008764 <xPortStartScheduler+0x134>)
 80086ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	2b80      	cmp	r3, #128	; 0x80
 80086c4:	d0ef      	beq.n	80086a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086c6:	4b27      	ldr	r3, [pc, #156]	; (8008764 <xPortStartScheduler+0x134>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f1c3 0307 	rsb	r3, r3, #7
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d00a      	beq.n	80086e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	60bb      	str	r3, [r7, #8]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086e8:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <xPortStartScheduler+0x134>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	4a1d      	ldr	r2, [pc, #116]	; (8008764 <xPortStartScheduler+0x134>)
 80086f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f2:	4b1c      	ldr	r3, [pc, #112]	; (8008764 <xPortStartScheduler+0x134>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086fa:	4a1a      	ldr	r2, [pc, #104]	; (8008764 <xPortStartScheduler+0x134>)
 80086fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	b2da      	uxtb	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008706:	4b18      	ldr	r3, [pc, #96]	; (8008768 <xPortStartScheduler+0x138>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a17      	ldr	r2, [pc, #92]	; (8008768 <xPortStartScheduler+0x138>)
 800870c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <xPortStartScheduler+0x138>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a14      	ldr	r2, [pc, #80]	; (8008768 <xPortStartScheduler+0x138>)
 8008718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800871c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800871e:	f000 f8dd 	bl	80088dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <xPortStartScheduler+0x13c>)
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008728:	f000 f8fc 	bl	8008924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <xPortStartScheduler+0x140>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0f      	ldr	r2, [pc, #60]	; (8008770 <xPortStartScheduler+0x140>)
 8008732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008738:	f7ff ff66 	bl	8008608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800873c:	f7ff fd56 	bl	80081ec <vTaskSwitchContext>
	prvTaskExitError();
 8008740:	f7ff ff20 	bl	8008584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	e000ed00 	.word	0xe000ed00
 8008754:	410fc271 	.word	0x410fc271
 8008758:	410fc270 	.word	0x410fc270
 800875c:	e000e400 	.word	0xe000e400
 8008760:	20000ae8 	.word	0x20000ae8
 8008764:	20000aec 	.word	0x20000aec
 8008768:	e000ed20 	.word	0xe000ed20
 800876c:	200000a4 	.word	0x200000a4
 8008770:	e000ef34 	.word	0xe000ef34

08008774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	607b      	str	r3, [r7, #4]
}
 800878c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <vPortEnterCritical+0x58>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	4a0d      	ldr	r2, [pc, #52]	; (80087cc <vPortEnterCritical+0x58>)
 8008796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008798:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <vPortEnterCritical+0x58>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10f      	bne.n	80087c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087a0:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <vPortEnterCritical+0x5c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	603b      	str	r3, [r7, #0]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <vPortEnterCritical+0x4a>
	}
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	200000a4 	.word	0x200000a4
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087da:	4b12      	ldr	r3, [pc, #72]	; (8008824 <vPortExitCritical+0x50>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <vPortExitCritical+0x24>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087f8:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <vPortExitCritical+0x50>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <vPortExitCritical+0x50>)
 8008800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008802:	4b08      	ldr	r3, [pc, #32]	; (8008824 <vPortExitCritical+0x50>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <vPortExitCritical+0x42>
 800880a:	2300      	movs	r3, #0
 800880c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	200000a4 	.word	0x200000a4
	...

08008830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008830:	f3ef 8009 	mrs	r0, PSP
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4b15      	ldr	r3, [pc, #84]	; (8008890 <pxCurrentTCBConst>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	f01e 0f10 	tst.w	lr, #16
 8008840:	bf08      	it	eq
 8008842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008854:	f380 8811 	msr	BASEPRI, r0
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f7ff fcc4 	bl	80081ec <vTaskSwitchContext>
 8008864:	f04f 0000 	mov.w	r0, #0
 8008868:	f380 8811 	msr	BASEPRI, r0
 800886c:	bc09      	pop	{r0, r3}
 800886e:	6819      	ldr	r1, [r3, #0]
 8008870:	6808      	ldr	r0, [r1, #0]
 8008872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008876:	f01e 0f10 	tst.w	lr, #16
 800887a:	bf08      	it	eq
 800887c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008880:	f380 8809 	msr	PSP, r0
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst>:
 8008890:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088b2:	f7ff fbe3 	bl	800807c <xTaskIncrementTick>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <SysTick_Handler+0x40>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
}
 80088ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <vPortSetupTimerInterrupt+0x34>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <vPortSetupTimerInterrupt+0x38>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <vPortSetupTimerInterrupt+0x3c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	; (800891c <vPortSetupTimerInterrupt+0x40>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	099b      	lsrs	r3, r3, #6
 80088f8:	4a09      	ldr	r2, [pc, #36]	; (8008920 <vPortSetupTimerInterrupt+0x44>)
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088fe:	4b04      	ldr	r3, [pc, #16]	; (8008910 <vPortSetupTimerInterrupt+0x34>)
 8008900:	2207      	movs	r2, #7
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	e000e010 	.word	0xe000e010
 8008914:	e000e018 	.word	0xe000e018
 8008918:	20000098 	.word	0x20000098
 800891c:	10624dd3 	.word	0x10624dd3
 8008920:	e000e014 	.word	0xe000e014

08008924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008934 <vPortEnableVFP+0x10>
 8008928:	6801      	ldr	r1, [r0, #0]
 800892a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800892e:	6001      	str	r1, [r0, #0]
 8008930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008932:	bf00      	nop
 8008934:	e000ed88 	.word	0xe000ed88

08008938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008944:	f7ff faf0 	bl	8007f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008948:	4b5b      	ldr	r3, [pc, #364]	; (8008ab8 <pvPortMalloc+0x180>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008950:	f000 f920 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008954:	4b59      	ldr	r3, [pc, #356]	; (8008abc <pvPortMalloc+0x184>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8093 	bne.w	8008a88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01d      	beq.n	80089a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008968:	2208      	movs	r2, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <pvPortMalloc+0x6c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d06e      	beq.n	8008a88 <pvPortMalloc+0x150>
 80089aa:	4b45      	ldr	r3, [pc, #276]	; (8008ac0 <pvPortMalloc+0x188>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d869      	bhi.n	8008a88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089b4:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089be:	e004      	b.n	80089ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <pvPortMalloc+0xa4>
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f1      	bne.n	80089c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089dc:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d050      	beq.n	8008a88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	4413      	add	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	2308      	movs	r3, #8
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d91f      	bls.n	8008a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <pvPortMalloc+0xf8>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	613b      	str	r3, [r7, #16]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 f908 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a56:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d203      	bcs.n	8008a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <pvPortMalloc+0x184>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <pvPortMalloc+0x194>)
 8008a86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a88:	f7ff fa5c 	bl	8007f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <pvPortMalloc+0x174>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <pvPortMalloc+0x172>
	return pvReturn;
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200046f8 	.word	0x200046f8
 8008abc:	2000470c 	.word	0x2000470c
 8008ac0:	200046fc 	.word	0x200046fc
 8008ac4:	200046f0 	.word	0x200046f0
 8008ac8:	20004700 	.word	0x20004700
 8008acc:	20004704 	.word	0x20004704

08008ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04d      	beq.n	8008b7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4413      	add	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <vPortFree+0xb8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <vPortFree+0x44>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <vPortFree+0x62>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60bb      	str	r3, [r7, #8]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <vPortFree+0xb8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01e      	beq.n	8008b7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11a      	bne.n	8008b7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <vPortFree+0xb8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b58:	f7ff f9e6 	bl	8007f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <vPortFree+0xbc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <vPortFree+0xbc>)
 8008b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b6a:	6938      	ldr	r0, [r7, #16]
 8008b6c:	f000 f874 	bl	8008c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xc0>)
 8008b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b7a:	f7ff f9e3 	bl	8007f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	2000470c 	.word	0x2000470c
 8008b8c:	200046fc 	.word	0x200046fc
 8008b90:	20004708 	.word	0x20004708

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000af0 	.word	0x20000af0
 8008c44:	200046f0 	.word	0x200046f0
 8008c48:	200046f8 	.word	0x200046f8
 8008c4c:	20004700 	.word	0x20004700
 8008c50:	200046fc 	.word	0x200046fc
 8008c54:	2000470c 	.word	0x2000470c

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	200046f0 	.word	0x200046f0
 8008d08:	200046f8 	.word	0x200046f8

08008d0c <__cvt>:
 8008d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	ec55 4b10 	vmov	r4, r5, d0
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	460e      	mov	r6, r1
 8008d18:	4619      	mov	r1, r3
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	bfbb      	ittet	lt
 8008d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d22:	461d      	movlt	r5, r3
 8008d24:	2300      	movge	r3, #0
 8008d26:	232d      	movlt	r3, #45	; 0x2d
 8008d28:	700b      	strb	r3, [r1, #0]
 8008d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d30:	4691      	mov	r9, r2
 8008d32:	f023 0820 	bic.w	r8, r3, #32
 8008d36:	bfbc      	itt	lt
 8008d38:	4622      	movlt	r2, r4
 8008d3a:	4614      	movlt	r4, r2
 8008d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d40:	d005      	beq.n	8008d4e <__cvt+0x42>
 8008d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d46:	d100      	bne.n	8008d4a <__cvt+0x3e>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	e000      	b.n	8008d50 <__cvt+0x44>
 8008d4e:	2103      	movs	r1, #3
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	ab02      	add	r3, sp, #8
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	ec45 4b10 	vmov	d0, r4, r5
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	4632      	mov	r2, r6
 8008d60:	f000 fe7e 	bl	8009a60 <_dtoa_r>
 8008d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d68:	4607      	mov	r7, r0
 8008d6a:	d102      	bne.n	8008d72 <__cvt+0x66>
 8008d6c:	f019 0f01 	tst.w	r9, #1
 8008d70:	d022      	beq.n	8008db8 <__cvt+0xac>
 8008d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d76:	eb07 0906 	add.w	r9, r7, r6
 8008d7a:	d110      	bne.n	8008d9e <__cvt+0x92>
 8008d7c:	783b      	ldrb	r3, [r7, #0]
 8008d7e:	2b30      	cmp	r3, #48	; 0x30
 8008d80:	d10a      	bne.n	8008d98 <__cvt+0x8c>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8e:	b918      	cbnz	r0, 8008d98 <__cvt+0x8c>
 8008d90:	f1c6 0601 	rsb	r6, r6, #1
 8008d94:	f8ca 6000 	str.w	r6, [sl]
 8008d98:	f8da 3000 	ldr.w	r3, [sl]
 8008d9c:	4499      	add	r9, r3
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008daa:	b108      	cbz	r0, 8008db0 <__cvt+0xa4>
 8008dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8008db0:	2230      	movs	r2, #48	; 0x30
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	454b      	cmp	r3, r9
 8008db6:	d307      	bcc.n	8008dc8 <__cvt+0xbc>
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dbc:	1bdb      	subs	r3, r3, r7
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	b004      	add	sp, #16
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	1c59      	adds	r1, r3, #1
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e7f0      	b.n	8008db2 <__cvt+0xa6>

08008dd0 <__exponent>:
 8008dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	4249      	neglt	r1, r1
 8008dda:	f803 2b02 	strb.w	r2, [r3], #2
 8008dde:	bfb4      	ite	lt
 8008de0:	222d      	movlt	r2, #45	; 0x2d
 8008de2:	222b      	movge	r2, #43	; 0x2b
 8008de4:	2909      	cmp	r1, #9
 8008de6:	7042      	strb	r2, [r0, #1]
 8008de8:	dd2a      	ble.n	8008e40 <__exponent+0x70>
 8008dea:	f10d 0207 	add.w	r2, sp, #7
 8008dee:	4617      	mov	r7, r2
 8008df0:	260a      	movs	r6, #10
 8008df2:	4694      	mov	ip, r2
 8008df4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008df8:	fb06 1415 	mls	r4, r6, r5, r1
 8008dfc:	3430      	adds	r4, #48	; 0x30
 8008dfe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e02:	460c      	mov	r4, r1
 8008e04:	2c63      	cmp	r4, #99	; 0x63
 8008e06:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	dcf1      	bgt.n	8008df2 <__exponent+0x22>
 8008e0e:	3130      	adds	r1, #48	; 0x30
 8008e10:	f1ac 0402 	sub.w	r4, ip, #2
 8008e14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e18:	1c41      	adds	r1, r0, #1
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	42ba      	cmp	r2, r7
 8008e1e:	d30a      	bcc.n	8008e36 <__exponent+0x66>
 8008e20:	f10d 0209 	add.w	r2, sp, #9
 8008e24:	eba2 020c 	sub.w	r2, r2, ip
 8008e28:	42bc      	cmp	r4, r7
 8008e2a:	bf88      	it	hi
 8008e2c:	2200      	movhi	r2, #0
 8008e2e:	4413      	add	r3, r2
 8008e30:	1a18      	subs	r0, r3, r0
 8008e32:	b003      	add	sp, #12
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e36:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e3e:	e7ed      	b.n	8008e1c <__exponent+0x4c>
 8008e40:	2330      	movs	r3, #48	; 0x30
 8008e42:	3130      	adds	r1, #48	; 0x30
 8008e44:	7083      	strb	r3, [r0, #2]
 8008e46:	70c1      	strb	r1, [r0, #3]
 8008e48:	1d03      	adds	r3, r0, #4
 8008e4a:	e7f1      	b.n	8008e30 <__exponent+0x60>

08008e4c <_printf_float>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	ed2d 8b02 	vpush	{d8}
 8008e54:	b08d      	sub	sp, #52	; 0x34
 8008e56:	460c      	mov	r4, r1
 8008e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	461f      	mov	r7, r3
 8008e60:	4605      	mov	r5, r0
 8008e62:	f000 fce7 	bl	8009834 <_localeconv_r>
 8008e66:	f8d0 a000 	ldr.w	sl, [r0]
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 fa00 	bl	8000270 <strlen>
 8008e70:	2300      	movs	r3, #0
 8008e72:	930a      	str	r3, [sp, #40]	; 0x28
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e80:	3307      	adds	r3, #7
 8008e82:	f023 0307 	bic.w	r3, r3, #7
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	f8c8 2000 	str.w	r2, [r8]
 8008e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e9c:	ee08 0a10 	vmov	s16, r0
 8008ea0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea8:	4b9e      	ldr	r3, [pc, #632]	; (8009124 <_printf_float+0x2d8>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	f7f7 fe3d 	bl	8000b2c <__aeabi_dcmpun>
 8008eb2:	bb88      	cbnz	r0, 8008f18 <_printf_float+0xcc>
 8008eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eb8:	4b9a      	ldr	r3, [pc, #616]	; (8009124 <_printf_float+0x2d8>)
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	f7f7 fe17 	bl	8000af0 <__aeabi_dcmple>
 8008ec2:	bb48      	cbnz	r0, 8008f18 <_printf_float+0xcc>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f7f7 fe06 	bl	8000adc <__aeabi_dcmplt>
 8008ed0:	b110      	cbz	r0, 8008ed8 <_printf_float+0x8c>
 8008ed2:	232d      	movs	r3, #45	; 0x2d
 8008ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed8:	4a93      	ldr	r2, [pc, #588]	; (8009128 <_printf_float+0x2dc>)
 8008eda:	4b94      	ldr	r3, [pc, #592]	; (800912c <_printf_float+0x2e0>)
 8008edc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ee0:	bf94      	ite	ls
 8008ee2:	4690      	movls	r8, r2
 8008ee4:	4698      	movhi	r8, r3
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	9b05      	ldr	r3, [sp, #20]
 8008eec:	f023 0304 	bic.w	r3, r3, #4
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	f04f 0900 	mov.w	r9, #0
 8008ef6:	9700      	str	r7, [sp, #0]
 8008ef8:	4633      	mov	r3, r6
 8008efa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008efc:	4621      	mov	r1, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f9da 	bl	80092b8 <_printf_common>
 8008f04:	3001      	adds	r0, #1
 8008f06:	f040 8090 	bne.w	800902a <_printf_float+0x1de>
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	b00d      	add	sp, #52	; 0x34
 8008f10:	ecbd 8b02 	vpop	{d8}
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4649      	mov	r1, r9
 8008f20:	f7f7 fe04 	bl	8000b2c <__aeabi_dcmpun>
 8008f24:	b140      	cbz	r0, 8008f38 <_printf_float+0xec>
 8008f26:	464b      	mov	r3, r9
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	bfbc      	itt	lt
 8008f2c:	232d      	movlt	r3, #45	; 0x2d
 8008f2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f32:	4a7f      	ldr	r2, [pc, #508]	; (8009130 <_printf_float+0x2e4>)
 8008f34:	4b7f      	ldr	r3, [pc, #508]	; (8009134 <_printf_float+0x2e8>)
 8008f36:	e7d1      	b.n	8008edc <_printf_float+0x90>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f3e:	9206      	str	r2, [sp, #24]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	d13f      	bne.n	8008fc4 <_printf_float+0x178>
 8008f44:	2306      	movs	r3, #6
 8008f46:	6063      	str	r3, [r4, #4]
 8008f48:	9b05      	ldr	r3, [sp, #20]
 8008f4a:	6861      	ldr	r1, [r4, #4]
 8008f4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f50:	2300      	movs	r3, #0
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	ab0a      	add	r3, sp, #40	; 0x28
 8008f56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f5a:	ab09      	add	r3, sp, #36	; 0x24
 8008f5c:	ec49 8b10 	vmov	d0, r8, r9
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7ff fecf 	bl	8008d0c <__cvt>
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f72:	2b47      	cmp	r3, #71	; 0x47
 8008f74:	4680      	mov	r8, r0
 8008f76:	d108      	bne.n	8008f8a <_printf_float+0x13e>
 8008f78:	1cc8      	adds	r0, r1, #3
 8008f7a:	db02      	blt.n	8008f82 <_printf_float+0x136>
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	dd41      	ble.n	8009006 <_printf_float+0x1ba>
 8008f82:	f1ab 0302 	sub.w	r3, fp, #2
 8008f86:	fa5f fb83 	uxtb.w	fp, r3
 8008f8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f8e:	d820      	bhi.n	8008fd2 <_printf_float+0x186>
 8008f90:	3901      	subs	r1, #1
 8008f92:	465a      	mov	r2, fp
 8008f94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f98:	9109      	str	r1, [sp, #36]	; 0x24
 8008f9a:	f7ff ff19 	bl	8008dd0 <__exponent>
 8008f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa0:	1813      	adds	r3, r2, r0
 8008fa2:	2a01      	cmp	r2, #1
 8008fa4:	4681      	mov	r9, r0
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	dc02      	bgt.n	8008fb0 <_printf_float+0x164>
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	07d2      	lsls	r2, r2, #31
 8008fae:	d501      	bpl.n	8008fb4 <_printf_float+0x168>
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	6123      	str	r3, [r4, #16]
 8008fb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d09c      	beq.n	8008ef6 <_printf_float+0xaa>
 8008fbc:	232d      	movs	r3, #45	; 0x2d
 8008fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc2:	e798      	b.n	8008ef6 <_printf_float+0xaa>
 8008fc4:	9a06      	ldr	r2, [sp, #24]
 8008fc6:	2a47      	cmp	r2, #71	; 0x47
 8008fc8:	d1be      	bne.n	8008f48 <_printf_float+0xfc>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1bc      	bne.n	8008f48 <_printf_float+0xfc>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e7b9      	b.n	8008f46 <_printf_float+0xfa>
 8008fd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fd6:	d118      	bne.n	800900a <_printf_float+0x1be>
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	dd0b      	ble.n	8008ff6 <_printf_float+0x1aa>
 8008fde:	6121      	str	r1, [r4, #16]
 8008fe0:	b913      	cbnz	r3, 8008fe8 <_printf_float+0x19c>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	07d0      	lsls	r0, r2, #31
 8008fe6:	d502      	bpl.n	8008fee <_printf_float+0x1a2>
 8008fe8:	3301      	adds	r3, #1
 8008fea:	440b      	add	r3, r1
 8008fec:	6123      	str	r3, [r4, #16]
 8008fee:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ff0:	f04f 0900 	mov.w	r9, #0
 8008ff4:	e7de      	b.n	8008fb4 <_printf_float+0x168>
 8008ff6:	b913      	cbnz	r3, 8008ffe <_printf_float+0x1b2>
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	07d2      	lsls	r2, r2, #31
 8008ffc:	d501      	bpl.n	8009002 <_printf_float+0x1b6>
 8008ffe:	3302      	adds	r3, #2
 8009000:	e7f4      	b.n	8008fec <_printf_float+0x1a0>
 8009002:	2301      	movs	r3, #1
 8009004:	e7f2      	b.n	8008fec <_printf_float+0x1a0>
 8009006:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800900a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800900c:	4299      	cmp	r1, r3
 800900e:	db05      	blt.n	800901c <_printf_float+0x1d0>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	6121      	str	r1, [r4, #16]
 8009014:	07d8      	lsls	r0, r3, #31
 8009016:	d5ea      	bpl.n	8008fee <_printf_float+0x1a2>
 8009018:	1c4b      	adds	r3, r1, #1
 800901a:	e7e7      	b.n	8008fec <_printf_float+0x1a0>
 800901c:	2900      	cmp	r1, #0
 800901e:	bfd4      	ite	le
 8009020:	f1c1 0202 	rsble	r2, r1, #2
 8009024:	2201      	movgt	r2, #1
 8009026:	4413      	add	r3, r2
 8009028:	e7e0      	b.n	8008fec <_printf_float+0x1a0>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	055a      	lsls	r2, r3, #21
 800902e:	d407      	bmi.n	8009040 <_printf_float+0x1f4>
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	4642      	mov	r2, r8
 8009034:	4631      	mov	r1, r6
 8009036:	4628      	mov	r0, r5
 8009038:	47b8      	blx	r7
 800903a:	3001      	adds	r0, #1
 800903c:	d12c      	bne.n	8009098 <_printf_float+0x24c>
 800903e:	e764      	b.n	8008f0a <_printf_float+0xbe>
 8009040:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009044:	f240 80e0 	bls.w	8009208 <_printf_float+0x3bc>
 8009048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	f7f7 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009054:	2800      	cmp	r0, #0
 8009056:	d034      	beq.n	80090c2 <_printf_float+0x276>
 8009058:	4a37      	ldr	r2, [pc, #220]	; (8009138 <_printf_float+0x2ec>)
 800905a:	2301      	movs	r3, #1
 800905c:	4631      	mov	r1, r6
 800905e:	4628      	mov	r0, r5
 8009060:	47b8      	blx	r7
 8009062:	3001      	adds	r0, #1
 8009064:	f43f af51 	beq.w	8008f0a <_printf_float+0xbe>
 8009068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800906c:	429a      	cmp	r2, r3
 800906e:	db02      	blt.n	8009076 <_printf_float+0x22a>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	07d8      	lsls	r0, r3, #31
 8009074:	d510      	bpl.n	8009098 <_printf_float+0x24c>
 8009076:	ee18 3a10 	vmov	r3, s16
 800907a:	4652      	mov	r2, sl
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f af41 	beq.w	8008f0a <_printf_float+0xbe>
 8009088:	f04f 0800 	mov.w	r8, #0
 800908c:	f104 091a 	add.w	r9, r4, #26
 8009090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009092:	3b01      	subs	r3, #1
 8009094:	4543      	cmp	r3, r8
 8009096:	dc09      	bgt.n	80090ac <_printf_float+0x260>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	079b      	lsls	r3, r3, #30
 800909c:	f100 8107 	bmi.w	80092ae <_printf_float+0x462>
 80090a0:	68e0      	ldr	r0, [r4, #12]
 80090a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a4:	4298      	cmp	r0, r3
 80090a6:	bfb8      	it	lt
 80090a8:	4618      	movlt	r0, r3
 80090aa:	e730      	b.n	8008f0e <_printf_float+0xc2>
 80090ac:	2301      	movs	r3, #1
 80090ae:	464a      	mov	r2, r9
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	f43f af27 	beq.w	8008f0a <_printf_float+0xbe>
 80090bc:	f108 0801 	add.w	r8, r8, #1
 80090c0:	e7e6      	b.n	8009090 <_printf_float+0x244>
 80090c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc39      	bgt.n	800913c <_printf_float+0x2f0>
 80090c8:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <_printf_float+0x2ec>)
 80090ca:	2301      	movs	r3, #1
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f af19 	beq.w	8008f0a <_printf_float+0xbe>
 80090d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090dc:	4313      	orrs	r3, r2
 80090de:	d102      	bne.n	80090e6 <_printf_float+0x29a>
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	07d9      	lsls	r1, r3, #31
 80090e4:	d5d8      	bpl.n	8009098 <_printf_float+0x24c>
 80090e6:	ee18 3a10 	vmov	r3, s16
 80090ea:	4652      	mov	r2, sl
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f af09 	beq.w	8008f0a <_printf_float+0xbe>
 80090f8:	f04f 0900 	mov.w	r9, #0
 80090fc:	f104 0a1a 	add.w	sl, r4, #26
 8009100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009102:	425b      	negs	r3, r3
 8009104:	454b      	cmp	r3, r9
 8009106:	dc01      	bgt.n	800910c <_printf_float+0x2c0>
 8009108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910a:	e792      	b.n	8009032 <_printf_float+0x1e6>
 800910c:	2301      	movs	r3, #1
 800910e:	4652      	mov	r2, sl
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f aef7 	beq.w	8008f0a <_printf_float+0xbe>
 800911c:	f109 0901 	add.w	r9, r9, #1
 8009120:	e7ee      	b.n	8009100 <_printf_float+0x2b4>
 8009122:	bf00      	nop
 8009124:	7fefffff 	.word	0x7fefffff
 8009128:	0800c1f4 	.word	0x0800c1f4
 800912c:	0800c1f8 	.word	0x0800c1f8
 8009130:	0800c1fc 	.word	0x0800c1fc
 8009134:	0800c200 	.word	0x0800c200
 8009138:	0800c204 	.word	0x0800c204
 800913c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800913e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009140:	429a      	cmp	r2, r3
 8009142:	bfa8      	it	ge
 8009144:	461a      	movge	r2, r3
 8009146:	2a00      	cmp	r2, #0
 8009148:	4691      	mov	r9, r2
 800914a:	dc37      	bgt.n	80091bc <_printf_float+0x370>
 800914c:	f04f 0b00 	mov.w	fp, #0
 8009150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009154:	f104 021a 	add.w	r2, r4, #26
 8009158:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800915a:	9305      	str	r3, [sp, #20]
 800915c:	eba3 0309 	sub.w	r3, r3, r9
 8009160:	455b      	cmp	r3, fp
 8009162:	dc33      	bgt.n	80091cc <_printf_float+0x380>
 8009164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009168:	429a      	cmp	r2, r3
 800916a:	db3b      	blt.n	80091e4 <_printf_float+0x398>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	07da      	lsls	r2, r3, #31
 8009170:	d438      	bmi.n	80091e4 <_printf_float+0x398>
 8009172:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009176:	eba2 0903 	sub.w	r9, r2, r3
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	1ad2      	subs	r2, r2, r3
 800917e:	4591      	cmp	r9, r2
 8009180:	bfa8      	it	ge
 8009182:	4691      	movge	r9, r2
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	dc35      	bgt.n	80091f6 <_printf_float+0x3aa>
 800918a:	f04f 0800 	mov.w	r8, #0
 800918e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009192:	f104 0a1a 	add.w	sl, r4, #26
 8009196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	eba3 0309 	sub.w	r3, r3, r9
 80091a0:	4543      	cmp	r3, r8
 80091a2:	f77f af79 	ble.w	8009098 <_printf_float+0x24c>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f aeaa 	beq.w	8008f0a <_printf_float+0xbe>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	e7ec      	b.n	8009196 <_printf_float+0x34a>
 80091bc:	4613      	mov	r3, r2
 80091be:	4631      	mov	r1, r6
 80091c0:	4642      	mov	r2, r8
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	d1c0      	bne.n	800914c <_printf_float+0x300>
 80091ca:	e69e      	b.n	8008f0a <_printf_float+0xbe>
 80091cc:	2301      	movs	r3, #1
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	9205      	str	r2, [sp, #20]
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	f43f ae97 	beq.w	8008f0a <_printf_float+0xbe>
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	f10b 0b01 	add.w	fp, fp, #1
 80091e2:	e7b9      	b.n	8009158 <_printf_float+0x30c>
 80091e4:	ee18 3a10 	vmov	r3, s16
 80091e8:	4652      	mov	r2, sl
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	d1be      	bne.n	8009172 <_printf_float+0x326>
 80091f4:	e689      	b.n	8008f0a <_printf_float+0xbe>
 80091f6:	9a05      	ldr	r2, [sp, #20]
 80091f8:	464b      	mov	r3, r9
 80091fa:	4442      	add	r2, r8
 80091fc:	4631      	mov	r1, r6
 80091fe:	4628      	mov	r0, r5
 8009200:	47b8      	blx	r7
 8009202:	3001      	adds	r0, #1
 8009204:	d1c1      	bne.n	800918a <_printf_float+0x33e>
 8009206:	e680      	b.n	8008f0a <_printf_float+0xbe>
 8009208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800920a:	2a01      	cmp	r2, #1
 800920c:	dc01      	bgt.n	8009212 <_printf_float+0x3c6>
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d53a      	bpl.n	8009288 <_printf_float+0x43c>
 8009212:	2301      	movs	r3, #1
 8009214:	4642      	mov	r2, r8
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	f43f ae74 	beq.w	8008f0a <_printf_float+0xbe>
 8009222:	ee18 3a10 	vmov	r3, s16
 8009226:	4652      	mov	r2, sl
 8009228:	4631      	mov	r1, r6
 800922a:	4628      	mov	r0, r5
 800922c:	47b8      	blx	r7
 800922e:	3001      	adds	r0, #1
 8009230:	f43f ae6b 	beq.w	8008f0a <_printf_float+0xbe>
 8009234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009240:	f7f7 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009244:	b9d8      	cbnz	r0, 800927e <_printf_float+0x432>
 8009246:	f10a 33ff 	add.w	r3, sl, #4294967295
 800924a:	f108 0201 	add.w	r2, r8, #1
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d10e      	bne.n	8009276 <_printf_float+0x42a>
 8009258:	e657      	b.n	8008f0a <_printf_float+0xbe>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f ae50 	beq.w	8008f0a <_printf_float+0xbe>
 800926a:	f108 0801 	add.w	r8, r8, #1
 800926e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009270:	3b01      	subs	r3, #1
 8009272:	4543      	cmp	r3, r8
 8009274:	dcf1      	bgt.n	800925a <_printf_float+0x40e>
 8009276:	464b      	mov	r3, r9
 8009278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800927c:	e6da      	b.n	8009034 <_printf_float+0x1e8>
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	f104 0a1a 	add.w	sl, r4, #26
 8009286:	e7f2      	b.n	800926e <_printf_float+0x422>
 8009288:	2301      	movs	r3, #1
 800928a:	4642      	mov	r2, r8
 800928c:	e7df      	b.n	800924e <_printf_float+0x402>
 800928e:	2301      	movs	r3, #1
 8009290:	464a      	mov	r2, r9
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae36 	beq.w	8008f0a <_printf_float+0xbe>
 800929e:	f108 0801 	add.w	r8, r8, #1
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092a6:	1a5b      	subs	r3, r3, r1
 80092a8:	4543      	cmp	r3, r8
 80092aa:	dcf0      	bgt.n	800928e <_printf_float+0x442>
 80092ac:	e6f8      	b.n	80090a0 <_printf_float+0x254>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	f104 0919 	add.w	r9, r4, #25
 80092b6:	e7f4      	b.n	80092a2 <_printf_float+0x456>

080092b8 <_printf_common>:
 80092b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	4616      	mov	r6, r2
 80092be:	4699      	mov	r9, r3
 80092c0:	688a      	ldr	r2, [r1, #8]
 80092c2:	690b      	ldr	r3, [r1, #16]
 80092c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bfb8      	it	lt
 80092cc:	4613      	movlt	r3, r2
 80092ce:	6033      	str	r3, [r6, #0]
 80092d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092d4:	4607      	mov	r7, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b10a      	cbz	r2, 80092de <_printf_common+0x26>
 80092da:	3301      	adds	r3, #1
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	0699      	lsls	r1, r3, #26
 80092e2:	bf42      	ittt	mi
 80092e4:	6833      	ldrmi	r3, [r6, #0]
 80092e6:	3302      	addmi	r3, #2
 80092e8:	6033      	strmi	r3, [r6, #0]
 80092ea:	6825      	ldr	r5, [r4, #0]
 80092ec:	f015 0506 	ands.w	r5, r5, #6
 80092f0:	d106      	bne.n	8009300 <_printf_common+0x48>
 80092f2:	f104 0a19 	add.w	sl, r4, #25
 80092f6:	68e3      	ldr	r3, [r4, #12]
 80092f8:	6832      	ldr	r2, [r6, #0]
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	42ab      	cmp	r3, r5
 80092fe:	dc26      	bgt.n	800934e <_printf_common+0x96>
 8009300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009304:	1e13      	subs	r3, r2, #0
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	bf18      	it	ne
 800930a:	2301      	movne	r3, #1
 800930c:	0692      	lsls	r2, r2, #26
 800930e:	d42b      	bmi.n	8009368 <_printf_common+0xb0>
 8009310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009314:	4649      	mov	r1, r9
 8009316:	4638      	mov	r0, r7
 8009318:	47c0      	blx	r8
 800931a:	3001      	adds	r0, #1
 800931c:	d01e      	beq.n	800935c <_printf_common+0xa4>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	f003 0306 	and.w	r3, r3, #6
 8009326:	2b04      	cmp	r3, #4
 8009328:	bf02      	ittt	eq
 800932a:	68e5      	ldreq	r5, [r4, #12]
 800932c:	6833      	ldreq	r3, [r6, #0]
 800932e:	1aed      	subeq	r5, r5, r3
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	bf0c      	ite	eq
 8009334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009338:	2500      	movne	r5, #0
 800933a:	4293      	cmp	r3, r2
 800933c:	bfc4      	itt	gt
 800933e:	1a9b      	subgt	r3, r3, r2
 8009340:	18ed      	addgt	r5, r5, r3
 8009342:	2600      	movs	r6, #0
 8009344:	341a      	adds	r4, #26
 8009346:	42b5      	cmp	r5, r6
 8009348:	d11a      	bne.n	8009380 <_printf_common+0xc8>
 800934a:	2000      	movs	r0, #0
 800934c:	e008      	b.n	8009360 <_printf_common+0xa8>
 800934e:	2301      	movs	r3, #1
 8009350:	4652      	mov	r2, sl
 8009352:	4649      	mov	r1, r9
 8009354:	4638      	mov	r0, r7
 8009356:	47c0      	blx	r8
 8009358:	3001      	adds	r0, #1
 800935a:	d103      	bne.n	8009364 <_printf_common+0xac>
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009364:	3501      	adds	r5, #1
 8009366:	e7c6      	b.n	80092f6 <_printf_common+0x3e>
 8009368:	18e1      	adds	r1, r4, r3
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	2030      	movs	r0, #48	; 0x30
 800936e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009372:	4422      	add	r2, r4
 8009374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800937c:	3302      	adds	r3, #2
 800937e:	e7c7      	b.n	8009310 <_printf_common+0x58>
 8009380:	2301      	movs	r3, #1
 8009382:	4622      	mov	r2, r4
 8009384:	4649      	mov	r1, r9
 8009386:	4638      	mov	r0, r7
 8009388:	47c0      	blx	r8
 800938a:	3001      	adds	r0, #1
 800938c:	d0e6      	beq.n	800935c <_printf_common+0xa4>
 800938e:	3601      	adds	r6, #1
 8009390:	e7d9      	b.n	8009346 <_printf_common+0x8e>
	...

08009394 <_printf_i>:
 8009394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	7e0f      	ldrb	r7, [r1, #24]
 800939a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800939c:	2f78      	cmp	r7, #120	; 0x78
 800939e:	4691      	mov	r9, r2
 80093a0:	4680      	mov	r8, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	469a      	mov	sl, r3
 80093a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093aa:	d807      	bhi.n	80093bc <_printf_i+0x28>
 80093ac:	2f62      	cmp	r7, #98	; 0x62
 80093ae:	d80a      	bhi.n	80093c6 <_printf_i+0x32>
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f000 80d4 	beq.w	800955e <_printf_i+0x1ca>
 80093b6:	2f58      	cmp	r7, #88	; 0x58
 80093b8:	f000 80c0 	beq.w	800953c <_printf_i+0x1a8>
 80093bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093c4:	e03a      	b.n	800943c <_printf_i+0xa8>
 80093c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ca:	2b15      	cmp	r3, #21
 80093cc:	d8f6      	bhi.n	80093bc <_printf_i+0x28>
 80093ce:	a101      	add	r1, pc, #4	; (adr r1, 80093d4 <_printf_i+0x40>)
 80093d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093d4:	0800942d 	.word	0x0800942d
 80093d8:	08009441 	.word	0x08009441
 80093dc:	080093bd 	.word	0x080093bd
 80093e0:	080093bd 	.word	0x080093bd
 80093e4:	080093bd 	.word	0x080093bd
 80093e8:	080093bd 	.word	0x080093bd
 80093ec:	08009441 	.word	0x08009441
 80093f0:	080093bd 	.word	0x080093bd
 80093f4:	080093bd 	.word	0x080093bd
 80093f8:	080093bd 	.word	0x080093bd
 80093fc:	080093bd 	.word	0x080093bd
 8009400:	08009545 	.word	0x08009545
 8009404:	0800946d 	.word	0x0800946d
 8009408:	080094ff 	.word	0x080094ff
 800940c:	080093bd 	.word	0x080093bd
 8009410:	080093bd 	.word	0x080093bd
 8009414:	08009567 	.word	0x08009567
 8009418:	080093bd 	.word	0x080093bd
 800941c:	0800946d 	.word	0x0800946d
 8009420:	080093bd 	.word	0x080093bd
 8009424:	080093bd 	.word	0x080093bd
 8009428:	08009507 	.word	0x08009507
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	1d1a      	adds	r2, r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800943c:	2301      	movs	r3, #1
 800943e:	e09f      	b.n	8009580 <_printf_i+0x1ec>
 8009440:	6820      	ldr	r0, [r4, #0]
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	0607      	lsls	r7, r0, #24
 8009446:	f103 0104 	add.w	r1, r3, #4
 800944a:	6029      	str	r1, [r5, #0]
 800944c:	d501      	bpl.n	8009452 <_printf_i+0xbe>
 800944e:	681e      	ldr	r6, [r3, #0]
 8009450:	e003      	b.n	800945a <_printf_i+0xc6>
 8009452:	0646      	lsls	r6, r0, #25
 8009454:	d5fb      	bpl.n	800944e <_printf_i+0xba>
 8009456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800945a:	2e00      	cmp	r6, #0
 800945c:	da03      	bge.n	8009466 <_printf_i+0xd2>
 800945e:	232d      	movs	r3, #45	; 0x2d
 8009460:	4276      	negs	r6, r6
 8009462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009466:	485a      	ldr	r0, [pc, #360]	; (80095d0 <_printf_i+0x23c>)
 8009468:	230a      	movs	r3, #10
 800946a:	e012      	b.n	8009492 <_printf_i+0xfe>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	6820      	ldr	r0, [r4, #0]
 8009470:	1d19      	adds	r1, r3, #4
 8009472:	6029      	str	r1, [r5, #0]
 8009474:	0605      	lsls	r5, r0, #24
 8009476:	d501      	bpl.n	800947c <_printf_i+0xe8>
 8009478:	681e      	ldr	r6, [r3, #0]
 800947a:	e002      	b.n	8009482 <_printf_i+0xee>
 800947c:	0641      	lsls	r1, r0, #25
 800947e:	d5fb      	bpl.n	8009478 <_printf_i+0xe4>
 8009480:	881e      	ldrh	r6, [r3, #0]
 8009482:	4853      	ldr	r0, [pc, #332]	; (80095d0 <_printf_i+0x23c>)
 8009484:	2f6f      	cmp	r7, #111	; 0x6f
 8009486:	bf0c      	ite	eq
 8009488:	2308      	moveq	r3, #8
 800948a:	230a      	movne	r3, #10
 800948c:	2100      	movs	r1, #0
 800948e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009492:	6865      	ldr	r5, [r4, #4]
 8009494:	60a5      	str	r5, [r4, #8]
 8009496:	2d00      	cmp	r5, #0
 8009498:	bfa2      	ittt	ge
 800949a:	6821      	ldrge	r1, [r4, #0]
 800949c:	f021 0104 	bicge.w	r1, r1, #4
 80094a0:	6021      	strge	r1, [r4, #0]
 80094a2:	b90e      	cbnz	r6, 80094a8 <_printf_i+0x114>
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	d04b      	beq.n	8009540 <_printf_i+0x1ac>
 80094a8:	4615      	mov	r5, r2
 80094aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80094ae:	fb03 6711 	mls	r7, r3, r1, r6
 80094b2:	5dc7      	ldrb	r7, [r0, r7]
 80094b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094b8:	4637      	mov	r7, r6
 80094ba:	42bb      	cmp	r3, r7
 80094bc:	460e      	mov	r6, r1
 80094be:	d9f4      	bls.n	80094aa <_printf_i+0x116>
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d10b      	bne.n	80094dc <_printf_i+0x148>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	07de      	lsls	r6, r3, #31
 80094c8:	d508      	bpl.n	80094dc <_printf_i+0x148>
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	6861      	ldr	r1, [r4, #4]
 80094ce:	4299      	cmp	r1, r3
 80094d0:	bfde      	ittt	le
 80094d2:	2330      	movle	r3, #48	; 0x30
 80094d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094dc:	1b52      	subs	r2, r2, r5
 80094de:	6122      	str	r2, [r4, #16]
 80094e0:	f8cd a000 	str.w	sl, [sp]
 80094e4:	464b      	mov	r3, r9
 80094e6:	aa03      	add	r2, sp, #12
 80094e8:	4621      	mov	r1, r4
 80094ea:	4640      	mov	r0, r8
 80094ec:	f7ff fee4 	bl	80092b8 <_printf_common>
 80094f0:	3001      	adds	r0, #1
 80094f2:	d14a      	bne.n	800958a <_printf_i+0x1f6>
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	b004      	add	sp, #16
 80094fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	f043 0320 	orr.w	r3, r3, #32
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	4833      	ldr	r0, [pc, #204]	; (80095d4 <_printf_i+0x240>)
 8009508:	2778      	movs	r7, #120	; 0x78
 800950a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	6829      	ldr	r1, [r5, #0]
 8009512:	061f      	lsls	r7, r3, #24
 8009514:	f851 6b04 	ldr.w	r6, [r1], #4
 8009518:	d402      	bmi.n	8009520 <_printf_i+0x18c>
 800951a:	065f      	lsls	r7, r3, #25
 800951c:	bf48      	it	mi
 800951e:	b2b6      	uxthmi	r6, r6
 8009520:	07df      	lsls	r7, r3, #31
 8009522:	bf48      	it	mi
 8009524:	f043 0320 	orrmi.w	r3, r3, #32
 8009528:	6029      	str	r1, [r5, #0]
 800952a:	bf48      	it	mi
 800952c:	6023      	strmi	r3, [r4, #0]
 800952e:	b91e      	cbnz	r6, 8009538 <_printf_i+0x1a4>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	f023 0320 	bic.w	r3, r3, #32
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	2310      	movs	r3, #16
 800953a:	e7a7      	b.n	800948c <_printf_i+0xf8>
 800953c:	4824      	ldr	r0, [pc, #144]	; (80095d0 <_printf_i+0x23c>)
 800953e:	e7e4      	b.n	800950a <_printf_i+0x176>
 8009540:	4615      	mov	r5, r2
 8009542:	e7bd      	b.n	80094c0 <_printf_i+0x12c>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	6826      	ldr	r6, [r4, #0]
 8009548:	6961      	ldr	r1, [r4, #20]
 800954a:	1d18      	adds	r0, r3, #4
 800954c:	6028      	str	r0, [r5, #0]
 800954e:	0635      	lsls	r5, r6, #24
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	d501      	bpl.n	8009558 <_printf_i+0x1c4>
 8009554:	6019      	str	r1, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0x1ca>
 8009558:	0670      	lsls	r0, r6, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0x1c0>
 800955c:	8019      	strh	r1, [r3, #0]
 800955e:	2300      	movs	r3, #0
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	4615      	mov	r5, r2
 8009564:	e7bc      	b.n	80094e0 <_printf_i+0x14c>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	1d1a      	adds	r2, r3, #4
 800956a:	602a      	str	r2, [r5, #0]
 800956c:	681d      	ldr	r5, [r3, #0]
 800956e:	6862      	ldr	r2, [r4, #4]
 8009570:	2100      	movs	r1, #0
 8009572:	4628      	mov	r0, r5
 8009574:	f7f6 fe2c 	bl	80001d0 <memchr>
 8009578:	b108      	cbz	r0, 800957e <_printf_i+0x1ea>
 800957a:	1b40      	subs	r0, r0, r5
 800957c:	6060      	str	r0, [r4, #4]
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	2300      	movs	r3, #0
 8009584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009588:	e7aa      	b.n	80094e0 <_printf_i+0x14c>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	462a      	mov	r2, r5
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	47d0      	blx	sl
 8009594:	3001      	adds	r0, #1
 8009596:	d0ad      	beq.n	80094f4 <_printf_i+0x160>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	079b      	lsls	r3, r3, #30
 800959c:	d413      	bmi.n	80095c6 <_printf_i+0x232>
 800959e:	68e0      	ldr	r0, [r4, #12]
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	4298      	cmp	r0, r3
 80095a4:	bfb8      	it	lt
 80095a6:	4618      	movlt	r0, r3
 80095a8:	e7a6      	b.n	80094f8 <_printf_i+0x164>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4632      	mov	r2, r6
 80095ae:	4649      	mov	r1, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	47d0      	blx	sl
 80095b4:	3001      	adds	r0, #1
 80095b6:	d09d      	beq.n	80094f4 <_printf_i+0x160>
 80095b8:	3501      	adds	r5, #1
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	1a5b      	subs	r3, r3, r1
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	dcf2      	bgt.n	80095aa <_printf_i+0x216>
 80095c4:	e7eb      	b.n	800959e <_printf_i+0x20a>
 80095c6:	2500      	movs	r5, #0
 80095c8:	f104 0619 	add.w	r6, r4, #25
 80095cc:	e7f5      	b.n	80095ba <_printf_i+0x226>
 80095ce:	bf00      	nop
 80095d0:	0800c206 	.word	0x0800c206
 80095d4:	0800c217 	.word	0x0800c217

080095d8 <std>:
 80095d8:	2300      	movs	r3, #0
 80095da:	b510      	push	{r4, lr}
 80095dc:	4604      	mov	r4, r0
 80095de:	e9c0 3300 	strd	r3, r3, [r0]
 80095e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095e6:	6083      	str	r3, [r0, #8]
 80095e8:	8181      	strh	r1, [r0, #12]
 80095ea:	6643      	str	r3, [r0, #100]	; 0x64
 80095ec:	81c2      	strh	r2, [r0, #14]
 80095ee:	6183      	str	r3, [r0, #24]
 80095f0:	4619      	mov	r1, r3
 80095f2:	2208      	movs	r2, #8
 80095f4:	305c      	adds	r0, #92	; 0x5c
 80095f6:	f000 f914 	bl	8009822 <memset>
 80095fa:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <std+0x58>)
 80095fc:	6263      	str	r3, [r4, #36]	; 0x24
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <std+0x5c>)
 8009600:	62a3      	str	r3, [r4, #40]	; 0x28
 8009602:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <std+0x60>)
 8009604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <std+0x64>)
 8009608:	6323      	str	r3, [r4, #48]	; 0x30
 800960a:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <std+0x68>)
 800960c:	6224      	str	r4, [r4, #32]
 800960e:	429c      	cmp	r4, r3
 8009610:	d006      	beq.n	8009620 <std+0x48>
 8009612:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009616:	4294      	cmp	r4, r2
 8009618:	d002      	beq.n	8009620 <std+0x48>
 800961a:	33d0      	adds	r3, #208	; 0xd0
 800961c:	429c      	cmp	r4, r3
 800961e:	d105      	bne.n	800962c <std+0x54>
 8009620:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009628:	f000 b978 	b.w	800991c <__retarget_lock_init_recursive>
 800962c:	bd10      	pop	{r4, pc}
 800962e:	bf00      	nop
 8009630:	0800979d 	.word	0x0800979d
 8009634:	080097bf 	.word	0x080097bf
 8009638:	080097f7 	.word	0x080097f7
 800963c:	0800981b 	.word	0x0800981b
 8009640:	20004710 	.word	0x20004710

08009644 <stdio_exit_handler>:
 8009644:	4a02      	ldr	r2, [pc, #8]	; (8009650 <stdio_exit_handler+0xc>)
 8009646:	4903      	ldr	r1, [pc, #12]	; (8009654 <stdio_exit_handler+0x10>)
 8009648:	4803      	ldr	r0, [pc, #12]	; (8009658 <stdio_exit_handler+0x14>)
 800964a:	f000 b869 	b.w	8009720 <_fwalk_sglue>
 800964e:	bf00      	nop
 8009650:	200000a8 	.word	0x200000a8
 8009654:	0800b2f9 	.word	0x0800b2f9
 8009658:	200000b4 	.word	0x200000b4

0800965c <cleanup_stdio>:
 800965c:	6841      	ldr	r1, [r0, #4]
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <cleanup_stdio+0x34>)
 8009660:	4299      	cmp	r1, r3
 8009662:	b510      	push	{r4, lr}
 8009664:	4604      	mov	r4, r0
 8009666:	d001      	beq.n	800966c <cleanup_stdio+0x10>
 8009668:	f001 fe46 	bl	800b2f8 <_fflush_r>
 800966c:	68a1      	ldr	r1, [r4, #8]
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <cleanup_stdio+0x38>)
 8009670:	4299      	cmp	r1, r3
 8009672:	d002      	beq.n	800967a <cleanup_stdio+0x1e>
 8009674:	4620      	mov	r0, r4
 8009676:	f001 fe3f 	bl	800b2f8 <_fflush_r>
 800967a:	68e1      	ldr	r1, [r4, #12]
 800967c:	4b06      	ldr	r3, [pc, #24]	; (8009698 <cleanup_stdio+0x3c>)
 800967e:	4299      	cmp	r1, r3
 8009680:	d004      	beq.n	800968c <cleanup_stdio+0x30>
 8009682:	4620      	mov	r0, r4
 8009684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009688:	f001 be36 	b.w	800b2f8 <_fflush_r>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop
 8009690:	20004710 	.word	0x20004710
 8009694:	20004778 	.word	0x20004778
 8009698:	200047e0 	.word	0x200047e0

0800969c <global_stdio_init.part.0>:
 800969c:	b510      	push	{r4, lr}
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <global_stdio_init.part.0+0x30>)
 80096a0:	4c0b      	ldr	r4, [pc, #44]	; (80096d0 <global_stdio_init.part.0+0x34>)
 80096a2:	4a0c      	ldr	r2, [pc, #48]	; (80096d4 <global_stdio_init.part.0+0x38>)
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	4620      	mov	r0, r4
 80096a8:	2200      	movs	r2, #0
 80096aa:	2104      	movs	r1, #4
 80096ac:	f7ff ff94 	bl	80095d8 <std>
 80096b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096b4:	2201      	movs	r2, #1
 80096b6:	2109      	movs	r1, #9
 80096b8:	f7ff ff8e 	bl	80095d8 <std>
 80096bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096c0:	2202      	movs	r2, #2
 80096c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c6:	2112      	movs	r1, #18
 80096c8:	f7ff bf86 	b.w	80095d8 <std>
 80096cc:	20004848 	.word	0x20004848
 80096d0:	20004710 	.word	0x20004710
 80096d4:	08009645 	.word	0x08009645

080096d8 <__sfp_lock_acquire>:
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <__sfp_lock_acquire+0x8>)
 80096da:	f000 b920 	b.w	800991e <__retarget_lock_acquire_recursive>
 80096de:	bf00      	nop
 80096e0:	20004851 	.word	0x20004851

080096e4 <__sfp_lock_release>:
 80096e4:	4801      	ldr	r0, [pc, #4]	; (80096ec <__sfp_lock_release+0x8>)
 80096e6:	f000 b91b 	b.w	8009920 <__retarget_lock_release_recursive>
 80096ea:	bf00      	nop
 80096ec:	20004851 	.word	0x20004851

080096f0 <__sinit>:
 80096f0:	b510      	push	{r4, lr}
 80096f2:	4604      	mov	r4, r0
 80096f4:	f7ff fff0 	bl	80096d8 <__sfp_lock_acquire>
 80096f8:	6a23      	ldr	r3, [r4, #32]
 80096fa:	b11b      	cbz	r3, 8009704 <__sinit+0x14>
 80096fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009700:	f7ff bff0 	b.w	80096e4 <__sfp_lock_release>
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <__sinit+0x28>)
 8009706:	6223      	str	r3, [r4, #32]
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <__sinit+0x2c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1f5      	bne.n	80096fc <__sinit+0xc>
 8009710:	f7ff ffc4 	bl	800969c <global_stdio_init.part.0>
 8009714:	e7f2      	b.n	80096fc <__sinit+0xc>
 8009716:	bf00      	nop
 8009718:	0800965d 	.word	0x0800965d
 800971c:	20004848 	.word	0x20004848

08009720 <_fwalk_sglue>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4607      	mov	r7, r0
 8009726:	4688      	mov	r8, r1
 8009728:	4614      	mov	r4, r2
 800972a:	2600      	movs	r6, #0
 800972c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009730:	f1b9 0901 	subs.w	r9, r9, #1
 8009734:	d505      	bpl.n	8009742 <_fwalk_sglue+0x22>
 8009736:	6824      	ldr	r4, [r4, #0]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d1f7      	bne.n	800972c <_fwalk_sglue+0xc>
 800973c:	4630      	mov	r0, r6
 800973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d907      	bls.n	8009758 <_fwalk_sglue+0x38>
 8009748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800974c:	3301      	adds	r3, #1
 800974e:	d003      	beq.n	8009758 <_fwalk_sglue+0x38>
 8009750:	4629      	mov	r1, r5
 8009752:	4638      	mov	r0, r7
 8009754:	47c0      	blx	r8
 8009756:	4306      	orrs	r6, r0
 8009758:	3568      	adds	r5, #104	; 0x68
 800975a:	e7e9      	b.n	8009730 <_fwalk_sglue+0x10>

0800975c <siprintf>:
 800975c:	b40e      	push	{r1, r2, r3}
 800975e:	b500      	push	{lr}
 8009760:	b09c      	sub	sp, #112	; 0x70
 8009762:	ab1d      	add	r3, sp, #116	; 0x74
 8009764:	9002      	str	r0, [sp, #8]
 8009766:	9006      	str	r0, [sp, #24]
 8009768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800976c:	4809      	ldr	r0, [pc, #36]	; (8009794 <siprintf+0x38>)
 800976e:	9107      	str	r1, [sp, #28]
 8009770:	9104      	str	r1, [sp, #16]
 8009772:	4909      	ldr	r1, [pc, #36]	; (8009798 <siprintf+0x3c>)
 8009774:	f853 2b04 	ldr.w	r2, [r3], #4
 8009778:	9105      	str	r1, [sp, #20]
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	a902      	add	r1, sp, #8
 8009780:	f001 fc36 	bl	800aff0 <_svfiprintf_r>
 8009784:	9b02      	ldr	r3, [sp, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	b01c      	add	sp, #112	; 0x70
 800978c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009790:	b003      	add	sp, #12
 8009792:	4770      	bx	lr
 8009794:	20000100 	.word	0x20000100
 8009798:	ffff0208 	.word	0xffff0208

0800979c <__sread>:
 800979c:	b510      	push	{r4, lr}
 800979e:	460c      	mov	r4, r1
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	f000 f86c 	bl	8009880 <_read_r>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	bfab      	itete	ge
 80097ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ae:	89a3      	ldrhlt	r3, [r4, #12]
 80097b0:	181b      	addge	r3, r3, r0
 80097b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097b6:	bfac      	ite	ge
 80097b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ba:	81a3      	strhlt	r3, [r4, #12]
 80097bc:	bd10      	pop	{r4, pc}

080097be <__swrite>:
 80097be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	461f      	mov	r7, r3
 80097c4:	898b      	ldrh	r3, [r1, #12]
 80097c6:	05db      	lsls	r3, r3, #23
 80097c8:	4605      	mov	r5, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4616      	mov	r6, r2
 80097ce:	d505      	bpl.n	80097dc <__swrite+0x1e>
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	2302      	movs	r3, #2
 80097d6:	2200      	movs	r2, #0
 80097d8:	f000 f840 	bl	800985c <_lseek_r>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	4632      	mov	r2, r6
 80097ea:	463b      	mov	r3, r7
 80097ec:	4628      	mov	r0, r5
 80097ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	f000 b857 	b.w	80098a4 <_write_r>

080097f6 <__sseek>:
 80097f6:	b510      	push	{r4, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fe:	f000 f82d 	bl	800985c <_lseek_r>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	bf15      	itete	ne
 8009808:	6560      	strne	r0, [r4, #84]	; 0x54
 800980a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800980e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009812:	81a3      	strheq	r3, [r4, #12]
 8009814:	bf18      	it	ne
 8009816:	81a3      	strhne	r3, [r4, #12]
 8009818:	bd10      	pop	{r4, pc}

0800981a <__sclose>:
 800981a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981e:	f000 b80d 	b.w	800983c <_close_r>

08009822 <memset>:
 8009822:	4402      	add	r2, r0
 8009824:	4603      	mov	r3, r0
 8009826:	4293      	cmp	r3, r2
 8009828:	d100      	bne.n	800982c <memset+0xa>
 800982a:	4770      	bx	lr
 800982c:	f803 1b01 	strb.w	r1, [r3], #1
 8009830:	e7f9      	b.n	8009826 <memset+0x4>
	...

08009834 <_localeconv_r>:
 8009834:	4800      	ldr	r0, [pc, #0]	; (8009838 <_localeconv_r+0x4>)
 8009836:	4770      	bx	lr
 8009838:	200001f4 	.word	0x200001f4

0800983c <_close_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4d06      	ldr	r5, [pc, #24]	; (8009858 <_close_r+0x1c>)
 8009840:	2300      	movs	r3, #0
 8009842:	4604      	mov	r4, r0
 8009844:	4608      	mov	r0, r1
 8009846:	602b      	str	r3, [r5, #0]
 8009848:	f7f9 fe89 	bl	800355e <_close>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_close_r+0x1a>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_close_r+0x1a>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	2000484c 	.word	0x2000484c

0800985c <_lseek_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	; (800987c <_lseek_r+0x20>)
 8009860:	4604      	mov	r4, r0
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	2200      	movs	r2, #0
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f7f9 fe9e 	bl	80035ac <_lseek>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_lseek_r+0x1e>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_lseek_r+0x1e>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	2000484c 	.word	0x2000484c

08009880 <_read_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d07      	ldr	r5, [pc, #28]	; (80098a0 <_read_r+0x20>)
 8009884:	4604      	mov	r4, r0
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	2200      	movs	r2, #0
 800988c:	602a      	str	r2, [r5, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f7f9 fe2c 	bl	80034ec <_read>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_read_r+0x1e>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_read_r+0x1e>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	2000484c 	.word	0x2000484c

080098a4 <_write_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	; (80098c4 <_write_r+0x20>)
 80098a8:	4604      	mov	r4, r0
 80098aa:	4608      	mov	r0, r1
 80098ac:	4611      	mov	r1, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f7f9 fe37 	bl	8003526 <_write>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_write_r+0x1e>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_write_r+0x1e>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	2000484c 	.word	0x2000484c

080098c8 <__errno>:
 80098c8:	4b01      	ldr	r3, [pc, #4]	; (80098d0 <__errno+0x8>)
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000100 	.word	0x20000100

080098d4 <__libc_init_array>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4d0d      	ldr	r5, [pc, #52]	; (800990c <__libc_init_array+0x38>)
 80098d8:	4c0d      	ldr	r4, [pc, #52]	; (8009910 <__libc_init_array+0x3c>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	2600      	movs	r6, #0
 80098e0:	42a6      	cmp	r6, r4
 80098e2:	d109      	bne.n	80098f8 <__libc_init_array+0x24>
 80098e4:	4d0b      	ldr	r5, [pc, #44]	; (8009914 <__libc_init_array+0x40>)
 80098e6:	4c0c      	ldr	r4, [pc, #48]	; (8009918 <__libc_init_array+0x44>)
 80098e8:	f002 fc14 	bl	800c114 <_init>
 80098ec:	1b64      	subs	r4, r4, r5
 80098ee:	10a4      	asrs	r4, r4, #2
 80098f0:	2600      	movs	r6, #0
 80098f2:	42a6      	cmp	r6, r4
 80098f4:	d105      	bne.n	8009902 <__libc_init_array+0x2e>
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fc:	4798      	blx	r3
 80098fe:	3601      	adds	r6, #1
 8009900:	e7ee      	b.n	80098e0 <__libc_init_array+0xc>
 8009902:	f855 3b04 	ldr.w	r3, [r5], #4
 8009906:	4798      	blx	r3
 8009908:	3601      	adds	r6, #1
 800990a:	e7f2      	b.n	80098f2 <__libc_init_array+0x1e>
 800990c:	0800c5e0 	.word	0x0800c5e0
 8009910:	0800c5e0 	.word	0x0800c5e0
 8009914:	0800c5e0 	.word	0x0800c5e0
 8009918:	0800c5e4 	.word	0x0800c5e4

0800991c <__retarget_lock_init_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_acquire_recursive>:
 800991e:	4770      	bx	lr

08009920 <__retarget_lock_release_recursive>:
 8009920:	4770      	bx	lr

08009922 <strcpy>:
 8009922:	4603      	mov	r3, r0
 8009924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009928:	f803 2b01 	strb.w	r2, [r3], #1
 800992c:	2a00      	cmp	r2, #0
 800992e:	d1f9      	bne.n	8009924 <strcpy+0x2>
 8009930:	4770      	bx	lr

08009932 <memcpy>:
 8009932:	440a      	add	r2, r1
 8009934:	4291      	cmp	r1, r2
 8009936:	f100 33ff 	add.w	r3, r0, #4294967295
 800993a:	d100      	bne.n	800993e <memcpy+0xc>
 800993c:	4770      	bx	lr
 800993e:	b510      	push	{r4, lr}
 8009940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009948:	4291      	cmp	r1, r2
 800994a:	d1f9      	bne.n	8009940 <memcpy+0xe>
 800994c:	bd10      	pop	{r4, pc}

0800994e <quorem>:
 800994e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009952:	6903      	ldr	r3, [r0, #16]
 8009954:	690c      	ldr	r4, [r1, #16]
 8009956:	42a3      	cmp	r3, r4
 8009958:	4607      	mov	r7, r0
 800995a:	db7e      	blt.n	8009a5a <quorem+0x10c>
 800995c:	3c01      	subs	r4, #1
 800995e:	f101 0814 	add.w	r8, r1, #20
 8009962:	f100 0514 	add.w	r5, r0, #20
 8009966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009974:	3301      	adds	r3, #1
 8009976:	429a      	cmp	r2, r3
 8009978:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800997c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009980:	fbb2 f6f3 	udiv	r6, r2, r3
 8009984:	d331      	bcc.n	80099ea <quorem+0x9c>
 8009986:	f04f 0e00 	mov.w	lr, #0
 800998a:	4640      	mov	r0, r8
 800998c:	46ac      	mov	ip, r5
 800998e:	46f2      	mov	sl, lr
 8009990:	f850 2b04 	ldr.w	r2, [r0], #4
 8009994:	b293      	uxth	r3, r2
 8009996:	fb06 e303 	mla	r3, r6, r3, lr
 800999a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800999e:	0c1a      	lsrs	r2, r3, #16
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	ebaa 0303 	sub.w	r3, sl, r3
 80099a6:	f8dc a000 	ldr.w	sl, [ip]
 80099aa:	fa13 f38a 	uxtah	r3, r3, sl
 80099ae:	fb06 220e 	mla	r2, r6, lr, r2
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099ba:	b292      	uxth	r2, r2
 80099bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80099c8:	4581      	cmp	r9, r0
 80099ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ce:	f84c 3b04 	str.w	r3, [ip], #4
 80099d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099d6:	d2db      	bcs.n	8009990 <quorem+0x42>
 80099d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80099dc:	b92b      	cbnz	r3, 80099ea <quorem+0x9c>
 80099de:	9b01      	ldr	r3, [sp, #4]
 80099e0:	3b04      	subs	r3, #4
 80099e2:	429d      	cmp	r5, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	d32c      	bcc.n	8009a42 <quorem+0xf4>
 80099e8:	613c      	str	r4, [r7, #16]
 80099ea:	4638      	mov	r0, r7
 80099ec:	f001 f9a6 	bl	800ad3c <__mcmp>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	db22      	blt.n	8009a3a <quorem+0xec>
 80099f4:	3601      	adds	r6, #1
 80099f6:	4629      	mov	r1, r5
 80099f8:	2000      	movs	r0, #0
 80099fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80099fe:	f8d1 c000 	ldr.w	ip, [r1]
 8009a02:	b293      	uxth	r3, r2
 8009a04:	1ac3      	subs	r3, r0, r3
 8009a06:	0c12      	lsrs	r2, r2, #16
 8009a08:	fa13 f38c 	uxtah	r3, r3, ip
 8009a0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a1a:	45c1      	cmp	r9, r8
 8009a1c:	f841 3b04 	str.w	r3, [r1], #4
 8009a20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a24:	d2e9      	bcs.n	80099fa <quorem+0xac>
 8009a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a2e:	b922      	cbnz	r2, 8009a3a <quorem+0xec>
 8009a30:	3b04      	subs	r3, #4
 8009a32:	429d      	cmp	r5, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	d30a      	bcc.n	8009a4e <quorem+0x100>
 8009a38:	613c      	str	r4, [r7, #16]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	b003      	add	sp, #12
 8009a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	3b04      	subs	r3, #4
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d1ce      	bne.n	80099e8 <quorem+0x9a>
 8009a4a:	3c01      	subs	r4, #1
 8009a4c:	e7c9      	b.n	80099e2 <quorem+0x94>
 8009a4e:	6812      	ldr	r2, [r2, #0]
 8009a50:	3b04      	subs	r3, #4
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d1f0      	bne.n	8009a38 <quorem+0xea>
 8009a56:	3c01      	subs	r4, #1
 8009a58:	e7eb      	b.n	8009a32 <quorem+0xe4>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e7ee      	b.n	8009a3c <quorem+0xee>
	...

08009a60 <_dtoa_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b04 	vpush	{d8-d9}
 8009a68:	69c5      	ldr	r5, [r0, #28]
 8009a6a:	b093      	sub	sp, #76	; 0x4c
 8009a6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a70:	ec57 6b10 	vmov	r6, r7, d0
 8009a74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a78:	9107      	str	r1, [sp, #28]
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a80:	b975      	cbnz	r5, 8009aa0 <_dtoa_r+0x40>
 8009a82:	2010      	movs	r0, #16
 8009a84:	f000 fe2a 	bl	800a6dc <malloc>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	61e0      	str	r0, [r4, #28]
 8009a8c:	b920      	cbnz	r0, 8009a98 <_dtoa_r+0x38>
 8009a8e:	4bae      	ldr	r3, [pc, #696]	; (8009d48 <_dtoa_r+0x2e8>)
 8009a90:	21ef      	movs	r1, #239	; 0xef
 8009a92:	48ae      	ldr	r0, [pc, #696]	; (8009d4c <_dtoa_r+0x2ec>)
 8009a94:	f001 fc82 	bl	800b39c <__assert_func>
 8009a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a9c:	6005      	str	r5, [r0, #0]
 8009a9e:	60c5      	str	r5, [r0, #12]
 8009aa0:	69e3      	ldr	r3, [r4, #28]
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	b151      	cbz	r1, 8009abc <_dtoa_r+0x5c>
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	604a      	str	r2, [r1, #4]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4093      	lsls	r3, r2
 8009aae:	608b      	str	r3, [r1, #8]
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 ff07 	bl	800a8c4 <_Bfree>
 8009ab6:	69e3      	ldr	r3, [r4, #28]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	1e3b      	subs	r3, r7, #0
 8009abe:	bfbb      	ittet	lt
 8009ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ac4:	9303      	strlt	r3, [sp, #12]
 8009ac6:	2300      	movge	r3, #0
 8009ac8:	2201      	movlt	r2, #1
 8009aca:	bfac      	ite	ge
 8009acc:	f8c8 3000 	strge.w	r3, [r8]
 8009ad0:	f8c8 2000 	strlt.w	r2, [r8]
 8009ad4:	4b9e      	ldr	r3, [pc, #632]	; (8009d50 <_dtoa_r+0x2f0>)
 8009ad6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ada:	ea33 0308 	bics.w	r3, r3, r8
 8009ade:	d11b      	bne.n	8009b18 <_dtoa_r+0xb8>
 8009ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009aec:	4333      	orrs	r3, r6
 8009aee:	f000 8593 	beq.w	800a618 <_dtoa_r+0xbb8>
 8009af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af4:	b963      	cbnz	r3, 8009b10 <_dtoa_r+0xb0>
 8009af6:	4b97      	ldr	r3, [pc, #604]	; (8009d54 <_dtoa_r+0x2f4>)
 8009af8:	e027      	b.n	8009b4a <_dtoa_r+0xea>
 8009afa:	4b97      	ldr	r3, [pc, #604]	; (8009d58 <_dtoa_r+0x2f8>)
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	9800      	ldr	r0, [sp, #0]
 8009b06:	b013      	add	sp, #76	; 0x4c
 8009b08:	ecbd 8b04 	vpop	{d8-d9}
 8009b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b10:	4b90      	ldr	r3, [pc, #576]	; (8009d54 <_dtoa_r+0x2f4>)
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	3303      	adds	r3, #3
 8009b16:	e7f3      	b.n	8009b00 <_dtoa_r+0xa0>
 8009b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	ec51 0b17 	vmov	r0, r1, d7
 8009b22:	eeb0 8a47 	vmov.f32	s16, s14
 8009b26:	eef0 8a67 	vmov.f32	s17, s15
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f7f6 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b30:	4681      	mov	r9, r0
 8009b32:	b160      	cbz	r0, 8009b4e <_dtoa_r+0xee>
 8009b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b36:	2301      	movs	r3, #1
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 8568 	beq.w	800a612 <_dtoa_r+0xbb2>
 8009b42:	4b86      	ldr	r3, [pc, #536]	; (8009d5c <_dtoa_r+0x2fc>)
 8009b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	e7da      	b.n	8009b04 <_dtoa_r+0xa4>
 8009b4e:	aa10      	add	r2, sp, #64	; 0x40
 8009b50:	a911      	add	r1, sp, #68	; 0x44
 8009b52:	4620      	mov	r0, r4
 8009b54:	eeb0 0a48 	vmov.f32	s0, s16
 8009b58:	eef0 0a68 	vmov.f32	s1, s17
 8009b5c:	f001 f994 	bl	800ae88 <__d2b>
 8009b60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009b64:	4682      	mov	sl, r0
 8009b66:	2d00      	cmp	r5, #0
 8009b68:	d07f      	beq.n	8009c6a <_dtoa_r+0x20a>
 8009b6a:	ee18 3a90 	vmov	r3, s17
 8009b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b76:	ec51 0b18 	vmov	r0, r1, d8
 8009b7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b86:	4619      	mov	r1, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <_dtoa_r+0x300>)
 8009b8c:	f7f6 fb7c 	bl	8000288 <__aeabi_dsub>
 8009b90:	a367      	add	r3, pc, #412	; (adr r3, 8009d30 <_dtoa_r+0x2d0>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	a367      	add	r3, pc, #412	; (adr r3, 8009d38 <_dtoa_r+0x2d8>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fb74 	bl	800028c <__adddf3>
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	460f      	mov	r7, r1
 8009baa:	f7f6 fcbb 	bl	8000524 <__aeabi_i2d>
 8009bae:	a364      	add	r3, pc, #400	; (adr r3, 8009d40 <_dtoa_r+0x2e0>)
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	f7f6 fb64 	bl	800028c <__adddf3>
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	f7f6 ffc6 	bl	8000b58 <__aeabi_d2iz>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4683      	mov	fp, r0
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	f7f6 ff81 	bl	8000adc <__aeabi_dcmplt>
 8009bda:	b148      	cbz	r0, 8009bf0 <_dtoa_r+0x190>
 8009bdc:	4658      	mov	r0, fp
 8009bde:	f7f6 fca1 	bl	8000524 <__aeabi_i2d>
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	f7f6 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bea:	b908      	cbnz	r0, 8009bf0 <_dtoa_r+0x190>
 8009bec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bf0:	f1bb 0f16 	cmp.w	fp, #22
 8009bf4:	d857      	bhi.n	8009ca6 <_dtoa_r+0x246>
 8009bf6:	4b5b      	ldr	r3, [pc, #364]	; (8009d64 <_dtoa_r+0x304>)
 8009bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	ec51 0b18 	vmov	r0, r1, d8
 8009c04:	f7f6 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d04e      	beq.n	8009caa <_dtoa_r+0x24a>
 8009c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c10:	2300      	movs	r3, #0
 8009c12:	930c      	str	r3, [sp, #48]	; 0x30
 8009c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c16:	1b5b      	subs	r3, r3, r5
 8009c18:	1e5a      	subs	r2, r3, #1
 8009c1a:	bf45      	ittet	mi
 8009c1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009c20:	9305      	strmi	r3, [sp, #20]
 8009c22:	2300      	movpl	r3, #0
 8009c24:	2300      	movmi	r3, #0
 8009c26:	9206      	str	r2, [sp, #24]
 8009c28:	bf54      	ite	pl
 8009c2a:	9305      	strpl	r3, [sp, #20]
 8009c2c:	9306      	strmi	r3, [sp, #24]
 8009c2e:	f1bb 0f00 	cmp.w	fp, #0
 8009c32:	db3c      	blt.n	8009cae <_dtoa_r+0x24e>
 8009c34:	9b06      	ldr	r3, [sp, #24]
 8009c36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009c3a:	445b      	add	r3, fp
 8009c3c:	9306      	str	r3, [sp, #24]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9308      	str	r3, [sp, #32]
 8009c42:	9b07      	ldr	r3, [sp, #28]
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	d868      	bhi.n	8009d1a <_dtoa_r+0x2ba>
 8009c48:	2b05      	cmp	r3, #5
 8009c4a:	bfc4      	itt	gt
 8009c4c:	3b04      	subgt	r3, #4
 8009c4e:	9307      	strgt	r3, [sp, #28]
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	f1a3 0302 	sub.w	r3, r3, #2
 8009c56:	bfcc      	ite	gt
 8009c58:	2500      	movgt	r5, #0
 8009c5a:	2501      	movle	r5, #1
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	f200 8085 	bhi.w	8009d6c <_dtoa_r+0x30c>
 8009c62:	e8df f003 	tbb	[pc, r3]
 8009c66:	3b2e      	.short	0x3b2e
 8009c68:	5839      	.short	0x5839
 8009c6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c6e:	441d      	add	r5, r3
 8009c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	bfc1      	itttt	gt
 8009c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c88:	bfd6      	itet	le
 8009c8a:	f1c3 0320 	rsble	r3, r3, #32
 8009c8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c92:	fa06 f003 	lslle.w	r0, r6, r3
 8009c96:	f7f6 fc35 	bl	8000504 <__aeabi_ui2d>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ca0:	3d01      	subs	r5, #1
 8009ca2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ca4:	e76f      	b.n	8009b86 <_dtoa_r+0x126>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7b3      	b.n	8009c12 <_dtoa_r+0x1b2>
 8009caa:	900c      	str	r0, [sp, #48]	; 0x30
 8009cac:	e7b2      	b.n	8009c14 <_dtoa_r+0x1b4>
 8009cae:	9b05      	ldr	r3, [sp, #20]
 8009cb0:	eba3 030b 	sub.w	r3, r3, fp
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	f1cb 0300 	rsb	r3, fp, #0
 8009cba:	9308      	str	r3, [sp, #32]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cc0:	e7bf      	b.n	8009c42 <_dtoa_r+0x1e2>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dc52      	bgt.n	8009d72 <_dtoa_r+0x312>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8009cd6:	e00b      	b.n	8009cf0 <_dtoa_r+0x290>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e7f3      	b.n	8009cc4 <_dtoa_r+0x264>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce2:	445b      	add	r3, fp
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	bfb8      	it	lt
 8009cee:	2301      	movlt	r3, #1
 8009cf0:	69e0      	ldr	r0, [r4, #28]
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	2204      	movs	r2, #4
 8009cf6:	f102 0614 	add.w	r6, r2, #20
 8009cfa:	429e      	cmp	r6, r3
 8009cfc:	d93d      	bls.n	8009d7a <_dtoa_r+0x31a>
 8009cfe:	6041      	str	r1, [r0, #4]
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 fd9f 	bl	800a844 <_Balloc>
 8009d06:	9000      	str	r0, [sp, #0]
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d139      	bne.n	8009d80 <_dtoa_r+0x320>
 8009d0c:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <_dtoa_r+0x308>)
 8009d0e:	4602      	mov	r2, r0
 8009d10:	f240 11af 	movw	r1, #431	; 0x1af
 8009d14:	e6bd      	b.n	8009a92 <_dtoa_r+0x32>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e7e1      	b.n	8009cde <_dtoa_r+0x27e>
 8009d1a:	2501      	movs	r5, #1
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	9509      	str	r5, [sp, #36]	; 0x24
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2312      	movs	r3, #18
 8009d2e:	e7d1      	b.n	8009cd4 <_dtoa_r+0x274>
 8009d30:	636f4361 	.word	0x636f4361
 8009d34:	3fd287a7 	.word	0x3fd287a7
 8009d38:	8b60c8b3 	.word	0x8b60c8b3
 8009d3c:	3fc68a28 	.word	0x3fc68a28
 8009d40:	509f79fb 	.word	0x509f79fb
 8009d44:	3fd34413 	.word	0x3fd34413
 8009d48:	0800c235 	.word	0x0800c235
 8009d4c:	0800c24c 	.word	0x0800c24c
 8009d50:	7ff00000 	.word	0x7ff00000
 8009d54:	0800c231 	.word	0x0800c231
 8009d58:	0800c228 	.word	0x0800c228
 8009d5c:	0800c205 	.word	0x0800c205
 8009d60:	3ff80000 	.word	0x3ff80000
 8009d64:	0800c338 	.word	0x0800c338
 8009d68:	0800c2a4 	.word	0x0800c2a4
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d70:	e7d7      	b.n	8009d22 <_dtoa_r+0x2c2>
 8009d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	e7ba      	b.n	8009cf0 <_dtoa_r+0x290>
 8009d7a:	3101      	adds	r1, #1
 8009d7c:	0052      	lsls	r2, r2, #1
 8009d7e:	e7ba      	b.n	8009cf6 <_dtoa_r+0x296>
 8009d80:	69e3      	ldr	r3, [r4, #28]
 8009d82:	9a00      	ldr	r2, [sp, #0]
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	2b0e      	cmp	r3, #14
 8009d8a:	f200 80a8 	bhi.w	8009ede <_dtoa_r+0x47e>
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	f000 80a5 	beq.w	8009ede <_dtoa_r+0x47e>
 8009d94:	f1bb 0f00 	cmp.w	fp, #0
 8009d98:	dd38      	ble.n	8009e0c <_dtoa_r+0x3ac>
 8009d9a:	4bc0      	ldr	r3, [pc, #768]	; (800a09c <_dtoa_r+0x63c>)
 8009d9c:	f00b 020f 	and.w	r2, fp, #15
 8009da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009da8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009dac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009db0:	d019      	beq.n	8009de6 <_dtoa_r+0x386>
 8009db2:	4bbb      	ldr	r3, [pc, #748]	; (800a0a0 <_dtoa_r+0x640>)
 8009db4:	ec51 0b18 	vmov	r0, r1, d8
 8009db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dbc:	f7f6 fd46 	bl	800084c <__aeabi_ddiv>
 8009dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc4:	f008 080f 	and.w	r8, r8, #15
 8009dc8:	2503      	movs	r5, #3
 8009dca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a0a0 <_dtoa_r+0x640>
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d10a      	bne.n	8009dea <_dtoa_r+0x38a>
 8009dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dd8:	4632      	mov	r2, r6
 8009dda:	463b      	mov	r3, r7
 8009ddc:	f7f6 fd36 	bl	800084c <__aeabi_ddiv>
 8009de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009de4:	e02b      	b.n	8009e3e <_dtoa_r+0x3de>
 8009de6:	2502      	movs	r5, #2
 8009de8:	e7ef      	b.n	8009dca <_dtoa_r+0x36a>
 8009dea:	f018 0f01 	tst.w	r8, #1
 8009dee:	d008      	beq.n	8009e02 <_dtoa_r+0x3a2>
 8009df0:	4630      	mov	r0, r6
 8009df2:	4639      	mov	r1, r7
 8009df4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009df8:	f7f6 fbfe 	bl	80005f8 <__aeabi_dmul>
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460f      	mov	r7, r1
 8009e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e06:	f109 0908 	add.w	r9, r9, #8
 8009e0a:	e7e0      	b.n	8009dce <_dtoa_r+0x36e>
 8009e0c:	f000 809f 	beq.w	8009f4e <_dtoa_r+0x4ee>
 8009e10:	f1cb 0600 	rsb	r6, fp, #0
 8009e14:	4ba1      	ldr	r3, [pc, #644]	; (800a09c <_dtoa_r+0x63c>)
 8009e16:	4fa2      	ldr	r7, [pc, #648]	; (800a0a0 <_dtoa_r+0x640>)
 8009e18:	f006 020f 	and.w	r2, r6, #15
 8009e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	ec51 0b18 	vmov	r0, r1, d8
 8009e28:	f7f6 fbe6 	bl	80005f8 <__aeabi_dmul>
 8009e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e30:	1136      	asrs	r6, r6, #4
 8009e32:	2300      	movs	r3, #0
 8009e34:	2502      	movs	r5, #2
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d17e      	bne.n	8009f38 <_dtoa_r+0x4d8>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1d0      	bne.n	8009de0 <_dtoa_r+0x380>
 8009e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 8084 	beq.w	8009f52 <_dtoa_r+0x4f2>
 8009e4a:	4b96      	ldr	r3, [pc, #600]	; (800a0a4 <_dtoa_r+0x644>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fe43 	bl	8000adc <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d07b      	beq.n	8009f52 <_dtoa_r+0x4f2>
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d078      	beq.n	8009f52 <_dtoa_r+0x4f2>
 8009e60:	9b01      	ldr	r3, [sp, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd39      	ble.n	8009eda <_dtoa_r+0x47a>
 8009e66:	4b90      	ldr	r3, [pc, #576]	; (800a0a8 <_dtoa_r+0x648>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e76:	9e01      	ldr	r6, [sp, #4]
 8009e78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e82:	4628      	mov	r0, r5
 8009e84:	f7f6 fb4e 	bl	8000524 <__aeabi_i2d>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	f7f6 fbb4 	bl	80005f8 <__aeabi_dmul>
 8009e90:	4b86      	ldr	r3, [pc, #536]	; (800a0ac <_dtoa_r+0x64c>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	f7f6 f9fa 	bl	800028c <__adddf3>
 8009e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	2e00      	cmp	r6, #0
 8009ea4:	d158      	bne.n	8009f58 <_dtoa_r+0x4f8>
 8009ea6:	4b82      	ldr	r3, [pc, #520]	; (800a0b0 <_dtoa_r+0x650>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 f9eb 	bl	8000288 <__aeabi_dsub>
 8009eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb6:	4680      	mov	r8, r0
 8009eb8:	4689      	mov	r9, r1
 8009eba:	f7f6 fe2d 	bl	8000b18 <__aeabi_dcmpgt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 8296 	bne.w	800a3f0 <_dtoa_r+0x990>
 8009ec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ec8:	4640      	mov	r0, r8
 8009eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe04 	bl	8000adc <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 8289 	bne.w	800a3ec <_dtoa_r+0x98c>
 8009eda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f2c0 814e 	blt.w	800a182 <_dtoa_r+0x722>
 8009ee6:	f1bb 0f0e 	cmp.w	fp, #14
 8009eea:	f300 814a 	bgt.w	800a182 <_dtoa_r+0x722>
 8009eee:	4b6b      	ldr	r3, [pc, #428]	; (800a09c <_dtoa_r+0x63c>)
 8009ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f280 80dc 	bge.w	800a0b8 <_dtoa_r+0x658>
 8009f00:	9b04      	ldr	r3, [sp, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f300 80d8 	bgt.w	800a0b8 <_dtoa_r+0x658>
 8009f08:	f040 826f 	bne.w	800a3ea <_dtoa_r+0x98a>
 8009f0c:	4b68      	ldr	r3, [pc, #416]	; (800a0b0 <_dtoa_r+0x650>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4640      	mov	r0, r8
 8009f12:	4649      	mov	r1, r9
 8009f14:	f7f6 fb70 	bl	80005f8 <__aeabi_dmul>
 8009f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f1c:	f7f6 fdf2 	bl	8000b04 <__aeabi_dcmpge>
 8009f20:	9e04      	ldr	r6, [sp, #16]
 8009f22:	4637      	mov	r7, r6
 8009f24:	2800      	cmp	r0, #0
 8009f26:	f040 8245 	bne.w	800a3b4 <_dtoa_r+0x954>
 8009f2a:	9d00      	ldr	r5, [sp, #0]
 8009f2c:	2331      	movs	r3, #49	; 0x31
 8009f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8009f32:	f10b 0b01 	add.w	fp, fp, #1
 8009f36:	e241      	b.n	800a3bc <_dtoa_r+0x95c>
 8009f38:	07f2      	lsls	r2, r6, #31
 8009f3a:	d505      	bpl.n	8009f48 <_dtoa_r+0x4e8>
 8009f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	3501      	adds	r5, #1
 8009f46:	2301      	movs	r3, #1
 8009f48:	1076      	asrs	r6, r6, #1
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	e773      	b.n	8009e36 <_dtoa_r+0x3d6>
 8009f4e:	2502      	movs	r5, #2
 8009f50:	e775      	b.n	8009e3e <_dtoa_r+0x3de>
 8009f52:	9e04      	ldr	r6, [sp, #16]
 8009f54:	465f      	mov	r7, fp
 8009f56:	e792      	b.n	8009e7e <_dtoa_r+0x41e>
 8009f58:	9900      	ldr	r1, [sp, #0]
 8009f5a:	4b50      	ldr	r3, [pc, #320]	; (800a09c <_dtoa_r+0x63c>)
 8009f5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f60:	4431      	add	r1, r6
 8009f62:	9102      	str	r1, [sp, #8]
 8009f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f66:	eeb0 9a47 	vmov.f32	s18, s14
 8009f6a:	eef0 9a67 	vmov.f32	s19, s15
 8009f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f76:	2900      	cmp	r1, #0
 8009f78:	d044      	beq.n	800a004 <_dtoa_r+0x5a4>
 8009f7a:	494e      	ldr	r1, [pc, #312]	; (800a0b4 <_dtoa_r+0x654>)
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f7f6 fc65 	bl	800084c <__aeabi_ddiv>
 8009f82:	ec53 2b19 	vmov	r2, r3, d9
 8009f86:	f7f6 f97f 	bl	8000288 <__aeabi_dsub>
 8009f8a:	9d00      	ldr	r5, [sp, #0]
 8009f8c:	ec41 0b19 	vmov	d9, r0, r1
 8009f90:	4649      	mov	r1, r9
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7f6 fde0 	bl	8000b58 <__aeabi_d2iz>
 8009f98:	4606      	mov	r6, r0
 8009f9a:	f7f6 fac3 	bl	8000524 <__aeabi_i2d>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	f7f6 f96f 	bl	8000288 <__aeabi_dsub>
 8009faa:	3630      	adds	r6, #48	; 0x30
 8009fac:	f805 6b01 	strb.w	r6, [r5], #1
 8009fb0:	ec53 2b19 	vmov	r2, r3, d9
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4689      	mov	r9, r1
 8009fb8:	f7f6 fd90 	bl	8000adc <__aeabi_dcmplt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d164      	bne.n	800a08a <_dtoa_r+0x62a>
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	4937      	ldr	r1, [pc, #220]	; (800a0a4 <_dtoa_r+0x644>)
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	f7f6 f95e 	bl	8000288 <__aeabi_dsub>
 8009fcc:	ec53 2b19 	vmov	r2, r3, d9
 8009fd0:	f7f6 fd84 	bl	8000adc <__aeabi_dcmplt>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f040 80b6 	bne.w	800a146 <_dtoa_r+0x6e6>
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	429d      	cmp	r5, r3
 8009fde:	f43f af7c 	beq.w	8009eda <_dtoa_r+0x47a>
 8009fe2:	4b31      	ldr	r3, [pc, #196]	; (800a0a8 <_dtoa_r+0x648>)
 8009fe4:	ec51 0b19 	vmov	r0, r1, d9
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f6 fb05 	bl	80005f8 <__aeabi_dmul>
 8009fee:	4b2e      	ldr	r3, [pc, #184]	; (800a0a8 <_dtoa_r+0x648>)
 8009ff0:	ec41 0b19 	vmov	d9, r0, r1
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 fafd 	bl	80005f8 <__aeabi_dmul>
 8009ffe:	4680      	mov	r8, r0
 800a000:	4689      	mov	r9, r1
 800a002:	e7c5      	b.n	8009f90 <_dtoa_r+0x530>
 800a004:	ec51 0b17 	vmov	r0, r1, d7
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	9d00      	ldr	r5, [sp, #0]
 800a010:	930f      	str	r3, [sp, #60]	; 0x3c
 800a012:	ec41 0b19 	vmov	d9, r0, r1
 800a016:	4649      	mov	r1, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	f7f6 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800a01e:	4606      	mov	r6, r0
 800a020:	f7f6 fa80 	bl	8000524 <__aeabi_i2d>
 800a024:	3630      	adds	r6, #48	; 0x30
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	f805 6b01 	strb.w	r6, [r5], #1
 800a036:	9b02      	ldr	r3, [sp, #8]
 800a038:	429d      	cmp	r5, r3
 800a03a:	4680      	mov	r8, r0
 800a03c:	4689      	mov	r9, r1
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	d124      	bne.n	800a08e <_dtoa_r+0x62e>
 800a044:	4b1b      	ldr	r3, [pc, #108]	; (800a0b4 <_dtoa_r+0x654>)
 800a046:	ec51 0b19 	vmov	r0, r1, d9
 800a04a:	f7f6 f91f 	bl	800028c <__adddf3>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d173      	bne.n	800a146 <_dtoa_r+0x6e6>
 800a05e:	ec53 2b19 	vmov	r2, r3, d9
 800a062:	4914      	ldr	r1, [pc, #80]	; (800a0b4 <_dtoa_r+0x654>)
 800a064:	2000      	movs	r0, #0
 800a066:	f7f6 f90f 	bl	8000288 <__aeabi_dsub>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4640      	mov	r0, r8
 800a070:	4649      	mov	r1, r9
 800a072:	f7f6 fd33 	bl	8000adc <__aeabi_dcmplt>
 800a076:	2800      	cmp	r0, #0
 800a078:	f43f af2f 	beq.w	8009eda <_dtoa_r+0x47a>
 800a07c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a07e:	1e6b      	subs	r3, r5, #1
 800a080:	930f      	str	r3, [sp, #60]	; 0x3c
 800a082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a086:	2b30      	cmp	r3, #48	; 0x30
 800a088:	d0f8      	beq.n	800a07c <_dtoa_r+0x61c>
 800a08a:	46bb      	mov	fp, r7
 800a08c:	e04a      	b.n	800a124 <_dtoa_r+0x6c4>
 800a08e:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <_dtoa_r+0x648>)
 800a090:	f7f6 fab2 	bl	80005f8 <__aeabi_dmul>
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	e7bd      	b.n	800a016 <_dtoa_r+0x5b6>
 800a09a:	bf00      	nop
 800a09c:	0800c338 	.word	0x0800c338
 800a0a0:	0800c310 	.word	0x0800c310
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	40240000 	.word	0x40240000
 800a0ac:	401c0000 	.word	0x401c0000
 800a0b0:	40140000 	.word	0x40140000
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0bc:	9d00      	ldr	r5, [sp, #0]
 800a0be:	4642      	mov	r2, r8
 800a0c0:	464b      	mov	r3, r9
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	4639      	mov	r1, r7
 800a0c6:	f7f6 fbc1 	bl	800084c <__aeabi_ddiv>
 800a0ca:	f7f6 fd45 	bl	8000b58 <__aeabi_d2iz>
 800a0ce:	9001      	str	r0, [sp, #4]
 800a0d0:	f7f6 fa28 	bl	8000524 <__aeabi_i2d>
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	f7f6 fa8e 	bl	80005f8 <__aeabi_dmul>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	9e01      	ldr	r6, [sp, #4]
 800a0ea:	9f04      	ldr	r7, [sp, #16]
 800a0ec:	3630      	adds	r6, #48	; 0x30
 800a0ee:	f805 6b01 	strb.w	r6, [r5], #1
 800a0f2:	9e00      	ldr	r6, [sp, #0]
 800a0f4:	1bae      	subs	r6, r5, r6
 800a0f6:	42b7      	cmp	r7, r6
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	d134      	bne.n	800a168 <_dtoa_r+0x708>
 800a0fe:	f7f6 f8c5 	bl	800028c <__adddf3>
 800a102:	4642      	mov	r2, r8
 800a104:	464b      	mov	r3, r9
 800a106:	4606      	mov	r6, r0
 800a108:	460f      	mov	r7, r1
 800a10a:	f7f6 fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800a10e:	b9c8      	cbnz	r0, 800a144 <_dtoa_r+0x6e4>
 800a110:	4642      	mov	r2, r8
 800a112:	464b      	mov	r3, r9
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a11c:	b110      	cbz	r0, 800a124 <_dtoa_r+0x6c4>
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	07db      	lsls	r3, r3, #31
 800a122:	d40f      	bmi.n	800a144 <_dtoa_r+0x6e4>
 800a124:	4651      	mov	r1, sl
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fbcc 	bl	800a8c4 <_Bfree>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a130:	702b      	strb	r3, [r5, #0]
 800a132:	f10b 0301 	add.w	r3, fp, #1
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f43f ace2 	beq.w	8009b04 <_dtoa_r+0xa4>
 800a140:	601d      	str	r5, [r3, #0]
 800a142:	e4df      	b.n	8009b04 <_dtoa_r+0xa4>
 800a144:	465f      	mov	r7, fp
 800a146:	462b      	mov	r3, r5
 800a148:	461d      	mov	r5, r3
 800a14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14e:	2a39      	cmp	r2, #57	; 0x39
 800a150:	d106      	bne.n	800a160 <_dtoa_r+0x700>
 800a152:	9a00      	ldr	r2, [sp, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d1f7      	bne.n	800a148 <_dtoa_r+0x6e8>
 800a158:	9900      	ldr	r1, [sp, #0]
 800a15a:	2230      	movs	r2, #48	; 0x30
 800a15c:	3701      	adds	r7, #1
 800a15e:	700a      	strb	r2, [r1, #0]
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	3201      	adds	r2, #1
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	e790      	b.n	800a08a <_dtoa_r+0x62a>
 800a168:	4ba3      	ldr	r3, [pc, #652]	; (800a3f8 <_dtoa_r+0x998>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	f7f6 fa44 	bl	80005f8 <__aeabi_dmul>
 800a170:	2200      	movs	r2, #0
 800a172:	2300      	movs	r3, #0
 800a174:	4606      	mov	r6, r0
 800a176:	460f      	mov	r7, r1
 800a178:	f7f6 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d09e      	beq.n	800a0be <_dtoa_r+0x65e>
 800a180:	e7d0      	b.n	800a124 <_dtoa_r+0x6c4>
 800a182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a184:	2a00      	cmp	r2, #0
 800a186:	f000 80ca 	beq.w	800a31e <_dtoa_r+0x8be>
 800a18a:	9a07      	ldr	r2, [sp, #28]
 800a18c:	2a01      	cmp	r2, #1
 800a18e:	f300 80ad 	bgt.w	800a2ec <_dtoa_r+0x88c>
 800a192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a194:	2a00      	cmp	r2, #0
 800a196:	f000 80a5 	beq.w	800a2e4 <_dtoa_r+0x884>
 800a19a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a19e:	9e08      	ldr	r6, [sp, #32]
 800a1a0:	9d05      	ldr	r5, [sp, #20]
 800a1a2:	9a05      	ldr	r2, [sp, #20]
 800a1a4:	441a      	add	r2, r3
 800a1a6:	9205      	str	r2, [sp, #20]
 800a1a8:	9a06      	ldr	r2, [sp, #24]
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	441a      	add	r2, r3
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	9206      	str	r2, [sp, #24]
 800a1b2:	f000 fc3d 	bl	800aa30 <__i2b>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	b165      	cbz	r5, 800a1d4 <_dtoa_r+0x774>
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dd09      	ble.n	800a1d4 <_dtoa_r+0x774>
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	9a05      	ldr	r2, [sp, #20]
 800a1c4:	bfa8      	it	ge
 800a1c6:	462b      	movge	r3, r5
 800a1c8:	1ad2      	subs	r2, r2, r3
 800a1ca:	9205      	str	r2, [sp, #20]
 800a1cc:	9a06      	ldr	r2, [sp, #24]
 800a1ce:	1aed      	subs	r5, r5, r3
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	9306      	str	r3, [sp, #24]
 800a1d4:	9b08      	ldr	r3, [sp, #32]
 800a1d6:	b1f3      	cbz	r3, 800a216 <_dtoa_r+0x7b6>
 800a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 80a3 	beq.w	800a326 <_dtoa_r+0x8c6>
 800a1e0:	2e00      	cmp	r6, #0
 800a1e2:	dd10      	ble.n	800a206 <_dtoa_r+0x7a6>
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	4632      	mov	r2, r6
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fce1 	bl	800abb0 <__pow5mult>
 800a1ee:	4652      	mov	r2, sl
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fc31 	bl	800aa5c <__multiply>
 800a1fa:	4651      	mov	r1, sl
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 fb60 	bl	800a8c4 <_Bfree>
 800a204:	46c2      	mov	sl, r8
 800a206:	9b08      	ldr	r3, [sp, #32]
 800a208:	1b9a      	subs	r2, r3, r6
 800a20a:	d004      	beq.n	800a216 <_dtoa_r+0x7b6>
 800a20c:	4651      	mov	r1, sl
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fcce 	bl	800abb0 <__pow5mult>
 800a214:	4682      	mov	sl, r0
 800a216:	2101      	movs	r1, #1
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fc09 	bl	800aa30 <__i2b>
 800a21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	4606      	mov	r6, r0
 800a224:	f340 8081 	ble.w	800a32a <_dtoa_r+0x8ca>
 800a228:	461a      	mov	r2, r3
 800a22a:	4601      	mov	r1, r0
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fcbf 	bl	800abb0 <__pow5mult>
 800a232:	9b07      	ldr	r3, [sp, #28]
 800a234:	2b01      	cmp	r3, #1
 800a236:	4606      	mov	r6, r0
 800a238:	dd7a      	ble.n	800a330 <_dtoa_r+0x8d0>
 800a23a:	f04f 0800 	mov.w	r8, #0
 800a23e:	6933      	ldr	r3, [r6, #16]
 800a240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a244:	6918      	ldr	r0, [r3, #16]
 800a246:	f000 fba5 	bl	800a994 <__hi0bits>
 800a24a:	f1c0 0020 	rsb	r0, r0, #32
 800a24e:	9b06      	ldr	r3, [sp, #24]
 800a250:	4418      	add	r0, r3
 800a252:	f010 001f 	ands.w	r0, r0, #31
 800a256:	f000 8094 	beq.w	800a382 <_dtoa_r+0x922>
 800a25a:	f1c0 0320 	rsb	r3, r0, #32
 800a25e:	2b04      	cmp	r3, #4
 800a260:	f340 8085 	ble.w	800a36e <_dtoa_r+0x90e>
 800a264:	9b05      	ldr	r3, [sp, #20]
 800a266:	f1c0 001c 	rsb	r0, r0, #28
 800a26a:	4403      	add	r3, r0
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	9b06      	ldr	r3, [sp, #24]
 800a270:	4403      	add	r3, r0
 800a272:	4405      	add	r5, r0
 800a274:	9306      	str	r3, [sp, #24]
 800a276:	9b05      	ldr	r3, [sp, #20]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dd05      	ble.n	800a288 <_dtoa_r+0x828>
 800a27c:	4651      	mov	r1, sl
 800a27e:	461a      	mov	r2, r3
 800a280:	4620      	mov	r0, r4
 800a282:	f000 fcef 	bl	800ac64 <__lshift>
 800a286:	4682      	mov	sl, r0
 800a288:	9b06      	ldr	r3, [sp, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dd05      	ble.n	800a29a <_dtoa_r+0x83a>
 800a28e:	4631      	mov	r1, r6
 800a290:	461a      	mov	r2, r3
 800a292:	4620      	mov	r0, r4
 800a294:	f000 fce6 	bl	800ac64 <__lshift>
 800a298:	4606      	mov	r6, r0
 800a29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d072      	beq.n	800a386 <_dtoa_r+0x926>
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	f000 fd4a 	bl	800ad3c <__mcmp>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	da6c      	bge.n	800a386 <_dtoa_r+0x926>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4651      	mov	r1, sl
 800a2b0:	220a      	movs	r2, #10
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fb28 	bl	800a908 <__multadd>
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2be:	4682      	mov	sl, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 81b0 	beq.w	800a626 <_dtoa_r+0xbc6>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	220a      	movs	r2, #10
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fb1b 	bl	800a908 <__multadd>
 800a2d2:	9b01      	ldr	r3, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	f300 8096 	bgt.w	800a408 <_dtoa_r+0x9a8>
 800a2dc:	9b07      	ldr	r3, [sp, #28]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	dc59      	bgt.n	800a396 <_dtoa_r+0x936>
 800a2e2:	e091      	b.n	800a408 <_dtoa_r+0x9a8>
 800a2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2ea:	e758      	b.n	800a19e <_dtoa_r+0x73e>
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	1e5e      	subs	r6, r3, #1
 800a2f0:	9b08      	ldr	r3, [sp, #32]
 800a2f2:	42b3      	cmp	r3, r6
 800a2f4:	bfbf      	itttt	lt
 800a2f6:	9b08      	ldrlt	r3, [sp, #32]
 800a2f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a2fa:	9608      	strlt	r6, [sp, #32]
 800a2fc:	1af3      	sublt	r3, r6, r3
 800a2fe:	bfb4      	ite	lt
 800a300:	18d2      	addlt	r2, r2, r3
 800a302:	1b9e      	subge	r6, r3, r6
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	bfbc      	itt	lt
 800a308:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a30a:	2600      	movlt	r6, #0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bfb7      	itett	lt
 800a310:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a314:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a318:	1a9d      	sublt	r5, r3, r2
 800a31a:	2300      	movlt	r3, #0
 800a31c:	e741      	b.n	800a1a2 <_dtoa_r+0x742>
 800a31e:	9e08      	ldr	r6, [sp, #32]
 800a320:	9d05      	ldr	r5, [sp, #20]
 800a322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a324:	e748      	b.n	800a1b8 <_dtoa_r+0x758>
 800a326:	9a08      	ldr	r2, [sp, #32]
 800a328:	e770      	b.n	800a20c <_dtoa_r+0x7ac>
 800a32a:	9b07      	ldr	r3, [sp, #28]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	dc19      	bgt.n	800a364 <_dtoa_r+0x904>
 800a330:	9b02      	ldr	r3, [sp, #8]
 800a332:	b9bb      	cbnz	r3, 800a364 <_dtoa_r+0x904>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a33a:	b99b      	cbnz	r3, 800a364 <_dtoa_r+0x904>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a342:	0d1b      	lsrs	r3, r3, #20
 800a344:	051b      	lsls	r3, r3, #20
 800a346:	b183      	cbz	r3, 800a36a <_dtoa_r+0x90a>
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	3301      	adds	r3, #1
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	9b06      	ldr	r3, [sp, #24]
 800a350:	3301      	adds	r3, #1
 800a352:	9306      	str	r3, [sp, #24]
 800a354:	f04f 0801 	mov.w	r8, #1
 800a358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f47f af6f 	bne.w	800a23e <_dtoa_r+0x7de>
 800a360:	2001      	movs	r0, #1
 800a362:	e774      	b.n	800a24e <_dtoa_r+0x7ee>
 800a364:	f04f 0800 	mov.w	r8, #0
 800a368:	e7f6      	b.n	800a358 <_dtoa_r+0x8f8>
 800a36a:	4698      	mov	r8, r3
 800a36c:	e7f4      	b.n	800a358 <_dtoa_r+0x8f8>
 800a36e:	d082      	beq.n	800a276 <_dtoa_r+0x816>
 800a370:	9a05      	ldr	r2, [sp, #20]
 800a372:	331c      	adds	r3, #28
 800a374:	441a      	add	r2, r3
 800a376:	9205      	str	r2, [sp, #20]
 800a378:	9a06      	ldr	r2, [sp, #24]
 800a37a:	441a      	add	r2, r3
 800a37c:	441d      	add	r5, r3
 800a37e:	9206      	str	r2, [sp, #24]
 800a380:	e779      	b.n	800a276 <_dtoa_r+0x816>
 800a382:	4603      	mov	r3, r0
 800a384:	e7f4      	b.n	800a370 <_dtoa_r+0x910>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dc37      	bgt.n	800a3fc <_dtoa_r+0x99c>
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	dd34      	ble.n	800a3fc <_dtoa_r+0x99c>
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	b963      	cbnz	r3, 800a3b4 <_dtoa_r+0x954>
 800a39a:	4631      	mov	r1, r6
 800a39c:	2205      	movs	r2, #5
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fab2 	bl	800a908 <__multadd>
 800a3a4:	4601      	mov	r1, r0
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	f000 fcc7 	bl	800ad3c <__mcmp>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f73f adbb 	bgt.w	8009f2a <_dtoa_r+0x4ca>
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b6:	9d00      	ldr	r5, [sp, #0]
 800a3b8:	ea6f 0b03 	mvn.w	fp, r3
 800a3bc:	f04f 0800 	mov.w	r8, #0
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fa7e 	bl	800a8c4 <_Bfree>
 800a3c8:	2f00      	cmp	r7, #0
 800a3ca:	f43f aeab 	beq.w	800a124 <_dtoa_r+0x6c4>
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	d005      	beq.n	800a3e0 <_dtoa_r+0x980>
 800a3d4:	45b8      	cmp	r8, r7
 800a3d6:	d003      	beq.n	800a3e0 <_dtoa_r+0x980>
 800a3d8:	4641      	mov	r1, r8
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fa72 	bl	800a8c4 <_Bfree>
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fa6e 	bl	800a8c4 <_Bfree>
 800a3e8:	e69c      	b.n	800a124 <_dtoa_r+0x6c4>
 800a3ea:	2600      	movs	r6, #0
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	e7e1      	b.n	800a3b4 <_dtoa_r+0x954>
 800a3f0:	46bb      	mov	fp, r7
 800a3f2:	4637      	mov	r7, r6
 800a3f4:	e599      	b.n	8009f2a <_dtoa_r+0x4ca>
 800a3f6:	bf00      	nop
 800a3f8:	40240000 	.word	0x40240000
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80c8 	beq.w	800a594 <_dtoa_r+0xb34>
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	2d00      	cmp	r5, #0
 800a40a:	dd05      	ble.n	800a418 <_dtoa_r+0x9b8>
 800a40c:	4639      	mov	r1, r7
 800a40e:	462a      	mov	r2, r5
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fc27 	bl	800ac64 <__lshift>
 800a416:	4607      	mov	r7, r0
 800a418:	f1b8 0f00 	cmp.w	r8, #0
 800a41c:	d05b      	beq.n	800a4d6 <_dtoa_r+0xa76>
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fa0f 	bl	800a844 <_Balloc>
 800a426:	4605      	mov	r5, r0
 800a428:	b928      	cbnz	r0, 800a436 <_dtoa_r+0x9d6>
 800a42a:	4b83      	ldr	r3, [pc, #524]	; (800a638 <_dtoa_r+0xbd8>)
 800a42c:	4602      	mov	r2, r0
 800a42e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a432:	f7ff bb2e 	b.w	8009a92 <_dtoa_r+0x32>
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	3202      	adds	r2, #2
 800a43a:	0092      	lsls	r2, r2, #2
 800a43c:	f107 010c 	add.w	r1, r7, #12
 800a440:	300c      	adds	r0, #12
 800a442:	f7ff fa76 	bl	8009932 <memcpy>
 800a446:	2201      	movs	r2, #1
 800a448:	4629      	mov	r1, r5
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fc0a 	bl	800ac64 <__lshift>
 800a450:	9b00      	ldr	r3, [sp, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	9304      	str	r3, [sp, #16]
 800a456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a45a:	4413      	add	r3, r2
 800a45c:	9308      	str	r3, [sp, #32]
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	46b8      	mov	r8, r7
 800a466:	9306      	str	r3, [sp, #24]
 800a468:	4607      	mov	r7, r0
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	4631      	mov	r1, r6
 800a46e:	3b01      	subs	r3, #1
 800a470:	4650      	mov	r0, sl
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	f7ff fa6b 	bl	800994e <quorem>
 800a478:	4641      	mov	r1, r8
 800a47a:	9002      	str	r0, [sp, #8]
 800a47c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a480:	4650      	mov	r0, sl
 800a482:	f000 fc5b 	bl	800ad3c <__mcmp>
 800a486:	463a      	mov	r2, r7
 800a488:	9005      	str	r0, [sp, #20]
 800a48a:	4631      	mov	r1, r6
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 fc71 	bl	800ad74 <__mdiff>
 800a492:	68c2      	ldr	r2, [r0, #12]
 800a494:	4605      	mov	r5, r0
 800a496:	bb02      	cbnz	r2, 800a4da <_dtoa_r+0xa7a>
 800a498:	4601      	mov	r1, r0
 800a49a:	4650      	mov	r0, sl
 800a49c:	f000 fc4e 	bl	800ad3c <__mcmp>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4a8:	f000 fa0c 	bl	800a8c4 <_Bfree>
 800a4ac:	9b07      	ldr	r3, [sp, #28]
 800a4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b0:	9d04      	ldr	r5, [sp, #16]
 800a4b2:	ea43 0102 	orr.w	r1, r3, r2
 800a4b6:	9b06      	ldr	r3, [sp, #24]
 800a4b8:	4319      	orrs	r1, r3
 800a4ba:	d110      	bne.n	800a4de <_dtoa_r+0xa7e>
 800a4bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4c0:	d029      	beq.n	800a516 <_dtoa_r+0xab6>
 800a4c2:	9b05      	ldr	r3, [sp, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd02      	ble.n	800a4ce <_dtoa_r+0xa6e>
 800a4c8:	9b02      	ldr	r3, [sp, #8]
 800a4ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	f883 9000 	strb.w	r9, [r3]
 800a4d4:	e774      	b.n	800a3c0 <_dtoa_r+0x960>
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	e7ba      	b.n	800a450 <_dtoa_r+0x9f0>
 800a4da:	2201      	movs	r2, #1
 800a4dc:	e7e1      	b.n	800a4a2 <_dtoa_r+0xa42>
 800a4de:	9b05      	ldr	r3, [sp, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	db04      	blt.n	800a4ee <_dtoa_r+0xa8e>
 800a4e4:	9907      	ldr	r1, [sp, #28]
 800a4e6:	430b      	orrs	r3, r1
 800a4e8:	9906      	ldr	r1, [sp, #24]
 800a4ea:	430b      	orrs	r3, r1
 800a4ec:	d120      	bne.n	800a530 <_dtoa_r+0xad0>
 800a4ee:	2a00      	cmp	r2, #0
 800a4f0:	dded      	ble.n	800a4ce <_dtoa_r+0xa6e>
 800a4f2:	4651      	mov	r1, sl
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fbb4 	bl	800ac64 <__lshift>
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4682      	mov	sl, r0
 800a500:	f000 fc1c 	bl	800ad3c <__mcmp>
 800a504:	2800      	cmp	r0, #0
 800a506:	dc03      	bgt.n	800a510 <_dtoa_r+0xab0>
 800a508:	d1e1      	bne.n	800a4ce <_dtoa_r+0xa6e>
 800a50a:	f019 0f01 	tst.w	r9, #1
 800a50e:	d0de      	beq.n	800a4ce <_dtoa_r+0xa6e>
 800a510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a514:	d1d8      	bne.n	800a4c8 <_dtoa_r+0xa68>
 800a516:	9a01      	ldr	r2, [sp, #4]
 800a518:	2339      	movs	r3, #57	; 0x39
 800a51a:	7013      	strb	r3, [r2, #0]
 800a51c:	462b      	mov	r3, r5
 800a51e:	461d      	mov	r5, r3
 800a520:	3b01      	subs	r3, #1
 800a522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a526:	2a39      	cmp	r2, #57	; 0x39
 800a528:	d06c      	beq.n	800a604 <_dtoa_r+0xba4>
 800a52a:	3201      	adds	r2, #1
 800a52c:	701a      	strb	r2, [r3, #0]
 800a52e:	e747      	b.n	800a3c0 <_dtoa_r+0x960>
 800a530:	2a00      	cmp	r2, #0
 800a532:	dd07      	ble.n	800a544 <_dtoa_r+0xae4>
 800a534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a538:	d0ed      	beq.n	800a516 <_dtoa_r+0xab6>
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	f109 0301 	add.w	r3, r9, #1
 800a540:	7013      	strb	r3, [r2, #0]
 800a542:	e73d      	b.n	800a3c0 <_dtoa_r+0x960>
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	9a08      	ldr	r2, [sp, #32]
 800a548:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d043      	beq.n	800a5d8 <_dtoa_r+0xb78>
 800a550:	4651      	mov	r1, sl
 800a552:	2300      	movs	r3, #0
 800a554:	220a      	movs	r2, #10
 800a556:	4620      	mov	r0, r4
 800a558:	f000 f9d6 	bl	800a908 <__multadd>
 800a55c:	45b8      	cmp	r8, r7
 800a55e:	4682      	mov	sl, r0
 800a560:	f04f 0300 	mov.w	r3, #0
 800a564:	f04f 020a 	mov.w	r2, #10
 800a568:	4641      	mov	r1, r8
 800a56a:	4620      	mov	r0, r4
 800a56c:	d107      	bne.n	800a57e <_dtoa_r+0xb1e>
 800a56e:	f000 f9cb 	bl	800a908 <__multadd>
 800a572:	4680      	mov	r8, r0
 800a574:	4607      	mov	r7, r0
 800a576:	9b04      	ldr	r3, [sp, #16]
 800a578:	3301      	adds	r3, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	e775      	b.n	800a46a <_dtoa_r+0xa0a>
 800a57e:	f000 f9c3 	bl	800a908 <__multadd>
 800a582:	4639      	mov	r1, r7
 800a584:	4680      	mov	r8, r0
 800a586:	2300      	movs	r3, #0
 800a588:	220a      	movs	r2, #10
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f9bc 	bl	800a908 <__multadd>
 800a590:	4607      	mov	r7, r0
 800a592:	e7f0      	b.n	800a576 <_dtoa_r+0xb16>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	9d00      	ldr	r5, [sp, #0]
 800a59a:	4631      	mov	r1, r6
 800a59c:	4650      	mov	r0, sl
 800a59e:	f7ff f9d6 	bl	800994e <quorem>
 800a5a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a5a6:	9b00      	ldr	r3, [sp, #0]
 800a5a8:	f805 9b01 	strb.w	r9, [r5], #1
 800a5ac:	1aea      	subs	r2, r5, r3
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	dd07      	ble.n	800a5c4 <_dtoa_r+0xb64>
 800a5b4:	4651      	mov	r1, sl
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 f9a4 	bl	800a908 <__multadd>
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	e7ea      	b.n	800a59a <_dtoa_r+0xb3a>
 800a5c4:	9b01      	ldr	r3, [sp, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bfc8      	it	gt
 800a5ca:	461d      	movgt	r5, r3
 800a5cc:	9b00      	ldr	r3, [sp, #0]
 800a5ce:	bfd8      	it	le
 800a5d0:	2501      	movle	r5, #1
 800a5d2:	441d      	add	r5, r3
 800a5d4:	f04f 0800 	mov.w	r8, #0
 800a5d8:	4651      	mov	r1, sl
 800a5da:	2201      	movs	r2, #1
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fb41 	bl	800ac64 <__lshift>
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	f000 fba9 	bl	800ad3c <__mcmp>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	dc96      	bgt.n	800a51c <_dtoa_r+0xabc>
 800a5ee:	d102      	bne.n	800a5f6 <_dtoa_r+0xb96>
 800a5f0:	f019 0f01 	tst.w	r9, #1
 800a5f4:	d192      	bne.n	800a51c <_dtoa_r+0xabc>
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	461d      	mov	r5, r3
 800a5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5fe:	2a30      	cmp	r2, #48	; 0x30
 800a600:	d0fa      	beq.n	800a5f8 <_dtoa_r+0xb98>
 800a602:	e6dd      	b.n	800a3c0 <_dtoa_r+0x960>
 800a604:	9a00      	ldr	r2, [sp, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d189      	bne.n	800a51e <_dtoa_r+0xabe>
 800a60a:	f10b 0b01 	add.w	fp, fp, #1
 800a60e:	2331      	movs	r3, #49	; 0x31
 800a610:	e796      	b.n	800a540 <_dtoa_r+0xae0>
 800a612:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <_dtoa_r+0xbdc>)
 800a614:	f7ff ba99 	b.w	8009b4a <_dtoa_r+0xea>
 800a618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f47f aa6d 	bne.w	8009afa <_dtoa_r+0x9a>
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <_dtoa_r+0xbe0>)
 800a622:	f7ff ba92 	b.w	8009b4a <_dtoa_r+0xea>
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dcb5      	bgt.n	800a598 <_dtoa_r+0xb38>
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	f73f aeb1 	bgt.w	800a396 <_dtoa_r+0x936>
 800a634:	e7b0      	b.n	800a598 <_dtoa_r+0xb38>
 800a636:	bf00      	nop
 800a638:	0800c2a4 	.word	0x0800c2a4
 800a63c:	0800c204 	.word	0x0800c204
 800a640:	0800c228 	.word	0x0800c228

0800a644 <_free_r>:
 800a644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a646:	2900      	cmp	r1, #0
 800a648:	d044      	beq.n	800a6d4 <_free_r+0x90>
 800a64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a64e:	9001      	str	r0, [sp, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f1a1 0404 	sub.w	r4, r1, #4
 800a656:	bfb8      	it	lt
 800a658:	18e4      	addlt	r4, r4, r3
 800a65a:	f000 f8e7 	bl	800a82c <__malloc_lock>
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <_free_r+0x94>)
 800a660:	9801      	ldr	r0, [sp, #4]
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	b933      	cbnz	r3, 800a674 <_free_r+0x30>
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6014      	str	r4, [r2, #0]
 800a66a:	b003      	add	sp, #12
 800a66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a670:	f000 b8e2 	b.w	800a838 <__malloc_unlock>
 800a674:	42a3      	cmp	r3, r4
 800a676:	d908      	bls.n	800a68a <_free_r+0x46>
 800a678:	6825      	ldr	r5, [r4, #0]
 800a67a:	1961      	adds	r1, r4, r5
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf01      	itttt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	1949      	addeq	r1, r1, r5
 800a686:	6021      	streq	r1, [r4, #0]
 800a688:	e7ed      	b.n	800a666 <_free_r+0x22>
 800a68a:	461a      	mov	r2, r3
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b10b      	cbz	r3, 800a694 <_free_r+0x50>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d9fa      	bls.n	800a68a <_free_r+0x46>
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	1855      	adds	r5, r2, r1
 800a698:	42a5      	cmp	r5, r4
 800a69a:	d10b      	bne.n	800a6b4 <_free_r+0x70>
 800a69c:	6824      	ldr	r4, [r4, #0]
 800a69e:	4421      	add	r1, r4
 800a6a0:	1854      	adds	r4, r2, r1
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	d1e0      	bne.n	800a66a <_free_r+0x26>
 800a6a8:	681c      	ldr	r4, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	6053      	str	r3, [r2, #4]
 800a6ae:	440c      	add	r4, r1
 800a6b0:	6014      	str	r4, [r2, #0]
 800a6b2:	e7da      	b.n	800a66a <_free_r+0x26>
 800a6b4:	d902      	bls.n	800a6bc <_free_r+0x78>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	6003      	str	r3, [r0, #0]
 800a6ba:	e7d6      	b.n	800a66a <_free_r+0x26>
 800a6bc:	6825      	ldr	r5, [r4, #0]
 800a6be:	1961      	adds	r1, r4, r5
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf04      	itt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	bf04      	itt	eq
 800a6cc:	1949      	addeq	r1, r1, r5
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	e7ca      	b.n	800a66a <_free_r+0x26>
 800a6d4:	b003      	add	sp, #12
 800a6d6:	bd30      	pop	{r4, r5, pc}
 800a6d8:	20004854 	.word	0x20004854

0800a6dc <malloc>:
 800a6dc:	4b02      	ldr	r3, [pc, #8]	; (800a6e8 <malloc+0xc>)
 800a6de:	4601      	mov	r1, r0
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	f000 b823 	b.w	800a72c <_malloc_r>
 800a6e6:	bf00      	nop
 800a6e8:	20000100 	.word	0x20000100

0800a6ec <sbrk_aligned>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	4e0e      	ldr	r6, [pc, #56]	; (800a728 <sbrk_aligned+0x3c>)
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	6831      	ldr	r1, [r6, #0]
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	b911      	cbnz	r1, 800a6fe <sbrk_aligned+0x12>
 800a6f8:	f000 fe40 	bl	800b37c <_sbrk_r>
 800a6fc:	6030      	str	r0, [r6, #0]
 800a6fe:	4621      	mov	r1, r4
 800a700:	4628      	mov	r0, r5
 800a702:	f000 fe3b 	bl	800b37c <_sbrk_r>
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	d00a      	beq.n	800a720 <sbrk_aligned+0x34>
 800a70a:	1cc4      	adds	r4, r0, #3
 800a70c:	f024 0403 	bic.w	r4, r4, #3
 800a710:	42a0      	cmp	r0, r4
 800a712:	d007      	beq.n	800a724 <sbrk_aligned+0x38>
 800a714:	1a21      	subs	r1, r4, r0
 800a716:	4628      	mov	r0, r5
 800a718:	f000 fe30 	bl	800b37c <_sbrk_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d101      	bne.n	800a724 <sbrk_aligned+0x38>
 800a720:	f04f 34ff 	mov.w	r4, #4294967295
 800a724:	4620      	mov	r0, r4
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	20004858 	.word	0x20004858

0800a72c <_malloc_r>:
 800a72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a730:	1ccd      	adds	r5, r1, #3
 800a732:	f025 0503 	bic.w	r5, r5, #3
 800a736:	3508      	adds	r5, #8
 800a738:	2d0c      	cmp	r5, #12
 800a73a:	bf38      	it	cc
 800a73c:	250c      	movcc	r5, #12
 800a73e:	2d00      	cmp	r5, #0
 800a740:	4607      	mov	r7, r0
 800a742:	db01      	blt.n	800a748 <_malloc_r+0x1c>
 800a744:	42a9      	cmp	r1, r5
 800a746:	d905      	bls.n	800a754 <_malloc_r+0x28>
 800a748:	230c      	movs	r3, #12
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	2600      	movs	r6, #0
 800a74e:	4630      	mov	r0, r6
 800a750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a828 <_malloc_r+0xfc>
 800a758:	f000 f868 	bl	800a82c <__malloc_lock>
 800a75c:	f8d8 3000 	ldr.w	r3, [r8]
 800a760:	461c      	mov	r4, r3
 800a762:	bb5c      	cbnz	r4, 800a7bc <_malloc_r+0x90>
 800a764:	4629      	mov	r1, r5
 800a766:	4638      	mov	r0, r7
 800a768:	f7ff ffc0 	bl	800a6ec <sbrk_aligned>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	4604      	mov	r4, r0
 800a770:	d155      	bne.n	800a81e <_malloc_r+0xf2>
 800a772:	f8d8 4000 	ldr.w	r4, [r8]
 800a776:	4626      	mov	r6, r4
 800a778:	2e00      	cmp	r6, #0
 800a77a:	d145      	bne.n	800a808 <_malloc_r+0xdc>
 800a77c:	2c00      	cmp	r4, #0
 800a77e:	d048      	beq.n	800a812 <_malloc_r+0xe6>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	4631      	mov	r1, r6
 800a784:	4638      	mov	r0, r7
 800a786:	eb04 0903 	add.w	r9, r4, r3
 800a78a:	f000 fdf7 	bl	800b37c <_sbrk_r>
 800a78e:	4581      	cmp	r9, r0
 800a790:	d13f      	bne.n	800a812 <_malloc_r+0xe6>
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	1a6d      	subs	r5, r5, r1
 800a796:	4629      	mov	r1, r5
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff ffa7 	bl	800a6ec <sbrk_aligned>
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d037      	beq.n	800a812 <_malloc_r+0xe6>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	442b      	add	r3, r5
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d038      	beq.n	800a822 <_malloc_r+0xf6>
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	42a2      	cmp	r2, r4
 800a7b4:	d12b      	bne.n	800a80e <_malloc_r+0xe2>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	e00f      	b.n	800a7dc <_malloc_r+0xb0>
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	1b52      	subs	r2, r2, r5
 800a7c0:	d41f      	bmi.n	800a802 <_malloc_r+0xd6>
 800a7c2:	2a0b      	cmp	r2, #11
 800a7c4:	d917      	bls.n	800a7f6 <_malloc_r+0xca>
 800a7c6:	1961      	adds	r1, r4, r5
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	6025      	str	r5, [r4, #0]
 800a7cc:	bf18      	it	ne
 800a7ce:	6059      	strne	r1, [r3, #4]
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	bf08      	it	eq
 800a7d4:	f8c8 1000 	streq.w	r1, [r8]
 800a7d8:	5162      	str	r2, [r4, r5]
 800a7da:	604b      	str	r3, [r1, #4]
 800a7dc:	4638      	mov	r0, r7
 800a7de:	f104 060b 	add.w	r6, r4, #11
 800a7e2:	f000 f829 	bl	800a838 <__malloc_unlock>
 800a7e6:	f026 0607 	bic.w	r6, r6, #7
 800a7ea:	1d23      	adds	r3, r4, #4
 800a7ec:	1af2      	subs	r2, r6, r3
 800a7ee:	d0ae      	beq.n	800a74e <_malloc_r+0x22>
 800a7f0:	1b9b      	subs	r3, r3, r6
 800a7f2:	50a3      	str	r3, [r4, r2]
 800a7f4:	e7ab      	b.n	800a74e <_malloc_r+0x22>
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	6862      	ldr	r2, [r4, #4]
 800a7fa:	d1dd      	bne.n	800a7b8 <_malloc_r+0x8c>
 800a7fc:	f8c8 2000 	str.w	r2, [r8]
 800a800:	e7ec      	b.n	800a7dc <_malloc_r+0xb0>
 800a802:	4623      	mov	r3, r4
 800a804:	6864      	ldr	r4, [r4, #4]
 800a806:	e7ac      	b.n	800a762 <_malloc_r+0x36>
 800a808:	4634      	mov	r4, r6
 800a80a:	6876      	ldr	r6, [r6, #4]
 800a80c:	e7b4      	b.n	800a778 <_malloc_r+0x4c>
 800a80e:	4613      	mov	r3, r2
 800a810:	e7cc      	b.n	800a7ac <_malloc_r+0x80>
 800a812:	230c      	movs	r3, #12
 800a814:	603b      	str	r3, [r7, #0]
 800a816:	4638      	mov	r0, r7
 800a818:	f000 f80e 	bl	800a838 <__malloc_unlock>
 800a81c:	e797      	b.n	800a74e <_malloc_r+0x22>
 800a81e:	6025      	str	r5, [r4, #0]
 800a820:	e7dc      	b.n	800a7dc <_malloc_r+0xb0>
 800a822:	605b      	str	r3, [r3, #4]
 800a824:	deff      	udf	#255	; 0xff
 800a826:	bf00      	nop
 800a828:	20004854 	.word	0x20004854

0800a82c <__malloc_lock>:
 800a82c:	4801      	ldr	r0, [pc, #4]	; (800a834 <__malloc_lock+0x8>)
 800a82e:	f7ff b876 	b.w	800991e <__retarget_lock_acquire_recursive>
 800a832:	bf00      	nop
 800a834:	20004850 	.word	0x20004850

0800a838 <__malloc_unlock>:
 800a838:	4801      	ldr	r0, [pc, #4]	; (800a840 <__malloc_unlock+0x8>)
 800a83a:	f7ff b871 	b.w	8009920 <__retarget_lock_release_recursive>
 800a83e:	bf00      	nop
 800a840:	20004850 	.word	0x20004850

0800a844 <_Balloc>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	69c6      	ldr	r6, [r0, #28]
 800a848:	4604      	mov	r4, r0
 800a84a:	460d      	mov	r5, r1
 800a84c:	b976      	cbnz	r6, 800a86c <_Balloc+0x28>
 800a84e:	2010      	movs	r0, #16
 800a850:	f7ff ff44 	bl	800a6dc <malloc>
 800a854:	4602      	mov	r2, r0
 800a856:	61e0      	str	r0, [r4, #28]
 800a858:	b920      	cbnz	r0, 800a864 <_Balloc+0x20>
 800a85a:	4b18      	ldr	r3, [pc, #96]	; (800a8bc <_Balloc+0x78>)
 800a85c:	4818      	ldr	r0, [pc, #96]	; (800a8c0 <_Balloc+0x7c>)
 800a85e:	216b      	movs	r1, #107	; 0x6b
 800a860:	f000 fd9c 	bl	800b39c <__assert_func>
 800a864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a868:	6006      	str	r6, [r0, #0]
 800a86a:	60c6      	str	r6, [r0, #12]
 800a86c:	69e6      	ldr	r6, [r4, #28]
 800a86e:	68f3      	ldr	r3, [r6, #12]
 800a870:	b183      	cbz	r3, 800a894 <_Balloc+0x50>
 800a872:	69e3      	ldr	r3, [r4, #28]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a87a:	b9b8      	cbnz	r0, 800a8ac <_Balloc+0x68>
 800a87c:	2101      	movs	r1, #1
 800a87e:	fa01 f605 	lsl.w	r6, r1, r5
 800a882:	1d72      	adds	r2, r6, #5
 800a884:	0092      	lsls	r2, r2, #2
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fda6 	bl	800b3d8 <_calloc_r>
 800a88c:	b160      	cbz	r0, 800a8a8 <_Balloc+0x64>
 800a88e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a892:	e00e      	b.n	800a8b2 <_Balloc+0x6e>
 800a894:	2221      	movs	r2, #33	; 0x21
 800a896:	2104      	movs	r1, #4
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 fd9d 	bl	800b3d8 <_calloc_r>
 800a89e:	69e3      	ldr	r3, [r4, #28]
 800a8a0:	60f0      	str	r0, [r6, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e4      	bne.n	800a872 <_Balloc+0x2e>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	6802      	ldr	r2, [r0, #0]
 800a8ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8b8:	e7f7      	b.n	800a8aa <_Balloc+0x66>
 800a8ba:	bf00      	nop
 800a8bc:	0800c235 	.word	0x0800c235
 800a8c0:	0800c2b5 	.word	0x0800c2b5

0800a8c4 <_Bfree>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	69c6      	ldr	r6, [r0, #28]
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	b976      	cbnz	r6, 800a8ec <_Bfree+0x28>
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	f7ff ff04 	bl	800a6dc <malloc>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	61e8      	str	r0, [r5, #28]
 800a8d8:	b920      	cbnz	r0, 800a8e4 <_Bfree+0x20>
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <_Bfree+0x3c>)
 800a8dc:	4809      	ldr	r0, [pc, #36]	; (800a904 <_Bfree+0x40>)
 800a8de:	218f      	movs	r1, #143	; 0x8f
 800a8e0:	f000 fd5c 	bl	800b39c <__assert_func>
 800a8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8e8:	6006      	str	r6, [r0, #0]
 800a8ea:	60c6      	str	r6, [r0, #12]
 800a8ec:	b13c      	cbz	r4, 800a8fe <_Bfree+0x3a>
 800a8ee:	69eb      	ldr	r3, [r5, #28]
 800a8f0:	6862      	ldr	r2, [r4, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8f8:	6021      	str	r1, [r4, #0]
 800a8fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	0800c235 	.word	0x0800c235
 800a904:	0800c2b5 	.word	0x0800c2b5

0800a908 <__multadd>:
 800a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	690d      	ldr	r5, [r1, #16]
 800a90e:	4607      	mov	r7, r0
 800a910:	460c      	mov	r4, r1
 800a912:	461e      	mov	r6, r3
 800a914:	f101 0c14 	add.w	ip, r1, #20
 800a918:	2000      	movs	r0, #0
 800a91a:	f8dc 3000 	ldr.w	r3, [ip]
 800a91e:	b299      	uxth	r1, r3
 800a920:	fb02 6101 	mla	r1, r2, r1, r6
 800a924:	0c1e      	lsrs	r6, r3, #16
 800a926:	0c0b      	lsrs	r3, r1, #16
 800a928:	fb02 3306 	mla	r3, r2, r6, r3
 800a92c:	b289      	uxth	r1, r1
 800a92e:	3001      	adds	r0, #1
 800a930:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a934:	4285      	cmp	r5, r0
 800a936:	f84c 1b04 	str.w	r1, [ip], #4
 800a93a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a93e:	dcec      	bgt.n	800a91a <__multadd+0x12>
 800a940:	b30e      	cbz	r6, 800a986 <__multadd+0x7e>
 800a942:	68a3      	ldr	r3, [r4, #8]
 800a944:	42ab      	cmp	r3, r5
 800a946:	dc19      	bgt.n	800a97c <__multadd+0x74>
 800a948:	6861      	ldr	r1, [r4, #4]
 800a94a:	4638      	mov	r0, r7
 800a94c:	3101      	adds	r1, #1
 800a94e:	f7ff ff79 	bl	800a844 <_Balloc>
 800a952:	4680      	mov	r8, r0
 800a954:	b928      	cbnz	r0, 800a962 <__multadd+0x5a>
 800a956:	4602      	mov	r2, r0
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <__multadd+0x84>)
 800a95a:	480d      	ldr	r0, [pc, #52]	; (800a990 <__multadd+0x88>)
 800a95c:	21ba      	movs	r1, #186	; 0xba
 800a95e:	f000 fd1d 	bl	800b39c <__assert_func>
 800a962:	6922      	ldr	r2, [r4, #16]
 800a964:	3202      	adds	r2, #2
 800a966:	f104 010c 	add.w	r1, r4, #12
 800a96a:	0092      	lsls	r2, r2, #2
 800a96c:	300c      	adds	r0, #12
 800a96e:	f7fe ffe0 	bl	8009932 <memcpy>
 800a972:	4621      	mov	r1, r4
 800a974:	4638      	mov	r0, r7
 800a976:	f7ff ffa5 	bl	800a8c4 <_Bfree>
 800a97a:	4644      	mov	r4, r8
 800a97c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a980:	3501      	adds	r5, #1
 800a982:	615e      	str	r6, [r3, #20]
 800a984:	6125      	str	r5, [r4, #16]
 800a986:	4620      	mov	r0, r4
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98c:	0800c2a4 	.word	0x0800c2a4
 800a990:	0800c2b5 	.word	0x0800c2b5

0800a994 <__hi0bits>:
 800a994:	0c03      	lsrs	r3, r0, #16
 800a996:	041b      	lsls	r3, r3, #16
 800a998:	b9d3      	cbnz	r3, 800a9d0 <__hi0bits+0x3c>
 800a99a:	0400      	lsls	r0, r0, #16
 800a99c:	2310      	movs	r3, #16
 800a99e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9a2:	bf04      	itt	eq
 800a9a4:	0200      	lsleq	r0, r0, #8
 800a9a6:	3308      	addeq	r3, #8
 800a9a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9ac:	bf04      	itt	eq
 800a9ae:	0100      	lsleq	r0, r0, #4
 800a9b0:	3304      	addeq	r3, #4
 800a9b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9b6:	bf04      	itt	eq
 800a9b8:	0080      	lsleq	r0, r0, #2
 800a9ba:	3302      	addeq	r3, #2
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	db05      	blt.n	800a9cc <__hi0bits+0x38>
 800a9c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9c4:	f103 0301 	add.w	r3, r3, #1
 800a9c8:	bf08      	it	eq
 800a9ca:	2320      	moveq	r3, #32
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	4770      	bx	lr
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e7e4      	b.n	800a99e <__hi0bits+0xa>

0800a9d4 <__lo0bits>:
 800a9d4:	6803      	ldr	r3, [r0, #0]
 800a9d6:	f013 0207 	ands.w	r2, r3, #7
 800a9da:	d00c      	beq.n	800a9f6 <__lo0bits+0x22>
 800a9dc:	07d9      	lsls	r1, r3, #31
 800a9de:	d422      	bmi.n	800aa26 <__lo0bits+0x52>
 800a9e0:	079a      	lsls	r2, r3, #30
 800a9e2:	bf49      	itett	mi
 800a9e4:	085b      	lsrmi	r3, r3, #1
 800a9e6:	089b      	lsrpl	r3, r3, #2
 800a9e8:	6003      	strmi	r3, [r0, #0]
 800a9ea:	2201      	movmi	r2, #1
 800a9ec:	bf5c      	itt	pl
 800a9ee:	6003      	strpl	r3, [r0, #0]
 800a9f0:	2202      	movpl	r2, #2
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	4770      	bx	lr
 800a9f6:	b299      	uxth	r1, r3
 800a9f8:	b909      	cbnz	r1, 800a9fe <__lo0bits+0x2a>
 800a9fa:	0c1b      	lsrs	r3, r3, #16
 800a9fc:	2210      	movs	r2, #16
 800a9fe:	b2d9      	uxtb	r1, r3
 800aa00:	b909      	cbnz	r1, 800aa06 <__lo0bits+0x32>
 800aa02:	3208      	adds	r2, #8
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	0719      	lsls	r1, r3, #28
 800aa08:	bf04      	itt	eq
 800aa0a:	091b      	lsreq	r3, r3, #4
 800aa0c:	3204      	addeq	r2, #4
 800aa0e:	0799      	lsls	r1, r3, #30
 800aa10:	bf04      	itt	eq
 800aa12:	089b      	lsreq	r3, r3, #2
 800aa14:	3202      	addeq	r2, #2
 800aa16:	07d9      	lsls	r1, r3, #31
 800aa18:	d403      	bmi.n	800aa22 <__lo0bits+0x4e>
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	f102 0201 	add.w	r2, r2, #1
 800aa20:	d003      	beq.n	800aa2a <__lo0bits+0x56>
 800aa22:	6003      	str	r3, [r0, #0]
 800aa24:	e7e5      	b.n	800a9f2 <__lo0bits+0x1e>
 800aa26:	2200      	movs	r2, #0
 800aa28:	e7e3      	b.n	800a9f2 <__lo0bits+0x1e>
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	e7e1      	b.n	800a9f2 <__lo0bits+0x1e>
	...

0800aa30 <__i2b>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	460c      	mov	r4, r1
 800aa34:	2101      	movs	r1, #1
 800aa36:	f7ff ff05 	bl	800a844 <_Balloc>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	b928      	cbnz	r0, 800aa4a <__i2b+0x1a>
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <__i2b+0x24>)
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <__i2b+0x28>)
 800aa42:	f240 1145 	movw	r1, #325	; 0x145
 800aa46:	f000 fca9 	bl	800b39c <__assert_func>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	6144      	str	r4, [r0, #20]
 800aa4e:	6103      	str	r3, [r0, #16]
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	bf00      	nop
 800aa54:	0800c2a4 	.word	0x0800c2a4
 800aa58:	0800c2b5 	.word	0x0800c2b5

0800aa5c <__multiply>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	4691      	mov	r9, r2
 800aa62:	690a      	ldr	r2, [r1, #16]
 800aa64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bfb8      	it	lt
 800aa6c:	460b      	movlt	r3, r1
 800aa6e:	460c      	mov	r4, r1
 800aa70:	bfbc      	itt	lt
 800aa72:	464c      	movlt	r4, r9
 800aa74:	4699      	movlt	r9, r3
 800aa76:	6927      	ldr	r7, [r4, #16]
 800aa78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	6861      	ldr	r1, [r4, #4]
 800aa80:	eb07 060a 	add.w	r6, r7, sl
 800aa84:	42b3      	cmp	r3, r6
 800aa86:	b085      	sub	sp, #20
 800aa88:	bfb8      	it	lt
 800aa8a:	3101      	addlt	r1, #1
 800aa8c:	f7ff feda 	bl	800a844 <_Balloc>
 800aa90:	b930      	cbnz	r0, 800aaa0 <__multiply+0x44>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b44      	ldr	r3, [pc, #272]	; (800aba8 <__multiply+0x14c>)
 800aa96:	4845      	ldr	r0, [pc, #276]	; (800abac <__multiply+0x150>)
 800aa98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa9c:	f000 fc7e 	bl	800b39c <__assert_func>
 800aaa0:	f100 0514 	add.w	r5, r0, #20
 800aaa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aaa8:	462b      	mov	r3, r5
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4543      	cmp	r3, r8
 800aaae:	d321      	bcc.n	800aaf4 <__multiply+0x98>
 800aab0:	f104 0314 	add.w	r3, r4, #20
 800aab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aab8:	f109 0314 	add.w	r3, r9, #20
 800aabc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	1b3a      	subs	r2, r7, r4
 800aac4:	3a15      	subs	r2, #21
 800aac6:	f022 0203 	bic.w	r2, r2, #3
 800aaca:	3204      	adds	r2, #4
 800aacc:	f104 0115 	add.w	r1, r4, #21
 800aad0:	428f      	cmp	r7, r1
 800aad2:	bf38      	it	cc
 800aad4:	2204      	movcc	r2, #4
 800aad6:	9201      	str	r2, [sp, #4]
 800aad8:	9a02      	ldr	r2, [sp, #8]
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d80c      	bhi.n	800aafa <__multiply+0x9e>
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	dd03      	ble.n	800aaec <__multiply+0x90>
 800aae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d05b      	beq.n	800aba4 <__multiply+0x148>
 800aaec:	6106      	str	r6, [r0, #16]
 800aaee:	b005      	add	sp, #20
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	e7d8      	b.n	800aaac <__multiply+0x50>
 800aafa:	f8b3 a000 	ldrh.w	sl, [r3]
 800aafe:	f1ba 0f00 	cmp.w	sl, #0
 800ab02:	d024      	beq.n	800ab4e <__multiply+0xf2>
 800ab04:	f104 0e14 	add.w	lr, r4, #20
 800ab08:	46a9      	mov	r9, r5
 800ab0a:	f04f 0c00 	mov.w	ip, #0
 800ab0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab12:	f8d9 1000 	ldr.w	r1, [r9]
 800ab16:	fa1f fb82 	uxth.w	fp, r2
 800ab1a:	b289      	uxth	r1, r1
 800ab1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab24:	f8d9 2000 	ldr.w	r2, [r9]
 800ab28:	4461      	add	r1, ip
 800ab2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab36:	b289      	uxth	r1, r1
 800ab38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab3c:	4577      	cmp	r7, lr
 800ab3e:	f849 1b04 	str.w	r1, [r9], #4
 800ab42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab46:	d8e2      	bhi.n	800ab0e <__multiply+0xb2>
 800ab48:	9a01      	ldr	r2, [sp, #4]
 800ab4a:	f845 c002 	str.w	ip, [r5, r2]
 800ab4e:	9a03      	ldr	r2, [sp, #12]
 800ab50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab54:	3304      	adds	r3, #4
 800ab56:	f1b9 0f00 	cmp.w	r9, #0
 800ab5a:	d021      	beq.n	800aba0 <__multiply+0x144>
 800ab5c:	6829      	ldr	r1, [r5, #0]
 800ab5e:	f104 0c14 	add.w	ip, r4, #20
 800ab62:	46ae      	mov	lr, r5
 800ab64:	f04f 0a00 	mov.w	sl, #0
 800ab68:	f8bc b000 	ldrh.w	fp, [ip]
 800ab6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab70:	fb09 220b 	mla	r2, r9, fp, r2
 800ab74:	4452      	add	r2, sl
 800ab76:	b289      	uxth	r1, r1
 800ab78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab7c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab88:	f8be 1000 	ldrh.w	r1, [lr]
 800ab8c:	fb09 110a 	mla	r1, r9, sl, r1
 800ab90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab94:	4567      	cmp	r7, ip
 800ab96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab9a:	d8e5      	bhi.n	800ab68 <__multiply+0x10c>
 800ab9c:	9a01      	ldr	r2, [sp, #4]
 800ab9e:	50a9      	str	r1, [r5, r2]
 800aba0:	3504      	adds	r5, #4
 800aba2:	e799      	b.n	800aad8 <__multiply+0x7c>
 800aba4:	3e01      	subs	r6, #1
 800aba6:	e79b      	b.n	800aae0 <__multiply+0x84>
 800aba8:	0800c2a4 	.word	0x0800c2a4
 800abac:	0800c2b5 	.word	0x0800c2b5

0800abb0 <__pow5mult>:
 800abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb4:	4615      	mov	r5, r2
 800abb6:	f012 0203 	ands.w	r2, r2, #3
 800abba:	4606      	mov	r6, r0
 800abbc:	460f      	mov	r7, r1
 800abbe:	d007      	beq.n	800abd0 <__pow5mult+0x20>
 800abc0:	4c25      	ldr	r4, [pc, #148]	; (800ac58 <__pow5mult+0xa8>)
 800abc2:	3a01      	subs	r2, #1
 800abc4:	2300      	movs	r3, #0
 800abc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abca:	f7ff fe9d 	bl	800a908 <__multadd>
 800abce:	4607      	mov	r7, r0
 800abd0:	10ad      	asrs	r5, r5, #2
 800abd2:	d03d      	beq.n	800ac50 <__pow5mult+0xa0>
 800abd4:	69f4      	ldr	r4, [r6, #28]
 800abd6:	b97c      	cbnz	r4, 800abf8 <__pow5mult+0x48>
 800abd8:	2010      	movs	r0, #16
 800abda:	f7ff fd7f 	bl	800a6dc <malloc>
 800abde:	4602      	mov	r2, r0
 800abe0:	61f0      	str	r0, [r6, #28]
 800abe2:	b928      	cbnz	r0, 800abf0 <__pow5mult+0x40>
 800abe4:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <__pow5mult+0xac>)
 800abe6:	481e      	ldr	r0, [pc, #120]	; (800ac60 <__pow5mult+0xb0>)
 800abe8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800abec:	f000 fbd6 	bl	800b39c <__assert_func>
 800abf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abf4:	6004      	str	r4, [r0, #0]
 800abf6:	60c4      	str	r4, [r0, #12]
 800abf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac00:	b94c      	cbnz	r4, 800ac16 <__pow5mult+0x66>
 800ac02:	f240 2171 	movw	r1, #625	; 0x271
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ff12 	bl	800aa30 <__i2b>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac12:	4604      	mov	r4, r0
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	f04f 0900 	mov.w	r9, #0
 800ac1a:	07eb      	lsls	r3, r5, #31
 800ac1c:	d50a      	bpl.n	800ac34 <__pow5mult+0x84>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4622      	mov	r2, r4
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff1a 	bl	800aa5c <__multiply>
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff fe49 	bl	800a8c4 <_Bfree>
 800ac32:	4647      	mov	r7, r8
 800ac34:	106d      	asrs	r5, r5, #1
 800ac36:	d00b      	beq.n	800ac50 <__pow5mult+0xa0>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	b938      	cbnz	r0, 800ac4c <__pow5mult+0x9c>
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ff0b 	bl	800aa5c <__multiply>
 800ac46:	6020      	str	r0, [r4, #0]
 800ac48:	f8c0 9000 	str.w	r9, [r0]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e7e4      	b.n	800ac1a <__pow5mult+0x6a>
 800ac50:	4638      	mov	r0, r7
 800ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac56:	bf00      	nop
 800ac58:	0800c400 	.word	0x0800c400
 800ac5c:	0800c235 	.word	0x0800c235
 800ac60:	0800c2b5 	.word	0x0800c2b5

0800ac64 <__lshift>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	460c      	mov	r4, r1
 800ac6a:	6849      	ldr	r1, [r1, #4]
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	4607      	mov	r7, r0
 800ac76:	4691      	mov	r9, r2
 800ac78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac7c:	f108 0601 	add.w	r6, r8, #1
 800ac80:	42b3      	cmp	r3, r6
 800ac82:	db0b      	blt.n	800ac9c <__lshift+0x38>
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7ff fddd 	bl	800a844 <_Balloc>
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	b948      	cbnz	r0, 800aca2 <__lshift+0x3e>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b28      	ldr	r3, [pc, #160]	; (800ad34 <__lshift+0xd0>)
 800ac92:	4829      	ldr	r0, [pc, #164]	; (800ad38 <__lshift+0xd4>)
 800ac94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac98:	f000 fb80 	bl	800b39c <__assert_func>
 800ac9c:	3101      	adds	r1, #1
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	e7ee      	b.n	800ac80 <__lshift+0x1c>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f100 0114 	add.w	r1, r0, #20
 800aca8:	f100 0210 	add.w	r2, r0, #16
 800acac:	4618      	mov	r0, r3
 800acae:	4553      	cmp	r3, sl
 800acb0:	db33      	blt.n	800ad1a <__lshift+0xb6>
 800acb2:	6920      	ldr	r0, [r4, #16]
 800acb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acb8:	f104 0314 	add.w	r3, r4, #20
 800acbc:	f019 091f 	ands.w	r9, r9, #31
 800acc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acc8:	d02b      	beq.n	800ad22 <__lshift+0xbe>
 800acca:	f1c9 0e20 	rsb	lr, r9, #32
 800acce:	468a      	mov	sl, r1
 800acd0:	2200      	movs	r2, #0
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	fa00 f009 	lsl.w	r0, r0, r9
 800acd8:	4310      	orrs	r0, r2
 800acda:	f84a 0b04 	str.w	r0, [sl], #4
 800acde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace2:	459c      	cmp	ip, r3
 800ace4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ace8:	d8f3      	bhi.n	800acd2 <__lshift+0x6e>
 800acea:	ebac 0304 	sub.w	r3, ip, r4
 800acee:	3b15      	subs	r3, #21
 800acf0:	f023 0303 	bic.w	r3, r3, #3
 800acf4:	3304      	adds	r3, #4
 800acf6:	f104 0015 	add.w	r0, r4, #21
 800acfa:	4584      	cmp	ip, r0
 800acfc:	bf38      	it	cc
 800acfe:	2304      	movcc	r3, #4
 800ad00:	50ca      	str	r2, [r1, r3]
 800ad02:	b10a      	cbz	r2, 800ad08 <__lshift+0xa4>
 800ad04:	f108 0602 	add.w	r6, r8, #2
 800ad08:	3e01      	subs	r6, #1
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	612e      	str	r6, [r5, #16]
 800ad0e:	4621      	mov	r1, r4
 800ad10:	f7ff fdd8 	bl	800a8c4 <_Bfree>
 800ad14:	4628      	mov	r0, r5
 800ad16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad1e:	3301      	adds	r3, #1
 800ad20:	e7c5      	b.n	800acae <__lshift+0x4a>
 800ad22:	3904      	subs	r1, #4
 800ad24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad2c:	459c      	cmp	ip, r3
 800ad2e:	d8f9      	bhi.n	800ad24 <__lshift+0xc0>
 800ad30:	e7ea      	b.n	800ad08 <__lshift+0xa4>
 800ad32:	bf00      	nop
 800ad34:	0800c2a4 	.word	0x0800c2a4
 800ad38:	0800c2b5 	.word	0x0800c2b5

0800ad3c <__mcmp>:
 800ad3c:	b530      	push	{r4, r5, lr}
 800ad3e:	6902      	ldr	r2, [r0, #16]
 800ad40:	690c      	ldr	r4, [r1, #16]
 800ad42:	1b12      	subs	r2, r2, r4
 800ad44:	d10e      	bne.n	800ad64 <__mcmp+0x28>
 800ad46:	f100 0314 	add.w	r3, r0, #20
 800ad4a:	3114      	adds	r1, #20
 800ad4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad5c:	42a5      	cmp	r5, r4
 800ad5e:	d003      	beq.n	800ad68 <__mcmp+0x2c>
 800ad60:	d305      	bcc.n	800ad6e <__mcmp+0x32>
 800ad62:	2201      	movs	r2, #1
 800ad64:	4610      	mov	r0, r2
 800ad66:	bd30      	pop	{r4, r5, pc}
 800ad68:	4283      	cmp	r3, r0
 800ad6a:	d3f3      	bcc.n	800ad54 <__mcmp+0x18>
 800ad6c:	e7fa      	b.n	800ad64 <__mcmp+0x28>
 800ad6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad72:	e7f7      	b.n	800ad64 <__mcmp+0x28>

0800ad74 <__mdiff>:
 800ad74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	460c      	mov	r4, r1
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4690      	mov	r8, r2
 800ad82:	f7ff ffdb 	bl	800ad3c <__mcmp>
 800ad86:	1e05      	subs	r5, r0, #0
 800ad88:	d110      	bne.n	800adac <__mdiff+0x38>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7ff fd59 	bl	800a844 <_Balloc>
 800ad92:	b930      	cbnz	r0, 800ada2 <__mdiff+0x2e>
 800ad94:	4b3a      	ldr	r3, [pc, #232]	; (800ae80 <__mdiff+0x10c>)
 800ad96:	4602      	mov	r2, r0
 800ad98:	f240 2137 	movw	r1, #567	; 0x237
 800ad9c:	4839      	ldr	r0, [pc, #228]	; (800ae84 <__mdiff+0x110>)
 800ad9e:	f000 fafd 	bl	800b39c <__assert_func>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ada8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adac:	bfa4      	itt	ge
 800adae:	4643      	movge	r3, r8
 800adb0:	46a0      	movge	r8, r4
 800adb2:	4630      	mov	r0, r6
 800adb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adb8:	bfa6      	itte	ge
 800adba:	461c      	movge	r4, r3
 800adbc:	2500      	movge	r5, #0
 800adbe:	2501      	movlt	r5, #1
 800adc0:	f7ff fd40 	bl	800a844 <_Balloc>
 800adc4:	b920      	cbnz	r0, 800add0 <__mdiff+0x5c>
 800adc6:	4b2e      	ldr	r3, [pc, #184]	; (800ae80 <__mdiff+0x10c>)
 800adc8:	4602      	mov	r2, r0
 800adca:	f240 2145 	movw	r1, #581	; 0x245
 800adce:	e7e5      	b.n	800ad9c <__mdiff+0x28>
 800add0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800add4:	6926      	ldr	r6, [r4, #16]
 800add6:	60c5      	str	r5, [r0, #12]
 800add8:	f104 0914 	add.w	r9, r4, #20
 800addc:	f108 0514 	add.w	r5, r8, #20
 800ade0:	f100 0e14 	add.w	lr, r0, #20
 800ade4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ade8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adec:	f108 0210 	add.w	r2, r8, #16
 800adf0:	46f2      	mov	sl, lr
 800adf2:	2100      	movs	r1, #0
 800adf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800adf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adfc:	fa11 f88b 	uxtah	r8, r1, fp
 800ae00:	b299      	uxth	r1, r3
 800ae02:	0c1b      	lsrs	r3, r3, #16
 800ae04:	eba8 0801 	sub.w	r8, r8, r1
 800ae08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae10:	fa1f f888 	uxth.w	r8, r8
 800ae14:	1419      	asrs	r1, r3, #16
 800ae16:	454e      	cmp	r6, r9
 800ae18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae1c:	f84a 3b04 	str.w	r3, [sl], #4
 800ae20:	d8e8      	bhi.n	800adf4 <__mdiff+0x80>
 800ae22:	1b33      	subs	r3, r6, r4
 800ae24:	3b15      	subs	r3, #21
 800ae26:	f023 0303 	bic.w	r3, r3, #3
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	3415      	adds	r4, #21
 800ae2e:	42a6      	cmp	r6, r4
 800ae30:	bf38      	it	cc
 800ae32:	2304      	movcc	r3, #4
 800ae34:	441d      	add	r5, r3
 800ae36:	4473      	add	r3, lr
 800ae38:	469e      	mov	lr, r3
 800ae3a:	462e      	mov	r6, r5
 800ae3c:	4566      	cmp	r6, ip
 800ae3e:	d30e      	bcc.n	800ae5e <__mdiff+0xea>
 800ae40:	f10c 0203 	add.w	r2, ip, #3
 800ae44:	1b52      	subs	r2, r2, r5
 800ae46:	f022 0203 	bic.w	r2, r2, #3
 800ae4a:	3d03      	subs	r5, #3
 800ae4c:	45ac      	cmp	ip, r5
 800ae4e:	bf38      	it	cc
 800ae50:	2200      	movcc	r2, #0
 800ae52:	4413      	add	r3, r2
 800ae54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae58:	b17a      	cbz	r2, 800ae7a <__mdiff+0x106>
 800ae5a:	6107      	str	r7, [r0, #16]
 800ae5c:	e7a4      	b.n	800ada8 <__mdiff+0x34>
 800ae5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae62:	fa11 f288 	uxtah	r2, r1, r8
 800ae66:	1414      	asrs	r4, r2, #16
 800ae68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae6c:	b292      	uxth	r2, r2
 800ae6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae72:	f84e 2b04 	str.w	r2, [lr], #4
 800ae76:	1421      	asrs	r1, r4, #16
 800ae78:	e7e0      	b.n	800ae3c <__mdiff+0xc8>
 800ae7a:	3f01      	subs	r7, #1
 800ae7c:	e7ea      	b.n	800ae54 <__mdiff+0xe0>
 800ae7e:	bf00      	nop
 800ae80:	0800c2a4 	.word	0x0800c2a4
 800ae84:	0800c2b5 	.word	0x0800c2b5

0800ae88 <__d2b>:
 800ae88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	460f      	mov	r7, r1
 800ae8e:	2101      	movs	r1, #1
 800ae90:	ec59 8b10 	vmov	r8, r9, d0
 800ae94:	4616      	mov	r6, r2
 800ae96:	f7ff fcd5 	bl	800a844 <_Balloc>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	b930      	cbnz	r0, 800aeac <__d2b+0x24>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	4b24      	ldr	r3, [pc, #144]	; (800af34 <__d2b+0xac>)
 800aea2:	4825      	ldr	r0, [pc, #148]	; (800af38 <__d2b+0xb0>)
 800aea4:	f240 310f 	movw	r1, #783	; 0x30f
 800aea8:	f000 fa78 	bl	800b39c <__assert_func>
 800aeac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aeb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aeb4:	bb2d      	cbnz	r5, 800af02 <__d2b+0x7a>
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	f1b8 0300 	subs.w	r3, r8, #0
 800aebc:	d026      	beq.n	800af0c <__d2b+0x84>
 800aebe:	4668      	mov	r0, sp
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	f7ff fd87 	bl	800a9d4 <__lo0bits>
 800aec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aeca:	b1e8      	cbz	r0, 800af08 <__d2b+0x80>
 800aecc:	f1c0 0320 	rsb	r3, r0, #32
 800aed0:	fa02 f303 	lsl.w	r3, r2, r3
 800aed4:	430b      	orrs	r3, r1
 800aed6:	40c2      	lsrs	r2, r0
 800aed8:	6163      	str	r3, [r4, #20]
 800aeda:	9201      	str	r2, [sp, #4]
 800aedc:	9b01      	ldr	r3, [sp, #4]
 800aede:	61a3      	str	r3, [r4, #24]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bf14      	ite	ne
 800aee4:	2202      	movne	r2, #2
 800aee6:	2201      	moveq	r2, #1
 800aee8:	6122      	str	r2, [r4, #16]
 800aeea:	b1bd      	cbz	r5, 800af1c <__d2b+0x94>
 800aeec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aef0:	4405      	add	r5, r0
 800aef2:	603d      	str	r5, [r7, #0]
 800aef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aef8:	6030      	str	r0, [r6, #0]
 800aefa:	4620      	mov	r0, r4
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af06:	e7d6      	b.n	800aeb6 <__d2b+0x2e>
 800af08:	6161      	str	r1, [r4, #20]
 800af0a:	e7e7      	b.n	800aedc <__d2b+0x54>
 800af0c:	a801      	add	r0, sp, #4
 800af0e:	f7ff fd61 	bl	800a9d4 <__lo0bits>
 800af12:	9b01      	ldr	r3, [sp, #4]
 800af14:	6163      	str	r3, [r4, #20]
 800af16:	3020      	adds	r0, #32
 800af18:	2201      	movs	r2, #1
 800af1a:	e7e5      	b.n	800aee8 <__d2b+0x60>
 800af1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af24:	6038      	str	r0, [r7, #0]
 800af26:	6918      	ldr	r0, [r3, #16]
 800af28:	f7ff fd34 	bl	800a994 <__hi0bits>
 800af2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af30:	e7e2      	b.n	800aef8 <__d2b+0x70>
 800af32:	bf00      	nop
 800af34:	0800c2a4 	.word	0x0800c2a4
 800af38:	0800c2b5 	.word	0x0800c2b5

0800af3c <__ssputs_r>:
 800af3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af40:	688e      	ldr	r6, [r1, #8]
 800af42:	461f      	mov	r7, r3
 800af44:	42be      	cmp	r6, r7
 800af46:	680b      	ldr	r3, [r1, #0]
 800af48:	4682      	mov	sl, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	4690      	mov	r8, r2
 800af4e:	d82c      	bhi.n	800afaa <__ssputs_r+0x6e>
 800af50:	898a      	ldrh	r2, [r1, #12]
 800af52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af56:	d026      	beq.n	800afa6 <__ssputs_r+0x6a>
 800af58:	6965      	ldr	r5, [r4, #20]
 800af5a:	6909      	ldr	r1, [r1, #16]
 800af5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af60:	eba3 0901 	sub.w	r9, r3, r1
 800af64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af68:	1c7b      	adds	r3, r7, #1
 800af6a:	444b      	add	r3, r9
 800af6c:	106d      	asrs	r5, r5, #1
 800af6e:	429d      	cmp	r5, r3
 800af70:	bf38      	it	cc
 800af72:	461d      	movcc	r5, r3
 800af74:	0553      	lsls	r3, r2, #21
 800af76:	d527      	bpl.n	800afc8 <__ssputs_r+0x8c>
 800af78:	4629      	mov	r1, r5
 800af7a:	f7ff fbd7 	bl	800a72c <_malloc_r>
 800af7e:	4606      	mov	r6, r0
 800af80:	b360      	cbz	r0, 800afdc <__ssputs_r+0xa0>
 800af82:	6921      	ldr	r1, [r4, #16]
 800af84:	464a      	mov	r2, r9
 800af86:	f7fe fcd4 	bl	8009932 <memcpy>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	6126      	str	r6, [r4, #16]
 800af98:	6165      	str	r5, [r4, #20]
 800af9a:	444e      	add	r6, r9
 800af9c:	eba5 0509 	sub.w	r5, r5, r9
 800afa0:	6026      	str	r6, [r4, #0]
 800afa2:	60a5      	str	r5, [r4, #8]
 800afa4:	463e      	mov	r6, r7
 800afa6:	42be      	cmp	r6, r7
 800afa8:	d900      	bls.n	800afac <__ssputs_r+0x70>
 800afaa:	463e      	mov	r6, r7
 800afac:	6820      	ldr	r0, [r4, #0]
 800afae:	4632      	mov	r2, r6
 800afb0:	4641      	mov	r1, r8
 800afb2:	f000 f9c9 	bl	800b348 <memmove>
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	1b9b      	subs	r3, r3, r6
 800afba:	60a3      	str	r3, [r4, #8]
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	4433      	add	r3, r6
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	2000      	movs	r0, #0
 800afc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc8:	462a      	mov	r2, r5
 800afca:	f000 fa2d 	bl	800b428 <_realloc_r>
 800afce:	4606      	mov	r6, r0
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1e0      	bne.n	800af96 <__ssputs_r+0x5a>
 800afd4:	6921      	ldr	r1, [r4, #16]
 800afd6:	4650      	mov	r0, sl
 800afd8:	f7ff fb34 	bl	800a644 <_free_r>
 800afdc:	230c      	movs	r3, #12
 800afde:	f8ca 3000 	str.w	r3, [sl]
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	f04f 30ff 	mov.w	r0, #4294967295
 800afee:	e7e9      	b.n	800afc4 <__ssputs_r+0x88>

0800aff0 <_svfiprintf_r>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	4698      	mov	r8, r3
 800aff6:	898b      	ldrh	r3, [r1, #12]
 800aff8:	061b      	lsls	r3, r3, #24
 800affa:	b09d      	sub	sp, #116	; 0x74
 800affc:	4607      	mov	r7, r0
 800affe:	460d      	mov	r5, r1
 800b000:	4614      	mov	r4, r2
 800b002:	d50e      	bpl.n	800b022 <_svfiprintf_r+0x32>
 800b004:	690b      	ldr	r3, [r1, #16]
 800b006:	b963      	cbnz	r3, 800b022 <_svfiprintf_r+0x32>
 800b008:	2140      	movs	r1, #64	; 0x40
 800b00a:	f7ff fb8f 	bl	800a72c <_malloc_r>
 800b00e:	6028      	str	r0, [r5, #0]
 800b010:	6128      	str	r0, [r5, #16]
 800b012:	b920      	cbnz	r0, 800b01e <_svfiprintf_r+0x2e>
 800b014:	230c      	movs	r3, #12
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	e0d0      	b.n	800b1c0 <_svfiprintf_r+0x1d0>
 800b01e:	2340      	movs	r3, #64	; 0x40
 800b020:	616b      	str	r3, [r5, #20]
 800b022:	2300      	movs	r3, #0
 800b024:	9309      	str	r3, [sp, #36]	; 0x24
 800b026:	2320      	movs	r3, #32
 800b028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b030:	2330      	movs	r3, #48	; 0x30
 800b032:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1d8 <_svfiprintf_r+0x1e8>
 800b036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b03a:	f04f 0901 	mov.w	r9, #1
 800b03e:	4623      	mov	r3, r4
 800b040:	469a      	mov	sl, r3
 800b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b046:	b10a      	cbz	r2, 800b04c <_svfiprintf_r+0x5c>
 800b048:	2a25      	cmp	r2, #37	; 0x25
 800b04a:	d1f9      	bne.n	800b040 <_svfiprintf_r+0x50>
 800b04c:	ebba 0b04 	subs.w	fp, sl, r4
 800b050:	d00b      	beq.n	800b06a <_svfiprintf_r+0x7a>
 800b052:	465b      	mov	r3, fp
 800b054:	4622      	mov	r2, r4
 800b056:	4629      	mov	r1, r5
 800b058:	4638      	mov	r0, r7
 800b05a:	f7ff ff6f 	bl	800af3c <__ssputs_r>
 800b05e:	3001      	adds	r0, #1
 800b060:	f000 80a9 	beq.w	800b1b6 <_svfiprintf_r+0x1c6>
 800b064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b066:	445a      	add	r2, fp
 800b068:	9209      	str	r2, [sp, #36]	; 0x24
 800b06a:	f89a 3000 	ldrb.w	r3, [sl]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80a1 	beq.w	800b1b6 <_svfiprintf_r+0x1c6>
 800b074:	2300      	movs	r3, #0
 800b076:	f04f 32ff 	mov.w	r2, #4294967295
 800b07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b07e:	f10a 0a01 	add.w	sl, sl, #1
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	9307      	str	r3, [sp, #28]
 800b086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b08a:	931a      	str	r3, [sp, #104]	; 0x68
 800b08c:	4654      	mov	r4, sl
 800b08e:	2205      	movs	r2, #5
 800b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b094:	4850      	ldr	r0, [pc, #320]	; (800b1d8 <_svfiprintf_r+0x1e8>)
 800b096:	f7f5 f89b 	bl	80001d0 <memchr>
 800b09a:	9a04      	ldr	r2, [sp, #16]
 800b09c:	b9d8      	cbnz	r0, 800b0d6 <_svfiprintf_r+0xe6>
 800b09e:	06d0      	lsls	r0, r2, #27
 800b0a0:	bf44      	itt	mi
 800b0a2:	2320      	movmi	r3, #32
 800b0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a8:	0711      	lsls	r1, r2, #28
 800b0aa:	bf44      	itt	mi
 800b0ac:	232b      	movmi	r3, #43	; 0x2b
 800b0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b8:	d015      	beq.n	800b0e6 <_svfiprintf_r+0xf6>
 800b0ba:	9a07      	ldr	r2, [sp, #28]
 800b0bc:	4654      	mov	r4, sl
 800b0be:	2000      	movs	r0, #0
 800b0c0:	f04f 0c0a 	mov.w	ip, #10
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ca:	3b30      	subs	r3, #48	; 0x30
 800b0cc:	2b09      	cmp	r3, #9
 800b0ce:	d94d      	bls.n	800b16c <_svfiprintf_r+0x17c>
 800b0d0:	b1b0      	cbz	r0, 800b100 <_svfiprintf_r+0x110>
 800b0d2:	9207      	str	r2, [sp, #28]
 800b0d4:	e014      	b.n	800b100 <_svfiprintf_r+0x110>
 800b0d6:	eba0 0308 	sub.w	r3, r0, r8
 800b0da:	fa09 f303 	lsl.w	r3, r9, r3
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	46a2      	mov	sl, r4
 800b0e4:	e7d2      	b.n	800b08c <_svfiprintf_r+0x9c>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	1d19      	adds	r1, r3, #4
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	9103      	str	r1, [sp, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bfbb      	ittet	lt
 800b0f2:	425b      	neglt	r3, r3
 800b0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0f8:	9307      	strge	r3, [sp, #28]
 800b0fa:	9307      	strlt	r3, [sp, #28]
 800b0fc:	bfb8      	it	lt
 800b0fe:	9204      	strlt	r2, [sp, #16]
 800b100:	7823      	ldrb	r3, [r4, #0]
 800b102:	2b2e      	cmp	r3, #46	; 0x2e
 800b104:	d10c      	bne.n	800b120 <_svfiprintf_r+0x130>
 800b106:	7863      	ldrb	r3, [r4, #1]
 800b108:	2b2a      	cmp	r3, #42	; 0x2a
 800b10a:	d134      	bne.n	800b176 <_svfiprintf_r+0x186>
 800b10c:	9b03      	ldr	r3, [sp, #12]
 800b10e:	1d1a      	adds	r2, r3, #4
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	9203      	str	r2, [sp, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	bfb8      	it	lt
 800b118:	f04f 33ff 	movlt.w	r3, #4294967295
 800b11c:	3402      	adds	r4, #2
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1e8 <_svfiprintf_r+0x1f8>
 800b124:	7821      	ldrb	r1, [r4, #0]
 800b126:	2203      	movs	r2, #3
 800b128:	4650      	mov	r0, sl
 800b12a:	f7f5 f851 	bl	80001d0 <memchr>
 800b12e:	b138      	cbz	r0, 800b140 <_svfiprintf_r+0x150>
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	eba0 000a 	sub.w	r0, r0, sl
 800b136:	2240      	movs	r2, #64	; 0x40
 800b138:	4082      	lsls	r2, r0
 800b13a:	4313      	orrs	r3, r2
 800b13c:	3401      	adds	r4, #1
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b144:	4825      	ldr	r0, [pc, #148]	; (800b1dc <_svfiprintf_r+0x1ec>)
 800b146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b14a:	2206      	movs	r2, #6
 800b14c:	f7f5 f840 	bl	80001d0 <memchr>
 800b150:	2800      	cmp	r0, #0
 800b152:	d038      	beq.n	800b1c6 <_svfiprintf_r+0x1d6>
 800b154:	4b22      	ldr	r3, [pc, #136]	; (800b1e0 <_svfiprintf_r+0x1f0>)
 800b156:	bb1b      	cbnz	r3, 800b1a0 <_svfiprintf_r+0x1b0>
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	3307      	adds	r3, #7
 800b15c:	f023 0307 	bic.w	r3, r3, #7
 800b160:	3308      	adds	r3, #8
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b166:	4433      	add	r3, r6
 800b168:	9309      	str	r3, [sp, #36]	; 0x24
 800b16a:	e768      	b.n	800b03e <_svfiprintf_r+0x4e>
 800b16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b170:	460c      	mov	r4, r1
 800b172:	2001      	movs	r0, #1
 800b174:	e7a6      	b.n	800b0c4 <_svfiprintf_r+0xd4>
 800b176:	2300      	movs	r3, #0
 800b178:	3401      	adds	r4, #1
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	4619      	mov	r1, r3
 800b17e:	f04f 0c0a 	mov.w	ip, #10
 800b182:	4620      	mov	r0, r4
 800b184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b188:	3a30      	subs	r2, #48	; 0x30
 800b18a:	2a09      	cmp	r2, #9
 800b18c:	d903      	bls.n	800b196 <_svfiprintf_r+0x1a6>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0c6      	beq.n	800b120 <_svfiprintf_r+0x130>
 800b192:	9105      	str	r1, [sp, #20]
 800b194:	e7c4      	b.n	800b120 <_svfiprintf_r+0x130>
 800b196:	fb0c 2101 	mla	r1, ip, r1, r2
 800b19a:	4604      	mov	r4, r0
 800b19c:	2301      	movs	r3, #1
 800b19e:	e7f0      	b.n	800b182 <_svfiprintf_r+0x192>
 800b1a0:	ab03      	add	r3, sp, #12
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <_svfiprintf_r+0x1f4>)
 800b1a8:	a904      	add	r1, sp, #16
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	f7fd fe4e 	bl	8008e4c <_printf_float>
 800b1b0:	1c42      	adds	r2, r0, #1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	d1d6      	bne.n	800b164 <_svfiprintf_r+0x174>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	065b      	lsls	r3, r3, #25
 800b1ba:	f53f af2d 	bmi.w	800b018 <_svfiprintf_r+0x28>
 800b1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1c0:	b01d      	add	sp, #116	; 0x74
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	ab03      	add	r3, sp, #12
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	462a      	mov	r2, r5
 800b1cc:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <_svfiprintf_r+0x1f4>)
 800b1ce:	a904      	add	r1, sp, #16
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	f7fe f8df 	bl	8009394 <_printf_i>
 800b1d6:	e7eb      	b.n	800b1b0 <_svfiprintf_r+0x1c0>
 800b1d8:	0800c40c 	.word	0x0800c40c
 800b1dc:	0800c416 	.word	0x0800c416
 800b1e0:	08008e4d 	.word	0x08008e4d
 800b1e4:	0800af3d 	.word	0x0800af3d
 800b1e8:	0800c412 	.word	0x0800c412

0800b1ec <__sflush_r>:
 800b1ec:	898a      	ldrh	r2, [r1, #12]
 800b1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	0710      	lsls	r0, r2, #28
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	d458      	bmi.n	800b2ac <__sflush_r+0xc0>
 800b1fa:	684b      	ldr	r3, [r1, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dc05      	bgt.n	800b20c <__sflush_r+0x20>
 800b200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	dc02      	bgt.n	800b20c <__sflush_r+0x20>
 800b206:	2000      	movs	r0, #0
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20e:	2e00      	cmp	r6, #0
 800b210:	d0f9      	beq.n	800b206 <__sflush_r+0x1a>
 800b212:	2300      	movs	r3, #0
 800b214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b218:	682f      	ldr	r7, [r5, #0]
 800b21a:	6a21      	ldr	r1, [r4, #32]
 800b21c:	602b      	str	r3, [r5, #0]
 800b21e:	d032      	beq.n	800b286 <__sflush_r+0x9a>
 800b220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	075a      	lsls	r2, r3, #29
 800b226:	d505      	bpl.n	800b234 <__sflush_r+0x48>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	1ac0      	subs	r0, r0, r3
 800b22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b22e:	b10b      	cbz	r3, 800b234 <__sflush_r+0x48>
 800b230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b232:	1ac0      	subs	r0, r0, r3
 800b234:	2300      	movs	r3, #0
 800b236:	4602      	mov	r2, r0
 800b238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b23a:	6a21      	ldr	r1, [r4, #32]
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b0      	blx	r6
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	d106      	bne.n	800b254 <__sflush_r+0x68>
 800b246:	6829      	ldr	r1, [r5, #0]
 800b248:	291d      	cmp	r1, #29
 800b24a:	d82b      	bhi.n	800b2a4 <__sflush_r+0xb8>
 800b24c:	4a29      	ldr	r2, [pc, #164]	; (800b2f4 <__sflush_r+0x108>)
 800b24e:	410a      	asrs	r2, r1
 800b250:	07d6      	lsls	r6, r2, #31
 800b252:	d427      	bmi.n	800b2a4 <__sflush_r+0xb8>
 800b254:	2200      	movs	r2, #0
 800b256:	6062      	str	r2, [r4, #4]
 800b258:	04d9      	lsls	r1, r3, #19
 800b25a:	6922      	ldr	r2, [r4, #16]
 800b25c:	6022      	str	r2, [r4, #0]
 800b25e:	d504      	bpl.n	800b26a <__sflush_r+0x7e>
 800b260:	1c42      	adds	r2, r0, #1
 800b262:	d101      	bne.n	800b268 <__sflush_r+0x7c>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b903      	cbnz	r3, 800b26a <__sflush_r+0x7e>
 800b268:	6560      	str	r0, [r4, #84]	; 0x54
 800b26a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b26c:	602f      	str	r7, [r5, #0]
 800b26e:	2900      	cmp	r1, #0
 800b270:	d0c9      	beq.n	800b206 <__sflush_r+0x1a>
 800b272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b276:	4299      	cmp	r1, r3
 800b278:	d002      	beq.n	800b280 <__sflush_r+0x94>
 800b27a:	4628      	mov	r0, r5
 800b27c:	f7ff f9e2 	bl	800a644 <_free_r>
 800b280:	2000      	movs	r0, #0
 800b282:	6360      	str	r0, [r4, #52]	; 0x34
 800b284:	e7c0      	b.n	800b208 <__sflush_r+0x1c>
 800b286:	2301      	movs	r3, #1
 800b288:	4628      	mov	r0, r5
 800b28a:	47b0      	blx	r6
 800b28c:	1c41      	adds	r1, r0, #1
 800b28e:	d1c8      	bne.n	800b222 <__sflush_r+0x36>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c5      	beq.n	800b222 <__sflush_r+0x36>
 800b296:	2b1d      	cmp	r3, #29
 800b298:	d001      	beq.n	800b29e <__sflush_r+0xb2>
 800b29a:	2b16      	cmp	r3, #22
 800b29c:	d101      	bne.n	800b2a2 <__sflush_r+0xb6>
 800b29e:	602f      	str	r7, [r5, #0]
 800b2a0:	e7b1      	b.n	800b206 <__sflush_r+0x1a>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	e7ad      	b.n	800b208 <__sflush_r+0x1c>
 800b2ac:	690f      	ldr	r7, [r1, #16]
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	d0a9      	beq.n	800b206 <__sflush_r+0x1a>
 800b2b2:	0793      	lsls	r3, r2, #30
 800b2b4:	680e      	ldr	r6, [r1, #0]
 800b2b6:	bf08      	it	eq
 800b2b8:	694b      	ldreq	r3, [r1, #20]
 800b2ba:	600f      	str	r7, [r1, #0]
 800b2bc:	bf18      	it	ne
 800b2be:	2300      	movne	r3, #0
 800b2c0:	eba6 0807 	sub.w	r8, r6, r7
 800b2c4:	608b      	str	r3, [r1, #8]
 800b2c6:	f1b8 0f00 	cmp.w	r8, #0
 800b2ca:	dd9c      	ble.n	800b206 <__sflush_r+0x1a>
 800b2cc:	6a21      	ldr	r1, [r4, #32]
 800b2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2d0:	4643      	mov	r3, r8
 800b2d2:	463a      	mov	r2, r7
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b0      	blx	r6
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	dc06      	bgt.n	800b2ea <__sflush_r+0xfe>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	e78e      	b.n	800b208 <__sflush_r+0x1c>
 800b2ea:	4407      	add	r7, r0
 800b2ec:	eba8 0800 	sub.w	r8, r8, r0
 800b2f0:	e7e9      	b.n	800b2c6 <__sflush_r+0xda>
 800b2f2:	bf00      	nop
 800b2f4:	dfbffffe 	.word	0xdfbffffe

0800b2f8 <_fflush_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	690b      	ldr	r3, [r1, #16]
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b913      	cbnz	r3, 800b308 <_fflush_r+0x10>
 800b302:	2500      	movs	r5, #0
 800b304:	4628      	mov	r0, r5
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	b118      	cbz	r0, 800b312 <_fflush_r+0x1a>
 800b30a:	6a03      	ldr	r3, [r0, #32]
 800b30c:	b90b      	cbnz	r3, 800b312 <_fflush_r+0x1a>
 800b30e:	f7fe f9ef 	bl	80096f0 <__sinit>
 800b312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0f3      	beq.n	800b302 <_fflush_r+0xa>
 800b31a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b31c:	07d0      	lsls	r0, r2, #31
 800b31e:	d404      	bmi.n	800b32a <_fflush_r+0x32>
 800b320:	0599      	lsls	r1, r3, #22
 800b322:	d402      	bmi.n	800b32a <_fflush_r+0x32>
 800b324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b326:	f7fe fafa 	bl	800991e <__retarget_lock_acquire_recursive>
 800b32a:	4628      	mov	r0, r5
 800b32c:	4621      	mov	r1, r4
 800b32e:	f7ff ff5d 	bl	800b1ec <__sflush_r>
 800b332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b334:	07da      	lsls	r2, r3, #31
 800b336:	4605      	mov	r5, r0
 800b338:	d4e4      	bmi.n	800b304 <_fflush_r+0xc>
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	059b      	lsls	r3, r3, #22
 800b33e:	d4e1      	bmi.n	800b304 <_fflush_r+0xc>
 800b340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b342:	f7fe faed 	bl	8009920 <__retarget_lock_release_recursive>
 800b346:	e7dd      	b.n	800b304 <_fflush_r+0xc>

0800b348 <memmove>:
 800b348:	4288      	cmp	r0, r1
 800b34a:	b510      	push	{r4, lr}
 800b34c:	eb01 0402 	add.w	r4, r1, r2
 800b350:	d902      	bls.n	800b358 <memmove+0x10>
 800b352:	4284      	cmp	r4, r0
 800b354:	4623      	mov	r3, r4
 800b356:	d807      	bhi.n	800b368 <memmove+0x20>
 800b358:	1e43      	subs	r3, r0, #1
 800b35a:	42a1      	cmp	r1, r4
 800b35c:	d008      	beq.n	800b370 <memmove+0x28>
 800b35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b366:	e7f8      	b.n	800b35a <memmove+0x12>
 800b368:	4402      	add	r2, r0
 800b36a:	4601      	mov	r1, r0
 800b36c:	428a      	cmp	r2, r1
 800b36e:	d100      	bne.n	800b372 <memmove+0x2a>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b37a:	e7f7      	b.n	800b36c <memmove+0x24>

0800b37c <_sbrk_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_sbrk_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f8 f91e 	bl	80035c8 <_sbrk>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_sbrk_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_sbrk_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	2000484c 	.word	0x2000484c

0800b39c <__assert_func>:
 800b39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b39e:	4614      	mov	r4, r2
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <__assert_func+0x2c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	68d8      	ldr	r0, [r3, #12]
 800b3aa:	b14c      	cbz	r4, 800b3c0 <__assert_func+0x24>
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <__assert_func+0x30>)
 800b3ae:	9100      	str	r1, [sp, #0]
 800b3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3b4:	4906      	ldr	r1, [pc, #24]	; (800b3d0 <__assert_func+0x34>)
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	f000 f872 	bl	800b4a0 <fiprintf>
 800b3bc:	f000 f882 	bl	800b4c4 <abort>
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <__assert_func+0x38>)
 800b3c2:	461c      	mov	r4, r3
 800b3c4:	e7f3      	b.n	800b3ae <__assert_func+0x12>
 800b3c6:	bf00      	nop
 800b3c8:	20000100 	.word	0x20000100
 800b3cc:	0800c427 	.word	0x0800c427
 800b3d0:	0800c434 	.word	0x0800c434
 800b3d4:	0800c462 	.word	0x0800c462

0800b3d8 <_calloc_r>:
 800b3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3da:	fba1 2402 	umull	r2, r4, r1, r2
 800b3de:	b94c      	cbnz	r4, 800b3f4 <_calloc_r+0x1c>
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	9201      	str	r2, [sp, #4]
 800b3e4:	f7ff f9a2 	bl	800a72c <_malloc_r>
 800b3e8:	9a01      	ldr	r2, [sp, #4]
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	b930      	cbnz	r0, 800b3fc <_calloc_r+0x24>
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	b003      	add	sp, #12
 800b3f2:	bd30      	pop	{r4, r5, pc}
 800b3f4:	220c      	movs	r2, #12
 800b3f6:	6002      	str	r2, [r0, #0]
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	e7f8      	b.n	800b3ee <_calloc_r+0x16>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	f7fe fa10 	bl	8009822 <memset>
 800b402:	e7f4      	b.n	800b3ee <_calloc_r+0x16>

0800b404 <__ascii_mbtowc>:
 800b404:	b082      	sub	sp, #8
 800b406:	b901      	cbnz	r1, 800b40a <__ascii_mbtowc+0x6>
 800b408:	a901      	add	r1, sp, #4
 800b40a:	b142      	cbz	r2, 800b41e <__ascii_mbtowc+0x1a>
 800b40c:	b14b      	cbz	r3, 800b422 <__ascii_mbtowc+0x1e>
 800b40e:	7813      	ldrb	r3, [r2, #0]
 800b410:	600b      	str	r3, [r1, #0]
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	1e10      	subs	r0, r2, #0
 800b416:	bf18      	it	ne
 800b418:	2001      	movne	r0, #1
 800b41a:	b002      	add	sp, #8
 800b41c:	4770      	bx	lr
 800b41e:	4610      	mov	r0, r2
 800b420:	e7fb      	b.n	800b41a <__ascii_mbtowc+0x16>
 800b422:	f06f 0001 	mvn.w	r0, #1
 800b426:	e7f8      	b.n	800b41a <__ascii_mbtowc+0x16>

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	4611      	mov	r1, r2
 800b43a:	f7ff b977 	b.w	800a72c <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7ff f900 	bl	800a644 <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f841 	bl	800b4d2 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7ff f964 	bl	800a72c <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7fe fa5d 	bl	8009932 <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7ff f8e2 	bl	800a644 <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>

0800b486 <__ascii_wctomb>:
 800b486:	b149      	cbz	r1, 800b49c <__ascii_wctomb+0x16>
 800b488:	2aff      	cmp	r2, #255	; 0xff
 800b48a:	bf85      	ittet	hi
 800b48c:	238a      	movhi	r3, #138	; 0x8a
 800b48e:	6003      	strhi	r3, [r0, #0]
 800b490:	700a      	strbls	r2, [r1, #0]
 800b492:	f04f 30ff 	movhi.w	r0, #4294967295
 800b496:	bf98      	it	ls
 800b498:	2001      	movls	r0, #1
 800b49a:	4770      	bx	lr
 800b49c:	4608      	mov	r0, r1
 800b49e:	4770      	bx	lr

0800b4a0 <fiprintf>:
 800b4a0:	b40e      	push	{r1, r2, r3}
 800b4a2:	b503      	push	{r0, r1, lr}
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	ab03      	add	r3, sp, #12
 800b4a8:	4805      	ldr	r0, [pc, #20]	; (800b4c0 <fiprintf+0x20>)
 800b4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ae:	6800      	ldr	r0, [r0, #0]
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	f000 f83f 	bl	800b534 <_vfiprintf_r>
 800b4b6:	b002      	add	sp, #8
 800b4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4bc:	b003      	add	sp, #12
 800b4be:	4770      	bx	lr
 800b4c0:	20000100 	.word	0x20000100

0800b4c4 <abort>:
 800b4c4:	b508      	push	{r3, lr}
 800b4c6:	2006      	movs	r0, #6
 800b4c8:	f000 fa0c 	bl	800b8e4 <raise>
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	f7f8 f803 	bl	80034d8 <_exit>

0800b4d2 <_malloc_usable_size_r>:
 800b4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d6:	1f18      	subs	r0, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bfbc      	itt	lt
 800b4dc:	580b      	ldrlt	r3, [r1, r0]
 800b4de:	18c0      	addlt	r0, r0, r3
 800b4e0:	4770      	bx	lr

0800b4e2 <__sfputc_r>:
 800b4e2:	6893      	ldr	r3, [r2, #8]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	b410      	push	{r4}
 800b4ea:	6093      	str	r3, [r2, #8]
 800b4ec:	da08      	bge.n	800b500 <__sfputc_r+0x1e>
 800b4ee:	6994      	ldr	r4, [r2, #24]
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	db01      	blt.n	800b4f8 <__sfputc_r+0x16>
 800b4f4:	290a      	cmp	r1, #10
 800b4f6:	d103      	bne.n	800b500 <__sfputc_r+0x1e>
 800b4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4fc:	f000 b934 	b.w	800b768 <__swbuf_r>
 800b500:	6813      	ldr	r3, [r2, #0]
 800b502:	1c58      	adds	r0, r3, #1
 800b504:	6010      	str	r0, [r2, #0]
 800b506:	7019      	strb	r1, [r3, #0]
 800b508:	4608      	mov	r0, r1
 800b50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <__sfputs_r>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	4614      	mov	r4, r2
 800b518:	18d5      	adds	r5, r2, r3
 800b51a:	42ac      	cmp	r4, r5
 800b51c:	d101      	bne.n	800b522 <__sfputs_r+0x12>
 800b51e:	2000      	movs	r0, #0
 800b520:	e007      	b.n	800b532 <__sfputs_r+0x22>
 800b522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b526:	463a      	mov	r2, r7
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff ffda 	bl	800b4e2 <__sfputc_r>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	d1f3      	bne.n	800b51a <__sfputs_r+0xa>
 800b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b534 <_vfiprintf_r>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	460d      	mov	r5, r1
 800b53a:	b09d      	sub	sp, #116	; 0x74
 800b53c:	4614      	mov	r4, r2
 800b53e:	4698      	mov	r8, r3
 800b540:	4606      	mov	r6, r0
 800b542:	b118      	cbz	r0, 800b54c <_vfiprintf_r+0x18>
 800b544:	6a03      	ldr	r3, [r0, #32]
 800b546:	b90b      	cbnz	r3, 800b54c <_vfiprintf_r+0x18>
 800b548:	f7fe f8d2 	bl	80096f0 <__sinit>
 800b54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x2a>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x2a>
 800b558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b55a:	f7fe f9e0 	bl	800991e <__retarget_lock_acquire_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	071b      	lsls	r3, r3, #28
 800b562:	d501      	bpl.n	800b568 <_vfiprintf_r+0x34>
 800b564:	692b      	ldr	r3, [r5, #16]
 800b566:	b99b      	cbnz	r3, 800b590 <_vfiprintf_r+0x5c>
 800b568:	4629      	mov	r1, r5
 800b56a:	4630      	mov	r0, r6
 800b56c:	f000 f93a 	bl	800b7e4 <__swsetup_r>
 800b570:	b170      	cbz	r0, 800b590 <_vfiprintf_r+0x5c>
 800b572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b574:	07dc      	lsls	r4, r3, #31
 800b576:	d504      	bpl.n	800b582 <_vfiprintf_r+0x4e>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	b01d      	add	sp, #116	; 0x74
 800b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	0598      	lsls	r0, r3, #22
 800b586:	d4f7      	bmi.n	800b578 <_vfiprintf_r+0x44>
 800b588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b58a:	f7fe f9c9 	bl	8009920 <__retarget_lock_release_recursive>
 800b58e:	e7f3      	b.n	800b578 <_vfiprintf_r+0x44>
 800b590:	2300      	movs	r3, #0
 800b592:	9309      	str	r3, [sp, #36]	; 0x24
 800b594:	2320      	movs	r3, #32
 800b596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59e:	2330      	movs	r3, #48	; 0x30
 800b5a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b754 <_vfiprintf_r+0x220>
 800b5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5a8:	f04f 0901 	mov.w	r9, #1
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	469a      	mov	sl, r3
 800b5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b4:	b10a      	cbz	r2, 800b5ba <_vfiprintf_r+0x86>
 800b5b6:	2a25      	cmp	r2, #37	; 0x25
 800b5b8:	d1f9      	bne.n	800b5ae <_vfiprintf_r+0x7a>
 800b5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b5be:	d00b      	beq.n	800b5d8 <_vfiprintf_r+0xa4>
 800b5c0:	465b      	mov	r3, fp
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ffa2 	bl	800b510 <__sfputs_r>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f000 80a9 	beq.w	800b724 <_vfiprintf_r+0x1f0>
 800b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d4:	445a      	add	r2, fp
 800b5d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 80a1 	beq.w	800b724 <_vfiprintf_r+0x1f0>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ec:	f10a 0a01 	add.w	sl, sl, #1
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9307      	str	r3, [sp, #28]
 800b5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5fa:	4654      	mov	r4, sl
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b602:	4854      	ldr	r0, [pc, #336]	; (800b754 <_vfiprintf_r+0x220>)
 800b604:	f7f4 fde4 	bl	80001d0 <memchr>
 800b608:	9a04      	ldr	r2, [sp, #16]
 800b60a:	b9d8      	cbnz	r0, 800b644 <_vfiprintf_r+0x110>
 800b60c:	06d1      	lsls	r1, r2, #27
 800b60e:	bf44      	itt	mi
 800b610:	2320      	movmi	r3, #32
 800b612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b616:	0713      	lsls	r3, r2, #28
 800b618:	bf44      	itt	mi
 800b61a:	232b      	movmi	r3, #43	; 0x2b
 800b61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b620:	f89a 3000 	ldrb.w	r3, [sl]
 800b624:	2b2a      	cmp	r3, #42	; 0x2a
 800b626:	d015      	beq.n	800b654 <_vfiprintf_r+0x120>
 800b628:	9a07      	ldr	r2, [sp, #28]
 800b62a:	4654      	mov	r4, sl
 800b62c:	2000      	movs	r0, #0
 800b62e:	f04f 0c0a 	mov.w	ip, #10
 800b632:	4621      	mov	r1, r4
 800b634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b638:	3b30      	subs	r3, #48	; 0x30
 800b63a:	2b09      	cmp	r3, #9
 800b63c:	d94d      	bls.n	800b6da <_vfiprintf_r+0x1a6>
 800b63e:	b1b0      	cbz	r0, 800b66e <_vfiprintf_r+0x13a>
 800b640:	9207      	str	r2, [sp, #28]
 800b642:	e014      	b.n	800b66e <_vfiprintf_r+0x13a>
 800b644:	eba0 0308 	sub.w	r3, r0, r8
 800b648:	fa09 f303 	lsl.w	r3, r9, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	46a2      	mov	sl, r4
 800b652:	e7d2      	b.n	800b5fa <_vfiprintf_r+0xc6>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1d19      	adds	r1, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9103      	str	r1, [sp, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfbb      	ittet	lt
 800b660:	425b      	neglt	r3, r3
 800b662:	f042 0202 	orrlt.w	r2, r2, #2
 800b666:	9307      	strge	r3, [sp, #28]
 800b668:	9307      	strlt	r3, [sp, #28]
 800b66a:	bfb8      	it	lt
 800b66c:	9204      	strlt	r2, [sp, #16]
 800b66e:	7823      	ldrb	r3, [r4, #0]
 800b670:	2b2e      	cmp	r3, #46	; 0x2e
 800b672:	d10c      	bne.n	800b68e <_vfiprintf_r+0x15a>
 800b674:	7863      	ldrb	r3, [r4, #1]
 800b676:	2b2a      	cmp	r3, #42	; 0x2a
 800b678:	d134      	bne.n	800b6e4 <_vfiprintf_r+0x1b0>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	9203      	str	r2, [sp, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfb8      	it	lt
 800b686:	f04f 33ff 	movlt.w	r3, #4294967295
 800b68a:	3402      	adds	r4, #2
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b764 <_vfiprintf_r+0x230>
 800b692:	7821      	ldrb	r1, [r4, #0]
 800b694:	2203      	movs	r2, #3
 800b696:	4650      	mov	r0, sl
 800b698:	f7f4 fd9a 	bl	80001d0 <memchr>
 800b69c:	b138      	cbz	r0, 800b6ae <_vfiprintf_r+0x17a>
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	eba0 000a 	sub.w	r0, r0, sl
 800b6a4:	2240      	movs	r2, #64	; 0x40
 800b6a6:	4082      	lsls	r2, r0
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	4829      	ldr	r0, [pc, #164]	; (800b758 <_vfiprintf_r+0x224>)
 800b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6b8:	2206      	movs	r2, #6
 800b6ba:	f7f4 fd89 	bl	80001d0 <memchr>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d03f      	beq.n	800b742 <_vfiprintf_r+0x20e>
 800b6c2:	4b26      	ldr	r3, [pc, #152]	; (800b75c <_vfiprintf_r+0x228>)
 800b6c4:	bb1b      	cbnz	r3, 800b70e <_vfiprintf_r+0x1da>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	3307      	adds	r3, #7
 800b6ca:	f023 0307 	bic.w	r3, r3, #7
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	9303      	str	r3, [sp, #12]
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	443b      	add	r3, r7
 800b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d8:	e768      	b.n	800b5ac <_vfiprintf_r+0x78>
 800b6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6de:	460c      	mov	r4, r1
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e7a6      	b.n	800b632 <_vfiprintf_r+0xfe>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	3401      	adds	r4, #1
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f6:	3a30      	subs	r2, #48	; 0x30
 800b6f8:	2a09      	cmp	r2, #9
 800b6fa:	d903      	bls.n	800b704 <_vfiprintf_r+0x1d0>
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0c6      	beq.n	800b68e <_vfiprintf_r+0x15a>
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	e7c4      	b.n	800b68e <_vfiprintf_r+0x15a>
 800b704:	fb0c 2101 	mla	r1, ip, r1, r2
 800b708:	4604      	mov	r4, r0
 800b70a:	2301      	movs	r3, #1
 800b70c:	e7f0      	b.n	800b6f0 <_vfiprintf_r+0x1bc>
 800b70e:	ab03      	add	r3, sp, #12
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	462a      	mov	r2, r5
 800b714:	4b12      	ldr	r3, [pc, #72]	; (800b760 <_vfiprintf_r+0x22c>)
 800b716:	a904      	add	r1, sp, #16
 800b718:	4630      	mov	r0, r6
 800b71a:	f7fd fb97 	bl	8008e4c <_printf_float>
 800b71e:	4607      	mov	r7, r0
 800b720:	1c78      	adds	r0, r7, #1
 800b722:	d1d6      	bne.n	800b6d2 <_vfiprintf_r+0x19e>
 800b724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b726:	07d9      	lsls	r1, r3, #31
 800b728:	d405      	bmi.n	800b736 <_vfiprintf_r+0x202>
 800b72a:	89ab      	ldrh	r3, [r5, #12]
 800b72c:	059a      	lsls	r2, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_vfiprintf_r+0x202>
 800b730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b732:	f7fe f8f5 	bl	8009920 <__retarget_lock_release_recursive>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	065b      	lsls	r3, r3, #25
 800b73a:	f53f af1d 	bmi.w	800b578 <_vfiprintf_r+0x44>
 800b73e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b740:	e71c      	b.n	800b57c <_vfiprintf_r+0x48>
 800b742:	ab03      	add	r3, sp, #12
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	462a      	mov	r2, r5
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <_vfiprintf_r+0x22c>)
 800b74a:	a904      	add	r1, sp, #16
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7fd fe21 	bl	8009394 <_printf_i>
 800b752:	e7e4      	b.n	800b71e <_vfiprintf_r+0x1ea>
 800b754:	0800c40c 	.word	0x0800c40c
 800b758:	0800c416 	.word	0x0800c416
 800b75c:	08008e4d 	.word	0x08008e4d
 800b760:	0800b511 	.word	0x0800b511
 800b764:	0800c412 	.word	0x0800c412

0800b768 <__swbuf_r>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	460e      	mov	r6, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	4605      	mov	r5, r0
 800b770:	b118      	cbz	r0, 800b77a <__swbuf_r+0x12>
 800b772:	6a03      	ldr	r3, [r0, #32]
 800b774:	b90b      	cbnz	r3, 800b77a <__swbuf_r+0x12>
 800b776:	f7fd ffbb 	bl	80096f0 <__sinit>
 800b77a:	69a3      	ldr	r3, [r4, #24]
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	071a      	lsls	r2, r3, #28
 800b782:	d525      	bpl.n	800b7d0 <__swbuf_r+0x68>
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	b31b      	cbz	r3, 800b7d0 <__swbuf_r+0x68>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	1a98      	subs	r0, r3, r2
 800b78e:	6963      	ldr	r3, [r4, #20]
 800b790:	b2f6      	uxtb	r6, r6
 800b792:	4283      	cmp	r3, r0
 800b794:	4637      	mov	r7, r6
 800b796:	dc04      	bgt.n	800b7a2 <__swbuf_r+0x3a>
 800b798:	4621      	mov	r1, r4
 800b79a:	4628      	mov	r0, r5
 800b79c:	f7ff fdac 	bl	800b2f8 <_fflush_r>
 800b7a0:	b9e0      	cbnz	r0, 800b7dc <__swbuf_r+0x74>
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	701e      	strb	r6, [r3, #0]
 800b7b0:	6962      	ldr	r2, [r4, #20]
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d004      	beq.n	800b7c2 <__swbuf_r+0x5a>
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	07db      	lsls	r3, r3, #31
 800b7bc:	d506      	bpl.n	800b7cc <__swbuf_r+0x64>
 800b7be:	2e0a      	cmp	r6, #10
 800b7c0:	d104      	bne.n	800b7cc <__swbuf_r+0x64>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f7ff fd97 	bl	800b2f8 <_fflush_r>
 800b7ca:	b938      	cbnz	r0, 800b7dc <__swbuf_r+0x74>
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f000 f806 	bl	800b7e4 <__swsetup_r>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0d5      	beq.n	800b788 <__swbuf_r+0x20>
 800b7dc:	f04f 37ff 	mov.w	r7, #4294967295
 800b7e0:	e7f4      	b.n	800b7cc <__swbuf_r+0x64>
	...

0800b7e4 <__swsetup_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4b2a      	ldr	r3, [pc, #168]	; (800b890 <__swsetup_r+0xac>)
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	b118      	cbz	r0, 800b7f8 <__swsetup_r+0x14>
 800b7f0:	6a03      	ldr	r3, [r0, #32]
 800b7f2:	b90b      	cbnz	r3, 800b7f8 <__swsetup_r+0x14>
 800b7f4:	f7fd ff7c 	bl	80096f0 <__sinit>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7fe:	0718      	lsls	r0, r3, #28
 800b800:	d422      	bmi.n	800b848 <__swsetup_r+0x64>
 800b802:	06d9      	lsls	r1, r3, #27
 800b804:	d407      	bmi.n	800b816 <__swsetup_r+0x32>
 800b806:	2309      	movs	r3, #9
 800b808:	602b      	str	r3, [r5, #0]
 800b80a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	e034      	b.n	800b880 <__swsetup_r+0x9c>
 800b816:	0758      	lsls	r0, r3, #29
 800b818:	d512      	bpl.n	800b840 <__swsetup_r+0x5c>
 800b81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b81c:	b141      	cbz	r1, 800b830 <__swsetup_r+0x4c>
 800b81e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b822:	4299      	cmp	r1, r3
 800b824:	d002      	beq.n	800b82c <__swsetup_r+0x48>
 800b826:	4628      	mov	r0, r5
 800b828:	f7fe ff0c 	bl	800a644 <_free_r>
 800b82c:	2300      	movs	r3, #0
 800b82e:	6363      	str	r3, [r4, #52]	; 0x34
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	2300      	movs	r3, #0
 800b83a:	6063      	str	r3, [r4, #4]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	f043 0308 	orr.w	r3, r3, #8
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	b94b      	cbnz	r3, 800b860 <__swsetup_r+0x7c>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b856:	d003      	beq.n	800b860 <__swsetup_r+0x7c>
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f884 	bl	800b968 <__smakebuf_r>
 800b860:	89a0      	ldrh	r0, [r4, #12]
 800b862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b866:	f010 0301 	ands.w	r3, r0, #1
 800b86a:	d00a      	beq.n	800b882 <__swsetup_r+0x9e>
 800b86c:	2300      	movs	r3, #0
 800b86e:	60a3      	str	r3, [r4, #8]
 800b870:	6963      	ldr	r3, [r4, #20]
 800b872:	425b      	negs	r3, r3
 800b874:	61a3      	str	r3, [r4, #24]
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	b943      	cbnz	r3, 800b88c <__swsetup_r+0xa8>
 800b87a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b87e:	d1c4      	bne.n	800b80a <__swsetup_r+0x26>
 800b880:	bd38      	pop	{r3, r4, r5, pc}
 800b882:	0781      	lsls	r1, r0, #30
 800b884:	bf58      	it	pl
 800b886:	6963      	ldrpl	r3, [r4, #20]
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	e7f4      	b.n	800b876 <__swsetup_r+0x92>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7f7      	b.n	800b880 <__swsetup_r+0x9c>
 800b890:	20000100 	.word	0x20000100

0800b894 <_raise_r>:
 800b894:	291f      	cmp	r1, #31
 800b896:	b538      	push	{r3, r4, r5, lr}
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	d904      	bls.n	800b8a8 <_raise_r+0x14>
 800b89e:	2316      	movs	r3, #22
 800b8a0:	6003      	str	r3, [r0, #0]
 800b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b8aa:	b112      	cbz	r2, 800b8b2 <_raise_r+0x1e>
 800b8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8b0:	b94b      	cbnz	r3, 800b8c6 <_raise_r+0x32>
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 f830 	bl	800b918 <_getpid_r>
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4620      	mov	r0, r4
 800b8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8c2:	f000 b817 	b.w	800b8f4 <_kill_r>
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d00a      	beq.n	800b8e0 <_raise_r+0x4c>
 800b8ca:	1c59      	adds	r1, r3, #1
 800b8cc:	d103      	bne.n	800b8d6 <_raise_r+0x42>
 800b8ce:	2316      	movs	r3, #22
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	2001      	movs	r0, #1
 800b8d4:	e7e7      	b.n	800b8a6 <_raise_r+0x12>
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8dc:	4628      	mov	r0, r5
 800b8de:	4798      	blx	r3
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e7e0      	b.n	800b8a6 <_raise_r+0x12>

0800b8e4 <raise>:
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <raise+0xc>)
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	f7ff bfd3 	b.w	800b894 <_raise_r>
 800b8ee:	bf00      	nop
 800b8f0:	20000100 	.word	0x20000100

0800b8f4 <_kill_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_kill_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f7 fdd9 	bl	80034b8 <_kill>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_kill_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_kill_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	2000484c 	.word	0x2000484c

0800b918 <_getpid_r>:
 800b918:	f7f7 bdc6 	b.w	80034a8 <_getpid>

0800b91c <__swhatbuf_r>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	460c      	mov	r4, r1
 800b920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b924:	2900      	cmp	r1, #0
 800b926:	b096      	sub	sp, #88	; 0x58
 800b928:	4615      	mov	r5, r2
 800b92a:	461e      	mov	r6, r3
 800b92c:	da0d      	bge.n	800b94a <__swhatbuf_r+0x2e>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b934:	f04f 0100 	mov.w	r1, #0
 800b938:	bf0c      	ite	eq
 800b93a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b93e:	2340      	movne	r3, #64	; 0x40
 800b940:	2000      	movs	r0, #0
 800b942:	6031      	str	r1, [r6, #0]
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	b016      	add	sp, #88	; 0x58
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	466a      	mov	r2, sp
 800b94c:	f000 f848 	bl	800b9e0 <_fstat_r>
 800b950:	2800      	cmp	r0, #0
 800b952:	dbec      	blt.n	800b92e <__swhatbuf_r+0x12>
 800b954:	9901      	ldr	r1, [sp, #4]
 800b956:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b95a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b95e:	4259      	negs	r1, r3
 800b960:	4159      	adcs	r1, r3
 800b962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b966:	e7eb      	b.n	800b940 <__swhatbuf_r+0x24>

0800b968 <__smakebuf_r>:
 800b968:	898b      	ldrh	r3, [r1, #12]
 800b96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b96c:	079d      	lsls	r5, r3, #30
 800b96e:	4606      	mov	r6, r0
 800b970:	460c      	mov	r4, r1
 800b972:	d507      	bpl.n	800b984 <__smakebuf_r+0x1c>
 800b974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	2301      	movs	r3, #1
 800b97e:	6163      	str	r3, [r4, #20]
 800b980:	b002      	add	sp, #8
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	ab01      	add	r3, sp, #4
 800b986:	466a      	mov	r2, sp
 800b988:	f7ff ffc8 	bl	800b91c <__swhatbuf_r>
 800b98c:	9900      	ldr	r1, [sp, #0]
 800b98e:	4605      	mov	r5, r0
 800b990:	4630      	mov	r0, r6
 800b992:	f7fe fecb 	bl	800a72c <_malloc_r>
 800b996:	b948      	cbnz	r0, 800b9ac <__smakebuf_r+0x44>
 800b998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99c:	059a      	lsls	r2, r3, #22
 800b99e:	d4ef      	bmi.n	800b980 <__smakebuf_r+0x18>
 800b9a0:	f023 0303 	bic.w	r3, r3, #3
 800b9a4:	f043 0302 	orr.w	r3, r3, #2
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	e7e3      	b.n	800b974 <__smakebuf_r+0xc>
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	6020      	str	r0, [r4, #0]
 800b9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b4:	81a3      	strh	r3, [r4, #12]
 800b9b6:	9b00      	ldr	r3, [sp, #0]
 800b9b8:	6163      	str	r3, [r4, #20]
 800b9ba:	9b01      	ldr	r3, [sp, #4]
 800b9bc:	6120      	str	r0, [r4, #16]
 800b9be:	b15b      	cbz	r3, 800b9d8 <__smakebuf_r+0x70>
 800b9c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f000 f81d 	bl	800ba04 <_isatty_r>
 800b9ca:	b128      	cbz	r0, 800b9d8 <__smakebuf_r+0x70>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f023 0303 	bic.w	r3, r3, #3
 800b9d2:	f043 0301 	orr.w	r3, r3, #1
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	431d      	orrs	r5, r3
 800b9dc:	81a5      	strh	r5, [r4, #12]
 800b9de:	e7cf      	b.n	800b980 <__smakebuf_r+0x18>

0800b9e0 <_fstat_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	; (800ba00 <_fstat_r+0x20>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	f7f7 fdc2 	bl	8003576 <_fstat>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	d102      	bne.n	800b9fc <_fstat_r+0x1c>
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	b103      	cbz	r3, 800b9fc <_fstat_r+0x1c>
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	bd38      	pop	{r3, r4, r5, pc}
 800b9fe:	bf00      	nop
 800ba00:	2000484c 	.word	0x2000484c

0800ba04 <_isatty_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d06      	ldr	r5, [pc, #24]	; (800ba20 <_isatty_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	f7f7 fdc1 	bl	8003596 <_isatty>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_isatty_r+0x1a>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_isatty_r+0x1a>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	2000484c 	.word	0x2000484c

0800ba24 <atan2>:
 800ba24:	f000 bab0 	b.w	800bf88 <__ieee754_atan2>

0800ba28 <sqrt>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	ed2d 8b02 	vpush	{d8}
 800ba2e:	ec55 4b10 	vmov	r4, r5, d0
 800ba32:	f000 f9cf 	bl	800bdd4 <__ieee754_sqrt>
 800ba36:	4622      	mov	r2, r4
 800ba38:	462b      	mov	r3, r5
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ba42:	eef0 8a60 	vmov.f32	s17, s1
 800ba46:	f7f5 f871 	bl	8000b2c <__aeabi_dcmpun>
 800ba4a:	b990      	cbnz	r0, 800ba72 <sqrt+0x4a>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4620      	mov	r0, r4
 800ba52:	4629      	mov	r1, r5
 800ba54:	f7f5 f842 	bl	8000adc <__aeabi_dcmplt>
 800ba58:	b158      	cbz	r0, 800ba72 <sqrt+0x4a>
 800ba5a:	f7fd ff35 	bl	80098c8 <__errno>
 800ba5e:	2321      	movs	r3, #33	; 0x21
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	4610      	mov	r0, r2
 800ba68:	4619      	mov	r1, r3
 800ba6a:	f7f4 feef 	bl	800084c <__aeabi_ddiv>
 800ba6e:	ec41 0b18 	vmov	d8, r0, r1
 800ba72:	eeb0 0a48 	vmov.f32	s0, s16
 800ba76:	eef0 0a68 	vmov.f32	s1, s17
 800ba7a:	ecbd 8b02 	vpop	{d8}
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}

0800ba80 <atan>:
 800ba80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	ec55 4b10 	vmov	r4, r5, d0
 800ba88:	4bc3      	ldr	r3, [pc, #780]	; (800bd98 <atan+0x318>)
 800ba8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba8e:	429e      	cmp	r6, r3
 800ba90:	46ab      	mov	fp, r5
 800ba92:	dd18      	ble.n	800bac6 <atan+0x46>
 800ba94:	4bc1      	ldr	r3, [pc, #772]	; (800bd9c <atan+0x31c>)
 800ba96:	429e      	cmp	r6, r3
 800ba98:	dc01      	bgt.n	800ba9e <atan+0x1e>
 800ba9a:	d109      	bne.n	800bab0 <atan+0x30>
 800ba9c:	b144      	cbz	r4, 800bab0 <atan+0x30>
 800ba9e:	4622      	mov	r2, r4
 800baa0:	462b      	mov	r3, r5
 800baa2:	4620      	mov	r0, r4
 800baa4:	4629      	mov	r1, r5
 800baa6:	f7f4 fbf1 	bl	800028c <__adddf3>
 800baaa:	4604      	mov	r4, r0
 800baac:	460d      	mov	r5, r1
 800baae:	e006      	b.n	800babe <atan+0x3e>
 800bab0:	f1bb 0f00 	cmp.w	fp, #0
 800bab4:	f300 8131 	bgt.w	800bd1a <atan+0x29a>
 800bab8:	a59b      	add	r5, pc, #620	; (adr r5, 800bd28 <atan+0x2a8>)
 800baba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800babe:	ec45 4b10 	vmov	d0, r4, r5
 800bac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac6:	4bb6      	ldr	r3, [pc, #728]	; (800bda0 <atan+0x320>)
 800bac8:	429e      	cmp	r6, r3
 800baca:	dc14      	bgt.n	800baf6 <atan+0x76>
 800bacc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bad0:	429e      	cmp	r6, r3
 800bad2:	dc0d      	bgt.n	800baf0 <atan+0x70>
 800bad4:	a396      	add	r3, pc, #600	; (adr r3, 800bd30 <atan+0x2b0>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	ee10 0a10 	vmov	r0, s0
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fbd4 	bl	800028c <__adddf3>
 800bae4:	4baf      	ldr	r3, [pc, #700]	; (800bda4 <atan+0x324>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	f7f5 f816 	bl	8000b18 <__aeabi_dcmpgt>
 800baec:	2800      	cmp	r0, #0
 800baee:	d1e6      	bne.n	800babe <atan+0x3e>
 800baf0:	f04f 3aff 	mov.w	sl, #4294967295
 800baf4:	e02b      	b.n	800bb4e <atan+0xce>
 800baf6:	f000 f963 	bl	800bdc0 <fabs>
 800bafa:	4bab      	ldr	r3, [pc, #684]	; (800bda8 <atan+0x328>)
 800bafc:	429e      	cmp	r6, r3
 800bafe:	ec55 4b10 	vmov	r4, r5, d0
 800bb02:	f300 80bf 	bgt.w	800bc84 <atan+0x204>
 800bb06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb0a:	429e      	cmp	r6, r3
 800bb0c:	f300 80a0 	bgt.w	800bc50 <atan+0x1d0>
 800bb10:	ee10 2a10 	vmov	r2, s0
 800bb14:	ee10 0a10 	vmov	r0, s0
 800bb18:	462b      	mov	r3, r5
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7f4 fbb6 	bl	800028c <__adddf3>
 800bb20:	4ba0      	ldr	r3, [pc, #640]	; (800bda4 <atan+0x324>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	f7f4 fbb0 	bl	8000288 <__aeabi_dsub>
 800bb28:	2200      	movs	r2, #0
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb32:	4620      	mov	r0, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	f7f4 fba9 	bl	800028c <__adddf3>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4630      	mov	r0, r6
 800bb40:	4639      	mov	r1, r7
 800bb42:	f7f4 fe83 	bl	800084c <__aeabi_ddiv>
 800bb46:	f04f 0a00 	mov.w	sl, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	4622      	mov	r2, r4
 800bb50:	462b      	mov	r3, r5
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7f4 fd4f 	bl	80005f8 <__aeabi_dmul>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4680      	mov	r8, r0
 800bb60:	4689      	mov	r9, r1
 800bb62:	f7f4 fd49 	bl	80005f8 <__aeabi_dmul>
 800bb66:	a374      	add	r3, pc, #464	; (adr r3, 800bd38 <atan+0x2b8>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	f7f4 fd42 	bl	80005f8 <__aeabi_dmul>
 800bb74:	a372      	add	r3, pc, #456	; (adr r3, 800bd40 <atan+0x2c0>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fb87 	bl	800028c <__adddf3>
 800bb7e:	4632      	mov	r2, r6
 800bb80:	463b      	mov	r3, r7
 800bb82:	f7f4 fd39 	bl	80005f8 <__aeabi_dmul>
 800bb86:	a370      	add	r3, pc, #448	; (adr r3, 800bd48 <atan+0x2c8>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f7f4 fb7e 	bl	800028c <__adddf3>
 800bb90:	4632      	mov	r2, r6
 800bb92:	463b      	mov	r3, r7
 800bb94:	f7f4 fd30 	bl	80005f8 <__aeabi_dmul>
 800bb98:	a36d      	add	r3, pc, #436	; (adr r3, 800bd50 <atan+0x2d0>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f7f4 fb75 	bl	800028c <__adddf3>
 800bba2:	4632      	mov	r2, r6
 800bba4:	463b      	mov	r3, r7
 800bba6:	f7f4 fd27 	bl	80005f8 <__aeabi_dmul>
 800bbaa:	a36b      	add	r3, pc, #428	; (adr r3, 800bd58 <atan+0x2d8>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f7f4 fb6c 	bl	800028c <__adddf3>
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	f7f4 fd1e 	bl	80005f8 <__aeabi_dmul>
 800bbbc:	a368      	add	r3, pc, #416	; (adr r3, 800bd60 <atan+0x2e0>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f7f4 fb63 	bl	800028c <__adddf3>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	f7f4 fd15 	bl	80005f8 <__aeabi_dmul>
 800bbce:	a366      	add	r3, pc, #408	; (adr r3, 800bd68 <atan+0x2e8>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	4689      	mov	r9, r1
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	a363      	add	r3, pc, #396	; (adr r3, 800bd70 <atan+0x2f0>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fb4f 	bl	8000288 <__aeabi_dsub>
 800bbea:	4632      	mov	r2, r6
 800bbec:	463b      	mov	r3, r7
 800bbee:	f7f4 fd03 	bl	80005f8 <__aeabi_dmul>
 800bbf2:	a361      	add	r3, pc, #388	; (adr r3, 800bd78 <atan+0x2f8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb46 	bl	8000288 <__aeabi_dsub>
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	463b      	mov	r3, r7
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	a35e      	add	r3, pc, #376	; (adr r3, 800bd80 <atan+0x300>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb3d 	bl	8000288 <__aeabi_dsub>
 800bc0e:	4632      	mov	r2, r6
 800bc10:	463b      	mov	r3, r7
 800bc12:	f7f4 fcf1 	bl	80005f8 <__aeabi_dmul>
 800bc16:	a35c      	add	r3, pc, #368	; (adr r3, 800bd88 <atan+0x308>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 fb34 	bl	8000288 <__aeabi_dsub>
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 fb2c 	bl	800028c <__adddf3>
 800bc34:	4622      	mov	r2, r4
 800bc36:	462b      	mov	r3, r5
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	d14b      	bne.n	800bcde <atan+0x25e>
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7f4 fb1d 	bl	8000288 <__aeabi_dsub>
 800bc4e:	e72c      	b.n	800baaa <atan+0x2a>
 800bc50:	ee10 0a10 	vmov	r0, s0
 800bc54:	4b53      	ldr	r3, [pc, #332]	; (800bda4 <atan+0x324>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	4629      	mov	r1, r5
 800bc5a:	f7f4 fb15 	bl	8000288 <__aeabi_dsub>
 800bc5e:	4b51      	ldr	r3, [pc, #324]	; (800bda4 <atan+0x324>)
 800bc60:	4606      	mov	r6, r0
 800bc62:	460f      	mov	r7, r1
 800bc64:	2200      	movs	r2, #0
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fb0f 	bl	800028c <__adddf3>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 fde9 	bl	800084c <__aeabi_ddiv>
 800bc7a:	f04f 0a01 	mov.w	sl, #1
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	e764      	b.n	800bb4e <atan+0xce>
 800bc84:	4b49      	ldr	r3, [pc, #292]	; (800bdac <atan+0x32c>)
 800bc86:	429e      	cmp	r6, r3
 800bc88:	da1d      	bge.n	800bcc6 <atan+0x246>
 800bc8a:	ee10 0a10 	vmov	r0, s0
 800bc8e:	4b48      	ldr	r3, [pc, #288]	; (800bdb0 <atan+0x330>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	4629      	mov	r1, r5
 800bc94:	f7f4 faf8 	bl	8000288 <__aeabi_dsub>
 800bc98:	4b45      	ldr	r3, [pc, #276]	; (800bdb0 <atan+0x330>)
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	460f      	mov	r7, r1
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4620      	mov	r0, r4
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 fca8 	bl	80005f8 <__aeabi_dmul>
 800bca8:	4b3e      	ldr	r3, [pc, #248]	; (800bda4 <atan+0x324>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 faee 	bl	800028c <__adddf3>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f7f4 fdc8 	bl	800084c <__aeabi_ddiv>
 800bcbc:	f04f 0a02 	mov.w	sl, #2
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	e743      	b.n	800bb4e <atan+0xce>
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	ee10 2a10 	vmov	r2, s0
 800bccc:	4939      	ldr	r1, [pc, #228]	; (800bdb4 <atan+0x334>)
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f7f4 fdbc 	bl	800084c <__aeabi_ddiv>
 800bcd4:	f04f 0a03 	mov.w	sl, #3
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	e737      	b.n	800bb4e <atan+0xce>
 800bcde:	4b36      	ldr	r3, [pc, #216]	; (800bdb8 <atan+0x338>)
 800bce0:	4e36      	ldr	r6, [pc, #216]	; (800bdbc <atan+0x33c>)
 800bce2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 facd 	bl	8000288 <__aeabi_dsub>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	462b      	mov	r3, r5
 800bcf2:	f7f4 fac9 	bl	8000288 <__aeabi_dsub>
 800bcf6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd02:	f7f4 fac1 	bl	8000288 <__aeabi_dsub>
 800bd06:	f1bb 0f00 	cmp.w	fp, #0
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	f6bf aed6 	bge.w	800babe <atan+0x3e>
 800bd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd16:	461d      	mov	r5, r3
 800bd18:	e6d1      	b.n	800babe <atan+0x3e>
 800bd1a:	a51d      	add	r5, pc, #116	; (adr r5, 800bd90 <atan+0x310>)
 800bd1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd20:	e6cd      	b.n	800babe <atan+0x3e>
 800bd22:	bf00      	nop
 800bd24:	f3af 8000 	nop.w
 800bd28:	54442d18 	.word	0x54442d18
 800bd2c:	bff921fb 	.word	0xbff921fb
 800bd30:	8800759c 	.word	0x8800759c
 800bd34:	7e37e43c 	.word	0x7e37e43c
 800bd38:	e322da11 	.word	0xe322da11
 800bd3c:	3f90ad3a 	.word	0x3f90ad3a
 800bd40:	24760deb 	.word	0x24760deb
 800bd44:	3fa97b4b 	.word	0x3fa97b4b
 800bd48:	a0d03d51 	.word	0xa0d03d51
 800bd4c:	3fb10d66 	.word	0x3fb10d66
 800bd50:	c54c206e 	.word	0xc54c206e
 800bd54:	3fb745cd 	.word	0x3fb745cd
 800bd58:	920083ff 	.word	0x920083ff
 800bd5c:	3fc24924 	.word	0x3fc24924
 800bd60:	5555550d 	.word	0x5555550d
 800bd64:	3fd55555 	.word	0x3fd55555
 800bd68:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd6c:	bfa2b444 	.word	0xbfa2b444
 800bd70:	52defd9a 	.word	0x52defd9a
 800bd74:	3fadde2d 	.word	0x3fadde2d
 800bd78:	af749a6d 	.word	0xaf749a6d
 800bd7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd80:	fe231671 	.word	0xfe231671
 800bd84:	3fbc71c6 	.word	0x3fbc71c6
 800bd88:	9998ebc4 	.word	0x9998ebc4
 800bd8c:	3fc99999 	.word	0x3fc99999
 800bd90:	54442d18 	.word	0x54442d18
 800bd94:	3ff921fb 	.word	0x3ff921fb
 800bd98:	440fffff 	.word	0x440fffff
 800bd9c:	7ff00000 	.word	0x7ff00000
 800bda0:	3fdbffff 	.word	0x3fdbffff
 800bda4:	3ff00000 	.word	0x3ff00000
 800bda8:	3ff2ffff 	.word	0x3ff2ffff
 800bdac:	40038000 	.word	0x40038000
 800bdb0:	3ff80000 	.word	0x3ff80000
 800bdb4:	bff00000 	.word	0xbff00000
 800bdb8:	0800c588 	.word	0x0800c588
 800bdbc:	0800c568 	.word	0x0800c568

0800bdc0 <fabs>:
 800bdc0:	ec51 0b10 	vmov	r0, r1, d0
 800bdc4:	ee10 2a10 	vmov	r2, s0
 800bdc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdcc:	ec43 2b10 	vmov	d0, r2, r3
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <__ieee754_sqrt>:
 800bdd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd8:	ec55 4b10 	vmov	r4, r5, d0
 800bddc:	4e67      	ldr	r6, [pc, #412]	; (800bf7c <__ieee754_sqrt+0x1a8>)
 800bdde:	43ae      	bics	r6, r5
 800bde0:	ee10 0a10 	vmov	r0, s0
 800bde4:	ee10 2a10 	vmov	r2, s0
 800bde8:	4629      	mov	r1, r5
 800bdea:	462b      	mov	r3, r5
 800bdec:	d10d      	bne.n	800be0a <__ieee754_sqrt+0x36>
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 fa47 	bl	800028c <__adddf3>
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	ec45 4b10 	vmov	d0, r4, r5
 800be06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	dc0b      	bgt.n	800be26 <__ieee754_sqrt+0x52>
 800be0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be12:	4326      	orrs	r6, r4
 800be14:	d0f5      	beq.n	800be02 <__ieee754_sqrt+0x2e>
 800be16:	b135      	cbz	r5, 800be26 <__ieee754_sqrt+0x52>
 800be18:	f7f4 fa36 	bl	8000288 <__aeabi_dsub>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	f7f4 fd14 	bl	800084c <__aeabi_ddiv>
 800be24:	e7eb      	b.n	800bdfe <__ieee754_sqrt+0x2a>
 800be26:	1509      	asrs	r1, r1, #20
 800be28:	f000 808d 	beq.w	800bf46 <__ieee754_sqrt+0x172>
 800be2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be30:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800be34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be38:	07c9      	lsls	r1, r1, #31
 800be3a:	bf5c      	itt	pl
 800be3c:	005b      	lslpl	r3, r3, #1
 800be3e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800be42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be46:	bf58      	it	pl
 800be48:	0052      	lslpl	r2, r2, #1
 800be4a:	2500      	movs	r5, #0
 800be4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800be50:	1076      	asrs	r6, r6, #1
 800be52:	0052      	lsls	r2, r2, #1
 800be54:	f04f 0e16 	mov.w	lr, #22
 800be58:	46ac      	mov	ip, r5
 800be5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be5e:	eb0c 0001 	add.w	r0, ip, r1
 800be62:	4298      	cmp	r0, r3
 800be64:	bfde      	ittt	le
 800be66:	1a1b      	suble	r3, r3, r0
 800be68:	eb00 0c01 	addle.w	ip, r0, r1
 800be6c:	186d      	addle	r5, r5, r1
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	f1be 0e01 	subs.w	lr, lr, #1
 800be74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800be78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800be80:	d1ed      	bne.n	800be5e <__ieee754_sqrt+0x8a>
 800be82:	4674      	mov	r4, lr
 800be84:	2720      	movs	r7, #32
 800be86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800be8a:	4563      	cmp	r3, ip
 800be8c:	eb01 000e 	add.w	r0, r1, lr
 800be90:	dc02      	bgt.n	800be98 <__ieee754_sqrt+0xc4>
 800be92:	d113      	bne.n	800bebc <__ieee754_sqrt+0xe8>
 800be94:	4290      	cmp	r0, r2
 800be96:	d811      	bhi.n	800bebc <__ieee754_sqrt+0xe8>
 800be98:	2800      	cmp	r0, #0
 800be9a:	eb00 0e01 	add.w	lr, r0, r1
 800be9e:	da57      	bge.n	800bf50 <__ieee754_sqrt+0x17c>
 800bea0:	f1be 0f00 	cmp.w	lr, #0
 800bea4:	db54      	blt.n	800bf50 <__ieee754_sqrt+0x17c>
 800bea6:	f10c 0801 	add.w	r8, ip, #1
 800beaa:	eba3 030c 	sub.w	r3, r3, ip
 800beae:	4290      	cmp	r0, r2
 800beb0:	bf88      	it	hi
 800beb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800beb6:	1a12      	subs	r2, r2, r0
 800beb8:	440c      	add	r4, r1
 800beba:	46c4      	mov	ip, r8
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	3f01      	subs	r7, #1
 800bec0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bec4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bec8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800becc:	d1dd      	bne.n	800be8a <__ieee754_sqrt+0xb6>
 800bece:	4313      	orrs	r3, r2
 800bed0:	d01b      	beq.n	800bf0a <__ieee754_sqrt+0x136>
 800bed2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bf80 <__ieee754_sqrt+0x1ac>
 800bed6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bf84 <__ieee754_sqrt+0x1b0>
 800beda:	e9da 0100 	ldrd	r0, r1, [sl]
 800bede:	e9db 2300 	ldrd	r2, r3, [fp]
 800bee2:	f7f4 f9d1 	bl	8000288 <__aeabi_dsub>
 800bee6:	e9da 8900 	ldrd	r8, r9, [sl]
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f7f4 fdfd 	bl	8000af0 <__aeabi_dcmple>
 800bef6:	b140      	cbz	r0, 800bf0a <__ieee754_sqrt+0x136>
 800bef8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800befc:	e9da 0100 	ldrd	r0, r1, [sl]
 800bf00:	e9db 2300 	ldrd	r2, r3, [fp]
 800bf04:	d126      	bne.n	800bf54 <__ieee754_sqrt+0x180>
 800bf06:	3501      	adds	r5, #1
 800bf08:	463c      	mov	r4, r7
 800bf0a:	106a      	asrs	r2, r5, #1
 800bf0c:	0863      	lsrs	r3, r4, #1
 800bf0e:	07e9      	lsls	r1, r5, #31
 800bf10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bf14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bf18:	bf48      	it	mi
 800bf1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bf1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bf22:	461c      	mov	r4, r3
 800bf24:	e76d      	b.n	800be02 <__ieee754_sqrt+0x2e>
 800bf26:	0ad3      	lsrs	r3, r2, #11
 800bf28:	3815      	subs	r0, #21
 800bf2a:	0552      	lsls	r2, r2, #21
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0fa      	beq.n	800bf26 <__ieee754_sqrt+0x152>
 800bf30:	02dc      	lsls	r4, r3, #11
 800bf32:	d50a      	bpl.n	800bf4a <__ieee754_sqrt+0x176>
 800bf34:	f1c1 0420 	rsb	r4, r1, #32
 800bf38:	fa22 f404 	lsr.w	r4, r2, r4
 800bf3c:	1e4d      	subs	r5, r1, #1
 800bf3e:	408a      	lsls	r2, r1
 800bf40:	4323      	orrs	r3, r4
 800bf42:	1b41      	subs	r1, r0, r5
 800bf44:	e772      	b.n	800be2c <__ieee754_sqrt+0x58>
 800bf46:	4608      	mov	r0, r1
 800bf48:	e7f0      	b.n	800bf2c <__ieee754_sqrt+0x158>
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	3101      	adds	r1, #1
 800bf4e:	e7ef      	b.n	800bf30 <__ieee754_sqrt+0x15c>
 800bf50:	46e0      	mov	r8, ip
 800bf52:	e7aa      	b.n	800beaa <__ieee754_sqrt+0xd6>
 800bf54:	f7f4 f99a 	bl	800028c <__adddf3>
 800bf58:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 fdba 	bl	8000adc <__aeabi_dcmplt>
 800bf68:	b120      	cbz	r0, 800bf74 <__ieee754_sqrt+0x1a0>
 800bf6a:	1ca0      	adds	r0, r4, #2
 800bf6c:	bf08      	it	eq
 800bf6e:	3501      	addeq	r5, #1
 800bf70:	3402      	adds	r4, #2
 800bf72:	e7ca      	b.n	800bf0a <__ieee754_sqrt+0x136>
 800bf74:	3401      	adds	r4, #1
 800bf76:	f024 0401 	bic.w	r4, r4, #1
 800bf7a:	e7c6      	b.n	800bf0a <__ieee754_sqrt+0x136>
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	20000270 	.word	0x20000270
 800bf84:	20000278 	.word	0x20000278

0800bf88 <__ieee754_atan2>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	ec57 6b11 	vmov	r6, r7, d1
 800bf90:	4273      	negs	r3, r6
 800bf92:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c110 <__ieee754_atan2+0x188>
 800bf96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bf9a:	4333      	orrs	r3, r6
 800bf9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bfa0:	4543      	cmp	r3, r8
 800bfa2:	ec51 0b10 	vmov	r0, r1, d0
 800bfa6:	ee11 5a10 	vmov	r5, s2
 800bfaa:	d80a      	bhi.n	800bfc2 <__ieee754_atan2+0x3a>
 800bfac:	4244      	negs	r4, r0
 800bfae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfb2:	4304      	orrs	r4, r0
 800bfb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bfb8:	4544      	cmp	r4, r8
 800bfba:	ee10 9a10 	vmov	r9, s0
 800bfbe:	468e      	mov	lr, r1
 800bfc0:	d907      	bls.n	800bfd2 <__ieee754_atan2+0x4a>
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	463b      	mov	r3, r7
 800bfc6:	f7f4 f961 	bl	800028c <__adddf3>
 800bfca:	ec41 0b10 	vmov	d0, r0, r1
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bfd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfda:	4334      	orrs	r4, r6
 800bfdc:	d103      	bne.n	800bfe6 <__ieee754_atan2+0x5e>
 800bfde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe2:	f7ff bd4d 	b.w	800ba80 <atan>
 800bfe6:	17bc      	asrs	r4, r7, #30
 800bfe8:	f004 0402 	and.w	r4, r4, #2
 800bfec:	ea53 0909 	orrs.w	r9, r3, r9
 800bff0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bff4:	d107      	bne.n	800c006 <__ieee754_atan2+0x7e>
 800bff6:	2c02      	cmp	r4, #2
 800bff8:	d05f      	beq.n	800c0ba <__ieee754_atan2+0x132>
 800bffa:	2c03      	cmp	r4, #3
 800bffc:	d1e5      	bne.n	800bfca <__ieee754_atan2+0x42>
 800bffe:	a140      	add	r1, pc, #256	; (adr r1, 800c100 <__ieee754_atan2+0x178>)
 800c000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c004:	e7e1      	b.n	800bfca <__ieee754_atan2+0x42>
 800c006:	4315      	orrs	r5, r2
 800c008:	d106      	bne.n	800c018 <__ieee754_atan2+0x90>
 800c00a:	f1be 0f00 	cmp.w	lr, #0
 800c00e:	da5f      	bge.n	800c0d0 <__ieee754_atan2+0x148>
 800c010:	a13d      	add	r1, pc, #244	; (adr r1, 800c108 <__ieee754_atan2+0x180>)
 800c012:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c016:	e7d8      	b.n	800bfca <__ieee754_atan2+0x42>
 800c018:	4542      	cmp	r2, r8
 800c01a:	d10f      	bne.n	800c03c <__ieee754_atan2+0xb4>
 800c01c:	4293      	cmp	r3, r2
 800c01e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c022:	d107      	bne.n	800c034 <__ieee754_atan2+0xac>
 800c024:	2c02      	cmp	r4, #2
 800c026:	d84c      	bhi.n	800c0c2 <__ieee754_atan2+0x13a>
 800c028:	4b33      	ldr	r3, [pc, #204]	; (800c0f8 <__ieee754_atan2+0x170>)
 800c02a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c02e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c032:	e7ca      	b.n	800bfca <__ieee754_atan2+0x42>
 800c034:	2c02      	cmp	r4, #2
 800c036:	d848      	bhi.n	800c0ca <__ieee754_atan2+0x142>
 800c038:	4b30      	ldr	r3, [pc, #192]	; (800c0fc <__ieee754_atan2+0x174>)
 800c03a:	e7f6      	b.n	800c02a <__ieee754_atan2+0xa2>
 800c03c:	4543      	cmp	r3, r8
 800c03e:	d0e4      	beq.n	800c00a <__ieee754_atan2+0x82>
 800c040:	1a9b      	subs	r3, r3, r2
 800c042:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c046:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c04a:	da1e      	bge.n	800c08a <__ieee754_atan2+0x102>
 800c04c:	2f00      	cmp	r7, #0
 800c04e:	da01      	bge.n	800c054 <__ieee754_atan2+0xcc>
 800c050:	323c      	adds	r2, #60	; 0x3c
 800c052:	db1e      	blt.n	800c092 <__ieee754_atan2+0x10a>
 800c054:	4632      	mov	r2, r6
 800c056:	463b      	mov	r3, r7
 800c058:	f7f4 fbf8 	bl	800084c <__aeabi_ddiv>
 800c05c:	ec41 0b10 	vmov	d0, r0, r1
 800c060:	f7ff feae 	bl	800bdc0 <fabs>
 800c064:	f7ff fd0c 	bl	800ba80 <atan>
 800c068:	ec51 0b10 	vmov	r0, r1, d0
 800c06c:	2c01      	cmp	r4, #1
 800c06e:	d013      	beq.n	800c098 <__ieee754_atan2+0x110>
 800c070:	2c02      	cmp	r4, #2
 800c072:	d015      	beq.n	800c0a0 <__ieee754_atan2+0x118>
 800c074:	2c00      	cmp	r4, #0
 800c076:	d0a8      	beq.n	800bfca <__ieee754_atan2+0x42>
 800c078:	a317      	add	r3, pc, #92	; (adr r3, 800c0d8 <__ieee754_atan2+0x150>)
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	a317      	add	r3, pc, #92	; (adr r3, 800c0e0 <__ieee754_atan2+0x158>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	e014      	b.n	800c0b4 <__ieee754_atan2+0x12c>
 800c08a:	a117      	add	r1, pc, #92	; (adr r1, 800c0e8 <__ieee754_atan2+0x160>)
 800c08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c090:	e7ec      	b.n	800c06c <__ieee754_atan2+0xe4>
 800c092:	2000      	movs	r0, #0
 800c094:	2100      	movs	r1, #0
 800c096:	e7e9      	b.n	800c06c <__ieee754_atan2+0xe4>
 800c098:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c09c:	4619      	mov	r1, r3
 800c09e:	e794      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0a0:	a30d      	add	r3, pc, #52	; (adr r3, 800c0d8 <__ieee754_atan2+0x150>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	f7f4 f8ef 	bl	8000288 <__aeabi_dsub>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	a10c      	add	r1, pc, #48	; (adr r1, 800c0e0 <__ieee754_atan2+0x158>)
 800c0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0b4:	f7f4 f8e8 	bl	8000288 <__aeabi_dsub>
 800c0b8:	e787      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0ba:	a109      	add	r1, pc, #36	; (adr r1, 800c0e0 <__ieee754_atan2+0x158>)
 800c0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c0:	e783      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0c2:	a10b      	add	r1, pc, #44	; (adr r1, 800c0f0 <__ieee754_atan2+0x168>)
 800c0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c8:	e77f      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	e77c      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0d0:	a105      	add	r1, pc, #20	; (adr r1, 800c0e8 <__ieee754_atan2+0x160>)
 800c0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d6:	e778      	b.n	800bfca <__ieee754_atan2+0x42>
 800c0d8:	33145c07 	.word	0x33145c07
 800c0dc:	3ca1a626 	.word	0x3ca1a626
 800c0e0:	54442d18 	.word	0x54442d18
 800c0e4:	400921fb 	.word	0x400921fb
 800c0e8:	54442d18 	.word	0x54442d18
 800c0ec:	3ff921fb 	.word	0x3ff921fb
 800c0f0:	54442d18 	.word	0x54442d18
 800c0f4:	3fe921fb 	.word	0x3fe921fb
 800c0f8:	0800c5a8 	.word	0x0800c5a8
 800c0fc:	0800c5c0 	.word	0x0800c5c0
 800c100:	54442d18 	.word	0x54442d18
 800c104:	c00921fb 	.word	0xc00921fb
 800c108:	54442d18 	.word	0x54442d18
 800c10c:	bff921fb 	.word	0xbff921fb
 800c110:	7ff00000 	.word	0x7ff00000

0800c114 <_init>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	bf00      	nop
 800c118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11a:	bc08      	pop	{r3}
 800c11c:	469e      	mov	lr, r3
 800c11e:	4770      	bx	lr

0800c120 <_fini>:
 800c120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c122:	bf00      	nop
 800c124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c126:	bc08      	pop	{r3}
 800c128:	469e      	mov	lr, r3
 800c12a:	4770      	bx	lr
