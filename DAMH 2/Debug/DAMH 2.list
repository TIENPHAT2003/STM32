
DAMH 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a640  0800a640  0001a640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac0  0800aac0  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800aac0  0800aac0  0001aac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aac8  0800aac8  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aacc  0800aacc  0001aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800aad0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020278  2**0
                  CONTENTS
 10 .bss          000044ac  20000278  20000278  00020278  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004724  20004724  00020278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013261  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003038  00000000  00000000  0003354c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001310  00000000  00000000  00036588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024142  00000000  00000000  0003875c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016af6  00000000  00000000  0005c89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d63ab  00000000  00000000  00073394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000060e0  00000000  00000000  00149740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0014f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a624 	.word	0x0800a624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800a624 	.word	0x0800a624

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6178      	str	r0, [r7, #20]
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	60fa      	str	r2, [r7, #12]
 8000f50:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f98:	441a      	add	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000fbe:	f7ff fc45 	bl	800084c <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	461d      	mov	r5, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faa7 	bl	8000524 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff fc35 	bl	800084c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SpeedReadNonReset+0x118>)
 8000ff0:	f7ff fb02 	bl	80005f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001004:	a31e      	add	r3, pc, #120	; (adr r3, 8001080 <SpeedReadNonReset+0x108>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4614      	mov	r4, r2
 8001014:	461d      	mov	r5, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800101c:	a31a      	add	r3, pc, #104	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f92d 	bl	800028c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4614      	mov	r4, r2
 8001038:	461d      	mov	r5, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001040:	a311      	add	r3, pc, #68	; (adr r3, 8001088 <SpeedReadNonReset+0x110>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fad7 	bl	80005f8 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff f91b 	bl	800028c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	f3af 8000 	nop.w
 8001080:	ced91687 	.word	0xced91687
 8001084:	3feb53f7 	.word	0x3feb53f7
 8001088:	532617c2 	.word	0x532617c2
 800108c:	3fb2a305 	.word	0x3fb2a305
 8001090:	404e0000 	.word	0x404e0000

08001094 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010be:	441a      	add	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e1b      	ldrb	r3, [r3, #24]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <CountRead+0x52>
	{
		return enc->count_X4;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa22 	bl	8000524 <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e033      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da00      	bge.n	80010f8 <CountRead+0x64>
 80010f6:	3303      	adds	r3, #3
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa0d 	bl	8000524 <__aeabi_i2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e01e      	b.n	800114e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d116      	bne.n	8001146 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001120:	fb03 f202 	mul.w	r2, r3, r2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9f8 	bl	8000524 <__aeabi_i2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001144:	e003      	b.n	800114e <CountRead+0xba>
	}else {
		return 0;
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
	}
}
 800114e:	ec43 2b17 	vmov	d7, r2, r3
 8001152:	eeb0 0a47 	vmov.f32	s0, s14
 8001156:	eef0 0a67 	vmov.f32	s1, s15
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfb8      	it	lt
 800117a:	425b      	neglt	r3, r3
 800117c:	b29a      	uxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da4d      	bge.n	8001230 <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <Drive+0x48>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
 80011a6:	e018      	b.n	80011da <Drive+0x7a>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d105      	bne.n	80011bc <Drive+0x5c>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38
 80011ba:	e00e      	b.n	80011da <Drive+0x7a>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d105      	bne.n	80011d0 <Drive+0x70>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011ce:	e004      	b.n	80011da <Drive+0x7a>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <Drive+0x90>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	89da      	ldrh	r2, [r3, #14]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80011ee:	e0b7      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d107      	bne.n	8001208 <Drive+0xa8>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	89d9      	ldrh	r1, [r3, #14]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	460b      	mov	r3, r1
 8001204:	6393      	str	r3, [r2, #56]	; 0x38
 8001206:	e0ab      	b.n	8001360 <Drive+0x200>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d107      	bne.n	8001220 <Drive+0xc0>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	89d9      	ldrh	r1, [r3, #14]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	460b      	mov	r3, r1
 800121c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800121e:	e09f      	b.n	8001360 <Drive+0x200>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	89d9      	ldrh	r1, [r3, #14]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	460b      	mov	r3, r1
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800122e:	e097      	b.n	8001360 <Drive+0x200>
	else if(Input>0){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dd4d      	ble.n	80012d2 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <Drive+0xec>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	89da      	ldrh	r2, [r3, #14]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
 800124a:	e01e      	b.n	800128a <Drive+0x12a>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d107      	bne.n	8001264 <Drive+0x104>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	89d9      	ldrh	r1, [r3, #14]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	460b      	mov	r3, r1
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
 8001262:	e012      	b.n	800128a <Drive+0x12a>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d107      	bne.n	800127c <Drive+0x11c>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	89d9      	ldrh	r1, [r3, #14]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	460b      	mov	r3, r1
 8001278:	63d3      	str	r3, [r2, #60]	; 0x3c
 800127a:	e006      	b.n	800128a <Drive+0x12a>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	89d9      	ldrh	r1, [r3, #14]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <Drive+0x13e>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800129c:	e060      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d105      	bne.n	80012b2 <Drive+0x152>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38
 80012b0:	e056      	b.n	8001360 <Drive+0x200>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d105      	bne.n	80012c6 <Drive+0x166>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012c4:	e04c      	b.n	8001360 <Drive+0x200>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012d0:	e046      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <Drive+0x186>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
 80012e4:	e018      	b.n	8001318 <Drive+0x1b8>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d105      	bne.n	80012fa <Drive+0x19a>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	6393      	str	r3, [r2, #56]	; 0x38
 80012f8:	e00e      	b.n	8001318 <Drive+0x1b8>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d105      	bne.n	800130e <Drive+0x1ae>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800130c:	e004      	b.n	8001318 <Drive+0x1b8>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <Drive+0x1cc>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
}
 800132a:	e019      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d105      	bne.n	8001340 <Drive+0x1e0>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800133e:	e00f      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d105      	bne.n	8001354 <Drive+0x1f4>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001352:	e005      	b.n	8001360 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800135e:	e7ff      	b.n	8001360 <Drive+0x200>
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	ed87 0a02 	vstr	s0, [r7, #8]
 8001378:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a01 	vldr	s15, [r3, #4]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	edd3 6a07 	vldr	s13, [r3, #28]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd06      	ble.n	8001408 <Pid_Cal+0x9c>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	e002      	b.n	800140e <Pid_Cal+0xa2>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a08 	vldr	s15, [r3, #32]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	ed93 7a08 	vldr	s14, [r3, #32]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d506      	bpl.n	800143e <Pid_Cal+0xd2>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	e002      	b.n	8001444 <Pid_Cal+0xd8>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	edd3 7a08 	vldr	s15, [r3, #32]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	edd3 6a02 	vldr	s13, [r3, #8]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edd3 7a03 	vldr	s15, [r3, #12]
 800145c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001460:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	ed93 7a04 	vldr	s14, [r3, #16]
 800146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800147a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800147e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd02      	ble.n	80014fa <Pid_Cal+0x18e>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	e001      	b.n	80014fe <Pid_Cal+0x192>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800150e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d502      	bpl.n	800151e <Pid_Cal+0x1b2>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	e001      	b.n	8001522 <Pid_Cal+0x1b6>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <vApplicationGetIdleTaskMemory+0x2c>)
 8001544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <vApplicationGetIdleTaskMemory+0x30>)
 800154a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000294 	.word	0x20000294
 8001564:	200002e8 	.word	0x200002e8

08001568 <Kalman_getAngle>:
    .Q_angle = 0.001f,
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};
int Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0
 800156e:	61f8      	str	r0, [r7, #28]
 8001570:	ed87 0b04 	vstr	d0, [r7, #16]
 8001574:	ed87 1b02 	vstr	d1, [r7, #8]
 8001578:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001586:	f7fe fe7f 	bl	8000288 <__aeabi_dsub>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800159c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a0:	f7ff f82a 	bl	80005f8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe fe6e 	bl	800028c <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	69f9      	ldr	r1, [r7, #28]
 80015b6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ca:	f7ff f815 	bl	80005f8 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015dc:	f7fe fe54 	bl	8000288 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015ee:	f7fe fe4b 	bl	8000288 <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fe44 	bl	800028c <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001610:	f7fe fff2 	bl	80005f8 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fe36 	bl	800028c <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	69f9      	ldr	r1, [r7, #28]
 8001650:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001664:	f7fe ffc8 	bl	80005f8 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe fe0a 	bl	8000288 <__aeabi_dsub>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800168a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800168e:	f7fe ffb3 	bl	80005f8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fdf7 	bl	800028c <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	69f9      	ldr	r1, [r7, #28]
 80016a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016b4:	f7fe fdea 	bl	800028c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016ca:	f7ff f8bf 	bl	800084c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016e0:	f7ff f8b4 	bl	800084c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f6:	f7fe fdc7 	bl	8000288 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001708:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800170c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001710:	f7fe ff72 	bl	80005f8 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe fdb6 	bl	800028c <__adddf3>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	69f9      	ldr	r1, [r7, #28]
 8001726:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001738:	f7fe ff5e 	bl	80005f8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f7fe fda2 	bl	800028c <__adddf3>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001758:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001762:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800176c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001774:	f7fe ff40 	bl	80005f8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd82 	bl	8000288 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	69f9      	ldr	r1, [r7, #28]
 800178a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001798:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800179c:	f7fe ff2c 	bl	80005f8 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fd6e 	bl	8000288 <__aeabi_dsub>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	69f9      	ldr	r1, [r7, #28]
 80017b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017c4:	f7fe ff18 	bl	80005f8 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fd5a 	bl	8000288 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	69f9      	ldr	r1, [r7, #28]
 80017da:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017ec:	f7fe ff04 	bl	80005f8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fd46 	bl	8000288 <__aeabi_dsub>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	69f9      	ldr	r1, [r7, #28]
 8001802:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9a2 	bl	8000b58 <__aeabi_d2iz>
 8001814:	4603      	mov	r3, r0
};
 8001816:	4618      	mov	r0, r3
 8001818:	3758      	adds	r7, #88	; 0x58
 800181a:	46bd      	mov	sp, r7
 800181c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001820 <MPU6050_Init>:

uint8_t MPU6050_Init()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2301      	movs	r3, #1
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2275      	movs	r2, #117	; 0x75
 8001836:	21d0      	movs	r1, #208	; 0xd0
 8001838:	4822      	ldr	r0, [pc, #136]	; (80018c4 <MPU6050_Init+0xa4>)
 800183a:	f002 f9d5 	bl	8003be8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b68      	cmp	r3, #104	; 0x68
 8001842:	d139      	bne.n	80018b8 <MPU6050_Init+0x98>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2301      	movs	r3, #1
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	226b      	movs	r2, #107	; 0x6b
 8001858:	21d0      	movs	r1, #208	; 0xd0
 800185a:	481a      	ldr	r0, [pc, #104]	; (80018c4 <MPU6050_Init+0xa4>)
 800185c:	f002 f8ca 	bl	80039f4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001860:	2307      	movs	r3, #7
 8001862:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001864:	2364      	movs	r3, #100	; 0x64
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	2219      	movs	r2, #25
 8001874:	21d0      	movs	r1, #208	; 0xd0
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <MPU6050_Init+0xa4>)
 8001878:	f002 f8bc 	bl	80039f4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800187c:	2300      	movs	r3, #0
 800187e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2301      	movs	r3, #1
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	1dbb      	adds	r3, r7, #6
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	221c      	movs	r2, #28
 8001890:	21d0      	movs	r1, #208	; 0xd0
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MPU6050_Init+0xa4>)
 8001894:	f002 f8ae 	bl	80039f4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001898:	2300      	movs	r3, #0
 800189a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	2301      	movs	r3, #1
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	1dbb      	adds	r3, r7, #6
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	221b      	movs	r2, #27
 80018ac:	21d0      	movs	r1, #208	; 0xd0
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MPU6050_Init+0xa4>)
 80018b0:	f002 f8a0 	bl	80039f4 <HAL_I2C_Mem_Write>
        return 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <MPU6050_Init+0x9a>
    }
    return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004e8 	.word	0x200004e8

080018c8 <MPU6050_Read_All>:
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b094      	sub	sp, #80	; 0x50
 80018ce:	af04      	add	r7, sp, #16
 80018d0:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	230e      	movs	r3, #14
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	223b      	movs	r2, #59	; 0x3b
 80018e4:	21d0      	movs	r1, #208	; 0xd0
 80018e6:	488e      	ldr	r0, [pc, #568]	; (8001b20 <MPU6050_Read_All+0x258>)
 80018e8:	f002 f97e 	bl	8003be8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80018ec:	7a3b      	ldrb	r3, [r7, #8]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	7a7b      	ldrb	r3, [r7, #9]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80018fe:	7abb      	ldrb	r3, [r7, #10]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001910:	7b3b      	ldrb	r3, [r7, #12]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b21a      	sxth	r2, r3
 8001916:	7b7b      	ldrb	r3, [r7, #13]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001930:	7c3b      	ldrb	r3, [r7, #16]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	7c7b      	ldrb	r3, [r7, #17]
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21a      	sxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7cfb      	ldrb	r3, [r7, #19]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21a      	sxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001954:	7d3b      	ldrb	r3, [r7, #20]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	7d7b      	ldrb	r3, [r7, #21]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fdd9 	bl	8000524 <__aeabi_i2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <MPU6050_Read_All+0x25c>)
 8001978:	f7fe ff68 	bl	800084c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdc9 	bl	8000524 <__aeabi_i2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <MPU6050_Read_All+0x25c>)
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdb9 	bl	8000524 <__aeabi_i2d>
 80019b2:	a355      	add	r3, pc, #340	; (adr r3, 8001b08 <MPU6050_Read_All+0x240>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe ff48 	bl	800084c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80019c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001b28 <MPU6050_Read_All+0x260>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b2c <MPU6050_Read_All+0x264>
 80019de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	a346      	add	r3, pc, #280	; (adr r3, 8001b10 <MPU6050_Read_All+0x248>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe ff27 	bl	800084c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd88 	bl	8000524 <__aeabi_i2d>
 8001a14:	a33e      	add	r3, pc, #248	; (adr r3, 8001b10 <MPU6050_Read_All+0x248>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe ff17 	bl	800084c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd78 	bl	8000524 <__aeabi_i2d>
 8001a34:	a336      	add	r3, pc, #216	; (adr r3, 8001b10 <MPU6050_Read_All+0x248>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe ff07 	bl	800084c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001a48:	f001 fc06 	bl	8003258 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <MPU6050_Read_All+0x268>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd55 	bl	8000504 <__aeabi_ui2d>
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <MPU6050_Read_All+0x26c>)
 8001a60:	f7fe fef4 	bl	800084c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a6c:	f001 fbf4 	bl	8003258 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <MPU6050_Read_All+0x268>)
 8001a74:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a84:	fb03 f202 	mul.w	r2, r3, r2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd41 	bl	8000524 <__aeabi_i2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ec43 2b10 	vmov	d0, r2, r3
 8001aaa:	f008 fa45 	bl	8009f38 <sqrt>
 8001aae:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001abe:	f7ff f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d137      	bne.n	8001b38 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd28 	bl	8000524 <__aeabi_i2d>
 8001ad4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ad8:	f7fe feb8 	bl	800084c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ec43 2b17 	vmov	d7, r2, r3
 8001ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae8:	eef0 0a67 	vmov.f32	s1, s15
 8001aec:	f008 fa50 	bl	8009f90 <atan>
 8001af0:	ec51 0b10 	vmov	r0, r1, d0
 8001af4:	a308      	add	r3, pc, #32	; (adr r3, 8001b18 <MPU6050_Read_All+0x250>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fd7d 	bl	80005f8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001b06:	e01d      	b.n	8001b44 <MPU6050_Read_All+0x27c>
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40cc2900 	.word	0x40cc2900
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40606000 	.word	0x40606000
 8001b18:	1a63c1f8 	.word	0x1a63c1f8
 8001b1c:	404ca5dc 	.word	0x404ca5dc
 8001b20:	200004e8 	.word	0x200004e8
 8001b24:	40d00000 	.word	0x40d00000
 8001b28:	43aa0000 	.word	0x43aa0000
 8001b2c:	42121eb8 	.word	0x42121eb8
 8001b30:	200006c0 	.word	0x200006c0
 8001b34:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fce9 	bl	8000524 <__aeabi_i2d>
 8001b52:	4682      	mov	sl, r0
 8001b54:	468b      	mov	fp, r1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fce1 	bl	8000524 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ec43 2b11 	vmov	d1, r2, r3
 8001b6a:	ec4b ab10 	vmov	d0, sl, fp
 8001b6e:	f008 f9e1 	bl	8009f34 <atan2>
 8001b72:	ec51 0b10 	vmov	r0, r1, d0
 8001b76:	a34a      	add	r3, pc, #296	; (adr r3, 8001ca0 <MPU6050_Read_All+0x3d8>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fd3c 	bl	80005f8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <MPU6050_Read_All+0x3c8>)
 8001b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b92:	f7fe ffa3 	bl	8000adc <__aeabi_dcmplt>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <MPU6050_Read_All+0x2ea>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <MPU6050_Read_All+0x3cc>)
 8001ba8:	f7fe ffb6 	bl	8000b18 <__aeabi_dcmpgt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d114      	bne.n	8001bdc <MPU6050_Read_All+0x314>
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <MPU6050_Read_All+0x3cc>)
 8001bb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bbc:	f7fe ffac 	bl	8000b18 <__aeabi_dcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d015      	beq.n	8001bf2 <MPU6050_Read_All+0x32a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <MPU6050_Read_All+0x3c8>)
 8001bd2:	f7fe ff83 	bl	8000adc <__aeabi_dcmplt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <MPU6050_Read_All+0x32a>
    {
        KalmanY.angle = pitch;
 8001bdc:	492e      	ldr	r1, [pc, #184]	; (8001c98 <MPU6050_Read_All+0x3d0>)
 8001bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bec:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001bf0:	e016      	b.n	8001c20 <MPU6050_Read_All+0x358>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001bf8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bfc:	eeb0 1a47 	vmov.f32	s2, s14
 8001c00:	eef0 1a67 	vmov.f32	s3, s15
 8001c04:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c08:	4823      	ldr	r0, [pc, #140]	; (8001c98 <MPU6050_Read_All+0x3d0>)
 8001c0a:	f7ff fcad 	bl	8001568 <Kalman_getAngle>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc87 	bl	8000524 <__aeabi_i2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c26:	4690      	mov	r8, r2
 8001c28:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MPU6050_Read_All+0x3cc>)
 8001c32:	4640      	mov	r0, r8
 8001c34:	4649      	mov	r1, r9
 8001c36:	f7fe ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <MPU6050_Read_All+0x38a>
        DataStruct->Gx = -DataStruct->Gx;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c46:	4614      	mov	r4, r2
 8001c48:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c58:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c5c:	eeb0 1a47 	vmov.f32	s2, s14
 8001c60:	eef0 1a67 	vmov.f32	s3, s15
 8001c64:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MPU6050_Read_All+0x3d4>)
 8001c6a:	f7ff fc7d 	bl	8001568 <Kalman_getAngle>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc57 	bl	8000524 <__aeabi_i2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001c80:	bf00      	nop
 8001c82:	3740      	adds	r7, #64	; 0x40
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	c0568000 	.word	0xc0568000
 8001c94:	40568000 	.word	0x40568000
 8001c98:	20000048 	.word	0x20000048
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	1a63c1f8 	.word	0x1a63c1f8
 8001ca4:	404ca5dc 	.word	0x404ca5dc

08001ca8 <gettheta>:

float leftvolt = 0, rightvolt = 0;

float PWM_L = 0,PWM_R = 0;

float gettheta(int enc_l, int enc_r){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	float angle =(0.5*360/370)*(enc_l+ enc_r);
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc33 	bl	8000524 <__aeabi_i2d>
 8001cbe:	a30a      	add	r3, pc, #40	; (adr r3, 8001ce8 <gettheta+0x40>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc98 	bl	80005f8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff6a 	bl	8000ba8 <__aeabi_d2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
	return angle;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	ee07 3a90 	vmov	s15, r3
}
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	3759f22a 	.word	0x3759f22a
 8001cec:	3fdf2298 	.word	0x3fdf2298

08001cf0 <getphi>:

float getphi(int enc_l, int enc_r){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	float angle = (3.2/22.5)*(enc_l - enc_r)*(360/370);
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc0f 	bl	8000524 <__aeabi_i2d>
 8001d06:	a310      	add	r3, pc, #64	; (adr r3, 8001d48 <getphi+0x58>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc74 	bl	80005f8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f7fe fc6a 	bl	80005f8 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff3c 	bl	8000ba8 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
	return angle;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	ee07 3a90 	vmov	s15, r3
}
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	f3af 8000 	nop.w
 8001d48:	789abcdf 	.word	0x789abcdf
 8001d4c:	3fc23456 	.word	0x3fc23456

08001d50 <map>:
float map(float x, float in_max, float in_min, float out_max, float out_min){
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d62:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d66:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x-in_min)*(out_max-out_min)/(in_max-in_min) + out_min;
 8001d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d86:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <constrain>:
float constrain(float x, float a, float b){
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001db6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001dba:	ed87 1a01 	vstr	s2, [r7, #4]
	if(x<a) 			return a;
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d501      	bpl.n	8001dd4 <constrain+0x28>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	e00b      	b.n	8001dec <constrain+0x40>

	else if(x>b) 		return b;
 8001dd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	dd01      	ble.n	8001dea <constrain+0x3e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e000      	b.n	8001dec <constrain+0x40>

	else 			 	return x;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <StopandReset>:

//LQR function
void StopandReset(MPU6050_t *DataStruct){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]
	Drive(&Motor_R, &htim3, 0, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001e08:	2304      	movs	r3, #4
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <StopandReset+0x4c>)
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <StopandReset+0x50>)
 8001e14:	f7ff f9a4 	bl	8001160 <Drive>
	Drive(&Motor_L, &htim3, 0, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001e18:	230c      	movs	r3, #12
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	2200      	movs	r2, #0
 8001e20:	490a      	ldr	r1, [pc, #40]	; (8001e4c <StopandReset+0x4c>)
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <StopandReset+0x54>)
 8001e24:	f7ff f99c 	bl	8001160 <Drive>
	enc_l    = 0;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <StopandReset+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
	enc_r	 = 0;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <StopandReset+0x5c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
	DataStruct->KalmanAngleY=-2;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001e3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000584 	.word	0x20000584
 8001e50:	200007c8 	.word	0x200007c8
 8001e54:	200007b0 	.word	0x200007b0
 8001e58:	200007e0 	.word	0x200007e0
 8001e5c:	200007e4 	.word	0x200007e4

08001e60 <LQR_Init>:
void LQR_Init(){
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

	 k1 =	-1;						// k1*theta
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <LQR_Init+0x38>)
 8001e66:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <LQR_Init+0x3c>)
 8001e68:	601a      	str	r2, [r3, #0]
	 k2 =	-100;					// k2*thetadot
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <LQR_Init+0x40>)
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LQR_Init+0x44>)
 8001e6e:	601a      	str	r2, [r3, #0]
	 k3 =	-80000;					// k3*psi
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <LQR_Init+0x48>)
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <LQR_Init+0x4c>)
 8001e74:	601a      	str	r2, [r3, #0]
	 k4 =	-8000;					// k4*psidot
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <LQR_Init+0x50>)
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <LQR_Init+0x54>)
 8001e7a:	601a      	str	r2, [r3, #0]
	 k5 =	-0.5;					// k5*phi
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <LQR_Init+0x58>)
 8001e7e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001e82:	601a      	str	r2, [r3, #0]
	 k6 =	-0.5;					// k6*phidot
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <LQR_Init+0x5c>)
 8001e86:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001e8a:	601a      	str	r2, [r3, #0]

}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000080c 	.word	0x2000080c
 8001e9c:	bf800000 	.word	0xbf800000
 8001ea0:	20000810 	.word	0x20000810
 8001ea4:	c2c80000 	.word	0xc2c80000
 8001ea8:	20000814 	.word	0x20000814
 8001eac:	c79c4000 	.word	0xc79c4000
 8001eb0:	20000818 	.word	0x20000818
 8001eb4:	c5fa0000 	.word	0xc5fa0000
 8001eb8:	2000081c 	.word	0x2000081c
 8001ebc:	20000820 	.word	0x20000820

08001ec0 <getLQR>:
void getLQR(float theta_,float thetadot_,float psi_,float psidot_,float phi_,float phidot_){
 8001ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ec4:	ed2d 8b02 	vpush	{d8}
 8001ec8:	b087      	sub	sp, #28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	ed87 0a05 	vstr	s0, [r7, #20]
 8001ed0:	edc7 0a04 	vstr	s1, [r7, #16]
 8001ed4:	ed87 1a03 	vstr	s2, [r7, #12]
 8001ed8:	edc7 1a02 	vstr	s3, [r7, #8]
 8001edc:	ed87 2a01 	vstr	s4, [r7, #4]
 8001ee0:	edc7 2a00 	vstr	s5, [r7]
	leftvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ - k5*phi_ - k6*phidot_;
 8001ee4:	4b88      	ldr	r3, [pc, #544]	; (8002108 <getLQR+0x248>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef2:	4b86      	ldr	r3, [pc, #536]	; (800210c <getLQR+0x24c>)
 8001ef4:	edd3 6a00 	vldr	s13, [r3]
 8001ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <getLQR+0x250>)
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f16:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <getLQR+0x254>)
 8001f18:	edd3 6a00 	vldr	s13, [r3]
 8001f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f28:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <getLQR+0x258>)
 8001f2a:	edd3 6a00 	vldr	s13, [r3]
 8001f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f3a:	4b78      	ldr	r3, [pc, #480]	; (800211c <getLQR+0x25c>)
 8001f3c:	edd3 6a00 	vldr	s13, [r3]
 8001f40:	edd7 7a00 	vldr	s15, [r7]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <getLQR+0x260>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
	rightvolt = k1*theta_ + k2*thetadot_ + k3*psi_ + k4*psidot_ + k5*phi_ + k6*phidot_;
 8001f52:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <getLQR+0x248>)
 8001f54:	ed93 7a00 	vldr	s14, [r3]
 8001f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <getLQR+0x24c>)
 8001f62:	edd3 6a00 	vldr	s13, [r3]
 8001f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <getLQR+0x250>)
 8001f74:	edd3 6a00 	vldr	s13, [r3]
 8001f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f84:	4b63      	ldr	r3, [pc, #396]	; (8002114 <getLQR+0x254>)
 8001f86:	edd3 6a00 	vldr	s13, [r3]
 8001f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f96:	4b60      	ldr	r3, [pc, #384]	; (8002118 <getLQR+0x258>)
 8001f98:	edd3 6a00 	vldr	s13, [r3]
 8001f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa8:	4b5c      	ldr	r3, [pc, #368]	; (800211c <getLQR+0x25c>)
 8001faa:	edd3 6a00 	vldr	s13, [r3]
 8001fae:	edd7 7a00 	vldr	s15, [r7]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <getLQR+0x264>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
	PWM_L = map(leftvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);		//Limit 15 deg.
 8001fc0:	4b57      	ldr	r3, [pc, #348]	; (8002120 <getLQR+0x260>)
 8001fc2:	ed93 8a00 	vldr	s16, [r3]
 8001fc6:	4b52      	ldr	r3, [pc, #328]	; (8002110 <getLQR+0x250>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fabc 	bl	8000548 <__aeabi_f2d>
 8001fd0:	a34b      	add	r3, pc, #300	; (adr r3, 8002100 <getLQR+0x240>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb0f 	bl	80005f8 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4690      	mov	r8, r2
 8001fe0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <getLQR+0x268>)
 8001fea:	4640      	mov	r0, r8
 8001fec:	4649      	mov	r1, r9
 8001fee:	f7fe fc2d 	bl	800084c <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fdd5 	bl	8000ba8 <__aeabi_d2f>
 8001ffe:	4606      	mov	r6, r0
 8002000:	4b43      	ldr	r3, [pc, #268]	; (8002110 <getLQR+0x250>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	a33d      	add	r3, pc, #244	; (adr r3, 8002100 <getLQR+0x240>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe faf2 	bl	80005f8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <getLQR+0x268>)
 8002022:	f7fe fc13 	bl	800084c <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fdbb 	bl	8000ba8 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 800212c <getLQR+0x26c>
 8002038:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002130 <getLQR+0x270>
 800203c:	ee01 3a10 	vmov	s2, r3
 8002040:	ee00 6a90 	vmov	s1, r6
 8002044:	eeb0 0a48 	vmov.f32	s0, s16
 8002048:	f7ff fe82 	bl	8001d50 <map>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <getLQR+0x274>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
	PWM_R = map(rightvolt, -(k3*M_PI)/15, (k3*M_PI)/15, -1000, 1000);
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <getLQR+0x264>)
 8002058:	ed93 8a00 	vldr	s16, [r3]
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <getLQR+0x250>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa71 	bl	8000548 <__aeabi_f2d>
 8002066:	a326      	add	r3, pc, #152	; (adr r3, 8002100 <getLQR+0x240>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fac4 	bl	80005f8 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <getLQR+0x268>)
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe fbe2 	bl	800084c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fd8a 	bl	8000ba8 <__aeabi_d2f>
 8002094:	4604      	mov	r4, r0
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <getLQR+0x250>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa54 	bl	8000548 <__aeabi_f2d>
 80020a0:	a317      	add	r3, pc, #92	; (adr r3, 8002100 <getLQR+0x240>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe faa7 	bl	80005f8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <getLQR+0x268>)
 80020b8:	f7fe fbc8 	bl	800084c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd70 	bl	8000ba8 <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	ed9f 2a18 	vldr	s4, [pc, #96]	; 800212c <getLQR+0x26c>
 80020ce:	eddf 1a18 	vldr	s3, [pc, #96]	; 8002130 <getLQR+0x270>
 80020d2:	ee01 3a10 	vmov	s2, r3
 80020d6:	ee00 4a90 	vmov	s1, r4
 80020da:	eeb0 0a48 	vmov.f32	s0, s16
 80020de:	f7ff fe37 	bl	8001d50 <map>
 80020e2:	eef0 7a40 	vmov.f32	s15, s0
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <getLQR+0x278>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	ecbd 8b02 	vpop	{d8}
 80020f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020fa:	bf00      	nop
 80020fc:	f3af 8000 	nop.w
 8002100:	54442d18 	.word	0x54442d18
 8002104:	400921fb 	.word	0x400921fb
 8002108:	2000080c 	.word	0x2000080c
 800210c:	20000810 	.word	0x20000810
 8002110:	20000814 	.word	0x20000814
 8002114:	20000818 	.word	0x20000818
 8002118:	2000081c 	.word	0x2000081c
 800211c:	20000820 	.word	0x20000820
 8002120:	20000824 	.word	0x20000824
 8002124:	20000828 	.word	0x20000828
 8002128:	402e0000 	.word	0x402e0000
 800212c:	447a0000 	.word	0x447a0000
 8002130:	c47a0000 	.word	0xc47a0000
 8002134:	2000082c 	.word	0x2000082c
 8002138:	20000830 	.word	0x20000830
 800213c:	00000000 	.word	0x00000000

08002140 <getfunctionLQR>:
void getfunctionLQR(MPU6050_t *DataStruct){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - timerloop) > 6) {									//Set time loop update and control motor
 8002148:	f001 f886 	bl	8003258 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	4b86      	ldr	r3, [pc, #536]	; (8002368 <getfunctionLQR+0x228>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b06      	cmp	r3, #6
 8002156:	f240 80fc 	bls.w	8002352 <getfunctionLQR+0x212>
	    theta = gettheta(enc_l, enc_r)*DEG_TO_RAD; 							//Read theta value and convert to Rad
 800215a:	4b84      	ldr	r3, [pc, #528]	; (800236c <getfunctionLQR+0x22c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a84      	ldr	r2, [pc, #528]	; (8002370 <getfunctionLQR+0x230>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fd9f 	bl	8001ca8 <gettheta>
 800216a:	ee10 3a10 	vmov	r3, s0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9ea 	bl	8000548 <__aeabi_f2d>
 8002174:	a37a      	add	r3, pc, #488	; (adr r3, 8002360 <getfunctionLQR+0x220>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fa3d 	bl	80005f8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fd0f 	bl	8000ba8 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4a79      	ldr	r2, [pc, #484]	; (8002374 <getfunctionLQR+0x234>)
 800218e:	6013      	str	r3, [r2, #0]
	    psi = (DataStruct->KalmanAngleY + 2)*DEG_TO_RAD;    				//Read psi value and convert to Rad
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800219e:	f7fe f875 	bl	800028c <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	a36d      	add	r3, pc, #436	; (adr r3, 8002360 <getfunctionLQR+0x220>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa22 	bl	80005f8 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fcf4 	bl	8000ba8 <__aeabi_d2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a6d      	ldr	r2, [pc, #436]	; (8002378 <getfunctionLQR+0x238>)
 80021c4:	6013      	str	r3, [r2, #0]
	    phi =  getphi(enc_l, enc_r)*DEG_TO_RAD;    							//Read phi value and convert to Rad
 80021c6:	4b69      	ldr	r3, [pc, #420]	; (800236c <getfunctionLQR+0x22c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a69      	ldr	r2, [pc, #420]	; (8002370 <getfunctionLQR+0x230>)
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fd8d 	bl	8001cf0 <getphi>
 80021d6:	ee10 3a10 	vmov	r3, s0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9b4 	bl	8000548 <__aeabi_f2d>
 80021e0:	a35f      	add	r3, pc, #380	; (adr r3, 8002360 <getfunctionLQR+0x220>)
 80021e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e6:	f7fe fa07 	bl	80005f8 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fcd9 	bl	8000ba8 <__aeabi_d2f>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a60      	ldr	r2, [pc, #384]	; (800237c <getfunctionLQR+0x23c>)
 80021fa:	6013      	str	r3, [r2, #0]
	    if(abs(DataStruct->KalmanAngleY) <=2) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fca7 	bl	8000b58 <__aeabi_d2iz>
 800220a:	4603      	mov	r3, r0
 800220c:	f113 0f02 	cmn.w	r3, #2
 8002210:	db11      	blt.n	8002236 <getfunctionLQR+0xf6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc9c 	bl	8000b58 <__aeabi_d2iz>
 8002220:	4603      	mov	r3, r0
 8002222:	2b02      	cmp	r3, #2
 8002224:	dc07      	bgt.n	8002236 <getfunctionLQR+0xf6>
	    	PWM_L = 0;
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <getfunctionLQR+0x240>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
	    	PWM_R = 0;
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <getfunctionLQR+0x244>)
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	    }
	    //Update time compare with timeloop
	    float dt = (float)(HAL_GetTick() - timer) / 100;
 8002236:	f001 f80f 	bl	8003258 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	4b52      	ldr	r3, [pc, #328]	; (8002388 <getfunctionLQR+0x248>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800224a:	eddf 6a50 	vldr	s13, [pc, #320]	; 800238c <getfunctionLQR+0x24c>
 800224e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002252:	edc7 7a03 	vstr	s15, [r7, #12]
	    timerloop = HAL_GetTick();
 8002256:	f000 ffff 	bl	8003258 <HAL_GetTick>
 800225a:	4603      	mov	r3, r0
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <getfunctionLQR+0x228>)
 800225e:	6013      	str	r3, [r2, #0]

	    //Update input angle value
	    thetadot 	= (theta - theta_old)/dt;
 8002260:	4b44      	ldr	r3, [pc, #272]	; (8002374 <getfunctionLQR+0x234>)
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <getfunctionLQR+0x250>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002270:	ed97 7a03 	vldr	s14, [r7, #12]
 8002274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <getfunctionLQR+0x254>)
 800227a:	edc3 7a00 	vstr	s15, [r3]
	    psidot 		= (psi - psi_old)/dt;
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <getfunctionLQR+0x238>)
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <getfunctionLQR+0x258>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800228e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <getfunctionLQR+0x25c>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
	    phidot 		= (phi - phi_old)/dt;
 800229c:	4b37      	ldr	r3, [pc, #220]	; (800237c <getfunctionLQR+0x23c>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <getfunctionLQR+0x260>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b4:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <getfunctionLQR+0x264>)
 80022b6:	edc3 7a00 	vstr	s15, [r3]

	    //Update old angle value
	    theta_old = theta;
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <getfunctionLQR+0x234>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <getfunctionLQR+0x250>)
 80022c0:	6013      	str	r3, [r2, #0]
	    psi_old = psi;
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <getfunctionLQR+0x238>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <getfunctionLQR+0x258>)
 80022c8:	6013      	str	r3, [r2, #0]
	    phi_old = phi;
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <getfunctionLQR+0x23c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <getfunctionLQR+0x260>)
 80022d0:	6013      	str	r3, [r2, #0]

	    getLQR(theta, thetadot, psi, psidot, phi, phidot);
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <getfunctionLQR+0x234>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <getfunctionLQR+0x254>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <getfunctionLQR+0x238>)
 80022e0:	edd3 6a00 	vldr	s13, [r3]
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <getfunctionLQR+0x25c>)
 80022e6:	ed93 6a00 	vldr	s12, [r3]
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <getfunctionLQR+0x23c>)
 80022ec:	edd3 5a00 	vldr	s11, [r3]
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <getfunctionLQR+0x264>)
 80022f2:	ed93 5a00 	vldr	s10, [r3]
 80022f6:	eef0 2a45 	vmov.f32	s5, s10
 80022fa:	eeb0 2a65 	vmov.f32	s4, s11
 80022fe:	eef0 1a46 	vmov.f32	s3, s12
 8002302:	eeb0 1a66 	vmov.f32	s2, s13
 8002306:	eef0 0a47 	vmov.f32	s1, s14
 800230a:	eeb0 0a67 	vmov.f32	s0, s15
 800230e:	f7ff fdd7 	bl	8001ec0 <getLQR>
	    PWM_L = constrain(PWM_L, -200, 200);
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <getfunctionLQR+0x240>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80023a8 <getfunctionLQR+0x268>
 800231c:	eddf 0a23 	vldr	s1, [pc, #140]	; 80023ac <getfunctionLQR+0x26c>
 8002320:	eeb0 0a67 	vmov.f32	s0, s15
 8002324:	f7ff fd42 	bl	8001dac <constrain>
 8002328:	eef0 7a40 	vmov.f32	s15, s0
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <getfunctionLQR+0x240>)
 800232e:	edc3 7a00 	vstr	s15, [r3]
		PWM_R = constrain(PWM_R, -200, 200);
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <getfunctionLQR+0x244>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80023a8 <getfunctionLQR+0x268>
 800233c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80023ac <getfunctionLQR+0x26c>
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	f7ff fd32 	bl	8001dac <constrain>
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <getfunctionLQR+0x244>)
 800234e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	a2529d39 	.word	0xa2529d39
 8002364:	3f91df46 	.word	0x3f91df46
 8002368:	200006c4 	.word	0x200006c4
 800236c:	200007e0 	.word	0x200007e0
 8002370:	200007e4 	.word	0x200007e4
 8002374:	200007e8 	.word	0x200007e8
 8002378:	200007ec 	.word	0x200007ec
 800237c:	200007f0 	.word	0x200007f0
 8002380:	2000082c 	.word	0x2000082c
 8002384:	20000830 	.word	0x20000830
 8002388:	200006c0 	.word	0x200006c0
 800238c:	42c80000 	.word	0x42c80000
 8002390:	20000800 	.word	0x20000800
 8002394:	200007f4 	.word	0x200007f4
 8002398:	20000804 	.word	0x20000804
 800239c:	200007f8 	.word	0x200007f8
 80023a0:	20000808 	.word	0x20000808
 80023a4:	200007fc 	.word	0x200007fc
 80023a8:	43480000 	.word	0x43480000
 80023ac:	c3480000 	.word	0xc3480000

080023b0 <PID_Init>:
//--------------------------------LQR-------------------------------------------------//
void PID_Init()
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	PID_DC_SPEED_L.kP = 1;
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <PID_Init+0x88>)
 80023b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023ba:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_L.kI = 30;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <PID_Init+0x88>)
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <PID_Init+0x8c>)
 80023c0:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_L.kD = 0.001;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <PID_Init+0x88>)
 80023c4:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <PID_Init+0x90>)
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_L.alpha = 0;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <PID_Init+0x88>)
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_L.deltaT = 0.01;
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <PID_Init+0x88>)
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <PID_Init+0x94>)
 80023d4:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_L.uI_AboveLimit = 1000;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <PID_Init+0x88>)
 80023d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_L.uI_BelowLimit = -1000;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <PID_Init+0x88>)
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <PID_Init+0x98>)
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_L.u_AboveLimit  = 1000;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <PID_Init+0x88>)
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <PID_Init+0x9c>)
 80023e8:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_L.u_BelowLimit  = -1000;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <PID_Init+0x88>)
 80023ec:	4a18      	ldr	r2, [pc, #96]	; (8002450 <PID_Init+0xa0>)
 80023ee:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_SPEED_R.kP = 1;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <PID_Init+0xa4>)
 80023f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f6:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_R.kI = 30;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <PID_Init+0xa4>)
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <PID_Init+0x8c>)
 80023fc:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_R.kD = 0.001;
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <PID_Init+0xa4>)
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <PID_Init+0x90>)
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_R.alpha = 0;
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <PID_Init+0xa4>)
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_R.deltaT = 0.01;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <PID_Init+0xa4>)
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <PID_Init+0x94>)
 8002410:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_R.uI_AboveLimit = 1000;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <PID_Init+0xa4>)
 8002414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_R.uI_BelowLimit = -1000;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <PID_Init+0xa4>)
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <PID_Init+0x98>)
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_R.u_AboveLimit  = 1000;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <PID_Init+0xa4>)
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <PID_Init+0x9c>)
 8002424:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_R.u_BelowLimit  = -1000;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <PID_Init+0xa4>)
 8002428:	4a09      	ldr	r2, [pc, #36]	; (8002450 <PID_Init+0xa0>)
 800242a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000620 	.word	0x20000620
 800243c:	41f00000 	.word	0x41f00000
 8002440:	3a83126f 	.word	0x3a83126f
 8002444:	3c23d70a 	.word	0x3c23d70a
 8002448:	fffffc18 	.word	0xfffffc18
 800244c:	447a0000 	.word	0x447a0000
 8002450:	c47a0000 	.word	0xc47a0000
 8002454:	20000670 	.word	0x20000670

08002458 <PID_Cal_Left>:
void PID_Cal_Left(){
 8002458:	b580      	push	{r7, lr}
 800245a:	ed2d 8b02 	vpush	{d8}
 800245e:	b082      	sub	sp, #8
 8002460:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_L);
 8002462:	4814      	ldr	r0, [pc, #80]	; (80024b4 <PID_Cal_Left+0x5c>)
 8002464:	f7fe fd88 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_L, PWM_L, ENC_L.vel_Real);
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <PID_Cal_Left+0x60>)
 800246a:	ed93 8a00 	vldr	s16, [r3]
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <PID_Cal_Left+0x5c>)
 8002470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb96 	bl	8000ba8 <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	ee00 3a90 	vmov	s1, r3
 8002482:	eeb0 0a48 	vmov.f32	s0, s16
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <PID_Cal_Left+0x64>)
 8002488:	f7fe ff70 	bl	800136c <Pid_Cal>
	Drive(&Motor_L, &htim3, PID_DC_SPEED_L.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <PID_Cal_Left+0x64>)
 800248e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002496:	230c      	movs	r3, #12
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2308      	movs	r3, #8
 800249c:	ee17 2a90 	vmov	r2, s15
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <PID_Cal_Left+0x68>)
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <PID_Cal_Left+0x6c>)
 80024a4:	f7fe fe5c 	bl	8001160 <Drive>
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	ecbd 8b02 	vpop	{d8}
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000720 	.word	0x20000720
 80024b8:	2000082c 	.word	0x2000082c
 80024bc:	20000620 	.word	0x20000620
 80024c0:	20000584 	.word	0x20000584
 80024c4:	200007b0 	.word	0x200007b0

080024c8 <PID_Cal_Right>:
void PID_Cal_Right(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	ed2d 8b02 	vpush	{d8}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_R);
 80024d2:	4814      	ldr	r0, [pc, #80]	; (8002524 <PID_Cal_Right+0x5c>)
 80024d4:	f7fe fd50 	bl	8000f78 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_R, PWM_R, ENC_R.vel_Real);
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <PID_Cal_Right+0x60>)
 80024da:	ed93 8a00 	vldr	s16, [r3]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <PID_Cal_Right+0x5c>)
 80024e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb5e 	bl	8000ba8 <__aeabi_d2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	ee00 3a90 	vmov	s1, r3
 80024f2:	eeb0 0a48 	vmov.f32	s0, s16
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <PID_Cal_Right+0x64>)
 80024f8:	f7fe ff38 	bl	800136c <Pid_Cal>
	Drive(&Motor_R, &htim3, PID_DC_SPEED_R.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <PID_Cal_Right+0x64>)
 80024fe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002506:	2304      	movs	r3, #4
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	ee17 2a90 	vmov	r2, s15
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <PID_Cal_Right+0x68>)
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <PID_Cal_Right+0x6c>)
 8002514:	f7fe fe24 	bl	8001160 <Drive>
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	ecbd 8b02 	vpop	{d8}
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000768 	.word	0x20000768
 8002528:	20000830 	.word	0x20000830
 800252c:	20000670 	.word	0x20000670
 8002530:	20000584 	.word	0x20000584
 8002534:	200007c8 	.word	0x200007c8

08002538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b096      	sub	sp, #88	; 0x58
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253e:	f000 fe55 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002542:	f000 f895 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002546:	f000 fa4b 	bl	80029e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800254a:	f000 f8f9 	bl	8002740 <MX_I2C1_Init>
  MX_TIM2_Init();
 800254e:	f000 f925 	bl	800279c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002552:	f000 f977 	bl	8002844 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002556:	f000 f9ef 	bl	8002938 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  while(MPU6050_Init()==1);
 800255a:	bf00      	nop
 800255c:	f7ff f960 	bl	8001820 <MPU6050_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b01      	cmp	r3, #1
 8002564:	d0fa      	beq.n	800255c <main+0x24>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002566:	2100      	movs	r1, #0
 8002568:	4835      	ldr	r0, [pc, #212]	; (8002640 <main+0x108>)
 800256a:	f002 fef3 	bl	8005354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800256e:	2104      	movs	r1, #4
 8002570:	4833      	ldr	r0, [pc, #204]	; (8002640 <main+0x108>)
 8002572:	f002 feef 	bl	8005354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002576:	2108      	movs	r1, #8
 8002578:	4831      	ldr	r0, [pc, #196]	; (8002640 <main+0x108>)
 800257a:	f002 feeb 	bl	8005354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800257e:	210c      	movs	r1, #12
 8002580:	482f      	ldr	r0, [pc, #188]	; (8002640 <main+0x108>)
 8002582:	f002 fee7 	bl	8005354 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002586:	213c      	movs	r1, #60	; 0x3c
 8002588:	482e      	ldr	r0, [pc, #184]	; (8002644 <main+0x10c>)
 800258a:	f003 f851 	bl	8005630 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800258e:	213c      	movs	r1, #60	; 0x3c
 8002590:	482d      	ldr	r0, [pc, #180]	; (8002648 <main+0x110>)
 8002592:	f003 f84d 	bl	8005630 <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_L, &htim2, 370, 0.01);
 8002596:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8002638 <main+0x100>
 800259a:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800259e:	4929      	ldr	r1, [pc, #164]	; (8002644 <main+0x10c>)
 80025a0:	482a      	ldr	r0, [pc, #168]	; (800264c <main+0x114>)
 80025a2:	f7fe fccf 	bl	8000f44 <EncoderSetting>
  EncoderSetting(&ENC_R, &htim4, 370, 0.01);
 80025a6:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8002638 <main+0x100>
 80025aa:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80025ae:	4926      	ldr	r1, [pc, #152]	; (8002648 <main+0x110>)
 80025b0:	4827      	ldr	r0, [pc, #156]	; (8002650 <main+0x118>)
 80025b2:	f7fe fcc7 	bl	8000f44 <EncoderSetting>

  LQR_Init();
 80025b6:	f7ff fc53 	bl	8001e60 <LQR_Init>
  PID_Init();
 80025ba:	f7ff fef9 	bl	80023b0 <PID_Init>
  StopandReset(&MPU6050);
 80025be:	4825      	ldr	r0, [pc, #148]	; (8002654 <main+0x11c>)
 80025c0:	f7ff fc1e 	bl	8001e00 <StopandReset>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, StartMPU6050ask, osPriorityBelowNormal, 0, 128);
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <main+0x120>)
 80025c6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80025ca:	461d      	mov	r5, r3
 80025cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 80025d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fdbf 	bl	8006162 <osThreadCreate>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <main+0x124>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of FunctionTask */
  osThreadDef(FunctionTask, StartTaskFunction, osPriorityNormal, 0, 128);
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <main+0x128>)
 80025ec:	f107 0420 	add.w	r4, r7, #32
 80025f0:	461d      	mov	r5, r3
 80025f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FunctionTaskHandle = osThreadCreate(osThread(FunctionTask), NULL);
 80025fe:	f107 0320 	add.w	r3, r7, #32
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fdac 	bl	8006162 <osThreadCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <main+0x12c>)
 800260e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Cal_PID */
  osThreadDef(Cal_PID, StartTaskCalPID, osPriorityNormal, 0, 128);
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <main+0x130>)
 8002612:	1d3c      	adds	r4, r7, #4
 8002614:	461d      	mov	r5, r3
 8002616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800261e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Cal_PIDHandle = osThreadCreate(osThread(Cal_PID), NULL);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fd9b 	bl	8006162 <osThreadCreate>
 800262c:	4603      	mov	r3, r0
 800262e:	4a0f      	ldr	r2, [pc, #60]	; (800266c <main+0x134>)
 8002630:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002632:	f003 fd8f 	bl	8006154 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002636:	e7fe      	b.n	8002636 <main+0xfe>
 8002638:	47ae147b 	.word	0x47ae147b
 800263c:	3f847ae1 	.word	0x3f847ae1
 8002640:	20000584 	.word	0x20000584
 8002644:	2000053c 	.word	0x2000053c
 8002648:	200005cc 	.word	0x200005cc
 800264c:	20000720 	.word	0x20000720
 8002650:	20000768 	.word	0x20000768
 8002654:	200006c8 	.word	0x200006c8
 8002658:	0800a64c 	.word	0x0800a64c
 800265c:	20000614 	.word	0x20000614
 8002660:	0800a678 	.word	0x0800a678
 8002664:	20000618 	.word	0x20000618
 8002668:	0800a69c 	.word	0x0800a69c
 800266c:	2000061c 	.word	0x2000061c

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b094      	sub	sp, #80	; 0x50
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 0320 	add.w	r3, r7, #32
 800267a:	2230      	movs	r2, #48	; 0x30
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fd07 	bl	8008092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <SystemClock_Config+0xc8>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <SystemClock_Config+0xc8>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <SystemClock_Config+0xc8>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <SystemClock_Config+0xcc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a20      	ldr	r2, [pc, #128]	; (800273c <SystemClock_Config+0xcc>)
 80026ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <SystemClock_Config+0xcc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d6:	2302      	movs	r3, #2
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e0:	2304      	movs	r3, #4
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80026e4:	2348      	movs	r3, #72	; 0x48
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026ec:	2304      	movs	r3, #4
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 f85d 	bl	80047b4 <HAL_RCC_OscConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002700:	f000 fa64 	bl	8002bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002704:	230f      	movs	r3, #15
 8002706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002708:	2302      	movs	r3, #2
 800270a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fabf 	bl	8004ca4 <HAL_RCC_ClockConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800272c:	f000 fa4e 	bl	8002bcc <Error_Handler>
  }
}
 8002730:	bf00      	nop
 8002732:	3750      	adds	r7, #80	; 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000

08002740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C1_Init+0x50>)
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <MX_I2C1_Init+0x54>)
 8002748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C1_Init+0x50>)
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_I2C1_Init+0x58>)
 800274e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C1_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C1_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_I2C1_Init+0x50>)
 800275e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C1_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_I2C1_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_I2C1_Init+0x50>)
 800277e:	f000 fff5 	bl	800376c <HAL_I2C_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002788:	f000 fa20 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200004e8 	.word	0x200004e8
 8002794:	40005400 	.word	0x40005400
 8002798:	000186a0 	.word	0x000186a0

0800279c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fc71 	bl	8008092 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <MX_TIM2_Init+0xa4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027e0:	2303      	movs	r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027e8:	2301      	movs	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4619      	mov	r1, r3
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <MX_TIM2_Init+0xa4>)
 800280c:	f002 fe6a 	bl	80054e4 <HAL_TIM_Encoder_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002816:	f000 f9d9 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <MX_TIM2_Init+0xa4>)
 8002828:	f003 fbec 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002832:	f000 f9cb 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	3730      	adds	r7, #48	; 0x30
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000053c 	.word	0x2000053c

08002844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	f107 0320 	add.w	r3, r7, #32
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002866:	4b32      	ldr	r3, [pc, #200]	; (8002930 <MX_TIM3_Init+0xec>)
 8002868:	4a32      	ldr	r2, [pc, #200]	; (8002934 <MX_TIM3_Init+0xf0>)
 800286a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 800286c:	4b30      	ldr	r3, [pc, #192]	; (8002930 <MX_TIM3_Init+0xec>)
 800286e:	2206      	movs	r2, #6
 8002870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <MX_TIM3_Init+0xec>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <MX_TIM3_Init+0xec>)
 800287a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <MX_TIM3_Init+0xec>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <MX_TIM3_Init+0xec>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800288c:	4828      	ldr	r0, [pc, #160]	; (8002930 <MX_TIM3_Init+0xec>)
 800288e:	f002 fd11 	bl	80052b4 <HAL_TIM_PWM_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002898:	f000 f998 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a4:	f107 0320 	add.w	r3, r7, #32
 80028a8:	4619      	mov	r1, r3
 80028aa:	4821      	ldr	r0, [pc, #132]	; (8002930 <MX_TIM3_Init+0xec>)
 80028ac:	f003 fbaa 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028b6:	f000 f989 	bl	8002bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ba:	2360      	movs	r3, #96	; 0x60
 80028bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2200      	movs	r2, #0
 80028ce:	4619      	mov	r1, r3
 80028d0:	4817      	ldr	r0, [pc, #92]	; (8002930 <MX_TIM3_Init+0xec>)
 80028d2:	f003 f82b 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80028dc:	f000 f976 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2204      	movs	r2, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <MX_TIM3_Init+0xec>)
 80028e8:	f003 f820 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80028f2:	f000 f96b 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2208      	movs	r2, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	480c      	ldr	r0, [pc, #48]	; (8002930 <MX_TIM3_Init+0xec>)
 80028fe:	f003 f815 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002908:	f000 f960 	bl	8002bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	220c      	movs	r2, #12
 8002910:	4619      	mov	r1, r3
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <MX_TIM3_Init+0xec>)
 8002914:	f003 f80a 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800291e:	f000 f955 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002922:	4803      	ldr	r0, [pc, #12]	; (8002930 <MX_TIM3_Init+0xec>)
 8002924:	f000 fa6a 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000584 	.word	0x20000584
 8002934:	40000400 	.word	0x40000400

08002938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f005 fba3 	bl	8008092 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <MX_TIM4_Init+0xa0>)
 8002956:	4a21      	ldr	r2, [pc, #132]	; (80029dc <MX_TIM4_Init+0xa4>)
 8002958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <MX_TIM4_Init+0xa0>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_TIM4_Init+0xa0>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <MX_TIM4_Init+0xa0>)
 8002968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <MX_TIM4_Init+0xa0>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <MX_TIM4_Init+0xa0>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800297a:	2303      	movs	r3, #3
 800297c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002982:	2301      	movs	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM4_Init+0xa0>)
 80029a6:	f002 fd9d 	bl	80054e4 <HAL_TIM_Encoder_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80029b0:	f000 f90c 	bl	8002bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM4_Init+0xa0>)
 80029c2:	f003 fb1f 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80029cc:	f000 f8fe 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3730      	adds	r7, #48	; 0x30
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200005cc 	.word	0x200005cc
 80029dc:	40000800 	.word	0x40000800

080029e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MX_GPIO_Init+0x84>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <MX_GPIO_Init+0x84>)
 80029f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <MX_GPIO_Init+0x84>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_GPIO_Init+0x84>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <StartMPU6050ask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPU6050ask */
void StartMPU6050ask(void const * argument)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_Read_All(&MPU6050);
 8002a70:	4812      	ldr	r0, [pc, #72]	; (8002abc <StartMPU6050ask+0x54>)
 8002a72:	f7fe ff29 	bl	80018c8 <MPU6050_Read_All>
	enc_l=CountRead(&ENC_L, count_ModeX1);
 8002a76:	2100      	movs	r1, #0
 8002a78:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <StartMPU6050ask+0x58>)
 8002a7a:	f7fe fb0b 	bl	8001094 <CountRead>
 8002a7e:	ec53 2b10 	vmov	r2, r3, d0
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f867 	bl	8000b58 <__aeabi_d2iz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <StartMPU6050ask+0x5c>)
 8002a8e:	6013      	str	r3, [r2, #0]
	enc_r=CountRead(&ENC_R, count_ModeX1);
 8002a90:	2100      	movs	r1, #0
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <StartMPU6050ask+0x60>)
 8002a94:	f7fe fafe 	bl	8001094 <CountRead>
 8002a98:	ec53 2b10 	vmov	r2, r3, d0
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fe f85a 	bl	8000b58 <__aeabi_d2iz>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <StartMPU6050ask+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]
	PID_Cal_Left();
 8002aaa:	f7ff fcd5 	bl	8002458 <PID_Cal_Left>
	PID_Cal_Right();
 8002aae:	f7ff fd0b 	bl	80024c8 <PID_Cal_Right>
    osDelay(10);
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f003 fba1 	bl	80061fa <osDelay>
	MPU6050_Read_All(&MPU6050);
 8002ab8:	e7da      	b.n	8002a70 <StartMPU6050ask+0x8>
 8002aba:	bf00      	nop
 8002abc:	200006c8 	.word	0x200006c8
 8002ac0:	20000720 	.word	0x20000720
 8002ac4:	200007e0 	.word	0x200007e0
 8002ac8:	20000768 	.word	0x20000768
 8002acc:	200007e4 	.word	0x200007e4

08002ad0 <StartTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFunction */
void StartTaskFunction(void const * argument)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	getfunctionLQR(&MPU6050);
 8002ad8:	4824      	ldr	r0, [pc, #144]	; (8002b6c <StartTaskFunction+0x9c>)
 8002ada:	f7ff fb31 	bl	8002140 <getfunctionLQR>
	if(MPU6050.KalmanAngleY > 3 || MPU6050.KalmanAngleY <-7)
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <StartTaskFunction+0x9c>)
 8002ae0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <StartTaskFunction+0xa0>)
 8002aea:	f7fe f815 	bl	8000b18 <__aeabi_dcmpgt>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <StartTaskFunction+0x3a>
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <StartTaskFunction+0x9c>)
 8002af6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <StartTaskFunction+0xa4>)
 8002b00:	f7fd ffec 	bl	8000adc <__aeabi_dcmplt>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <StartTaskFunction+0x66>
	{
		PID_DC_SPEED_L.kP = 10;
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <StartTaskFunction+0xac>)
 8002b0e:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 10;
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <StartTaskFunction+0xac>)
 8002b14:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <StartTaskFunction+0xb0>)
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 10;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <StartTaskFunction+0xac>)
 8002b20:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 10;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <StartTaskFunction+0xac>)
 8002b26:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <StartTaskFunction+0xb0>)
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -15000;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <StartTaskFunction+0xb8>)
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <StartTaskFunction+0xbc>)
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e016      	b.n	8002b64 <StartTaskFunction+0x94>
	}
	else{
		PID_DC_SPEED_L.kP = 1;
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b3c:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_L.kI = 30;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b40:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <StartTaskFunction+0xc0>)
 8002b42:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_L.kD = 0.001;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <StartTaskFunction+0xa8>)
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <StartTaskFunction+0xb0>)
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30

		PID_DC_SPEED_R.kP = 1;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b50:	615a      	str	r2, [r3, #20]
		PID_DC_SPEED_R.kI = 30;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b54:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <StartTaskFunction+0xc0>)
 8002b56:	61da      	str	r2, [r3, #28]
		PID_DC_SPEED_R.kD = 0.001;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <StartTaskFunction+0xb4>)
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <StartTaskFunction+0xb0>)
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30

		k4 = -8000;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <StartTaskFunction+0xb8>)
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <StartTaskFunction+0xc4>)
 8002b62:	601a      	str	r2, [r3, #0]
	}


    osDelay(10);
 8002b64:	200a      	movs	r0, #10
 8002b66:	f003 fb48 	bl	80061fa <osDelay>
	getfunctionLQR(&MPU6050);
 8002b6a:	e7b5      	b.n	8002ad8 <StartTaskFunction+0x8>
 8002b6c:	200006c8 	.word	0x200006c8
 8002b70:	40080000 	.word	0x40080000
 8002b74:	c01c0000 	.word	0xc01c0000
 8002b78:	20000620 	.word	0x20000620
 8002b7c:	41200000 	.word	0x41200000
 8002b80:	3a83126f 	.word	0x3a83126f
 8002b84:	20000670 	.word	0x20000670
 8002b88:	20000818 	.word	0x20000818
 8002b8c:	c66a6000 	.word	0xc66a6000
 8002b90:	41f00000 	.word	0x41f00000
 8002b94:	c5fa0000 	.word	0xc5fa0000

08002b98 <StartTaskCalPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalPID */
void StartTaskCalPID(void const * argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCalPID */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002ba0:	200a      	movs	r0, #10
 8002ba2:	f003 fb2a 	bl	80061fa <osDelay>
 8002ba6:	e7fb      	b.n	8002ba0 <StartTaskCalPID+0x8>

08002ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bba:	f000 fb39 	bl	8003230 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40002000 	.word	0x40002000

08002bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <Error_Handler+0x8>
	...

08002bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_MspInit+0x54>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_MspInit+0x54>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_MspInit+0x54>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_MspInit+0x54>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_MspInit+0x54>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_MspInit+0x54>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	210f      	movs	r1, #15
 8002c1a:	f06f 0001 	mvn.w	r0, #1
 8002c1e:	f000 fbdf 	bl	80033e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_I2C_MspInit+0x84>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d12b      	bne.n	8002caa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c6e:	23c0      	movs	r3, #192	; 0xc0
 8002c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c72:	2312      	movs	r3, #18
 8002c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4619      	mov	r1, r3
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <HAL_I2C_MspInit+0x8c>)
 8002c8a:	f000 fbd3 	bl	8003434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3728      	adds	r7, #40	; 0x28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40005400 	.word	0x40005400
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020400 	.word	0x40020400

08002cc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d12c      	bne.n	8002d3c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	4619      	mov	r1, r3
 8002d34:	481d      	ldr	r0, [pc, #116]	; (8002dac <HAL_TIM_Encoder_MspInit+0xec>)
 8002d36:	f000 fb7d 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d3a:	e031      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12c      	bne.n	8002da0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d90:	2302      	movs	r3, #2
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002d9c:	f000 fb4a 	bl	8003434 <HAL_GPIO_Init>
}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40020c00 	.word	0x40020c00

08002db8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10d      	bne.n	8002de6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_TIM_PWM_MspInit+0x40>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_TIM_PWM_MspInit+0x40>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <HAL_TIM_MspPostInit+0xa4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d13b      	bne.n	8002e96 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_TIM_MspPostInit+0xa8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e66:	2302      	movs	r3, #2
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <HAL_TIM_MspPostInit+0xac>)
 8002e72:	f000 fadf 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e76:	2303      	movs	r3, #3
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e86:	2302      	movs	r3, #2
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4806      	ldr	r0, [pc, #24]	; (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e92:	f000 facf 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400

08002eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <HAL_InitTick+0xe4>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <HAL_InitTick+0xe4>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_InitTick+0xe4>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002edc:	f107 0210 	add.w	r2, r7, #16
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 f8e8 	bl	80050bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f002 f8cd 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8002efa:	6378      	str	r0, [r7, #52]	; 0x34
 8002efc:	e004      	b.n	8002f08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002efe:	f002 f8c9 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8002f02:	4603      	mov	r3, r0
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	0c9b      	lsrs	r3, r3, #18
 8002f12:	3b01      	subs	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_InitTick+0xec>)
 8002f18:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <HAL_InitTick+0xf0>)
 8002f1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <HAL_InitTick+0xec>)
 8002f1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f22:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_InitTick+0xec>)
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_InitTick+0xec>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_InitTick+0xec>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_InitTick+0xec>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002f3c:	4817      	ldr	r0, [pc, #92]	; (8002f9c <HAL_InitTick+0xec>)
 8002f3e:	f002 f8ef 	bl	8005120 <HAL_TIM_Base_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11b      	bne.n	8002f88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002f50:	4812      	ldr	r0, [pc, #72]	; (8002f9c <HAL_InitTick+0xec>)
 8002f52:	f002 f93f 	bl	80051d4 <HAL_TIM_Base_Start_IT>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f64:	202d      	movs	r0, #45	; 0x2d
 8002f66:	f000 fa57 	bl	8003418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d808      	bhi.n	8002f82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	202d      	movs	r0, #45	; 0x2d
 8002f76:	f000 fa33 	bl	80033e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_InitTick+0xf4>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e002      	b.n	8002f88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3738      	adds	r7, #56	; 0x38
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	20000834 	.word	0x20000834
 8002fa0:	40002000 	.word	0x40002000
 8002fa4:	20000094 	.word	0x20000094

08002fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fac:	e7fe      	b.n	8002fac <NMI_Handler+0x4>

08002fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <HardFault_Handler+0x4>

08002fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <MemManage_Handler+0x4>

08002fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <BusFault_Handler+0x4>

08002fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <UsageFault_Handler+0x4>

08002fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002fda:	f002 fbb7 	bl	800574c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000834 	.word	0x20000834

08002fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_kill>:

int _kill(int pid, int sig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003002:	f005 f899 	bl	8008138 <__errno>
 8003006:	4603      	mov	r3, r0
 8003008:	2216      	movs	r2, #22
 800300a:	601a      	str	r2, [r3, #0]
  return -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_exit>:

void _exit (int status)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ffe7 	bl	8002ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800302a:	e7fe      	b.n	800302a <_exit+0x12>

0800302c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e00a      	b.n	8003054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800303e:	f3af 8000 	nop.w
 8003042:	4601      	mov	r1, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbf0      	blt.n	800303e <_read+0x12>
  }

  return len;
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf1      	blt.n	8003078 <_write+0x12>
  }
  return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_close>:

int _close(int file)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c6:	605a      	str	r2, [r3, #4]
  return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_isatty>:

int _isatty(int file)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f004 fffe 	bl	8008138 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20020000 	.word	0x20020000
 8003168:	00000400 	.word	0x00000400
 800316c:	2000087c 	.word	0x2000087c
 8003170:	20004728 	.word	0x20004728

08003174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <SystemInit+0x20>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <SystemInit+0x20>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800319c:	f7ff ffea 	bl	8003174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031a2:	490d      	ldr	r1, [pc, #52]	; (80031d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a8:	e002      	b.n	80031b0 <LoopCopyDataInit>

080031aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ae:	3304      	adds	r3, #4

080031b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b4:	d3f9      	bcc.n	80031aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031bc:	e001      	b.n	80031c2 <LoopFillZerobss>

080031be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c0:	3204      	adds	r2, #4

080031c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c4:	d3fb      	bcc.n	80031be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031c6:	f004 ffbd 	bl	8008144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ca:	f7ff f9b5 	bl	8002538 <main>
  bx  lr    
 80031ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d8:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80031dc:	0800aad0 	.word	0x0800aad0
  ldr r2, =_sbss
 80031e0:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80031e4:	20004724 	.word	0x20004724

080031e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC_IRQHandler>
	...

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_Init+0x40>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_Init+0x40>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <HAL_Init+0x40>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 f8d8 	bl	80033ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321a:	200f      	movs	r0, #15
 800321c:	f7ff fe48 	bl	8002eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7ff fcda 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_IncTick+0x20>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x24>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_IncTick+0x24>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000098 	.word	0x20000098
 8003254:	20000880 	.word	0x20000880

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000880 	.word	0x20000880

08003270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800328c:	4013      	ands	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a2:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	60d3      	str	r3, [r2, #12]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <__NVIC_GetPriorityGrouping+0x18>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0307 	and.w	r3, r3, #7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0b      	blt.n	80032fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <__NVIC_EnableIRQ+0x38>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db0a      	blt.n	800333a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	490c      	ldr	r1, [pc, #48]	; (800335c <__NVIC_SetPriority+0x4c>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003338:	e00a      	b.n	8003350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4908      	ldr	r1, [pc, #32]	; (8003360 <__NVIC_SetPriority+0x50>)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3b04      	subs	r3, #4
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	440b      	add	r3, r1
 800334e:	761a      	strb	r2, [r3, #24]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf28      	it	cs
 8003382:	2304      	movcs	r3, #4
 8003384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3304      	adds	r3, #4
 800338a:	2b06      	cmp	r3, #6
 800338c:	d902      	bls.n	8003394 <NVIC_EncodePriority+0x30>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3b03      	subs	r3, #3
 8003392:	e000      	b.n	8003396 <NVIC_EncodePriority+0x32>
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	4313      	orrs	r3, r2
         );
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff4c 	bl	8003270 <__NVIC_SetPriorityGrouping>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f2:	f7ff ff61 	bl	80032b8 <__NVIC_GetPriorityGrouping>
 80033f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	6978      	ldr	r0, [r7, #20]
 80033fe:	f7ff ffb1 	bl	8003364 <NVIC_EncodePriority>
 8003402:	4602      	mov	r2, r0
 8003404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff80 	bl	8003310 <__NVIC_SetPriority>
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff54 	bl	80032d4 <__NVIC_EnableIRQ>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e16b      	b.n	8003728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 815a 	bne.w	8003722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d005      	beq.n	8003486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003482:	2b02      	cmp	r3, #2
 8003484:	d130      	bne.n	80034e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0201 	and.w	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d017      	beq.n	8003524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d123      	bne.n	8003578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	220f      	movs	r2, #15
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	08da      	lsrs	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80b4 	beq.w	8003722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b60      	ldr	r3, [pc, #384]	; (8003740 <HAL_GPIO_Init+0x30c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a5f      	ldr	r2, [pc, #380]	; (8003740 <HAL_GPIO_Init+0x30c>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_GPIO_Init+0x30c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d6:	4a5b      	ldr	r2, [pc, #364]	; (8003744 <HAL_GPIO_Init+0x310>)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	3302      	adds	r3, #2
 80035de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_GPIO_Init+0x314>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02b      	beq.n	800365a <HAL_GPIO_Init+0x226>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a51      	ldr	r2, [pc, #324]	; (800374c <HAL_GPIO_Init+0x318>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d025      	beq.n	8003656 <HAL_GPIO_Init+0x222>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a50      	ldr	r2, [pc, #320]	; (8003750 <HAL_GPIO_Init+0x31c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_GPIO_Init+0x21e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <HAL_GPIO_Init+0x320>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_Init+0x21a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4e      	ldr	r2, [pc, #312]	; (8003758 <HAL_GPIO_Init+0x324>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x216>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4d      	ldr	r2, [pc, #308]	; (800375c <HAL_GPIO_Init+0x328>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x212>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4c      	ldr	r2, [pc, #304]	; (8003760 <HAL_GPIO_Init+0x32c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x20e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_GPIO_Init+0x330>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x20a>
 800363a:	2307      	movs	r3, #7
 800363c:	e00e      	b.n	800365c <HAL_GPIO_Init+0x228>
 800363e:	2308      	movs	r3, #8
 8003640:	e00c      	b.n	800365c <HAL_GPIO_Init+0x228>
 8003642:	2306      	movs	r3, #6
 8003644:	e00a      	b.n	800365c <HAL_GPIO_Init+0x228>
 8003646:	2305      	movs	r3, #5
 8003648:	e008      	b.n	800365c <HAL_GPIO_Init+0x228>
 800364a:	2304      	movs	r3, #4
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x228>
 800364e:	2303      	movs	r3, #3
 8003650:	e004      	b.n	800365c <HAL_GPIO_Init+0x228>
 8003652:	2302      	movs	r3, #2
 8003654:	e002      	b.n	800365c <HAL_GPIO_Init+0x228>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_GPIO_Init+0x228>
 800365a:	2300      	movs	r3, #0
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	f002 0203 	and.w	r2, r2, #3
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4093      	lsls	r3, r2
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800366c:	4935      	ldr	r1, [pc, #212]	; (8003744 <HAL_GPIO_Init+0x310>)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_GPIO_Init+0x334>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369e:	4a32      	ldr	r2, [pc, #200]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_GPIO_Init+0x334>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <HAL_GPIO_Init+0x334>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3301      	adds	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	f67f ae90 	bls.w	8003450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40013800 	.word	0x40013800
 8003748:	40020000 	.word	0x40020000
 800374c:	40020400 	.word	0x40020400
 8003750:	40020800 	.word	0x40020800
 8003754:	40020c00 	.word	0x40020c00
 8003758:	40021000 	.word	0x40021000
 800375c:	40021400 	.word	0x40021400
 8003760:	40021800 	.word	0x40021800
 8003764:	40021c00 	.word	0x40021c00
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e12b      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fa4c 	bl	8002c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d0:	f001 fc60 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a81      	ldr	r2, [pc, #516]	; (80039e0 <HAL_I2C_Init+0x274>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d807      	bhi.n	80037f0 <HAL_I2C_Init+0x84>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a80      	ldr	r2, [pc, #512]	; (80039e4 <HAL_I2C_Init+0x278>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e006      	b.n	80037fe <HAL_I2C_Init+0x92>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a7d      	ldr	r2, [pc, #500]	; (80039e8 <HAL_I2C_Init+0x27c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0e7      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a78      	ldr	r2, [pc, #480]	; (80039ec <HAL_I2C_Init+0x280>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d802      	bhi.n	8003840 <HAL_I2C_Init+0xd4>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	e009      	b.n	8003854 <HAL_I2C_Init+0xe8>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	4a69      	ldr	r2, [pc, #420]	; (80039f0 <HAL_I2C_Init+0x284>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	3301      	adds	r3, #1
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	430b      	orrs	r3, r1
 800385a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	495c      	ldr	r1, [pc, #368]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d819      	bhi.n	80038a8 <HAL_I2C_Init+0x13c>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e59      	subs	r1, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003888:	400b      	ands	r3, r1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_I2C_Init+0x138>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e59      	subs	r1, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fbb1 f3f3 	udiv	r3, r1, r3
 800389c:	3301      	adds	r3, #1
 800389e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a2:	e051      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e04f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <HAL_I2C_Init+0x168>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e012      	b.n	80038fa <HAL_I2C_Init+0x18e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	0099      	lsls	r1, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Init+0x196>
 80038fe:	2301      	movs	r3, #1
 8003900:	e022      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <HAL_I2C_Init+0x1bc>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e58      	subs	r0, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	440b      	add	r3, r1
 8003918:	fbb0 f3f3 	udiv	r3, r0, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003926:	e00f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6809      	ldr	r1, [r1, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6911      	ldr	r1, [r2, #16]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	000186a0 	.word	0x000186a0
 80039e4:	001e847f 	.word	0x001e847f
 80039e8:	003d08ff 	.word	0x003d08ff
 80039ec:	431bde83 	.word	0x431bde83
 80039f0:	10624dd3 	.word	0x10624dd3

080039f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0e:	f7ff fc23 	bl	8003258 <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	f040 80d9 	bne.w	8003bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2319      	movs	r3, #25
 8003a28:	2201      	movs	r2, #1
 8003a2a:	496d      	ldr	r1, [pc, #436]	; (8003be0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fc8b 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Mem_Write+0x56>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0c5      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d007      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2221      	movs	r2, #33	; 0x21
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <HAL_I2C_Mem_Write+0x1f0>)
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab2:	88f8      	ldrh	r0, [r7, #6]
 8003ab4:	893a      	ldrh	r2, [r7, #8]
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fac2 	bl	800404c <I2C_RequestMemoryWrite>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fd50 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Mem_Write+0x180>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1aa      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fd43 	bl	800460c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e016      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7ff fb29 	bl	8003258 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	f040 8214 	bne.w	800403e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	497b      	ldr	r1, [pc, #492]	; (8003e0c <HAL_I2C_Mem_Read+0x224>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fb91 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e207      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x56>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e200      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d007      	beq.n	8003c64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2222      	movs	r2, #34	; 0x22
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_I2C_Mem_Read+0x228>)
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa5e 	bl	8004178 <I2C_RequestMemoryRead>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1bc      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e190      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d11b      	bne.n	8003d36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e170      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d11b      	bne.n	8003d76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	e150      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d8c:	e144      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	f200 80f1 	bhi.w	8003f7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d123      	bne.n	8003de8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fc79 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e145      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de6:	e117      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d14e      	bne.n	8003e8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2200      	movs	r2, #0
 8003df8:	4906      	ldr	r1, [pc, #24]	; (8003e14 <HAL_I2C_Mem_Read+0x22c>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 faa4 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e11a      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
 8003e0a:	bf00      	nop
 8003e0c:	00100002 	.word	0x00100002
 8003e10:	ffff0000 	.word	0xffff0000
 8003e14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8c:	e0c4      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2200      	movs	r2, #0
 8003e96:	496c      	ldr	r1, [pc, #432]	; (8004048 <HAL_I2C_Mem_Read+0x460>)
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fa55 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0cb      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4955      	ldr	r1, [pc, #340]	; (8004048 <HAL_I2C_Mem_Read+0x460>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fa27 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e09d      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f78:	e04e      	b.n	8004018 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fb8c 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e058      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d124      	bne.n	8004018 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f aeb6 	bne.w	8003d8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	00010004 	.word	0x00010004

0800404c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	2200      	movs	r2, #0
 800407e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f960 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	d103      	bne.n	80040a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e05f      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	492d      	ldr	r1, [pc, #180]	; (8004174 <I2C_RequestMemoryWrite+0x128>)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f9bb 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e04c      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa46 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d107      	bne.n	800410e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e02b      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e021      	b.n	8004168 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004124:	893b      	ldrh	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	6a39      	ldr	r1, [r7, #32]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa20 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b04      	cmp	r3, #4
 8004148:	d107      	bne.n	800415a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e005      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00010002 	.word	0x00010002

08004178 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f8c2 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d8:	d103      	bne.n	80041e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0aa      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	4952      	ldr	r1, [pc, #328]	; (8004344 <I2C_RequestMemoryRead+0x1cc>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f91d 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e097      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	6a39      	ldr	r1, [r7, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f9a8 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d107      	bne.n	800424a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e076      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d105      	bne.n	8004260 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]
 800425e:	e021      	b.n	80042a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6a39      	ldr	r1, [r7, #32]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f982 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b04      	cmp	r3, #4
 8004284:	d107      	bne.n	8004296 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e050      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800429a:	893b      	ldrh	r3, [r7, #8]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	6a39      	ldr	r1, [r7, #32]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f967 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d107      	bne.n	80042cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e035      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f82b 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d103      	bne.n	8004310 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e013      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	4906      	ldr	r1, [pc, #24]	; (8004344 <I2C_RequestMemoryRead+0x1cc>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f886 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00010002 	.word	0x00010002

08004348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004358:	e048      	b.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d044      	beq.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe ff79 	bl	8003258 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d139      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10d      	bne.n	800439e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	e00c      	b.n	80043b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d116      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e023      	b.n	8004434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10d      	bne.n	8004412 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	e00c      	b.n	800442c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	d093      	beq.n	800435a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800444a:	e071      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445a:	d123      	bne.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e067      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d041      	beq.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe fed4 	bl	8003258 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d136      	bne.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10c      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e00b      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e021      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10c      	bne.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e00b      	b.n	800456c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af6d 	bne.w	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8e3 	bl	8004756 <I2C_IsAcknowledgeFailed>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e034      	b.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d028      	beq.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fe59 	bl	8003258 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d1c3      	bne.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004618:	e034      	b.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f89b 	bl	8004756 <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e034      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d028      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fe11 	bl	8003258 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11d      	bne.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d016      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d1c3      	bne.n	800461a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a8:	e049      	b.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d119      	bne.n	80046ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e030      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ec:	f7fe fdb4 	bl	8003258 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d016      	beq.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e007      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d1ae      	bne.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d11b      	bne.n	80047a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e267      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d075      	beq.n	80048be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d2:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d00c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d112      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ea:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f6:	d10b      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	4b7e      	ldr	r3, [pc, #504]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05b      	beq.n	80048bc <HAL_RCC_OscConfig+0x108>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d157      	bne.n	80048bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e242      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004818:	d106      	bne.n	8004828 <HAL_RCC_OscConfig+0x74>
 800481a:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a75      	ldr	r2, [pc, #468]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e01d      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x98>
 8004832:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6f      	ldr	r2, [pc, #444]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6c      	ldr	r2, [pc, #432]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 800484c:	4b69      	ldr	r3, [pc, #420]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a68      	ldr	r2, [pc, #416]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b66      	ldr	r3, [pc, #408]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe fcf4 	bl	8003258 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004874:	f7fe fcf0 	bl	8003258 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e207      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0xc0>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fe fce0 	bl	8003258 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe fcdc 	bl	8003258 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1f3      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	4b51      	ldr	r3, [pc, #324]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0xe8>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d063      	beq.n	8004992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d11c      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e2:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e1c7      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4937      	ldr	r1, [pc, #220]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	e03a      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fe fc95 	bl	8003258 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe fc91 	bl	8003258 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1a8      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4925      	ldr	r1, [pc, #148]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fc74 	bl	8003258 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004974:	f7fe fc70 	bl	8003258 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e187      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d036      	beq.n	8004a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCC_OscConfig+0x248>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fe fc54 	bl	8003258 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fe fc50 	bl	8003258 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e167      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x200>
 80049d2:	e01b      	b.n	8004a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_OscConfig+0x248>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049da:	f7fe fc3d 	bl	8003258 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	e00e      	b.n	8004a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e2:	f7fe fc39 	bl	8003258 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d907      	bls.n	8004a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e150      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	42470000 	.word	0x42470000
 80049fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ea      	bne.n	80049e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8097 	beq.w	8004b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a7c      	ldr	r2, [pc, #496]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b7a      	ldr	r3, [pc, #488]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4a:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d118      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a56:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a73      	ldr	r2, [pc, #460]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a62:	f7fe fbf9 	bl	8003258 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6a:	f7fe fbf5 	bl	8003258 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e10c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2ea>
 8004a90:	4b64      	ldr	r3, [pc, #400]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a63      	ldr	r2, [pc, #396]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x30c>
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a57      	ldr	r2, [pc, #348]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a54      	ldr	r2, [pc, #336]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f023 0304 	bic.w	r3, r3, #4
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe fbba 	bl	8003258 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fbb6 	bl	8003258 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0cb      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afe:	4b49      	ldr	r3, [pc, #292]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ee      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x334>
 8004b0a:	e014      	b.n	8004b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f7fe fba4 	bl	8003258 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fe fba0 	bl	8003258 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0b5      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ee      	bne.n	8004b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	4a38      	ldr	r2, [pc, #224]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a1 	beq.w	8004c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b52:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d05c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d141      	bne.n	8004bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fb74 	bl	8003258 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fe fb70 	bl	8003258 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e087      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	491b      	ldr	r1, [pc, #108]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe fb49 	bl	8003258 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe fb45 	bl	8003258 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e05c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x416>
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fb32 	bl	8003258 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fe fb2e 	bl	8003258 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e045      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x444>
 8004c16:	e03d      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e038      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x4ec>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d121      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d11a      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0cc      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d90c      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0b8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d10:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	494d      	ldr	r1, [pc, #308]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d044      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d119      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e067      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4934      	ldr	r1, [pc, #208]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d94:	f7fe fa60 	bl	8003258 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fe fa5c 	bl	8003258 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e04f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 020c 	and.w	r2, r3, #12
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1eb      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d20c      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e032      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4916      	ldr	r1, [pc, #88]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	490e      	ldr	r1, [pc, #56]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e2a:	f000 f821 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	490a      	ldr	r1, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe f830 	bl	8002eb0 <HAL_InitTick>

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023c00 	.word	0x40023c00
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800a6c0 	.word	0x0800a6c0
 8004e68:	20000090 	.word	0x20000090
 8004e6c:	20000094 	.word	0x20000094

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b094      	sub	sp, #80	; 0x50
 8004e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	2300      	movs	r3, #0
 8004e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e88:	4b79      	ldr	r3, [pc, #484]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d00d      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	f200 80e1 	bhi.w	800505c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ea2:	e0db      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ea8:	e0db      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eae:	e0d8      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb0:	4b6f      	ldr	r3, [pc, #444]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eba:	4b6d      	ldr	r3, [pc, #436]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d063      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec6:	4b6a      	ldr	r3, [pc, #424]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	2200      	movs	r2, #0
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eda:	2300      	movs	r3, #0
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	f04f 0000 	mov.w	r0, #0
 8004eea:	f04f 0100 	mov.w	r1, #0
 8004eee:	0159      	lsls	r1, r3, #5
 8004ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef4:	0150      	lsls	r0, r2, #5
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4621      	mov	r1, r4
 8004efc:	1a51      	subs	r1, r2, r1
 8004efe:	6139      	str	r1, [r7, #16]
 8004f00:	4629      	mov	r1, r5
 8004f02:	eb63 0301 	sbc.w	r3, r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	018b      	lsls	r3, r1, #6
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f1e:	4651      	mov	r1, sl
 8004f20:	018a      	lsls	r2, r1, #6
 8004f22:	4651      	mov	r1, sl
 8004f24:	ebb2 0801 	subs.w	r8, r2, r1
 8004f28:	4659      	mov	r1, fp
 8004f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f42:	4690      	mov	r8, r2
 8004f44:	4699      	mov	r9, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	eb18 0303 	adds.w	r3, r8, r3
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	462b      	mov	r3, r5
 8004f50:	eb49 0303 	adc.w	r3, r9, r3
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f62:	4629      	mov	r1, r5
 8004f64:	024b      	lsls	r3, r1, #9
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	024a      	lsls	r2, r1, #9
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f80:	f7fb fe62 	bl	8000c48 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	e058      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	4611      	mov	r1, r2
 8004f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	f04f 0000 	mov.w	r0, #0
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	0159      	lsls	r1, r3, #5
 8004fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fba:	0150      	lsls	r0, r2, #5
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	00eb      	lsls	r3, r5, #3
 8004ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff6:	00e2      	lsls	r2, r4, #3
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4643      	mov	r3, r8
 8004ffe:	18e3      	adds	r3, r4, r3
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	464b      	mov	r3, r9
 8005004:	eb45 0303 	adc.w	r3, r5, r3
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005016:	4629      	mov	r1, r5
 8005018:	028b      	lsls	r3, r1, #10
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005020:	4621      	mov	r1, r4
 8005022:	028a      	lsls	r2, r1, #10
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	2200      	movs	r2, #0
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	61fa      	str	r2, [r7, #28]
 8005030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005034:	f7fb fe08 	bl	8000c48 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	3301      	adds	r3, #1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005064:	4618      	mov	r0, r3
 8005066:	3750      	adds	r7, #80	; 0x50
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	00f42400 	.word	0x00f42400
 8005078:	007a1200 	.word	0x007a1200

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_GetHCLKFreq+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000090 	.word	0x20000090

08005094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005098:	f7ff fff0 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	0800a6d0 	.word	0x0800a6d0

080050bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	220f      	movs	r2, #15
 80050ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <HAL_RCC_GetClockConfig+0x5c>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0203 	and.w	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCC_GetClockConfig+0x5c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <HAL_RCC_GetClockConfig+0x5c>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_GetClockConfig+0x5c>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <HAL_RCC_GetClockConfig+0x60>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0207 	and.w	r2, r3, #7
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800
 800511c:	40023c00 	.word	0x40023c00

08005120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e041      	b.n	80051b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f839 	bl	80051be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fcce 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d001      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e04e      	b.n	800528a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a23      	ldr	r2, [pc, #140]	; (8005298 <HAL_TIM_Base_Start_IT+0xc4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d01d      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_TIM_Base_Start_IT+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a19      	ldr	r2, [pc, #100]	; (80052ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e007      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40001800 	.word	0x40001800

080052b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e041      	b.n	800534a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fd fd6c 	bl	8002db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fc04 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_TIM_PWM_Start+0x24>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e022      	b.n	80053be <HAL_TIM_PWM_Start+0x6a>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b04      	cmp	r3, #4
 800537c:	d109      	bne.n	8005392 <HAL_TIM_PWM_Start+0x3e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	e015      	b.n	80053be <HAL_TIM_PWM_Start+0x6a>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b08      	cmp	r3, #8
 8005396:	d109      	bne.n	80053ac <HAL_TIM_PWM_Start+0x58>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e008      	b.n	80053be <HAL_TIM_PWM_Start+0x6a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07c      	b.n	80054c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x82>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	e013      	b.n	80053fe <HAL_TIM_PWM_Start+0xaa>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0x92>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e4:	e00b      	b.n	80053fe <HAL_TIM_PWM_Start+0xaa>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0xa2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f4:	e003      	b.n	80053fe <HAL_TIM_PWM_Start+0xaa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2201      	movs	r2, #1
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fdd6 	bl	8005fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <HAL_TIM_PWM_Start+0x174>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_PWM_Start+0xcc>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <HAL_TIM_PWM_Start+0x178>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_TIM_PWM_Start+0xd0>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_TIM_PWM_Start+0xd2>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <HAL_TIM_PWM_Start+0x174>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d01d      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <HAL_TIM_PWM_Start+0x17c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_TIM_PWM_Start+0x180>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <HAL_TIM_PWM_Start+0x184>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIM_PWM_Start+0x178>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIM_PWM_Start+0x188>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_PWM_Start+0x136>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <HAL_TIM_PWM_Start+0x18c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d010      	beq.n	80054be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e007      	b.n	80054be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40010400 	.word	0x40010400
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800

080054e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e097      	b.n	8005628 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fd fbd7 	bl	8002cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fae1 	bl	8005b00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	4313      	orrs	r3, r2
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005584:	f023 030c 	bic.w	r3, r3, #12
 8005588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	4313      	orrs	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	011a      	lsls	r2, r3, #4
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	031b      	lsls	r3, r3, #12
 80055b4:	4313      	orrs	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	4313      	orrs	r3, r2
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005640:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005648:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005650:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005658:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d110      	bne.n	8005682 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d102      	bne.n	800566c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005666:	7b7b      	ldrb	r3, [r7, #13]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d001      	beq.n	8005670 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e069      	b.n	8005744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005680:	e031      	b.n	80056e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d110      	bne.n	80056aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005688:	7bbb      	ldrb	r3, [r7, #14]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800568e:	7b3b      	ldrb	r3, [r7, #12]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e055      	b.n	8005744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a8:	e01d      	b.n	80056e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d108      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b6:	7b7b      	ldrb	r3, [r7, #13]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056bc:	7b3b      	ldrb	r3, [r7, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e03e      	b.n	8005744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_TIM_Encoder_Start+0xc4>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d008      	beq.n	8005704 <HAL_TIM_Encoder_Start+0xd4>
 80056f2:	e00f      	b.n	8005714 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2201      	movs	r2, #1
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc5b 	bl	8005fb8 <TIM_CCxChannelCmd>
      break;
 8005702:	e016      	b.n	8005732 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	2104      	movs	r1, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fc53 	bl	8005fb8 <TIM_CCxChannelCmd>
      break;
 8005712:	e00e      	b.n	8005732 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fc4b 	bl	8005fb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	2104      	movs	r1, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fc44 	bl	8005fb8 <TIM_CCxChannelCmd>
      break;
 8005730:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d020      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0202 	mvn.w	r2, #2
 8005780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f994 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f986 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f997 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d020      	beq.n	80057fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0204 	mvn.w	r2, #4
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f96e 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f960 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f971 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d020      	beq.n	8005848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0208 	mvn.w	r2, #8
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2204      	movs	r2, #4
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f948 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f93a 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f94b 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0210 	mvn.w	r2, #16
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2208      	movs	r2, #8
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f922 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f914 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f925 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0201 	mvn.w	r2, #1
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fd f978 	bl	8002ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fc1a 	bl	8006110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8f6 	bl	8005aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0220 	mvn.w	r2, #32
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fbec 	bl	80060fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005946:	2302      	movs	r3, #2
 8005948:	e0ae      	b.n	8005aa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b0c      	cmp	r3, #12
 8005956:	f200 809f 	bhi.w	8005a98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005995 	.word	0x08005995
 8005964:	08005a99 	.word	0x08005a99
 8005968:	08005a99 	.word	0x08005a99
 800596c:	08005a99 	.word	0x08005a99
 8005970:	080059d5 	.word	0x080059d5
 8005974:	08005a99 	.word	0x08005a99
 8005978:	08005a99 	.word	0x08005a99
 800597c:	08005a99 	.word	0x08005a99
 8005980:	08005a17 	.word	0x08005a17
 8005984:	08005a99 	.word	0x08005a99
 8005988:	08005a99 	.word	0x08005a99
 800598c:	08005a99 	.word	0x08005a99
 8005990:	08005a57 	.word	0x08005a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f95c 	bl	8005c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0204 	bic.w	r2, r2, #4
 80059be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	619a      	str	r2, [r3, #24]
      break;
 80059d2:	e064      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f9ac 	bl	8005d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	021a      	lsls	r2, r3, #8
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	619a      	str	r2, [r3, #24]
      break;
 8005a14:	e043      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa01 	bl	8005e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0208 	orr.w	r2, r2, #8
 8005a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0204 	bic.w	r2, r2, #4
 8005a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69d9      	ldr	r1, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	61da      	str	r2, [r3, #28]
      break;
 8005a54:	e023      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fa55 	bl	8005f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	021a      	lsls	r2, r3, #8
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	61da      	str	r2, [r3, #28]
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a46      	ldr	r2, [pc, #280]	; (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a43      	ldr	r2, [pc, #268]	; (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a42      	ldr	r2, [pc, #264]	; (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <TIM_Base_SetConfig+0x138>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a40      	ldr	r2, [pc, #256]	; (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d108      	bne.n	8005b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a35      	ldr	r2, [pc, #212]	; (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d027      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a32      	ldr	r2, [pc, #200]	; (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d023      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <TIM_Base_SetConfig+0x138>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2f      	ldr	r2, [pc, #188]	; (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <TIM_Base_SetConfig+0x140>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <TIM_Base_SetConfig+0x144>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <TIM_Base_SetConfig+0x148>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <TIM_Base_SetConfig+0x14c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	; (8005c50 <TIM_Base_SetConfig+0x150>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <TIM_Base_SetConfig+0x154>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a10      	ldr	r2, [pc, #64]	; (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d105      	bne.n	8005c1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f023 0201 	bic.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	611a      	str	r2, [r3, #16]
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	40001800 	.word	0x40001800
 8005c50:	40001c00 	.word	0x40001c00
 8005c54:	40002000 	.word	0x40002000

08005c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f023 0201 	bic.w	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 0302 	bic.w	r3, r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <TIM_OC1_SetConfig+0xd8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_OC1_SetConfig+0x64>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <TIM_OC1_SetConfig+0xdc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d10c      	bne.n	8005cd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0308 	bic.w	r3, r3, #8
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 0304 	bic.w	r3, r3, #4
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC1_SetConfig+0xd8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC1_SetConfig+0x8e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <TIM_OC1_SetConfig+0xdc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d111      	bne.n	8005d0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f023 0210 	bic.w	r2, r3, #16
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0320 	bic.w	r3, r3, #32
 8005d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <TIM_OC2_SetConfig+0xe4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC2_SetConfig+0x68>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_OC2_SetConfig+0xe8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10d      	bne.n	8005dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <TIM_OC2_SetConfig+0xe4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC2_SetConfig+0x94>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC2_SetConfig+0xe8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d113      	bne.n	8005df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <TIM_OC3_SetConfig+0xe0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC3_SetConfig+0x66>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a20      	ldr	r2, [pc, #128]	; (8005f08 <TIM_OC3_SetConfig+0xe4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10d      	bne.n	8005ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <TIM_OC3_SetConfig+0xe0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC3_SetConfig+0x92>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <TIM_OC3_SetConfig+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d113      	bne.n	8005ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	621a      	str	r2, [r3, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400

08005f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	031b      	lsls	r3, r3, #12
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <TIM_OC4_SetConfig+0xa4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC4_SetConfig+0x68>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <TIM_OC4_SetConfig+0xa8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d109      	bne.n	8005f88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e05a      	b.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006068:	d01d      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10c      	bne.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006136:	2b84      	cmp	r3, #132	; 0x84
 8006138:	d005      	beq.n	8006146 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800613a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	3303      	adds	r3, #3
 8006144:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006158:	f000 fade 	bl	8006718 <vTaskStartScheduler>
  
  return osOK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}

08006162 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006164:	b089      	sub	sp, #36	; 0x24
 8006166:	af04      	add	r7, sp, #16
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d020      	beq.n	80061b6 <osThreadCreate+0x54>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01c      	beq.n	80061b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685c      	ldr	r4, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691e      	ldr	r6, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ffc8 	bl	8006124 <makeFreeRtosPriority>
 8006194:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800619e:	9202      	str	r2, [sp, #8]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	9100      	str	r1, [sp, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	4632      	mov	r2, r6
 80061a8:	4629      	mov	r1, r5
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f8ed 	bl	800638a <xTaskCreateStatic>
 80061b0:	4603      	mov	r3, r0
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e01c      	b.n	80061f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685c      	ldr	r4, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ffaa 	bl	8006124 <makeFreeRtosPriority>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f107 030c 	add.w	r3, r7, #12
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	9200      	str	r2, [sp, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	4632      	mov	r2, r6
 80061de:	4629      	mov	r1, r5
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f92f 	bl	8006444 <xTaskCreate>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d001      	beq.n	80061f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <osDelay+0x16>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	e000      	b.n	8006212 <osDelay+0x18>
 8006210:	2301      	movs	r3, #1
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa4c 	bl	80066b0 <vTaskDelay>
  
  return osOK;
 8006218:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f103 0208 	add.w	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f103 0208 	add.w	r2, r3, #8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e00c      	b.n	80062fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3308      	adds	r3, #8
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e002      	b.n	80062f2 <vListInsert+0x2e>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d2f6      	bcs.n	80062ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6852      	ldr	r2, [r2, #4]
 8006356:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	429a      	cmp	r2, r3
 8006360:	d103      	bne.n	800636a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800638a:	b580      	push	{r7, lr}
 800638c:	b08e      	sub	sp, #56	; 0x38
 800638e:	af04      	add	r7, sp, #16
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	61fb      	str	r3, [r7, #28]
}
 80063cc:	bf00      	nop
 80063ce:	e7fe      	b.n	80063ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063d0:	2354      	movs	r3, #84	; 0x54
 80063d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b54      	cmp	r3, #84	; 0x54
 80063d8:	d00a      	beq.n	80063f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01e      	beq.n	8006436 <xTaskCreateStatic+0xac>
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01b      	beq.n	8006436 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006410:	2300      	movs	r3, #0
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	f107 0314 	add.w	r3, r7, #20
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f850 	bl	80064ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800642e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006430:	f000 f8d4 	bl	80065dc <prvAddNewTaskToReadyList>
 8006434:	e001      	b.n	800643a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800643a:	697b      	ldr	r3, [r7, #20]
	}
 800643c:	4618      	mov	r0, r3
 800643e:	3728      	adds	r7, #40	; 0x28
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	; 0x30
 8006448:	af04      	add	r7, sp, #16
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fec5 	bl	80071e8 <pvPortMalloc>
 800645e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006466:	2054      	movs	r0, #84	; 0x54
 8006468:	f000 febe 	bl	80071e8 <pvPortMalloc>
 800646c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
 800647a:	e005      	b.n	8006488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f000 ff7f 	bl	8007380 <vPortFree>
 8006482:	e001      	b.n	8006488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d017      	beq.n	80064be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	2300      	movs	r3, #0
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f80e 	bl	80064ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064b2:	69f8      	ldr	r0, [r7, #28]
 80064b4:	f000 f892 	bl	80065dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064b8:	2301      	movs	r3, #1
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e002      	b.n	80064c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064c4:	69bb      	ldr	r3, [r7, #24]
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b088      	sub	sp, #32
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064e6:	3b01      	subs	r3, #1
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	617b      	str	r3, [r7, #20]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01f      	beq.n	800655c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	e012      	b.n	8006548 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	7819      	ldrb	r1, [r3, #0]
 800652a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	3334      	adds	r3, #52	; 0x34
 8006532:	460a      	mov	r2, r1
 8006534:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3301      	adds	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b0f      	cmp	r3, #15
 800654c:	d9e9      	bls.n	8006522 <prvInitialiseNewTask+0x54>
 800654e:	e000      	b.n	8006552 <prvInitialiseNewTask+0x84>
			{
				break;
 8006550:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800655a:	e003      	b.n	8006564 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b06      	cmp	r3, #6
 8006568:	d901      	bls.n	800656e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800656a:	2306      	movs	r3, #6
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2200      	movs	r2, #0
 800657e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	3304      	adds	r3, #4
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fe6c 	bl	8006262 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	3318      	adds	r3, #24
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fe67 	bl	8006262 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006598:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	f1c3 0207 	rsb	r2, r3, #7
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	69b8      	ldr	r0, [r7, #24]
 80065be:	f000 fc05 	bl	8006dcc <pxPortInitialiseStack>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065d4:	bf00      	nop
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065e4:	f000 fd1e 	bl	8007024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <prvAddNewTaskToReadyList+0xb8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	4a29      	ldr	r2, [pc, #164]	; (8006694 <prvAddNewTaskToReadyList+0xb8>)
 80065f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <prvAddNewTaskToReadyList+0xbc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065fa:	4a27      	ldr	r2, [pc, #156]	; (8006698 <prvAddNewTaskToReadyList+0xbc>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006600:	4b24      	ldr	r3, [pc, #144]	; (8006694 <prvAddNewTaskToReadyList+0xb8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d110      	bne.n	800662a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006608:	f000 fabc 	bl	8006b84 <prvInitialiseTaskLists>
 800660c:	e00d      	b.n	800662a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <prvAddNewTaskToReadyList+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006616:	4b20      	ldr	r3, [pc, #128]	; (8006698 <prvAddNewTaskToReadyList+0xbc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d802      	bhi.n	800662a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006624:	4a1c      	ldr	r2, [pc, #112]	; (8006698 <prvAddNewTaskToReadyList+0xbc>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <prvAddNewTaskToReadyList+0xc4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <prvAddNewTaskToReadyList+0xc4>)
 8006632:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	2201      	movs	r2, #1
 800663a:	409a      	lsls	r2, r3
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <prvAddNewTaskToReadyList+0xc8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <prvAddNewTaskToReadyList+0xc8>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvAddNewTaskToReadyList+0xcc>)
 8006654:	441a      	add	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7ff fe0d 	bl	800627c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006662:	f000 fd0f 	bl	8007084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <prvAddNewTaskToReadyList+0xc0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvAddNewTaskToReadyList+0xbc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	429a      	cmp	r2, r3
 800667a:	d207      	bcs.n	800668c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <prvAddNewTaskToReadyList+0xd0>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000984 	.word	0x20000984
 8006698:	20000884 	.word	0x20000884
 800669c:	20000990 	.word	0x20000990
 80066a0:	200009a0 	.word	0x200009a0
 80066a4:	2000098c 	.word	0x2000098c
 80066a8:	20000888 	.word	0x20000888
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d017      	beq.n	80066f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <vTaskDelay+0x60>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <vTaskDelay+0x30>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066e0:	f000 f87a 	bl	80067d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb0a 	bl	8006d00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ec:	f000 f882 	bl	80067f4 <xTaskResumeAll>
 80066f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d107      	bne.n	8006708 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <vTaskDelay+0x64>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200009ac 	.word	0x200009ac
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006726:	463a      	mov	r2, r7
 8006728:	1d39      	adds	r1, r7, #4
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7fa ff00 	bl	8001534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	9202      	str	r2, [sp, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	460a      	mov	r2, r1
 8006746:	491e      	ldr	r1, [pc, #120]	; (80067c0 <vTaskStartScheduler+0xa8>)
 8006748:	481e      	ldr	r0, [pc, #120]	; (80067c4 <vTaskStartScheduler+0xac>)
 800674a:	f7ff fe1e 	bl	800638a <xTaskCreateStatic>
 800674e:	4603      	mov	r3, r0
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <vTaskStartScheduler+0xb0>)
 8006752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006754:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <vTaskStartScheduler+0xb0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e001      	b.n	8006766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d116      	bne.n	800679a <vTaskStartScheduler+0x82>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <vTaskStartScheduler+0xb4>)
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <vTaskStartScheduler+0xb8>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <vTaskStartScheduler+0xbc>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006794:	f000 fba4 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006798:	e00e      	b.n	80067b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d10a      	bne.n	80067b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vTaskStartScheduler+0x9e>
}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	0800a6b8 	.word	0x0800a6b8
 80067c4:	08006b55 	.word	0x08006b55
 80067c8:	200009a8 	.word	0x200009a8
 80067cc:	200009a4 	.word	0x200009a4
 80067d0:	20000990 	.word	0x20000990
 80067d4:	20000988 	.word	0x20000988

080067d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	4a03      	ldr	r2, [pc, #12]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	200009ac 	.word	0x200009ac

080067f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006802:	4b41      	ldr	r3, [pc, #260]	; (8006908 <xTaskResumeAll+0x114>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <xTaskResumeAll+0x2c>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	603b      	str	r3, [r7, #0]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006820:	f000 fc00 	bl	8007024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006824:	4b38      	ldr	r3, [pc, #224]	; (8006908 <xTaskResumeAll+0x114>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3b01      	subs	r3, #1
 800682a:	4a37      	ldr	r2, [pc, #220]	; (8006908 <xTaskResumeAll+0x114>)
 800682c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682e:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskResumeAll+0x114>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d161      	bne.n	80068fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006836:	4b35      	ldr	r3, [pc, #212]	; (800690c <xTaskResumeAll+0x118>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d05d      	beq.n	80068fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800683e:	e02e      	b.n	800689e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006840:	4b33      	ldr	r3, [pc, #204]	; (8006910 <xTaskResumeAll+0x11c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3318      	adds	r3, #24
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fd72 	bl	8006336 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fd6d 	bl	8006336 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	2201      	movs	r2, #1
 8006862:	409a      	lsls	r2, r3
 8006864:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <xTaskResumeAll+0x120>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4313      	orrs	r3, r2
 800686a:	4a2a      	ldr	r2, [pc, #168]	; (8006914 <xTaskResumeAll+0x120>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4a27      	ldr	r2, [pc, #156]	; (8006918 <xTaskResumeAll+0x124>)
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7ff fcf9 	bl	800627c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	4b23      	ldr	r3, [pc, #140]	; (800691c <xTaskResumeAll+0x128>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006898:	4b21      	ldr	r3, [pc, #132]	; (8006920 <xTaskResumeAll+0x12c>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <xTaskResumeAll+0x11c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1cc      	bne.n	8006840 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ac:	f000 fa08 	bl	8006cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <xTaskResumeAll+0x130>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068bc:	f000 f836 	bl	800692c <xTaskIncrementTick>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <xTaskResumeAll+0x12c>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f1      	bne.n	80068bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <xTaskResumeAll+0x130>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <xTaskResumeAll+0x12c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ea:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xTaskResumeAll+0x134>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068fa:	f000 fbc3 	bl	8007084 <vPortExitCritical>

	return xAlreadyYielded;
 80068fe:	68bb      	ldr	r3, [r7, #8]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200009ac 	.word	0x200009ac
 800690c:	20000984 	.word	0x20000984
 8006910:	20000944 	.word	0x20000944
 8006914:	2000098c 	.word	0x2000098c
 8006918:	20000888 	.word	0x20000888
 800691c:	20000884 	.word	0x20000884
 8006920:	20000998 	.word	0x20000998
 8006924:	20000994 	.word	0x20000994
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006936:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <xTaskIncrementTick+0x144>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 808e 	bne.w	8006a5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006940:	4b4c      	ldr	r3, [pc, #304]	; (8006a74 <xTaskIncrementTick+0x148>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006948:	4a4a      	ldr	r2, [pc, #296]	; (8006a74 <xTaskIncrementTick+0x148>)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d120      	bne.n	8006996 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006954:	4b48      	ldr	r3, [pc, #288]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <xTaskIncrementTick+0x48>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	603b      	str	r3, [r7, #0]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xTaskIncrementTick+0x46>
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	4b40      	ldr	r3, [pc, #256]	; (8006a7c <xTaskIncrementTick+0x150>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a3e      	ldr	r2, [pc, #248]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4a3e      	ldr	r2, [pc, #248]	; (8006a7c <xTaskIncrementTick+0x150>)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b3d      	ldr	r3, [pc, #244]	; (8006a80 <xTaskIncrementTick+0x154>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	4a3c      	ldr	r2, [pc, #240]	; (8006a80 <xTaskIncrementTick+0x154>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	f000 f995 	bl	8006cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <xTaskIncrementTick+0x158>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	429a      	cmp	r2, r3
 800699e:	d348      	bcc.n	8006a32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a0:	4b35      	ldr	r3, [pc, #212]	; (8006a78 <xTaskIncrementTick+0x14c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <xTaskIncrementTick+0x158>)
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295
 80069b0:	601a      	str	r2, [r3, #0]
					break;
 80069b2:	e03e      	b.n	8006a32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b4:	4b30      	ldr	r3, [pc, #192]	; (8006a78 <xTaskIncrementTick+0x14c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d203      	bcs.n	80069d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069cc:	4a2d      	ldr	r2, [pc, #180]	; (8006a84 <xTaskIncrementTick+0x158>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069d2:	e02e      	b.n	8006a32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff fcac 	bl	8006336 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3318      	adds	r3, #24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fca3 	bl	8006336 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <xTaskIncrementTick+0x15c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <xTaskIncrementTick+0x15c>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <xTaskIncrementTick+0x160>)
 8006a10:	441a      	add	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7ff fc2f 	bl	800627c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <xTaskIncrementTick+0x164>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d3b9      	bcc.n	80069a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a30:	e7b6      	b.n	80069a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <xTaskIncrementTick+0x164>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4914      	ldr	r1, [pc, #80]	; (8006a8c <xTaskIncrementTick+0x160>)
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d901      	bls.n	8006a4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <xTaskIncrementTick+0x168>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e004      	b.n	8006a66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <xTaskIncrementTick+0x16c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <xTaskIncrementTick+0x16c>)
 8006a64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200009ac 	.word	0x200009ac
 8006a74:	20000988 	.word	0x20000988
 8006a78:	2000093c 	.word	0x2000093c
 8006a7c:	20000940 	.word	0x20000940
 8006a80:	2000099c 	.word	0x2000099c
 8006a84:	200009a4 	.word	0x200009a4
 8006a88:	2000098c 	.word	0x2000098c
 8006a8c:	20000888 	.word	0x20000888
 8006a90:	20000884 	.word	0x20000884
 8006a94:	20000998 	.word	0x20000998
 8006a98:	20000994 	.word	0x20000994

08006a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aa2:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <vTaskSwitchContext+0xa4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <vTaskSwitchContext+0xa8>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ab0:	e03f      	b.n	8006b32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006ab2:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <vTaskSwitchContext+0xa8>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab8:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <vTaskSwitchContext+0xac>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	fab3 f383 	clz	r3, r3
 8006ac4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	f1c3 031f 	rsb	r3, r3, #31
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	491f      	ldr	r1, [pc, #124]	; (8006b4c <vTaskSwitchContext+0xb0>)
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vTaskSwitchContext+0x5a>
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <vTaskSwitchContext+0xb0>)
 8006b04:	4413      	add	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d104      	bne.n	8006b28 <vTaskSwitchContext+0x8c>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <vTaskSwitchContext+0xb4>)
 8006b30:	6013      	str	r3, [r2, #0]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	200009ac 	.word	0x200009ac
 8006b44:	20000998 	.word	0x20000998
 8006b48:	2000098c 	.word	0x2000098c
 8006b4c:	20000888 	.word	0x20000888
 8006b50:	20000884 	.word	0x20000884

08006b54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b5c:	f000 f852 	bl	8006c04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <prvIdleTask+0x28>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d9f9      	bls.n	8006b5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <prvIdleTask+0x2c>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b78:	e7f0      	b.n	8006b5c <prvIdleTask+0x8>
 8006b7a:	bf00      	nop
 8006b7c:	20000888 	.word	0x20000888
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	e00c      	b.n	8006baa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4a12      	ldr	r2, [pc, #72]	; (8006be4 <prvInitialiseTaskLists+0x60>)
 8006b9c:	4413      	add	r3, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fb3f 	bl	8006222 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d9ef      	bls.n	8006b90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bb0:	480d      	ldr	r0, [pc, #52]	; (8006be8 <prvInitialiseTaskLists+0x64>)
 8006bb2:	f7ff fb36 	bl	8006222 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bb6:	480d      	ldr	r0, [pc, #52]	; (8006bec <prvInitialiseTaskLists+0x68>)
 8006bb8:	f7ff fb33 	bl	8006222 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bbc:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <prvInitialiseTaskLists+0x6c>)
 8006bbe:	f7ff fb30 	bl	8006222 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bc2:	480c      	ldr	r0, [pc, #48]	; (8006bf4 <prvInitialiseTaskLists+0x70>)
 8006bc4:	f7ff fb2d 	bl	8006222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bc8:	480b      	ldr	r0, [pc, #44]	; (8006bf8 <prvInitialiseTaskLists+0x74>)
 8006bca:	f7ff fb2a 	bl	8006222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <prvInitialiseTaskLists+0x78>)
 8006bd0:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <prvInitialiseTaskLists+0x64>)
 8006bd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <prvInitialiseTaskLists+0x7c>)
 8006bd6:	4a05      	ldr	r2, [pc, #20]	; (8006bec <prvInitialiseTaskLists+0x68>)
 8006bd8:	601a      	str	r2, [r3, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000888 	.word	0x20000888
 8006be8:	20000914 	.word	0x20000914
 8006bec:	20000928 	.word	0x20000928
 8006bf0:	20000944 	.word	0x20000944
 8006bf4:	20000958 	.word	0x20000958
 8006bf8:	20000970 	.word	0x20000970
 8006bfc:	2000093c 	.word	0x2000093c
 8006c00:	20000940 	.word	0x20000940

08006c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c0a:	e019      	b.n	8006c40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c0c:	f000 fa0a 	bl	8007024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c10:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <prvCheckTasksWaitingTermination+0x50>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fb8a 	bl	8006336 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <prvCheckTasksWaitingTermination+0x54>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a0b      	ldr	r2, [pc, #44]	; (8006c58 <prvCheckTasksWaitingTermination+0x54>)
 8006c2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <prvCheckTasksWaitingTermination+0x58>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <prvCheckTasksWaitingTermination+0x58>)
 8006c34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c36:	f000 fa25 	bl	8007084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f810 	bl	8006c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <prvCheckTasksWaitingTermination+0x58>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e1      	bne.n	8006c0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000958 	.word	0x20000958
 8006c58:	20000984 	.word	0x20000984
 8006c5c:	2000096c 	.word	0x2000096c

08006c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fb82 	bl	8007380 <vPortFree>
				vPortFree( pxTCB );
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb7f 	bl	8007380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c82:	e018      	b.n	8006cb6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d103      	bne.n	8006c96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb76 	bl	8007380 <vPortFree>
	}
 8006c94:	e00f      	b.n	8006cb6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d00a      	beq.n	8006cb6 <prvDeleteTCB+0x56>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <prvDeleteTCB+0x54>
	}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cd8:	e008      	b.n	8006cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	2000093c 	.word	0x2000093c
 8006cfc:	200009a4 	.word	0x200009a4

08006d00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d0a:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d10:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fb0d 	bl	8006336 <uxListRemove>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4013      	ands	r3, r2
 8006d36:	4a20      	ldr	r2, [pc, #128]	; (8006db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d10a      	bne.n	8006d58 <prvAddCurrentTaskToDelayedList+0x58>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d48:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	481a      	ldr	r0, [pc, #104]	; (8006dbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d52:	f7ff fa93 	bl	800627c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d56:	e026      	b.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d60:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d209      	bcs.n	8006d84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d70:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7ff faa1 	bl	80062c4 <vListInsert>
}
 8006d82:	e010      	b.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7ff fa97 	bl	80062c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d96:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d202      	bcs.n	8006da6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6013      	str	r3, [r2, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000988 	.word	0x20000988
 8006db4:	20000884 	.word	0x20000884
 8006db8:	2000098c 	.word	0x2000098c
 8006dbc:	20000970 	.word	0x20000970
 8006dc0:	20000940 	.word	0x20000940
 8006dc4:	2000093c 	.word	0x2000093c
 8006dc8:	200009a4 	.word	0x200009a4

08006dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b04      	subs	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <pxPortInitialiseStack+0x64>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b14      	subs	r3, #20
 8006e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3b04      	subs	r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f06f 0202 	mvn.w	r2, #2
 8006e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3b20      	subs	r3, #32
 8006e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e22:	68fb      	ldr	r3, [r7, #12]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	08006e35 	.word	0x08006e35

08006e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <prvTaskExitError+0x54>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d00a      	beq.n	8006e5e <prvTaskExitError+0x2a>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <prvTaskExitError+0x28>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60bb      	str	r3, [r7, #8]
}
 8006e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e72:	bf00      	nop
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0fc      	beq.n	8006e74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	2000009c 	.word	0x2000009c
 8006e8c:	00000000 	.word	0x00000000

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee6:	4b46      	ldr	r3, [pc, #280]	; (8007000 <xPortStartScheduler+0x120>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a46      	ldr	r2, [pc, #280]	; (8007004 <xPortStartScheduler+0x124>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10a      	bne.n	8006f06 <xPortStartScheduler+0x26>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <xPortStartScheduler+0x120>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a3f      	ldr	r2, [pc, #252]	; (8007008 <xPortStartScheduler+0x128>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10a      	bne.n	8006f26 <xPortStartScheduler+0x46>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f26:	4b39      	ldr	r3, [pc, #228]	; (800700c <xPortStartScheduler+0x12c>)
 8006f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <xPortStartScheduler+0x130>)
 8006f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <xPortStartScheduler+0x134>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f54:	e009      	b.n	8006f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f56:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <xPortStartScheduler+0x134>)
 8006f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d0ef      	beq.n	8006f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f76:	4b27      	ldr	r3, [pc, #156]	; (8007014 <xPortStartScheduler+0x134>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1c3 0307 	rsb	r3, r3, #7
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d00a      	beq.n	8006f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <xPortStartScheduler+0x134>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006faa:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <xPortStartScheduler+0x134>)
 8006fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <xPortStartScheduler+0x138>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <xPortStartScheduler+0x138>)
 8006fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fce:	f000 f8dd 	bl	800718c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <xPortStartScheduler+0x13c>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fd8:	f000 f8fc 	bl	80071d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <xPortStartScheduler+0x140>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <xPortStartScheduler+0x140>)
 8006fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fe8:	f7ff ff66 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fec:	f7ff fd56 	bl	8006a9c <vTaskSwitchContext>
	prvTaskExitError();
 8006ff0:	f7ff ff20 	bl	8006e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	e000ed00 	.word	0xe000ed00
 8007004:	410fc271 	.word	0x410fc271
 8007008:	410fc270 	.word	0x410fc270
 800700c:	e000e400 	.word	0xe000e400
 8007010:	200009b0 	.word	0x200009b0
 8007014:	200009b4 	.word	0x200009b4
 8007018:	e000ed20 	.word	0xe000ed20
 800701c:	2000009c 	.word	0x2000009c
 8007020:	e000ef34 	.word	0xe000ef34

08007024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	607b      	str	r3, [r7, #4]
}
 800703c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <vPortEnterCritical+0x58>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a0d      	ldr	r2, [pc, #52]	; (800707c <vPortEnterCritical+0x58>)
 8007046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <vPortEnterCritical+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10f      	bne.n	8007070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <vPortEnterCritical+0x5c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <vPortEnterCritical+0x4c>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	603b      	str	r3, [r7, #0]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <vPortEnterCritical+0x4a>
	}
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	2000009c 	.word	0x2000009c
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800708a:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <vPortExitCritical+0x50>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <vPortExitCritical+0x24>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	607b      	str	r3, [r7, #4]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <vPortExitCritical+0x50>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <vPortExitCritical+0x50>)
 80070b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <vPortExitCritical+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <vPortExitCritical+0x42>
 80070ba:	2300      	movs	r3, #0
 80070bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	2000009c 	.word	0x2000009c
	...

080070e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070e0:	f3ef 8009 	mrs	r0, PSP
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <pxCurrentTCBConst>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f01e 0f10 	tst.w	lr, #16
 80070f0:	bf08      	it	eq
 80070f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	6010      	str	r0, [r2, #0]
 80070fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007104:	f380 8811 	msr	BASEPRI, r0
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f7ff fcc4 	bl	8006a9c <vTaskSwitchContext>
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f380 8811 	msr	BASEPRI, r0
 800711c:	bc09      	pop	{r0, r3}
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007126:	f01e 0f10 	tst.w	lr, #16
 800712a:	bf08      	it	eq
 800712c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007130:	f380 8809 	msr	PSP, r0
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst>:
 8007140:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007162:	f7ff fbe3 	bl	800692c <xTaskIncrementTick>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <SysTick_Handler+0x40>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <vPortSetupTimerInterrupt+0x38>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <vPortSetupTimerInterrupt+0x3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <vPortSetupTimerInterrupt+0x40>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	099b      	lsrs	r3, r3, #6
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <vPortSetupTimerInterrupt+0x44>)
 80071aa:	3b01      	subs	r3, #1
 80071ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e010 	.word	0xe000e010
 80071c4:	e000e018 	.word	0xe000e018
 80071c8:	20000090 	.word	0x20000090
 80071cc:	10624dd3 	.word	0x10624dd3
 80071d0:	e000e014 	.word	0xe000e014

080071d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071e4 <vPortEnableVFP+0x10>
 80071d8:	6801      	ldr	r1, [r0, #0]
 80071da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071de:	6001      	str	r1, [r0, #0]
 80071e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071e2:	bf00      	nop
 80071e4:	e000ed88 	.word	0xe000ed88

080071e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071f4:	f7ff faf0 	bl	80067d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071f8:	4b5b      	ldr	r3, [pc, #364]	; (8007368 <pvPortMalloc+0x180>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007200:	f000 f920 	bl	8007444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007204:	4b59      	ldr	r3, [pc, #356]	; (800736c <pvPortMalloc+0x184>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 8093 	bne.w	8007338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01d      	beq.n	8007254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007218:	2208      	movs	r2, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d014      	beq.n	8007254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f023 0307 	bic.w	r3, r3, #7
 8007230:	3308      	adds	r3, #8
 8007232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <pvPortMalloc+0x6c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617b      	str	r3, [r7, #20]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06e      	beq.n	8007338 <pvPortMalloc+0x150>
 800725a:	4b45      	ldr	r3, [pc, #276]	; (8007370 <pvPortMalloc+0x188>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d869      	bhi.n	8007338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007264:	4b43      	ldr	r3, [pc, #268]	; (8007374 <pvPortMalloc+0x18c>)
 8007266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007268:	4b42      	ldr	r3, [pc, #264]	; (8007374 <pvPortMalloc+0x18c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726e:	e004      	b.n	800727a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <pvPortMalloc+0xa4>
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f1      	bne.n	8007270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800728c:	4b36      	ldr	r3, [pc, #216]	; (8007368 <pvPortMalloc+0x180>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007292:	429a      	cmp	r2, r3
 8007294:	d050      	beq.n	8007338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2208      	movs	r2, #8
 800729c:	4413      	add	r3, r2
 800729e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	2308      	movs	r3, #8
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d91f      	bls.n	80072f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4413      	add	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <pvPortMalloc+0xf8>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	613b      	str	r3, [r7, #16]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	1ad2      	subs	r2, r2, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072f2:	69b8      	ldr	r0, [r7, #24]
 80072f4:	f000 f908 	bl	8007508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f8:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <pvPortMalloc+0x188>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <pvPortMalloc+0x188>)
 8007304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <pvPortMalloc+0x188>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <pvPortMalloc+0x190>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d203      	bcs.n	800731a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007312:	4b17      	ldr	r3, [pc, #92]	; (8007370 <pvPortMalloc+0x188>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a18      	ldr	r2, [pc, #96]	; (8007378 <pvPortMalloc+0x190>)
 8007318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <pvPortMalloc+0x184>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	431a      	orrs	r2, r3
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <pvPortMalloc+0x194>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a11      	ldr	r2, [pc, #68]	; (800737c <pvPortMalloc+0x194>)
 8007336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007338:	f7ff fa5c 	bl	80067f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <pvPortMalloc+0x174>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <pvPortMalloc+0x172>
	return pvReturn;
 800735c:	69fb      	ldr	r3, [r7, #28]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3728      	adds	r7, #40	; 0x28
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200045c0 	.word	0x200045c0
 800736c:	200045d4 	.word	0x200045d4
 8007370:	200045c4 	.word	0x200045c4
 8007374:	200045b8 	.word	0x200045b8
 8007378:	200045c8 	.word	0x200045c8
 800737c:	200045cc 	.word	0x200045cc

08007380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04d      	beq.n	800742e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007392:	2308      	movs	r3, #8
 8007394:	425b      	negs	r3, r3
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4413      	add	r3, r2
 800739a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	4b24      	ldr	r3, [pc, #144]	; (8007438 <vPortFree+0xb8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <vPortFree+0x44>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60fb      	str	r3, [r7, #12]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <vPortFree+0x62>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60bb      	str	r3, [r7, #8]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <vPortFree+0xb8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01e      	beq.n	800742e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11a      	bne.n	800742e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <vPortFree+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007408:	f7ff f9e6 	bl	80067d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <vPortFree+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4413      	add	r3, r2
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <vPortFree+0xbc>)
 8007418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800741a:	6938      	ldr	r0, [r7, #16]
 800741c:	f000 f874 	bl	8007508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <vPortFree+0xc0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vPortFree+0xc0>)
 8007428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800742a:	f7ff f9e3 	bl	80067f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200045d4 	.word	0x200045d4
 800743c:	200045c4 	.word	0x200045c4
 8007440:	200045d0 	.word	0x200045d0

08007444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800744a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800744e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007450:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <prvHeapInit+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3307      	adds	r3, #7
 8007462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <prvHeapInit+0xac>)
 8007474:	4413      	add	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <prvHeapInit+0xb0>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <prvHeapInit+0xb0>)
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007490:	2208      	movs	r2, #8
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0307 	bic.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <prvHeapInit+0xb4>)
 80074a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <prvHeapInit+0xb4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <prvHeapInit+0xb4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvHeapInit+0xb4>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <prvHeapInit+0xb8>)
 80074d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <prvHeapInit+0xbc>)
 80074da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <prvHeapInit+0xc0>)
 80074de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	200009b8 	.word	0x200009b8
 80074f4:	200045b8 	.word	0x200045b8
 80074f8:	200045c0 	.word	0x200045c0
 80074fc:	200045c8 	.word	0x200045c8
 8007500:	200045c4 	.word	0x200045c4
 8007504:	200045d4 	.word	0x200045d4

08007508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007510:	4b28      	ldr	r3, [pc, #160]	; (80075b4 <prvInsertBlockIntoFreeList+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <prvInsertBlockIntoFreeList+0x14>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d8f7      	bhi.n	8007516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d108      	bne.n	800754a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d118      	bne.n	8007590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d00d      	beq.n	8007586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	441a      	add	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e008      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e003      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d002      	beq.n	80075a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	200045b8 	.word	0x200045b8
 80075b8:	200045c0 	.word	0x200045c0

080075bc <__cvt>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	ec55 4b10 	vmov	r4, r5, d0
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	460e      	mov	r6, r1
 80075c8:	4619      	mov	r1, r3
 80075ca:	462b      	mov	r3, r5
 80075cc:	bfbb      	ittet	lt
 80075ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075d2:	461d      	movlt	r5, r3
 80075d4:	2300      	movge	r3, #0
 80075d6:	232d      	movlt	r3, #45	; 0x2d
 80075d8:	700b      	strb	r3, [r1, #0]
 80075da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075e0:	4691      	mov	r9, r2
 80075e2:	f023 0820 	bic.w	r8, r3, #32
 80075e6:	bfbc      	itt	lt
 80075e8:	4622      	movlt	r2, r4
 80075ea:	4614      	movlt	r4, r2
 80075ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075f0:	d005      	beq.n	80075fe <__cvt+0x42>
 80075f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075f6:	d100      	bne.n	80075fa <__cvt+0x3e>
 80075f8:	3601      	adds	r6, #1
 80075fa:	2102      	movs	r1, #2
 80075fc:	e000      	b.n	8007600 <__cvt+0x44>
 80075fe:	2103      	movs	r1, #3
 8007600:	ab03      	add	r3, sp, #12
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	ab02      	add	r3, sp, #8
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	ec45 4b10 	vmov	d0, r4, r5
 800760c:	4653      	mov	r3, sl
 800760e:	4632      	mov	r2, r6
 8007610:	f000 fe56 	bl	80082c0 <_dtoa_r>
 8007614:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007618:	4607      	mov	r7, r0
 800761a:	d102      	bne.n	8007622 <__cvt+0x66>
 800761c:	f019 0f01 	tst.w	r9, #1
 8007620:	d022      	beq.n	8007668 <__cvt+0xac>
 8007622:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007626:	eb07 0906 	add.w	r9, r7, r6
 800762a:	d110      	bne.n	800764e <__cvt+0x92>
 800762c:	783b      	ldrb	r3, [r7, #0]
 800762e:	2b30      	cmp	r3, #48	; 0x30
 8007630:	d10a      	bne.n	8007648 <__cvt+0x8c>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f9 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800763e:	b918      	cbnz	r0, 8007648 <__cvt+0x8c>
 8007640:	f1c6 0601 	rsb	r6, r6, #1
 8007644:	f8ca 6000 	str.w	r6, [sl]
 8007648:	f8da 3000 	ldr.w	r3, [sl]
 800764c:	4499      	add	r9, r3
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f7f9 fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 800765a:	b108      	cbz	r0, 8007660 <__cvt+0xa4>
 800765c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007660:	2230      	movs	r2, #48	; 0x30
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	454b      	cmp	r3, r9
 8007666:	d307      	bcc.n	8007678 <__cvt+0xbc>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800766c:	1bdb      	subs	r3, r3, r7
 800766e:	4638      	mov	r0, r7
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	b004      	add	sp, #16
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	1c59      	adds	r1, r3, #1
 800767a:	9103      	str	r1, [sp, #12]
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e7f0      	b.n	8007662 <__cvt+0xa6>

08007680 <__exponent>:
 8007680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007682:	4603      	mov	r3, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	bfb8      	it	lt
 8007688:	4249      	neglt	r1, r1
 800768a:	f803 2b02 	strb.w	r2, [r3], #2
 800768e:	bfb4      	ite	lt
 8007690:	222d      	movlt	r2, #45	; 0x2d
 8007692:	222b      	movge	r2, #43	; 0x2b
 8007694:	2909      	cmp	r1, #9
 8007696:	7042      	strb	r2, [r0, #1]
 8007698:	dd2a      	ble.n	80076f0 <__exponent+0x70>
 800769a:	f10d 0207 	add.w	r2, sp, #7
 800769e:	4617      	mov	r7, r2
 80076a0:	260a      	movs	r6, #10
 80076a2:	4694      	mov	ip, r2
 80076a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80076a8:	fb06 1415 	mls	r4, r6, r5, r1
 80076ac:	3430      	adds	r4, #48	; 0x30
 80076ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80076b2:	460c      	mov	r4, r1
 80076b4:	2c63      	cmp	r4, #99	; 0x63
 80076b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80076ba:	4629      	mov	r1, r5
 80076bc:	dcf1      	bgt.n	80076a2 <__exponent+0x22>
 80076be:	3130      	adds	r1, #48	; 0x30
 80076c0:	f1ac 0402 	sub.w	r4, ip, #2
 80076c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80076c8:	1c41      	adds	r1, r0, #1
 80076ca:	4622      	mov	r2, r4
 80076cc:	42ba      	cmp	r2, r7
 80076ce:	d30a      	bcc.n	80076e6 <__exponent+0x66>
 80076d0:	f10d 0209 	add.w	r2, sp, #9
 80076d4:	eba2 020c 	sub.w	r2, r2, ip
 80076d8:	42bc      	cmp	r4, r7
 80076da:	bf88      	it	hi
 80076dc:	2200      	movhi	r2, #0
 80076de:	4413      	add	r3, r2
 80076e0:	1a18      	subs	r0, r3, r0
 80076e2:	b003      	add	sp, #12
 80076e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80076ee:	e7ed      	b.n	80076cc <__exponent+0x4c>
 80076f0:	2330      	movs	r3, #48	; 0x30
 80076f2:	3130      	adds	r1, #48	; 0x30
 80076f4:	7083      	strb	r3, [r0, #2]
 80076f6:	70c1      	strb	r1, [r0, #3]
 80076f8:	1d03      	adds	r3, r0, #4
 80076fa:	e7f1      	b.n	80076e0 <__exponent+0x60>

080076fc <_printf_float>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	ed2d 8b02 	vpush	{d8}
 8007704:	b08d      	sub	sp, #52	; 0x34
 8007706:	460c      	mov	r4, r1
 8007708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800770c:	4616      	mov	r6, r2
 800770e:	461f      	mov	r7, r3
 8007710:	4605      	mov	r5, r0
 8007712:	f000 fcc7 	bl	80080a4 <_localeconv_r>
 8007716:	f8d0 a000 	ldr.w	sl, [r0]
 800771a:	4650      	mov	r0, sl
 800771c:	f7f8 fda8 	bl	8000270 <strlen>
 8007720:	2300      	movs	r3, #0
 8007722:	930a      	str	r3, [sp, #40]	; 0x28
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	f8d8 3000 	ldr.w	r3, [r8]
 800772c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007730:	3307      	adds	r3, #7
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	f103 0208 	add.w	r2, r3, #8
 800773a:	f8c8 2000 	str.w	r2, [r8]
 800773e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007746:	9307      	str	r3, [sp, #28]
 8007748:	f8cd 8018 	str.w	r8, [sp, #24]
 800774c:	ee08 0a10 	vmov	s16, r0
 8007750:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007758:	4b9e      	ldr	r3, [pc, #632]	; (80079d4 <_printf_float+0x2d8>)
 800775a:	f04f 32ff 	mov.w	r2, #4294967295
 800775e:	f7f9 f9e5 	bl	8000b2c <__aeabi_dcmpun>
 8007762:	bb88      	cbnz	r0, 80077c8 <_printf_float+0xcc>
 8007764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007768:	4b9a      	ldr	r3, [pc, #616]	; (80079d4 <_printf_float+0x2d8>)
 800776a:	f04f 32ff 	mov.w	r2, #4294967295
 800776e:	f7f9 f9bf 	bl	8000af0 <__aeabi_dcmple>
 8007772:	bb48      	cbnz	r0, 80077c8 <_printf_float+0xcc>
 8007774:	2200      	movs	r2, #0
 8007776:	2300      	movs	r3, #0
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8007780:	b110      	cbz	r0, 8007788 <_printf_float+0x8c>
 8007782:	232d      	movs	r3, #45	; 0x2d
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	4a93      	ldr	r2, [pc, #588]	; (80079d8 <_printf_float+0x2dc>)
 800778a:	4b94      	ldr	r3, [pc, #592]	; (80079dc <_printf_float+0x2e0>)
 800778c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007790:	bf94      	ite	ls
 8007792:	4690      	movls	r8, r2
 8007794:	4698      	movhi	r8, r3
 8007796:	2303      	movs	r3, #3
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	f023 0304 	bic.w	r3, r3, #4
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	f04f 0900 	mov.w	r9, #0
 80077a6:	9700      	str	r7, [sp, #0]
 80077a8:	4633      	mov	r3, r6
 80077aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80077ac:	4621      	mov	r1, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f9da 	bl	8007b68 <_printf_common>
 80077b4:	3001      	adds	r0, #1
 80077b6:	f040 8090 	bne.w	80078da <_printf_float+0x1de>
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295
 80077be:	b00d      	add	sp, #52	; 0x34
 80077c0:	ecbd 8b02 	vpop	{d8}
 80077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	4649      	mov	r1, r9
 80077d0:	f7f9 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80077d4:	b140      	cbz	r0, 80077e8 <_printf_float+0xec>
 80077d6:	464b      	mov	r3, r9
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bfbc      	itt	lt
 80077dc:	232d      	movlt	r3, #45	; 0x2d
 80077de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077e2:	4a7f      	ldr	r2, [pc, #508]	; (80079e0 <_printf_float+0x2e4>)
 80077e4:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <_printf_float+0x2e8>)
 80077e6:	e7d1      	b.n	800778c <_printf_float+0x90>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077ee:	9206      	str	r2, [sp, #24]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	d13f      	bne.n	8007874 <_printf_float+0x178>
 80077f4:	2306      	movs	r3, #6
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	9b05      	ldr	r3, [sp, #20]
 80077fa:	6861      	ldr	r1, [r4, #4]
 80077fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007800:	2300      	movs	r3, #0
 8007802:	9303      	str	r3, [sp, #12]
 8007804:	ab0a      	add	r3, sp, #40	; 0x28
 8007806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800780a:	ab09      	add	r3, sp, #36	; 0x24
 800780c:	ec49 8b10 	vmov	d0, r8, r9
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007818:	4628      	mov	r0, r5
 800781a:	f7ff fecf 	bl	80075bc <__cvt>
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007822:	2b47      	cmp	r3, #71	; 0x47
 8007824:	4680      	mov	r8, r0
 8007826:	d108      	bne.n	800783a <_printf_float+0x13e>
 8007828:	1cc8      	adds	r0, r1, #3
 800782a:	db02      	blt.n	8007832 <_printf_float+0x136>
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	4299      	cmp	r1, r3
 8007830:	dd41      	ble.n	80078b6 <_printf_float+0x1ba>
 8007832:	f1ab 0302 	sub.w	r3, fp, #2
 8007836:	fa5f fb83 	uxtb.w	fp, r3
 800783a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800783e:	d820      	bhi.n	8007882 <_printf_float+0x186>
 8007840:	3901      	subs	r1, #1
 8007842:	465a      	mov	r2, fp
 8007844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007848:	9109      	str	r1, [sp, #36]	; 0x24
 800784a:	f7ff ff19 	bl	8007680 <__exponent>
 800784e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007850:	1813      	adds	r3, r2, r0
 8007852:	2a01      	cmp	r2, #1
 8007854:	4681      	mov	r9, r0
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	dc02      	bgt.n	8007860 <_printf_float+0x164>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	07d2      	lsls	r2, r2, #31
 800785e:	d501      	bpl.n	8007864 <_printf_float+0x168>
 8007860:	3301      	adds	r3, #1
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007868:	2b00      	cmp	r3, #0
 800786a:	d09c      	beq.n	80077a6 <_printf_float+0xaa>
 800786c:	232d      	movs	r3, #45	; 0x2d
 800786e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007872:	e798      	b.n	80077a6 <_printf_float+0xaa>
 8007874:	9a06      	ldr	r2, [sp, #24]
 8007876:	2a47      	cmp	r2, #71	; 0x47
 8007878:	d1be      	bne.n	80077f8 <_printf_float+0xfc>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1bc      	bne.n	80077f8 <_printf_float+0xfc>
 800787e:	2301      	movs	r3, #1
 8007880:	e7b9      	b.n	80077f6 <_printf_float+0xfa>
 8007882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007886:	d118      	bne.n	80078ba <_printf_float+0x1be>
 8007888:	2900      	cmp	r1, #0
 800788a:	6863      	ldr	r3, [r4, #4]
 800788c:	dd0b      	ble.n	80078a6 <_printf_float+0x1aa>
 800788e:	6121      	str	r1, [r4, #16]
 8007890:	b913      	cbnz	r3, 8007898 <_printf_float+0x19c>
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	07d0      	lsls	r0, r2, #31
 8007896:	d502      	bpl.n	800789e <_printf_float+0x1a2>
 8007898:	3301      	adds	r3, #1
 800789a:	440b      	add	r3, r1
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	65a1      	str	r1, [r4, #88]	; 0x58
 80078a0:	f04f 0900 	mov.w	r9, #0
 80078a4:	e7de      	b.n	8007864 <_printf_float+0x168>
 80078a6:	b913      	cbnz	r3, 80078ae <_printf_float+0x1b2>
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	07d2      	lsls	r2, r2, #31
 80078ac:	d501      	bpl.n	80078b2 <_printf_float+0x1b6>
 80078ae:	3302      	adds	r3, #2
 80078b0:	e7f4      	b.n	800789c <_printf_float+0x1a0>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7f2      	b.n	800789c <_printf_float+0x1a0>
 80078b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078bc:	4299      	cmp	r1, r3
 80078be:	db05      	blt.n	80078cc <_printf_float+0x1d0>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	6121      	str	r1, [r4, #16]
 80078c4:	07d8      	lsls	r0, r3, #31
 80078c6:	d5ea      	bpl.n	800789e <_printf_float+0x1a2>
 80078c8:	1c4b      	adds	r3, r1, #1
 80078ca:	e7e7      	b.n	800789c <_printf_float+0x1a0>
 80078cc:	2900      	cmp	r1, #0
 80078ce:	bfd4      	ite	le
 80078d0:	f1c1 0202 	rsble	r2, r1, #2
 80078d4:	2201      	movgt	r2, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	e7e0      	b.n	800789c <_printf_float+0x1a0>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	055a      	lsls	r2, r3, #21
 80078de:	d407      	bmi.n	80078f0 <_printf_float+0x1f4>
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	4642      	mov	r2, r8
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	d12c      	bne.n	8007948 <_printf_float+0x24c>
 80078ee:	e764      	b.n	80077ba <_printf_float+0xbe>
 80078f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078f4:	f240 80e0 	bls.w	8007ab8 <_printf_float+0x3bc>
 80078f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078fc:	2200      	movs	r2, #0
 80078fe:	2300      	movs	r3, #0
 8007900:	f7f9 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007904:	2800      	cmp	r0, #0
 8007906:	d034      	beq.n	8007972 <_printf_float+0x276>
 8007908:	4a37      	ldr	r2, [pc, #220]	; (80079e8 <_printf_float+0x2ec>)
 800790a:	2301      	movs	r3, #1
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f af51 	beq.w	80077ba <_printf_float+0xbe>
 8007918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800791c:	429a      	cmp	r2, r3
 800791e:	db02      	blt.n	8007926 <_printf_float+0x22a>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07d8      	lsls	r0, r3, #31
 8007924:	d510      	bpl.n	8007948 <_printf_float+0x24c>
 8007926:	ee18 3a10 	vmov	r3, s16
 800792a:	4652      	mov	r2, sl
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f af41 	beq.w	80077ba <_printf_float+0xbe>
 8007938:	f04f 0800 	mov.w	r8, #0
 800793c:	f104 091a 	add.w	r9, r4, #26
 8007940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007942:	3b01      	subs	r3, #1
 8007944:	4543      	cmp	r3, r8
 8007946:	dc09      	bgt.n	800795c <_printf_float+0x260>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	079b      	lsls	r3, r3, #30
 800794c:	f100 8107 	bmi.w	8007b5e <_printf_float+0x462>
 8007950:	68e0      	ldr	r0, [r4, #12]
 8007952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007954:	4298      	cmp	r0, r3
 8007956:	bfb8      	it	lt
 8007958:	4618      	movlt	r0, r3
 800795a:	e730      	b.n	80077be <_printf_float+0xc2>
 800795c:	2301      	movs	r3, #1
 800795e:	464a      	mov	r2, r9
 8007960:	4631      	mov	r1, r6
 8007962:	4628      	mov	r0, r5
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	f43f af27 	beq.w	80077ba <_printf_float+0xbe>
 800796c:	f108 0801 	add.w	r8, r8, #1
 8007970:	e7e6      	b.n	8007940 <_printf_float+0x244>
 8007972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc39      	bgt.n	80079ec <_printf_float+0x2f0>
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <_printf_float+0x2ec>)
 800797a:	2301      	movs	r3, #1
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f af19 	beq.w	80077ba <_printf_float+0xbe>
 8007988:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800798c:	4313      	orrs	r3, r2
 800798e:	d102      	bne.n	8007996 <_printf_float+0x29a>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	07d9      	lsls	r1, r3, #31
 8007994:	d5d8      	bpl.n	8007948 <_printf_float+0x24c>
 8007996:	ee18 3a10 	vmov	r3, s16
 800799a:	4652      	mov	r2, sl
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f af09 	beq.w	80077ba <_printf_float+0xbe>
 80079a8:	f04f 0900 	mov.w	r9, #0
 80079ac:	f104 0a1a 	add.w	sl, r4, #26
 80079b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b2:	425b      	negs	r3, r3
 80079b4:	454b      	cmp	r3, r9
 80079b6:	dc01      	bgt.n	80079bc <_printf_float+0x2c0>
 80079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ba:	e792      	b.n	80078e2 <_printf_float+0x1e6>
 80079bc:	2301      	movs	r3, #1
 80079be:	4652      	mov	r2, sl
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f aef7 	beq.w	80077ba <_printf_float+0xbe>
 80079cc:	f109 0901 	add.w	r9, r9, #1
 80079d0:	e7ee      	b.n	80079b0 <_printf_float+0x2b4>
 80079d2:	bf00      	nop
 80079d4:	7fefffff 	.word	0x7fefffff
 80079d8:	0800a6d8 	.word	0x0800a6d8
 80079dc:	0800a6dc 	.word	0x0800a6dc
 80079e0:	0800a6e0 	.word	0x0800a6e0
 80079e4:	0800a6e4 	.word	0x0800a6e4
 80079e8:	0800a6e8 	.word	0x0800a6e8
 80079ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f0:	429a      	cmp	r2, r3
 80079f2:	bfa8      	it	ge
 80079f4:	461a      	movge	r2, r3
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	4691      	mov	r9, r2
 80079fa:	dc37      	bgt.n	8007a6c <_printf_float+0x370>
 80079fc:	f04f 0b00 	mov.w	fp, #0
 8007a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a04:	f104 021a 	add.w	r2, r4, #26
 8007a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	eba3 0309 	sub.w	r3, r3, r9
 8007a10:	455b      	cmp	r3, fp
 8007a12:	dc33      	bgt.n	8007a7c <_printf_float+0x380>
 8007a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	db3b      	blt.n	8007a94 <_printf_float+0x398>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07da      	lsls	r2, r3, #31
 8007a20:	d438      	bmi.n	8007a94 <_printf_float+0x398>
 8007a22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a26:	eba2 0903 	sub.w	r9, r2, r3
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	1ad2      	subs	r2, r2, r3
 8007a2e:	4591      	cmp	r9, r2
 8007a30:	bfa8      	it	ge
 8007a32:	4691      	movge	r9, r2
 8007a34:	f1b9 0f00 	cmp.w	r9, #0
 8007a38:	dc35      	bgt.n	8007aa6 <_printf_float+0x3aa>
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a42:	f104 0a1a 	add.w	sl, r4, #26
 8007a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	eba3 0309 	sub.w	r3, r3, r9
 8007a50:	4543      	cmp	r3, r8
 8007a52:	f77f af79 	ble.w	8007948 <_printf_float+0x24c>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4652      	mov	r2, sl
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f aeaa 	beq.w	80077ba <_printf_float+0xbe>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	e7ec      	b.n	8007a46 <_printf_float+0x34a>
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4642      	mov	r2, r8
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	d1c0      	bne.n	80079fc <_printf_float+0x300>
 8007a7a:	e69e      	b.n	80077ba <_printf_float+0xbe>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	9205      	str	r2, [sp, #20]
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f ae97 	beq.w	80077ba <_printf_float+0xbe>
 8007a8c:	9a05      	ldr	r2, [sp, #20]
 8007a8e:	f10b 0b01 	add.w	fp, fp, #1
 8007a92:	e7b9      	b.n	8007a08 <_printf_float+0x30c>
 8007a94:	ee18 3a10 	vmov	r3, s16
 8007a98:	4652      	mov	r2, sl
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b8      	blx	r7
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d1be      	bne.n	8007a22 <_printf_float+0x326>
 8007aa4:	e689      	b.n	80077ba <_printf_float+0xbe>
 8007aa6:	9a05      	ldr	r2, [sp, #20]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	4442      	add	r2, r8
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d1c1      	bne.n	8007a3a <_printf_float+0x33e>
 8007ab6:	e680      	b.n	80077ba <_printf_float+0xbe>
 8007ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aba:	2a01      	cmp	r2, #1
 8007abc:	dc01      	bgt.n	8007ac2 <_printf_float+0x3c6>
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d53a      	bpl.n	8007b38 <_printf_float+0x43c>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f ae74 	beq.w	80077ba <_printf_float+0xbe>
 8007ad2:	ee18 3a10 	vmov	r3, s16
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f ae6b 	beq.w	80077ba <_printf_float+0xbe>
 8007ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2300      	movs	r3, #0
 8007aec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007af0:	f7f8 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af4:	b9d8      	cbnz	r0, 8007b2e <_printf_float+0x432>
 8007af6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007afa:	f108 0201 	add.w	r2, r8, #1
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	d10e      	bne.n	8007b26 <_printf_float+0x42a>
 8007b08:	e657      	b.n	80077ba <_printf_float+0xbe>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae50 	beq.w	80077ba <_printf_float+0xbe>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b20:	3b01      	subs	r3, #1
 8007b22:	4543      	cmp	r3, r8
 8007b24:	dcf1      	bgt.n	8007b0a <_printf_float+0x40e>
 8007b26:	464b      	mov	r3, r9
 8007b28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b2c:	e6da      	b.n	80078e4 <_printf_float+0x1e8>
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	f104 0a1a 	add.w	sl, r4, #26
 8007b36:	e7f2      	b.n	8007b1e <_printf_float+0x422>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	e7df      	b.n	8007afe <_printf_float+0x402>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	464a      	mov	r2, r9
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae36 	beq.w	80077ba <_printf_float+0xbe>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	68e3      	ldr	r3, [r4, #12]
 8007b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b56:	1a5b      	subs	r3, r3, r1
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	dcf0      	bgt.n	8007b3e <_printf_float+0x442>
 8007b5c:	e6f8      	b.n	8007950 <_printf_float+0x254>
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	f104 0919 	add.w	r9, r4, #25
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x456>

08007b68 <_printf_common>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	4699      	mov	r9, r3
 8007b70:	688a      	ldr	r2, [r1, #8]
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bfb8      	it	lt
 8007b7c:	4613      	movlt	r3, r2
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b84:	4607      	mov	r7, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b10a      	cbz	r2, 8007b8e <_printf_common+0x26>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	0699      	lsls	r1, r3, #26
 8007b92:	bf42      	ittt	mi
 8007b94:	6833      	ldrmi	r3, [r6, #0]
 8007b96:	3302      	addmi	r3, #2
 8007b98:	6033      	strmi	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	f015 0506 	ands.w	r5, r5, #6
 8007ba0:	d106      	bne.n	8007bb0 <_printf_common+0x48>
 8007ba2:	f104 0a19 	add.w	sl, r4, #25
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc26      	bgt.n	8007bfe <_printf_common+0x96>
 8007bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bb4:	1e13      	subs	r3, r2, #0
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	bf18      	it	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	0692      	lsls	r2, r2, #26
 8007bbe:	d42b      	bmi.n	8007c18 <_printf_common+0xb0>
 8007bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c0      	blx	r8
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d01e      	beq.n	8007c0c <_printf_common+0xa4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	f003 0306 	and.w	r3, r3, #6
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	bf02      	ittt	eq
 8007bda:	68e5      	ldreq	r5, [r4, #12]
 8007bdc:	6833      	ldreq	r3, [r6, #0]
 8007bde:	1aed      	subeq	r5, r5, r3
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	bf0c      	ite	eq
 8007be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be8:	2500      	movne	r5, #0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfc4      	itt	gt
 8007bee:	1a9b      	subgt	r3, r3, r2
 8007bf0:	18ed      	addgt	r5, r5, r3
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xc8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xa8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4649      	mov	r1, r9
 8007c04:	4638      	mov	r0, r7
 8007c06:	47c0      	blx	r8
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xac>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c6      	b.n	8007ba6 <_printf_common+0x3e>
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	2030      	movs	r0, #48	; 0x30
 8007c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c22:	4422      	add	r2, r4
 8007c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	e7c7      	b.n	8007bc0 <_printf_common+0x58>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xa4>
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7d9      	b.n	8007bf6 <_printf_common+0x8e>
	...

08007c44 <_printf_i>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	7e0f      	ldrb	r7, [r1, #24]
 8007c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c4c:	2f78      	cmp	r7, #120	; 0x78
 8007c4e:	4691      	mov	r9, r2
 8007c50:	4680      	mov	r8, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	469a      	mov	sl, r3
 8007c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c5a:	d807      	bhi.n	8007c6c <_printf_i+0x28>
 8007c5c:	2f62      	cmp	r7, #98	; 0x62
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x32>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f000 80d4 	beq.w	8007e0e <_printf_i+0x1ca>
 8007c66:	2f58      	cmp	r7, #88	; 0x58
 8007c68:	f000 80c0 	beq.w	8007dec <_printf_i+0x1a8>
 8007c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c74:	e03a      	b.n	8007cec <_printf_i+0xa8>
 8007c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c7a:	2b15      	cmp	r3, #21
 8007c7c:	d8f6      	bhi.n	8007c6c <_printf_i+0x28>
 8007c7e:	a101      	add	r1, pc, #4	; (adr r1, 8007c84 <_printf_i+0x40>)
 8007c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007c6d 	.word	0x08007c6d
 8007c90:	08007c6d 	.word	0x08007c6d
 8007c94:	08007c6d 	.word	0x08007c6d
 8007c98:	08007c6d 	.word	0x08007c6d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c6d 	.word	0x08007c6d
 8007ca4:	08007c6d 	.word	0x08007c6d
 8007ca8:	08007c6d 	.word	0x08007c6d
 8007cac:	08007c6d 	.word	0x08007c6d
 8007cb0:	08007df5 	.word	0x08007df5
 8007cb4:	08007d1d 	.word	0x08007d1d
 8007cb8:	08007daf 	.word	0x08007daf
 8007cbc:	08007c6d 	.word	0x08007c6d
 8007cc0:	08007c6d 	.word	0x08007c6d
 8007cc4:	08007e17 	.word	0x08007e17
 8007cc8:	08007c6d 	.word	0x08007c6d
 8007ccc:	08007d1d 	.word	0x08007d1d
 8007cd0:	08007c6d 	.word	0x08007c6d
 8007cd4:	08007c6d 	.word	0x08007c6d
 8007cd8:	08007db7 	.word	0x08007db7
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	602a      	str	r2, [r5, #0]
 8007ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cec:	2301      	movs	r3, #1
 8007cee:	e09f      	b.n	8007e30 <_printf_i+0x1ec>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	0607      	lsls	r7, r0, #24
 8007cf6:	f103 0104 	add.w	r1, r3, #4
 8007cfa:	6029      	str	r1, [r5, #0]
 8007cfc:	d501      	bpl.n	8007d02 <_printf_i+0xbe>
 8007cfe:	681e      	ldr	r6, [r3, #0]
 8007d00:	e003      	b.n	8007d0a <_printf_i+0xc6>
 8007d02:	0646      	lsls	r6, r0, #25
 8007d04:	d5fb      	bpl.n	8007cfe <_printf_i+0xba>
 8007d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	da03      	bge.n	8007d16 <_printf_i+0xd2>
 8007d0e:	232d      	movs	r3, #45	; 0x2d
 8007d10:	4276      	negs	r6, r6
 8007d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d16:	485a      	ldr	r0, [pc, #360]	; (8007e80 <_printf_i+0x23c>)
 8007d18:	230a      	movs	r3, #10
 8007d1a:	e012      	b.n	8007d42 <_printf_i+0xfe>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	6820      	ldr	r0, [r4, #0]
 8007d20:	1d19      	adds	r1, r3, #4
 8007d22:	6029      	str	r1, [r5, #0]
 8007d24:	0605      	lsls	r5, r0, #24
 8007d26:	d501      	bpl.n	8007d2c <_printf_i+0xe8>
 8007d28:	681e      	ldr	r6, [r3, #0]
 8007d2a:	e002      	b.n	8007d32 <_printf_i+0xee>
 8007d2c:	0641      	lsls	r1, r0, #25
 8007d2e:	d5fb      	bpl.n	8007d28 <_printf_i+0xe4>
 8007d30:	881e      	ldrh	r6, [r3, #0]
 8007d32:	4853      	ldr	r0, [pc, #332]	; (8007e80 <_printf_i+0x23c>)
 8007d34:	2f6f      	cmp	r7, #111	; 0x6f
 8007d36:	bf0c      	ite	eq
 8007d38:	2308      	moveq	r3, #8
 8007d3a:	230a      	movne	r3, #10
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d42:	6865      	ldr	r5, [r4, #4]
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	bfa2      	ittt	ge
 8007d4a:	6821      	ldrge	r1, [r4, #0]
 8007d4c:	f021 0104 	bicge.w	r1, r1, #4
 8007d50:	6021      	strge	r1, [r4, #0]
 8007d52:	b90e      	cbnz	r6, 8007d58 <_printf_i+0x114>
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	d04b      	beq.n	8007df0 <_printf_i+0x1ac>
 8007d58:	4615      	mov	r5, r2
 8007d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d62:	5dc7      	ldrb	r7, [r0, r7]
 8007d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d68:	4637      	mov	r7, r6
 8007d6a:	42bb      	cmp	r3, r7
 8007d6c:	460e      	mov	r6, r1
 8007d6e:	d9f4      	bls.n	8007d5a <_printf_i+0x116>
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d10b      	bne.n	8007d8c <_printf_i+0x148>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07de      	lsls	r6, r3, #31
 8007d78:	d508      	bpl.n	8007d8c <_printf_i+0x148>
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	6861      	ldr	r1, [r4, #4]
 8007d7e:	4299      	cmp	r1, r3
 8007d80:	bfde      	ittt	le
 8007d82:	2330      	movle	r3, #48	; 0x30
 8007d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d8c:	1b52      	subs	r2, r2, r5
 8007d8e:	6122      	str	r2, [r4, #16]
 8007d90:	f8cd a000 	str.w	sl, [sp]
 8007d94:	464b      	mov	r3, r9
 8007d96:	aa03      	add	r2, sp, #12
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	f7ff fee4 	bl	8007b68 <_printf_common>
 8007da0:	3001      	adds	r0, #1
 8007da2:	d14a      	bne.n	8007e3a <_printf_i+0x1f6>
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	b004      	add	sp, #16
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	f043 0320 	orr.w	r3, r3, #32
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	4833      	ldr	r0, [pc, #204]	; (8007e84 <_printf_i+0x240>)
 8007db8:	2778      	movs	r7, #120	; 0x78
 8007dba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	6829      	ldr	r1, [r5, #0]
 8007dc2:	061f      	lsls	r7, r3, #24
 8007dc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dc8:	d402      	bmi.n	8007dd0 <_printf_i+0x18c>
 8007dca:	065f      	lsls	r7, r3, #25
 8007dcc:	bf48      	it	mi
 8007dce:	b2b6      	uxthmi	r6, r6
 8007dd0:	07df      	lsls	r7, r3, #31
 8007dd2:	bf48      	it	mi
 8007dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd8:	6029      	str	r1, [r5, #0]
 8007dda:	bf48      	it	mi
 8007ddc:	6023      	strmi	r3, [r4, #0]
 8007dde:	b91e      	cbnz	r6, 8007de8 <_printf_i+0x1a4>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	f023 0320 	bic.w	r3, r3, #32
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	2310      	movs	r3, #16
 8007dea:	e7a7      	b.n	8007d3c <_printf_i+0xf8>
 8007dec:	4824      	ldr	r0, [pc, #144]	; (8007e80 <_printf_i+0x23c>)
 8007dee:	e7e4      	b.n	8007dba <_printf_i+0x176>
 8007df0:	4615      	mov	r5, r2
 8007df2:	e7bd      	b.n	8007d70 <_printf_i+0x12c>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	6826      	ldr	r6, [r4, #0]
 8007df8:	6961      	ldr	r1, [r4, #20]
 8007dfa:	1d18      	adds	r0, r3, #4
 8007dfc:	6028      	str	r0, [r5, #0]
 8007dfe:	0635      	lsls	r5, r6, #24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0x1c4>
 8007e04:	6019      	str	r1, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0x1ca>
 8007e08:	0670      	lsls	r0, r6, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0x1c0>
 8007e0c:	8019      	strh	r1, [r3, #0]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	4615      	mov	r5, r2
 8007e14:	e7bc      	b.n	8007d90 <_printf_i+0x14c>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	2100      	movs	r1, #0
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7f8 f9d4 	bl	80001d0 <memchr>
 8007e28:	b108      	cbz	r0, 8007e2e <_printf_i+0x1ea>
 8007e2a:	1b40      	subs	r0, r0, r5
 8007e2c:	6060      	str	r0, [r4, #4]
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	2300      	movs	r3, #0
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	e7aa      	b.n	8007d90 <_printf_i+0x14c>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d0ad      	beq.n	8007da4 <_printf_i+0x160>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	079b      	lsls	r3, r3, #30
 8007e4c:	d413      	bmi.n	8007e76 <_printf_i+0x232>
 8007e4e:	68e0      	ldr	r0, [r4, #12]
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	4298      	cmp	r0, r3
 8007e54:	bfb8      	it	lt
 8007e56:	4618      	movlt	r0, r3
 8007e58:	e7a6      	b.n	8007da8 <_printf_i+0x164>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4640      	mov	r0, r8
 8007e62:	47d0      	blx	sl
 8007e64:	3001      	adds	r0, #1
 8007e66:	d09d      	beq.n	8007da4 <_printf_i+0x160>
 8007e68:	3501      	adds	r5, #1
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	9903      	ldr	r1, [sp, #12]
 8007e6e:	1a5b      	subs	r3, r3, r1
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dcf2      	bgt.n	8007e5a <_printf_i+0x216>
 8007e74:	e7eb      	b.n	8007e4e <_printf_i+0x20a>
 8007e76:	2500      	movs	r5, #0
 8007e78:	f104 0619 	add.w	r6, r4, #25
 8007e7c:	e7f5      	b.n	8007e6a <_printf_i+0x226>
 8007e7e:	bf00      	nop
 8007e80:	0800a6ea 	.word	0x0800a6ea
 8007e84:	0800a6fb 	.word	0x0800a6fb

08007e88 <std>:
 8007e88:	2300      	movs	r3, #0
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e96:	6083      	str	r3, [r0, #8]
 8007e98:	8181      	strh	r1, [r0, #12]
 8007e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e9c:	81c2      	strh	r2, [r0, #14]
 8007e9e:	6183      	str	r3, [r0, #24]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	305c      	adds	r0, #92	; 0x5c
 8007ea6:	f000 f8f4 	bl	8008092 <memset>
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <std+0x58>)
 8007eac:	6263      	str	r3, [r4, #36]	; 0x24
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <std+0x5c>)
 8007eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <std+0x60>)
 8007eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <std+0x64>)
 8007eb8:	6323      	str	r3, [r4, #48]	; 0x30
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <std+0x68>)
 8007ebc:	6224      	str	r4, [r4, #32]
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	d006      	beq.n	8007ed0 <std+0x48>
 8007ec2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ec6:	4294      	cmp	r4, r2
 8007ec8:	d002      	beq.n	8007ed0 <std+0x48>
 8007eca:	33d0      	adds	r3, #208	; 0xd0
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d105      	bne.n	8007edc <std+0x54>
 8007ed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed8:	f000 b958 	b.w	800818c <__retarget_lock_init_recursive>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	bf00      	nop
 8007ee0:	0800800d 	.word	0x0800800d
 8007ee4:	0800802f 	.word	0x0800802f
 8007ee8:	08008067 	.word	0x08008067
 8007eec:	0800808b 	.word	0x0800808b
 8007ef0:	200045d8 	.word	0x200045d8

08007ef4 <stdio_exit_handler>:
 8007ef4:	4a02      	ldr	r2, [pc, #8]	; (8007f00 <stdio_exit_handler+0xc>)
 8007ef6:	4903      	ldr	r1, [pc, #12]	; (8007f04 <stdio_exit_handler+0x10>)
 8007ef8:	4803      	ldr	r0, [pc, #12]	; (8007f08 <stdio_exit_handler+0x14>)
 8007efa:	f000 b869 	b.w	8007fd0 <_fwalk_sglue>
 8007efe:	bf00      	nop
 8007f00:	200000a0 	.word	0x200000a0
 8007f04:	080098a9 	.word	0x080098a9
 8007f08:	200000ac 	.word	0x200000ac

08007f0c <cleanup_stdio>:
 8007f0c:	6841      	ldr	r1, [r0, #4]
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <cleanup_stdio+0x34>)
 8007f10:	4299      	cmp	r1, r3
 8007f12:	b510      	push	{r4, lr}
 8007f14:	4604      	mov	r4, r0
 8007f16:	d001      	beq.n	8007f1c <cleanup_stdio+0x10>
 8007f18:	f001 fcc6 	bl	80098a8 <_fflush_r>
 8007f1c:	68a1      	ldr	r1, [r4, #8]
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <cleanup_stdio+0x38>)
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d002      	beq.n	8007f2a <cleanup_stdio+0x1e>
 8007f24:	4620      	mov	r0, r4
 8007f26:	f001 fcbf 	bl	80098a8 <_fflush_r>
 8007f2a:	68e1      	ldr	r1, [r4, #12]
 8007f2c:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <cleanup_stdio+0x3c>)
 8007f2e:	4299      	cmp	r1, r3
 8007f30:	d004      	beq.n	8007f3c <cleanup_stdio+0x30>
 8007f32:	4620      	mov	r0, r4
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f001 bcb6 	b.w	80098a8 <_fflush_r>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	bf00      	nop
 8007f40:	200045d8 	.word	0x200045d8
 8007f44:	20004640 	.word	0x20004640
 8007f48:	200046a8 	.word	0x200046a8

08007f4c <global_stdio_init.part.0>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <global_stdio_init.part.0+0x30>)
 8007f50:	4c0b      	ldr	r4, [pc, #44]	; (8007f80 <global_stdio_init.part.0+0x34>)
 8007f52:	4a0c      	ldr	r2, [pc, #48]	; (8007f84 <global_stdio_init.part.0+0x38>)
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	4620      	mov	r0, r4
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	f7ff ff94 	bl	8007e88 <std>
 8007f60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f64:	2201      	movs	r2, #1
 8007f66:	2109      	movs	r1, #9
 8007f68:	f7ff ff8e 	bl	8007e88 <std>
 8007f6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f70:	2202      	movs	r2, #2
 8007f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f76:	2112      	movs	r1, #18
 8007f78:	f7ff bf86 	b.w	8007e88 <std>
 8007f7c:	20004710 	.word	0x20004710
 8007f80:	200045d8 	.word	0x200045d8
 8007f84:	08007ef5 	.word	0x08007ef5

08007f88 <__sfp_lock_acquire>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__sfp_lock_acquire+0x8>)
 8007f8a:	f000 b900 	b.w	800818e <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20004719 	.word	0x20004719

08007f94 <__sfp_lock_release>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sfp_lock_release+0x8>)
 8007f96:	f000 b8fb 	b.w	8008190 <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20004719 	.word	0x20004719

08007fa0 <__sinit>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	f7ff fff0 	bl	8007f88 <__sfp_lock_acquire>
 8007fa8:	6a23      	ldr	r3, [r4, #32]
 8007faa:	b11b      	cbz	r3, 8007fb4 <__sinit+0x14>
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f7ff bff0 	b.w	8007f94 <__sfp_lock_release>
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <__sinit+0x28>)
 8007fb6:	6223      	str	r3, [r4, #32]
 8007fb8:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <__sinit+0x2c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1f5      	bne.n	8007fac <__sinit+0xc>
 8007fc0:	f7ff ffc4 	bl	8007f4c <global_stdio_init.part.0>
 8007fc4:	e7f2      	b.n	8007fac <__sinit+0xc>
 8007fc6:	bf00      	nop
 8007fc8:	08007f0d 	.word	0x08007f0d
 8007fcc:	20004710 	.word	0x20004710

08007fd0 <_fwalk_sglue>:
 8007fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	4688      	mov	r8, r1
 8007fd8:	4614      	mov	r4, r2
 8007fda:	2600      	movs	r6, #0
 8007fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fe4:	d505      	bpl.n	8007ff2 <_fwalk_sglue+0x22>
 8007fe6:	6824      	ldr	r4, [r4, #0]
 8007fe8:	2c00      	cmp	r4, #0
 8007fea:	d1f7      	bne.n	8007fdc <_fwalk_sglue+0xc>
 8007fec:	4630      	mov	r0, r6
 8007fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d907      	bls.n	8008008 <_fwalk_sglue+0x38>
 8007ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	d003      	beq.n	8008008 <_fwalk_sglue+0x38>
 8008000:	4629      	mov	r1, r5
 8008002:	4638      	mov	r0, r7
 8008004:	47c0      	blx	r8
 8008006:	4306      	orrs	r6, r0
 8008008:	3568      	adds	r5, #104	; 0x68
 800800a:	e7e9      	b.n	8007fe0 <_fwalk_sglue+0x10>

0800800c <__sread>:
 800800c:	b510      	push	{r4, lr}
 800800e:	460c      	mov	r4, r1
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	f000 f86c 	bl	80080f0 <_read_r>
 8008018:	2800      	cmp	r0, #0
 800801a:	bfab      	itete	ge
 800801c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800801e:	89a3      	ldrhlt	r3, [r4, #12]
 8008020:	181b      	addge	r3, r3, r0
 8008022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008026:	bfac      	ite	ge
 8008028:	6563      	strge	r3, [r4, #84]	; 0x54
 800802a:	81a3      	strhlt	r3, [r4, #12]
 800802c:	bd10      	pop	{r4, pc}

0800802e <__swrite>:
 800802e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	461f      	mov	r7, r3
 8008034:	898b      	ldrh	r3, [r1, #12]
 8008036:	05db      	lsls	r3, r3, #23
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	4616      	mov	r6, r2
 800803e:	d505      	bpl.n	800804c <__swrite+0x1e>
 8008040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008044:	2302      	movs	r3, #2
 8008046:	2200      	movs	r2, #0
 8008048:	f000 f840 	bl	80080cc <_lseek_r>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	4632      	mov	r2, r6
 800805a:	463b      	mov	r3, r7
 800805c:	4628      	mov	r0, r5
 800805e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	f000 b857 	b.w	8008114 <_write_r>

08008066 <__sseek>:
 8008066:	b510      	push	{r4, lr}
 8008068:	460c      	mov	r4, r1
 800806a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806e:	f000 f82d 	bl	80080cc <_lseek_r>
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	bf15      	itete	ne
 8008078:	6560      	strne	r0, [r4, #84]	; 0x54
 800807a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800807e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008082:	81a3      	strheq	r3, [r4, #12]
 8008084:	bf18      	it	ne
 8008086:	81a3      	strhne	r3, [r4, #12]
 8008088:	bd10      	pop	{r4, pc}

0800808a <__sclose>:
 800808a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808e:	f000 b80d 	b.w	80080ac <_close_r>

08008092 <memset>:
 8008092:	4402      	add	r2, r0
 8008094:	4603      	mov	r3, r0
 8008096:	4293      	cmp	r3, r2
 8008098:	d100      	bne.n	800809c <memset+0xa>
 800809a:	4770      	bx	lr
 800809c:	f803 1b01 	strb.w	r1, [r3], #1
 80080a0:	e7f9      	b.n	8008096 <memset+0x4>
	...

080080a4 <_localeconv_r>:
 80080a4:	4800      	ldr	r0, [pc, #0]	; (80080a8 <_localeconv_r+0x4>)
 80080a6:	4770      	bx	lr
 80080a8:	200001ec 	.word	0x200001ec

080080ac <_close_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d06      	ldr	r5, [pc, #24]	; (80080c8 <_close_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	602b      	str	r3, [r5, #0]
 80080b8:	f7fa fff1 	bl	800309e <_close>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_close_r+0x1a>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_close_r+0x1a>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20004714 	.word	0x20004714

080080cc <_lseek_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_lseek_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7fb f806 	bl	80030ec <_lseek>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_lseek_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_lseek_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20004714 	.word	0x20004714

080080f0 <_read_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	; (8008110 <_read_r+0x20>)
 80080f4:	4604      	mov	r4, r0
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7fa ff94 	bl	800302c <_read>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_read_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_read_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20004714 	.word	0x20004714

08008114 <_write_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_write_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7fa ff9f 	bl	8003066 <_write>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_write_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_write_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20004714 	.word	0x20004714

08008138 <__errno>:
 8008138:	4b01      	ldr	r3, [pc, #4]	; (8008140 <__errno+0x8>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	200000f8 	.word	0x200000f8

08008144 <__libc_init_array>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4d0d      	ldr	r5, [pc, #52]	; (800817c <__libc_init_array+0x38>)
 8008148:	4c0d      	ldr	r4, [pc, #52]	; (8008180 <__libc_init_array+0x3c>)
 800814a:	1b64      	subs	r4, r4, r5
 800814c:	10a4      	asrs	r4, r4, #2
 800814e:	2600      	movs	r6, #0
 8008150:	42a6      	cmp	r6, r4
 8008152:	d109      	bne.n	8008168 <__libc_init_array+0x24>
 8008154:	4d0b      	ldr	r5, [pc, #44]	; (8008184 <__libc_init_array+0x40>)
 8008156:	4c0c      	ldr	r4, [pc, #48]	; (8008188 <__libc_init_array+0x44>)
 8008158:	f002 fa64 	bl	800a624 <_init>
 800815c:	1b64      	subs	r4, r4, r5
 800815e:	10a4      	asrs	r4, r4, #2
 8008160:	2600      	movs	r6, #0
 8008162:	42a6      	cmp	r6, r4
 8008164:	d105      	bne.n	8008172 <__libc_init_array+0x2e>
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	f855 3b04 	ldr.w	r3, [r5], #4
 800816c:	4798      	blx	r3
 800816e:	3601      	adds	r6, #1
 8008170:	e7ee      	b.n	8008150 <__libc_init_array+0xc>
 8008172:	f855 3b04 	ldr.w	r3, [r5], #4
 8008176:	4798      	blx	r3
 8008178:	3601      	adds	r6, #1
 800817a:	e7f2      	b.n	8008162 <__libc_init_array+0x1e>
 800817c:	0800aac8 	.word	0x0800aac8
 8008180:	0800aac8 	.word	0x0800aac8
 8008184:	0800aac8 	.word	0x0800aac8
 8008188:	0800aacc 	.word	0x0800aacc

0800818c <__retarget_lock_init_recursive>:
 800818c:	4770      	bx	lr

0800818e <__retarget_lock_acquire_recursive>:
 800818e:	4770      	bx	lr

08008190 <__retarget_lock_release_recursive>:
 8008190:	4770      	bx	lr

08008192 <memcpy>:
 8008192:	440a      	add	r2, r1
 8008194:	4291      	cmp	r1, r2
 8008196:	f100 33ff 	add.w	r3, r0, #4294967295
 800819a:	d100      	bne.n	800819e <memcpy+0xc>
 800819c:	4770      	bx	lr
 800819e:	b510      	push	{r4, lr}
 80081a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a8:	4291      	cmp	r1, r2
 80081aa:	d1f9      	bne.n	80081a0 <memcpy+0xe>
 80081ac:	bd10      	pop	{r4, pc}

080081ae <quorem>:
 80081ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b2:	6903      	ldr	r3, [r0, #16]
 80081b4:	690c      	ldr	r4, [r1, #16]
 80081b6:	42a3      	cmp	r3, r4
 80081b8:	4607      	mov	r7, r0
 80081ba:	db7e      	blt.n	80082ba <quorem+0x10c>
 80081bc:	3c01      	subs	r4, #1
 80081be:	f101 0814 	add.w	r8, r1, #20
 80081c2:	f100 0514 	add.w	r5, r0, #20
 80081c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d4:	3301      	adds	r3, #1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081e4:	d331      	bcc.n	800824a <quorem+0x9c>
 80081e6:	f04f 0e00 	mov.w	lr, #0
 80081ea:	4640      	mov	r0, r8
 80081ec:	46ac      	mov	ip, r5
 80081ee:	46f2      	mov	sl, lr
 80081f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80081f4:	b293      	uxth	r3, r2
 80081f6:	fb06 e303 	mla	r3, r6, r3, lr
 80081fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081fe:	0c1a      	lsrs	r2, r3, #16
 8008200:	b29b      	uxth	r3, r3
 8008202:	ebaa 0303 	sub.w	r3, sl, r3
 8008206:	f8dc a000 	ldr.w	sl, [ip]
 800820a:	fa13 f38a 	uxtah	r3, r3, sl
 800820e:	fb06 220e 	mla	r2, r6, lr, r2
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008224:	f8bd 3000 	ldrh.w	r3, [sp]
 8008228:	4581      	cmp	r9, r0
 800822a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822e:	f84c 3b04 	str.w	r3, [ip], #4
 8008232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008236:	d2db      	bcs.n	80081f0 <quorem+0x42>
 8008238:	f855 300b 	ldr.w	r3, [r5, fp]
 800823c:	b92b      	cbnz	r3, 800824a <quorem+0x9c>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	3b04      	subs	r3, #4
 8008242:	429d      	cmp	r5, r3
 8008244:	461a      	mov	r2, r3
 8008246:	d32c      	bcc.n	80082a2 <quorem+0xf4>
 8008248:	613c      	str	r4, [r7, #16]
 800824a:	4638      	mov	r0, r7
 800824c:	f001 f9a6 	bl	800959c <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	db22      	blt.n	800829a <quorem+0xec>
 8008254:	3601      	adds	r6, #1
 8008256:	4629      	mov	r1, r5
 8008258:	2000      	movs	r0, #0
 800825a:	f858 2b04 	ldr.w	r2, [r8], #4
 800825e:	f8d1 c000 	ldr.w	ip, [r1]
 8008262:	b293      	uxth	r3, r2
 8008264:	1ac3      	subs	r3, r0, r3
 8008266:	0c12      	lsrs	r2, r2, #16
 8008268:	fa13 f38c 	uxtah	r3, r3, ip
 800826c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008274:	b29b      	uxth	r3, r3
 8008276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827a:	45c1      	cmp	r9, r8
 800827c:	f841 3b04 	str.w	r3, [r1], #4
 8008280:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008284:	d2e9      	bcs.n	800825a <quorem+0xac>
 8008286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800828a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800828e:	b922      	cbnz	r2, 800829a <quorem+0xec>
 8008290:	3b04      	subs	r3, #4
 8008292:	429d      	cmp	r5, r3
 8008294:	461a      	mov	r2, r3
 8008296:	d30a      	bcc.n	80082ae <quorem+0x100>
 8008298:	613c      	str	r4, [r7, #16]
 800829a:	4630      	mov	r0, r6
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a2:	6812      	ldr	r2, [r2, #0]
 80082a4:	3b04      	subs	r3, #4
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	d1ce      	bne.n	8008248 <quorem+0x9a>
 80082aa:	3c01      	subs	r4, #1
 80082ac:	e7c9      	b.n	8008242 <quorem+0x94>
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	d1f0      	bne.n	8008298 <quorem+0xea>
 80082b6:	3c01      	subs	r4, #1
 80082b8:	e7eb      	b.n	8008292 <quorem+0xe4>
 80082ba:	2000      	movs	r0, #0
 80082bc:	e7ee      	b.n	800829c <quorem+0xee>
	...

080082c0 <_dtoa_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	ed2d 8b04 	vpush	{d8-d9}
 80082c8:	69c5      	ldr	r5, [r0, #28]
 80082ca:	b093      	sub	sp, #76	; 0x4c
 80082cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082d0:	ec57 6b10 	vmov	r6, r7, d0
 80082d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082d8:	9107      	str	r1, [sp, #28]
 80082da:	4604      	mov	r4, r0
 80082dc:	920a      	str	r2, [sp, #40]	; 0x28
 80082de:	930d      	str	r3, [sp, #52]	; 0x34
 80082e0:	b975      	cbnz	r5, 8008300 <_dtoa_r+0x40>
 80082e2:	2010      	movs	r0, #16
 80082e4:	f000 fe2a 	bl	8008f3c <malloc>
 80082e8:	4602      	mov	r2, r0
 80082ea:	61e0      	str	r0, [r4, #28]
 80082ec:	b920      	cbnz	r0, 80082f8 <_dtoa_r+0x38>
 80082ee:	4bae      	ldr	r3, [pc, #696]	; (80085a8 <_dtoa_r+0x2e8>)
 80082f0:	21ef      	movs	r1, #239	; 0xef
 80082f2:	48ae      	ldr	r0, [pc, #696]	; (80085ac <_dtoa_r+0x2ec>)
 80082f4:	f001 fb10 	bl	8009918 <__assert_func>
 80082f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082fc:	6005      	str	r5, [r0, #0]
 80082fe:	60c5      	str	r5, [r0, #12]
 8008300:	69e3      	ldr	r3, [r4, #28]
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	b151      	cbz	r1, 800831c <_dtoa_r+0x5c>
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	604a      	str	r2, [r1, #4]
 800830a:	2301      	movs	r3, #1
 800830c:	4093      	lsls	r3, r2
 800830e:	608b      	str	r3, [r1, #8]
 8008310:	4620      	mov	r0, r4
 8008312:	f000 ff07 	bl	8009124 <_Bfree>
 8008316:	69e3      	ldr	r3, [r4, #28]
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	1e3b      	subs	r3, r7, #0
 800831e:	bfbb      	ittet	lt
 8008320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008324:	9303      	strlt	r3, [sp, #12]
 8008326:	2300      	movge	r3, #0
 8008328:	2201      	movlt	r2, #1
 800832a:	bfac      	ite	ge
 800832c:	f8c8 3000 	strge.w	r3, [r8]
 8008330:	f8c8 2000 	strlt.w	r2, [r8]
 8008334:	4b9e      	ldr	r3, [pc, #632]	; (80085b0 <_dtoa_r+0x2f0>)
 8008336:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800833a:	ea33 0308 	bics.w	r3, r3, r8
 800833e:	d11b      	bne.n	8008378 <_dtoa_r+0xb8>
 8008340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008342:	f242 730f 	movw	r3, #9999	; 0x270f
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800834c:	4333      	orrs	r3, r6
 800834e:	f000 8593 	beq.w	8008e78 <_dtoa_r+0xbb8>
 8008352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008354:	b963      	cbnz	r3, 8008370 <_dtoa_r+0xb0>
 8008356:	4b97      	ldr	r3, [pc, #604]	; (80085b4 <_dtoa_r+0x2f4>)
 8008358:	e027      	b.n	80083aa <_dtoa_r+0xea>
 800835a:	4b97      	ldr	r3, [pc, #604]	; (80085b8 <_dtoa_r+0x2f8>)
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	9800      	ldr	r0, [sp, #0]
 8008366:	b013      	add	sp, #76	; 0x4c
 8008368:	ecbd 8b04 	vpop	{d8-d9}
 800836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008370:	4b90      	ldr	r3, [pc, #576]	; (80085b4 <_dtoa_r+0x2f4>)
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	3303      	adds	r3, #3
 8008376:	e7f3      	b.n	8008360 <_dtoa_r+0xa0>
 8008378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	ec51 0b17 	vmov	r0, r1, d7
 8008382:	eeb0 8a47 	vmov.f32	s16, s14
 8008386:	eef0 8a67 	vmov.f32	s17, s15
 800838a:	2300      	movs	r3, #0
 800838c:	f7f8 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008390:	4681      	mov	r9, r0
 8008392:	b160      	cbz	r0, 80083ae <_dtoa_r+0xee>
 8008394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008396:	2301      	movs	r3, #1
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8568 	beq.w	8008e72 <_dtoa_r+0xbb2>
 80083a2:	4b86      	ldr	r3, [pc, #536]	; (80085bc <_dtoa_r+0x2fc>)
 80083a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	e7da      	b.n	8008364 <_dtoa_r+0xa4>
 80083ae:	aa10      	add	r2, sp, #64	; 0x40
 80083b0:	a911      	add	r1, sp, #68	; 0x44
 80083b2:	4620      	mov	r0, r4
 80083b4:	eeb0 0a48 	vmov.f32	s0, s16
 80083b8:	eef0 0a68 	vmov.f32	s1, s17
 80083bc:	f001 f994 	bl	80096e8 <__d2b>
 80083c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083c4:	4682      	mov	sl, r0
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	d07f      	beq.n	80084ca <_dtoa_r+0x20a>
 80083ca:	ee18 3a90 	vmov	r3, s17
 80083ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80083d6:	ec51 0b18 	vmov	r0, r1, d8
 80083da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80083e6:	4619      	mov	r1, r3
 80083e8:	2200      	movs	r2, #0
 80083ea:	4b75      	ldr	r3, [pc, #468]	; (80085c0 <_dtoa_r+0x300>)
 80083ec:	f7f7 ff4c 	bl	8000288 <__aeabi_dsub>
 80083f0:	a367      	add	r3, pc, #412	; (adr r3, 8008590 <_dtoa_r+0x2d0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	a367      	add	r3, pc, #412	; (adr r3, 8008598 <_dtoa_r+0x2d8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f7 ff44 	bl	800028c <__adddf3>
 8008404:	4606      	mov	r6, r0
 8008406:	4628      	mov	r0, r5
 8008408:	460f      	mov	r7, r1
 800840a:	f7f8 f88b 	bl	8000524 <__aeabi_i2d>
 800840e:	a364      	add	r3, pc, #400	; (adr r3, 80085a0 <_dtoa_r+0x2e0>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f7 ff34 	bl	800028c <__adddf3>
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f7f8 fb96 	bl	8000b58 <__aeabi_d2iz>
 800842c:	2200      	movs	r2, #0
 800842e:	4683      	mov	fp, r0
 8008430:	2300      	movs	r3, #0
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 fb51 	bl	8000adc <__aeabi_dcmplt>
 800843a:	b148      	cbz	r0, 8008450 <_dtoa_r+0x190>
 800843c:	4658      	mov	r0, fp
 800843e:	f7f8 f871 	bl	8000524 <__aeabi_i2d>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7f8 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800844a:	b908      	cbnz	r0, 8008450 <_dtoa_r+0x190>
 800844c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008450:	f1bb 0f16 	cmp.w	fp, #22
 8008454:	d857      	bhi.n	8008506 <_dtoa_r+0x246>
 8008456:	4b5b      	ldr	r3, [pc, #364]	; (80085c4 <_dtoa_r+0x304>)
 8008458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	ec51 0b18 	vmov	r0, r1, d8
 8008464:	f7f8 fb3a 	bl	8000adc <__aeabi_dcmplt>
 8008468:	2800      	cmp	r0, #0
 800846a:	d04e      	beq.n	800850a <_dtoa_r+0x24a>
 800846c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008470:	2300      	movs	r3, #0
 8008472:	930c      	str	r3, [sp, #48]	; 0x30
 8008474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008476:	1b5b      	subs	r3, r3, r5
 8008478:	1e5a      	subs	r2, r3, #1
 800847a:	bf45      	ittet	mi
 800847c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008480:	9305      	strmi	r3, [sp, #20]
 8008482:	2300      	movpl	r3, #0
 8008484:	2300      	movmi	r3, #0
 8008486:	9206      	str	r2, [sp, #24]
 8008488:	bf54      	ite	pl
 800848a:	9305      	strpl	r3, [sp, #20]
 800848c:	9306      	strmi	r3, [sp, #24]
 800848e:	f1bb 0f00 	cmp.w	fp, #0
 8008492:	db3c      	blt.n	800850e <_dtoa_r+0x24e>
 8008494:	9b06      	ldr	r3, [sp, #24]
 8008496:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800849a:	445b      	add	r3, fp
 800849c:	9306      	str	r3, [sp, #24]
 800849e:	2300      	movs	r3, #0
 80084a0:	9308      	str	r3, [sp, #32]
 80084a2:	9b07      	ldr	r3, [sp, #28]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d868      	bhi.n	800857a <_dtoa_r+0x2ba>
 80084a8:	2b05      	cmp	r3, #5
 80084aa:	bfc4      	itt	gt
 80084ac:	3b04      	subgt	r3, #4
 80084ae:	9307      	strgt	r3, [sp, #28]
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	f1a3 0302 	sub.w	r3, r3, #2
 80084b6:	bfcc      	ite	gt
 80084b8:	2500      	movgt	r5, #0
 80084ba:	2501      	movle	r5, #1
 80084bc:	2b03      	cmp	r3, #3
 80084be:	f200 8085 	bhi.w	80085cc <_dtoa_r+0x30c>
 80084c2:	e8df f003 	tbb	[pc, r3]
 80084c6:	3b2e      	.short	0x3b2e
 80084c8:	5839      	.short	0x5839
 80084ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084ce:	441d      	add	r5, r3
 80084d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	bfc1      	itttt	gt
 80084d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80084e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80084e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80084e8:	bfd6      	itet	le
 80084ea:	f1c3 0320 	rsble	r3, r3, #32
 80084ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80084f2:	fa06 f003 	lslle.w	r0, r6, r3
 80084f6:	f7f8 f805 	bl	8000504 <__aeabi_ui2d>
 80084fa:	2201      	movs	r2, #1
 80084fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008500:	3d01      	subs	r5, #1
 8008502:	920e      	str	r2, [sp, #56]	; 0x38
 8008504:	e76f      	b.n	80083e6 <_dtoa_r+0x126>
 8008506:	2301      	movs	r3, #1
 8008508:	e7b3      	b.n	8008472 <_dtoa_r+0x1b2>
 800850a:	900c      	str	r0, [sp, #48]	; 0x30
 800850c:	e7b2      	b.n	8008474 <_dtoa_r+0x1b4>
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	eba3 030b 	sub.w	r3, r3, fp
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	f1cb 0300 	rsb	r3, fp, #0
 800851a:	9308      	str	r3, [sp, #32]
 800851c:	2300      	movs	r3, #0
 800851e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008520:	e7bf      	b.n	80084a2 <_dtoa_r+0x1e2>
 8008522:	2300      	movs	r3, #0
 8008524:	9309      	str	r3, [sp, #36]	; 0x24
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc52      	bgt.n	80085d2 <_dtoa_r+0x312>
 800852c:	2301      	movs	r3, #1
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	461a      	mov	r2, r3
 8008534:	920a      	str	r2, [sp, #40]	; 0x28
 8008536:	e00b      	b.n	8008550 <_dtoa_r+0x290>
 8008538:	2301      	movs	r3, #1
 800853a:	e7f3      	b.n	8008524 <_dtoa_r+0x264>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008542:	445b      	add	r3, fp
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	3301      	adds	r3, #1
 8008548:	2b01      	cmp	r3, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	bfb8      	it	lt
 800854e:	2301      	movlt	r3, #1
 8008550:	69e0      	ldr	r0, [r4, #28]
 8008552:	2100      	movs	r1, #0
 8008554:	2204      	movs	r2, #4
 8008556:	f102 0614 	add.w	r6, r2, #20
 800855a:	429e      	cmp	r6, r3
 800855c:	d93d      	bls.n	80085da <_dtoa_r+0x31a>
 800855e:	6041      	str	r1, [r0, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fd9f 	bl	80090a4 <_Balloc>
 8008566:	9000      	str	r0, [sp, #0]
 8008568:	2800      	cmp	r0, #0
 800856a:	d139      	bne.n	80085e0 <_dtoa_r+0x320>
 800856c:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <_dtoa_r+0x308>)
 800856e:	4602      	mov	r2, r0
 8008570:	f240 11af 	movw	r1, #431	; 0x1af
 8008574:	e6bd      	b.n	80082f2 <_dtoa_r+0x32>
 8008576:	2301      	movs	r3, #1
 8008578:	e7e1      	b.n	800853e <_dtoa_r+0x27e>
 800857a:	2501      	movs	r5, #1
 800857c:	2300      	movs	r3, #0
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	9509      	str	r5, [sp, #36]	; 0x24
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	2200      	movs	r2, #0
 800858c:	2312      	movs	r3, #18
 800858e:	e7d1      	b.n	8008534 <_dtoa_r+0x274>
 8008590:	636f4361 	.word	0x636f4361
 8008594:	3fd287a7 	.word	0x3fd287a7
 8008598:	8b60c8b3 	.word	0x8b60c8b3
 800859c:	3fc68a28 	.word	0x3fc68a28
 80085a0:	509f79fb 	.word	0x509f79fb
 80085a4:	3fd34413 	.word	0x3fd34413
 80085a8:	0800a719 	.word	0x0800a719
 80085ac:	0800a730 	.word	0x0800a730
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800a715 	.word	0x0800a715
 80085b8:	0800a70c 	.word	0x0800a70c
 80085bc:	0800a6e9 	.word	0x0800a6e9
 80085c0:	3ff80000 	.word	0x3ff80000
 80085c4:	0800a820 	.word	0x0800a820
 80085c8:	0800a788 	.word	0x0800a788
 80085cc:	2301      	movs	r3, #1
 80085ce:	9309      	str	r3, [sp, #36]	; 0x24
 80085d0:	e7d7      	b.n	8008582 <_dtoa_r+0x2c2>
 80085d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	e7ba      	b.n	8008550 <_dtoa_r+0x290>
 80085da:	3101      	adds	r1, #1
 80085dc:	0052      	lsls	r2, r2, #1
 80085de:	e7ba      	b.n	8008556 <_dtoa_r+0x296>
 80085e0:	69e3      	ldr	r3, [r4, #28]
 80085e2:	9a00      	ldr	r2, [sp, #0]
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	2b0e      	cmp	r3, #14
 80085ea:	f200 80a8 	bhi.w	800873e <_dtoa_r+0x47e>
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	f000 80a5 	beq.w	800873e <_dtoa_r+0x47e>
 80085f4:	f1bb 0f00 	cmp.w	fp, #0
 80085f8:	dd38      	ble.n	800866c <_dtoa_r+0x3ac>
 80085fa:	4bc0      	ldr	r3, [pc, #768]	; (80088fc <_dtoa_r+0x63c>)
 80085fc:	f00b 020f 	and.w	r2, fp, #15
 8008600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008604:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008608:	e9d3 6700 	ldrd	r6, r7, [r3]
 800860c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008610:	d019      	beq.n	8008646 <_dtoa_r+0x386>
 8008612:	4bbb      	ldr	r3, [pc, #748]	; (8008900 <_dtoa_r+0x640>)
 8008614:	ec51 0b18 	vmov	r0, r1, d8
 8008618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800861c:	f7f8 f916 	bl	800084c <__aeabi_ddiv>
 8008620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008624:	f008 080f 	and.w	r8, r8, #15
 8008628:	2503      	movs	r5, #3
 800862a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008900 <_dtoa_r+0x640>
 800862e:	f1b8 0f00 	cmp.w	r8, #0
 8008632:	d10a      	bne.n	800864a <_dtoa_r+0x38a>
 8008634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008638:	4632      	mov	r2, r6
 800863a:	463b      	mov	r3, r7
 800863c:	f7f8 f906 	bl	800084c <__aeabi_ddiv>
 8008640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008644:	e02b      	b.n	800869e <_dtoa_r+0x3de>
 8008646:	2502      	movs	r5, #2
 8008648:	e7ef      	b.n	800862a <_dtoa_r+0x36a>
 800864a:	f018 0f01 	tst.w	r8, #1
 800864e:	d008      	beq.n	8008662 <_dtoa_r+0x3a2>
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	3501      	adds	r5, #1
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008666:	f109 0908 	add.w	r9, r9, #8
 800866a:	e7e0      	b.n	800862e <_dtoa_r+0x36e>
 800866c:	f000 809f 	beq.w	80087ae <_dtoa_r+0x4ee>
 8008670:	f1cb 0600 	rsb	r6, fp, #0
 8008674:	4ba1      	ldr	r3, [pc, #644]	; (80088fc <_dtoa_r+0x63c>)
 8008676:	4fa2      	ldr	r7, [pc, #648]	; (8008900 <_dtoa_r+0x640>)
 8008678:	f006 020f 	and.w	r2, r6, #15
 800867c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	ec51 0b18 	vmov	r0, r1, d8
 8008688:	f7f7 ffb6 	bl	80005f8 <__aeabi_dmul>
 800868c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008690:	1136      	asrs	r6, r6, #4
 8008692:	2300      	movs	r3, #0
 8008694:	2502      	movs	r5, #2
 8008696:	2e00      	cmp	r6, #0
 8008698:	d17e      	bne.n	8008798 <_dtoa_r+0x4d8>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1d0      	bne.n	8008640 <_dtoa_r+0x380>
 800869e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8084 	beq.w	80087b2 <_dtoa_r+0x4f2>
 80086aa:	4b96      	ldr	r3, [pc, #600]	; (8008904 <_dtoa_r+0x644>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f8 fa13 	bl	8000adc <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d07b      	beq.n	80087b2 <_dtoa_r+0x4f2>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d078      	beq.n	80087b2 <_dtoa_r+0x4f2>
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd39      	ble.n	800873a <_dtoa_r+0x47a>
 80086c6:	4b90      	ldr	r3, [pc, #576]	; (8008908 <_dtoa_r+0x648>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f7 ff93 	bl	80005f8 <__aeabi_dmul>
 80086d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d6:	9e01      	ldr	r6, [sp, #4]
 80086d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80086dc:	3501      	adds	r5, #1
 80086de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7f7 ff1e 	bl	8000524 <__aeabi_i2d>
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	f7f7 ff84 	bl	80005f8 <__aeabi_dmul>
 80086f0:	4b86      	ldr	r3, [pc, #536]	; (800890c <_dtoa_r+0x64c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7f7 fdca 	bl	800028c <__adddf3>
 80086f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	2e00      	cmp	r6, #0
 8008704:	d158      	bne.n	80087b8 <_dtoa_r+0x4f8>
 8008706:	4b82      	ldr	r3, [pc, #520]	; (8008910 <_dtoa_r+0x650>)
 8008708:	2200      	movs	r2, #0
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	f7f7 fdbb 	bl	8000288 <__aeabi_dsub>
 8008712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	f7f8 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800871e:	2800      	cmp	r0, #0
 8008720:	f040 8296 	bne.w	8008c50 <_dtoa_r+0x990>
 8008724:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008728:	4640      	mov	r0, r8
 800872a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800872e:	4649      	mov	r1, r9
 8008730:	f7f8 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8008734:	2800      	cmp	r0, #0
 8008736:	f040 8289 	bne.w	8008c4c <_dtoa_r+0x98c>
 800873a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800873e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008740:	2b00      	cmp	r3, #0
 8008742:	f2c0 814e 	blt.w	80089e2 <_dtoa_r+0x722>
 8008746:	f1bb 0f0e 	cmp.w	fp, #14
 800874a:	f300 814a 	bgt.w	80089e2 <_dtoa_r+0x722>
 800874e:	4b6b      	ldr	r3, [pc, #428]	; (80088fc <_dtoa_r+0x63c>)
 8008750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875a:	2b00      	cmp	r3, #0
 800875c:	f280 80dc 	bge.w	8008918 <_dtoa_r+0x658>
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f300 80d8 	bgt.w	8008918 <_dtoa_r+0x658>
 8008768:	f040 826f 	bne.w	8008c4a <_dtoa_r+0x98a>
 800876c:	4b68      	ldr	r3, [pc, #416]	; (8008910 <_dtoa_r+0x650>)
 800876e:	2200      	movs	r2, #0
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800877c:	f7f8 f9c2 	bl	8000b04 <__aeabi_dcmpge>
 8008780:	9e04      	ldr	r6, [sp, #16]
 8008782:	4637      	mov	r7, r6
 8008784:	2800      	cmp	r0, #0
 8008786:	f040 8245 	bne.w	8008c14 <_dtoa_r+0x954>
 800878a:	9d00      	ldr	r5, [sp, #0]
 800878c:	2331      	movs	r3, #49	; 0x31
 800878e:	f805 3b01 	strb.w	r3, [r5], #1
 8008792:	f10b 0b01 	add.w	fp, fp, #1
 8008796:	e241      	b.n	8008c1c <_dtoa_r+0x95c>
 8008798:	07f2      	lsls	r2, r6, #31
 800879a:	d505      	bpl.n	80087a8 <_dtoa_r+0x4e8>
 800879c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	3501      	adds	r5, #1
 80087a6:	2301      	movs	r3, #1
 80087a8:	1076      	asrs	r6, r6, #1
 80087aa:	3708      	adds	r7, #8
 80087ac:	e773      	b.n	8008696 <_dtoa_r+0x3d6>
 80087ae:	2502      	movs	r5, #2
 80087b0:	e775      	b.n	800869e <_dtoa_r+0x3de>
 80087b2:	9e04      	ldr	r6, [sp, #16]
 80087b4:	465f      	mov	r7, fp
 80087b6:	e792      	b.n	80086de <_dtoa_r+0x41e>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	4b50      	ldr	r3, [pc, #320]	; (80088fc <_dtoa_r+0x63c>)
 80087bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087c0:	4431      	add	r1, r6
 80087c2:	9102      	str	r1, [sp, #8]
 80087c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c6:	eeb0 9a47 	vmov.f32	s18, s14
 80087ca:	eef0 9a67 	vmov.f32	s19, s15
 80087ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087d6:	2900      	cmp	r1, #0
 80087d8:	d044      	beq.n	8008864 <_dtoa_r+0x5a4>
 80087da:	494e      	ldr	r1, [pc, #312]	; (8008914 <_dtoa_r+0x654>)
 80087dc:	2000      	movs	r0, #0
 80087de:	f7f8 f835 	bl	800084c <__aeabi_ddiv>
 80087e2:	ec53 2b19 	vmov	r2, r3, d9
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	9d00      	ldr	r5, [sp, #0]
 80087ec:	ec41 0b19 	vmov	d9, r0, r1
 80087f0:	4649      	mov	r1, r9
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7f8 f9b0 	bl	8000b58 <__aeabi_d2iz>
 80087f8:	4606      	mov	r6, r0
 80087fa:	f7f7 fe93 	bl	8000524 <__aeabi_i2d>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4640      	mov	r0, r8
 8008804:	4649      	mov	r1, r9
 8008806:	f7f7 fd3f 	bl	8000288 <__aeabi_dsub>
 800880a:	3630      	adds	r6, #48	; 0x30
 800880c:	f805 6b01 	strb.w	r6, [r5], #1
 8008810:	ec53 2b19 	vmov	r2, r3, d9
 8008814:	4680      	mov	r8, r0
 8008816:	4689      	mov	r9, r1
 8008818:	f7f8 f960 	bl	8000adc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	d164      	bne.n	80088ea <_dtoa_r+0x62a>
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	4937      	ldr	r1, [pc, #220]	; (8008904 <_dtoa_r+0x644>)
 8008826:	2000      	movs	r0, #0
 8008828:	f7f7 fd2e 	bl	8000288 <__aeabi_dsub>
 800882c:	ec53 2b19 	vmov	r2, r3, d9
 8008830:	f7f8 f954 	bl	8000adc <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	f040 80b6 	bne.w	80089a6 <_dtoa_r+0x6e6>
 800883a:	9b02      	ldr	r3, [sp, #8]
 800883c:	429d      	cmp	r5, r3
 800883e:	f43f af7c 	beq.w	800873a <_dtoa_r+0x47a>
 8008842:	4b31      	ldr	r3, [pc, #196]	; (8008908 <_dtoa_r+0x648>)
 8008844:	ec51 0b19 	vmov	r0, r1, d9
 8008848:	2200      	movs	r2, #0
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	4b2e      	ldr	r3, [pc, #184]	; (8008908 <_dtoa_r+0x648>)
 8008850:	ec41 0b19 	vmov	d9, r0, r1
 8008854:	2200      	movs	r2, #0
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fecd 	bl	80005f8 <__aeabi_dmul>
 800885e:	4680      	mov	r8, r0
 8008860:	4689      	mov	r9, r1
 8008862:	e7c5      	b.n	80087f0 <_dtoa_r+0x530>
 8008864:	ec51 0b17 	vmov	r0, r1, d7
 8008868:	f7f7 fec6 	bl	80005f8 <__aeabi_dmul>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	9d00      	ldr	r5, [sp, #0]
 8008870:	930f      	str	r3, [sp, #60]	; 0x3c
 8008872:	ec41 0b19 	vmov	d9, r0, r1
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	f7f8 f96d 	bl	8000b58 <__aeabi_d2iz>
 800887e:	4606      	mov	r6, r0
 8008880:	f7f7 fe50 	bl	8000524 <__aeabi_i2d>
 8008884:	3630      	adds	r6, #48	; 0x30
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f7 fcfb 	bl	8000288 <__aeabi_dsub>
 8008892:	f805 6b01 	strb.w	r6, [r5], #1
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	429d      	cmp	r5, r3
 800889a:	4680      	mov	r8, r0
 800889c:	4689      	mov	r9, r1
 800889e:	f04f 0200 	mov.w	r2, #0
 80088a2:	d124      	bne.n	80088ee <_dtoa_r+0x62e>
 80088a4:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <_dtoa_r+0x654>)
 80088a6:	ec51 0b19 	vmov	r0, r1, d9
 80088aa:	f7f7 fcef 	bl	800028c <__adddf3>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4640      	mov	r0, r8
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f8 f92f 	bl	8000b18 <__aeabi_dcmpgt>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d173      	bne.n	80089a6 <_dtoa_r+0x6e6>
 80088be:	ec53 2b19 	vmov	r2, r3, d9
 80088c2:	4914      	ldr	r1, [pc, #80]	; (8008914 <_dtoa_r+0x654>)
 80088c4:	2000      	movs	r0, #0
 80088c6:	f7f7 fcdf 	bl	8000288 <__aeabi_dsub>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f8 f903 	bl	8000adc <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f af2f 	beq.w	800873a <_dtoa_r+0x47a>
 80088dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088de:	1e6b      	subs	r3, r5, #1
 80088e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088e6:	2b30      	cmp	r3, #48	; 0x30
 80088e8:	d0f8      	beq.n	80088dc <_dtoa_r+0x61c>
 80088ea:	46bb      	mov	fp, r7
 80088ec:	e04a      	b.n	8008984 <_dtoa_r+0x6c4>
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <_dtoa_r+0x648>)
 80088f0:	f7f7 fe82 	bl	80005f8 <__aeabi_dmul>
 80088f4:	4680      	mov	r8, r0
 80088f6:	4689      	mov	r9, r1
 80088f8:	e7bd      	b.n	8008876 <_dtoa_r+0x5b6>
 80088fa:	bf00      	nop
 80088fc:	0800a820 	.word	0x0800a820
 8008900:	0800a7f8 	.word	0x0800a7f8
 8008904:	3ff00000 	.word	0x3ff00000
 8008908:	40240000 	.word	0x40240000
 800890c:	401c0000 	.word	0x401c0000
 8008910:	40140000 	.word	0x40140000
 8008914:	3fe00000 	.word	0x3fe00000
 8008918:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800891c:	9d00      	ldr	r5, [sp, #0]
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	4630      	mov	r0, r6
 8008924:	4639      	mov	r1, r7
 8008926:	f7f7 ff91 	bl	800084c <__aeabi_ddiv>
 800892a:	f7f8 f915 	bl	8000b58 <__aeabi_d2iz>
 800892e:	9001      	str	r0, [sp, #4]
 8008930:	f7f7 fdf8 	bl	8000524 <__aeabi_i2d>
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	f7f7 fe5e 	bl	80005f8 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fca0 	bl	8000288 <__aeabi_dsub>
 8008948:	9e01      	ldr	r6, [sp, #4]
 800894a:	9f04      	ldr	r7, [sp, #16]
 800894c:	3630      	adds	r6, #48	; 0x30
 800894e:	f805 6b01 	strb.w	r6, [r5], #1
 8008952:	9e00      	ldr	r6, [sp, #0]
 8008954:	1bae      	subs	r6, r5, r6
 8008956:	42b7      	cmp	r7, r6
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	d134      	bne.n	80089c8 <_dtoa_r+0x708>
 800895e:	f7f7 fc95 	bl	800028c <__adddf3>
 8008962:	4642      	mov	r2, r8
 8008964:	464b      	mov	r3, r9
 8008966:	4606      	mov	r6, r0
 8008968:	460f      	mov	r7, r1
 800896a:	f7f8 f8d5 	bl	8000b18 <__aeabi_dcmpgt>
 800896e:	b9c8      	cbnz	r0, 80089a4 <_dtoa_r+0x6e4>
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800897c:	b110      	cbz	r0, 8008984 <_dtoa_r+0x6c4>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	07db      	lsls	r3, r3, #31
 8008982:	d40f      	bmi.n	80089a4 <_dtoa_r+0x6e4>
 8008984:	4651      	mov	r1, sl
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fbcc 	bl	8009124 <_Bfree>
 800898c:	2300      	movs	r3, #0
 800898e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008990:	702b      	strb	r3, [r5, #0]
 8008992:	f10b 0301 	add.w	r3, fp, #1
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800899a:	2b00      	cmp	r3, #0
 800899c:	f43f ace2 	beq.w	8008364 <_dtoa_r+0xa4>
 80089a0:	601d      	str	r5, [r3, #0]
 80089a2:	e4df      	b.n	8008364 <_dtoa_r+0xa4>
 80089a4:	465f      	mov	r7, fp
 80089a6:	462b      	mov	r3, r5
 80089a8:	461d      	mov	r5, r3
 80089aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ae:	2a39      	cmp	r2, #57	; 0x39
 80089b0:	d106      	bne.n	80089c0 <_dtoa_r+0x700>
 80089b2:	9a00      	ldr	r2, [sp, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d1f7      	bne.n	80089a8 <_dtoa_r+0x6e8>
 80089b8:	9900      	ldr	r1, [sp, #0]
 80089ba:	2230      	movs	r2, #48	; 0x30
 80089bc:	3701      	adds	r7, #1
 80089be:	700a      	strb	r2, [r1, #0]
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	3201      	adds	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e790      	b.n	80088ea <_dtoa_r+0x62a>
 80089c8:	4ba3      	ldr	r3, [pc, #652]	; (8008c58 <_dtoa_r+0x998>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	2200      	movs	r2, #0
 80089d2:	2300      	movs	r3, #0
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	f7f8 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d09e      	beq.n	800891e <_dtoa_r+0x65e>
 80089e0:	e7d0      	b.n	8008984 <_dtoa_r+0x6c4>
 80089e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	f000 80ca 	beq.w	8008b7e <_dtoa_r+0x8be>
 80089ea:	9a07      	ldr	r2, [sp, #28]
 80089ec:	2a01      	cmp	r2, #1
 80089ee:	f300 80ad 	bgt.w	8008b4c <_dtoa_r+0x88c>
 80089f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	f000 80a5 	beq.w	8008b44 <_dtoa_r+0x884>
 80089fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089fe:	9e08      	ldr	r6, [sp, #32]
 8008a00:	9d05      	ldr	r5, [sp, #20]
 8008a02:	9a05      	ldr	r2, [sp, #20]
 8008a04:	441a      	add	r2, r3
 8008a06:	9205      	str	r2, [sp, #20]
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	441a      	add	r2, r3
 8008a0e:	4620      	mov	r0, r4
 8008a10:	9206      	str	r2, [sp, #24]
 8008a12:	f000 fc3d 	bl	8009290 <__i2b>
 8008a16:	4607      	mov	r7, r0
 8008a18:	b165      	cbz	r5, 8008a34 <_dtoa_r+0x774>
 8008a1a:	9b06      	ldr	r3, [sp, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd09      	ble.n	8008a34 <_dtoa_r+0x774>
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	9a05      	ldr	r2, [sp, #20]
 8008a24:	bfa8      	it	ge
 8008a26:	462b      	movge	r3, r5
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	9205      	str	r2, [sp, #20]
 8008a2c:	9a06      	ldr	r2, [sp, #24]
 8008a2e:	1aed      	subs	r5, r5, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	9306      	str	r3, [sp, #24]
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	b1f3      	cbz	r3, 8008a76 <_dtoa_r+0x7b6>
 8008a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80a3 	beq.w	8008b86 <_dtoa_r+0x8c6>
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	dd10      	ble.n	8008a66 <_dtoa_r+0x7a6>
 8008a44:	4639      	mov	r1, r7
 8008a46:	4632      	mov	r2, r6
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fce1 	bl	8009410 <__pow5mult>
 8008a4e:	4652      	mov	r2, sl
 8008a50:	4601      	mov	r1, r0
 8008a52:	4607      	mov	r7, r0
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fc31 	bl	80092bc <__multiply>
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fb60 	bl	8009124 <_Bfree>
 8008a64:	46c2      	mov	sl, r8
 8008a66:	9b08      	ldr	r3, [sp, #32]
 8008a68:	1b9a      	subs	r2, r3, r6
 8008a6a:	d004      	beq.n	8008a76 <_dtoa_r+0x7b6>
 8008a6c:	4651      	mov	r1, sl
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fcce 	bl	8009410 <__pow5mult>
 8008a74:	4682      	mov	sl, r0
 8008a76:	2101      	movs	r1, #1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fc09 	bl	8009290 <__i2b>
 8008a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	4606      	mov	r6, r0
 8008a84:	f340 8081 	ble.w	8008b8a <_dtoa_r+0x8ca>
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 fcbf 	bl	8009410 <__pow5mult>
 8008a92:	9b07      	ldr	r3, [sp, #28]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	4606      	mov	r6, r0
 8008a98:	dd7a      	ble.n	8008b90 <_dtoa_r+0x8d0>
 8008a9a:	f04f 0800 	mov.w	r8, #0
 8008a9e:	6933      	ldr	r3, [r6, #16]
 8008aa0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa4:	6918      	ldr	r0, [r3, #16]
 8008aa6:	f000 fba5 	bl	80091f4 <__hi0bits>
 8008aaa:	f1c0 0020 	rsb	r0, r0, #32
 8008aae:	9b06      	ldr	r3, [sp, #24]
 8008ab0:	4418      	add	r0, r3
 8008ab2:	f010 001f 	ands.w	r0, r0, #31
 8008ab6:	f000 8094 	beq.w	8008be2 <_dtoa_r+0x922>
 8008aba:	f1c0 0320 	rsb	r3, r0, #32
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	f340 8085 	ble.w	8008bce <_dtoa_r+0x90e>
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	f1c0 001c 	rsb	r0, r0, #28
 8008aca:	4403      	add	r3, r0
 8008acc:	9305      	str	r3, [sp, #20]
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	4403      	add	r3, r0
 8008ad2:	4405      	add	r5, r0
 8008ad4:	9306      	str	r3, [sp, #24]
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dd05      	ble.n	8008ae8 <_dtoa_r+0x828>
 8008adc:	4651      	mov	r1, sl
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fcef 	bl	80094c4 <__lshift>
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	9b06      	ldr	r3, [sp, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x83a>
 8008aee:	4631      	mov	r1, r6
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fce6 	bl	80094c4 <__lshift>
 8008af8:	4606      	mov	r6, r0
 8008afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d072      	beq.n	8008be6 <_dtoa_r+0x926>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4650      	mov	r0, sl
 8008b04:	f000 fd4a 	bl	800959c <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	da6c      	bge.n	8008be6 <_dtoa_r+0x926>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4651      	mov	r1, sl
 8008b10:	220a      	movs	r2, #10
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fb28 	bl	8009168 <__multadd>
 8008b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b1e:	4682      	mov	sl, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81b0 	beq.w	8008e86 <_dtoa_r+0xbc6>
 8008b26:	2300      	movs	r3, #0
 8008b28:	4639      	mov	r1, r7
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fb1b 	bl	8009168 <__multadd>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	4607      	mov	r7, r0
 8008b38:	f300 8096 	bgt.w	8008c68 <_dtoa_r+0x9a8>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc59      	bgt.n	8008bf6 <_dtoa_r+0x936>
 8008b42:	e091      	b.n	8008c68 <_dtoa_r+0x9a8>
 8008b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b4a:	e758      	b.n	80089fe <_dtoa_r+0x73e>
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	1e5e      	subs	r6, r3, #1
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	bfbf      	itttt	lt
 8008b56:	9b08      	ldrlt	r3, [sp, #32]
 8008b58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008b5a:	9608      	strlt	r6, [sp, #32]
 8008b5c:	1af3      	sublt	r3, r6, r3
 8008b5e:	bfb4      	ite	lt
 8008b60:	18d2      	addlt	r2, r2, r3
 8008b62:	1b9e      	subge	r6, r3, r6
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	bfbc      	itt	lt
 8008b68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008b6a:	2600      	movlt	r6, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb7      	itett	lt
 8008b70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b78:	1a9d      	sublt	r5, r3, r2
 8008b7a:	2300      	movlt	r3, #0
 8008b7c:	e741      	b.n	8008a02 <_dtoa_r+0x742>
 8008b7e:	9e08      	ldr	r6, [sp, #32]
 8008b80:	9d05      	ldr	r5, [sp, #20]
 8008b82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b84:	e748      	b.n	8008a18 <_dtoa_r+0x758>
 8008b86:	9a08      	ldr	r2, [sp, #32]
 8008b88:	e770      	b.n	8008a6c <_dtoa_r+0x7ac>
 8008b8a:	9b07      	ldr	r3, [sp, #28]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	dc19      	bgt.n	8008bc4 <_dtoa_r+0x904>
 8008b90:	9b02      	ldr	r3, [sp, #8]
 8008b92:	b9bb      	cbnz	r3, 8008bc4 <_dtoa_r+0x904>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b9a:	b99b      	cbnz	r3, 8008bc4 <_dtoa_r+0x904>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ba2:	0d1b      	lsrs	r3, r3, #20
 8008ba4:	051b      	lsls	r3, r3, #20
 8008ba6:	b183      	cbz	r3, 8008bca <_dtoa_r+0x90a>
 8008ba8:	9b05      	ldr	r3, [sp, #20]
 8008baa:	3301      	adds	r3, #1
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	9b06      	ldr	r3, [sp, #24]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	9306      	str	r3, [sp, #24]
 8008bb4:	f04f 0801 	mov.w	r8, #1
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f47f af6f 	bne.w	8008a9e <_dtoa_r+0x7de>
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e774      	b.n	8008aae <_dtoa_r+0x7ee>
 8008bc4:	f04f 0800 	mov.w	r8, #0
 8008bc8:	e7f6      	b.n	8008bb8 <_dtoa_r+0x8f8>
 8008bca:	4698      	mov	r8, r3
 8008bcc:	e7f4      	b.n	8008bb8 <_dtoa_r+0x8f8>
 8008bce:	d082      	beq.n	8008ad6 <_dtoa_r+0x816>
 8008bd0:	9a05      	ldr	r2, [sp, #20]
 8008bd2:	331c      	adds	r3, #28
 8008bd4:	441a      	add	r2, r3
 8008bd6:	9205      	str	r2, [sp, #20]
 8008bd8:	9a06      	ldr	r2, [sp, #24]
 8008bda:	441a      	add	r2, r3
 8008bdc:	441d      	add	r5, r3
 8008bde:	9206      	str	r2, [sp, #24]
 8008be0:	e779      	b.n	8008ad6 <_dtoa_r+0x816>
 8008be2:	4603      	mov	r3, r0
 8008be4:	e7f4      	b.n	8008bd0 <_dtoa_r+0x910>
 8008be6:	9b04      	ldr	r3, [sp, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc37      	bgt.n	8008c5c <_dtoa_r+0x99c>
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dd34      	ble.n	8008c5c <_dtoa_r+0x99c>
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	b963      	cbnz	r3, 8008c14 <_dtoa_r+0x954>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fab2 	bl	8009168 <__multadd>
 8008c04:	4601      	mov	r1, r0
 8008c06:	4606      	mov	r6, r0
 8008c08:	4650      	mov	r0, sl
 8008c0a:	f000 fcc7 	bl	800959c <__mcmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f73f adbb 	bgt.w	800878a <_dtoa_r+0x4ca>
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	9d00      	ldr	r5, [sp, #0]
 8008c18:	ea6f 0b03 	mvn.w	fp, r3
 8008c1c:	f04f 0800 	mov.w	r8, #0
 8008c20:	4631      	mov	r1, r6
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fa7e 	bl	8009124 <_Bfree>
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	f43f aeab 	beq.w	8008984 <_dtoa_r+0x6c4>
 8008c2e:	f1b8 0f00 	cmp.w	r8, #0
 8008c32:	d005      	beq.n	8008c40 <_dtoa_r+0x980>
 8008c34:	45b8      	cmp	r8, r7
 8008c36:	d003      	beq.n	8008c40 <_dtoa_r+0x980>
 8008c38:	4641      	mov	r1, r8
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fa72 	bl	8009124 <_Bfree>
 8008c40:	4639      	mov	r1, r7
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fa6e 	bl	8009124 <_Bfree>
 8008c48:	e69c      	b.n	8008984 <_dtoa_r+0x6c4>
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	4637      	mov	r7, r6
 8008c4e:	e7e1      	b.n	8008c14 <_dtoa_r+0x954>
 8008c50:	46bb      	mov	fp, r7
 8008c52:	4637      	mov	r7, r6
 8008c54:	e599      	b.n	800878a <_dtoa_r+0x4ca>
 8008c56:	bf00      	nop
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 80c8 	beq.w	8008df4 <_dtoa_r+0xb34>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	dd05      	ble.n	8008c78 <_dtoa_r+0x9b8>
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fc27 	bl	80094c4 <__lshift>
 8008c76:	4607      	mov	r7, r0
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	d05b      	beq.n	8008d36 <_dtoa_r+0xa76>
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fa0f 	bl	80090a4 <_Balloc>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <_dtoa_r+0x9d6>
 8008c8a:	4b83      	ldr	r3, [pc, #524]	; (8008e98 <_dtoa_r+0xbd8>)
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c92:	f7ff bb2e 	b.w	80082f2 <_dtoa_r+0x32>
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	0092      	lsls	r2, r2, #2
 8008c9c:	f107 010c 	add.w	r1, r7, #12
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f7ff fa76 	bl	8008192 <memcpy>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fc0a 	bl	80094c4 <__lshift>
 8008cb0:	9b00      	ldr	r3, [sp, #0]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cba:	4413      	add	r3, r2
 8008cbc:	9308      	str	r3, [sp, #32]
 8008cbe:	9b02      	ldr	r3, [sp, #8]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	46b8      	mov	r8, r7
 8008cc6:	9306      	str	r3, [sp, #24]
 8008cc8:	4607      	mov	r7, r0
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	4631      	mov	r1, r6
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	f7ff fa6b 	bl	80081ae <quorem>
 8008cd8:	4641      	mov	r1, r8
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	f000 fc5b 	bl	800959c <__mcmp>
 8008ce6:	463a      	mov	r2, r7
 8008ce8:	9005      	str	r0, [sp, #20]
 8008cea:	4631      	mov	r1, r6
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fc71 	bl	80095d4 <__mdiff>
 8008cf2:	68c2      	ldr	r2, [r0, #12]
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	bb02      	cbnz	r2, 8008d3a <_dtoa_r+0xa7a>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	f000 fc4e 	bl	800959c <__mcmp>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4629      	mov	r1, r5
 8008d04:	4620      	mov	r0, r4
 8008d06:	9209      	str	r2, [sp, #36]	; 0x24
 8008d08:	f000 fa0c 	bl	8009124 <_Bfree>
 8008d0c:	9b07      	ldr	r3, [sp, #28]
 8008d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d10:	9d04      	ldr	r5, [sp, #16]
 8008d12:	ea43 0102 	orr.w	r1, r3, r2
 8008d16:	9b06      	ldr	r3, [sp, #24]
 8008d18:	4319      	orrs	r1, r3
 8008d1a:	d110      	bne.n	8008d3e <_dtoa_r+0xa7e>
 8008d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d20:	d029      	beq.n	8008d76 <_dtoa_r+0xab6>
 8008d22:	9b05      	ldr	r3, [sp, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd02      	ble.n	8008d2e <_dtoa_r+0xa6e>
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	f883 9000 	strb.w	r9, [r3]
 8008d34:	e774      	b.n	8008c20 <_dtoa_r+0x960>
 8008d36:	4638      	mov	r0, r7
 8008d38:	e7ba      	b.n	8008cb0 <_dtoa_r+0x9f0>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	e7e1      	b.n	8008d02 <_dtoa_r+0xa42>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db04      	blt.n	8008d4e <_dtoa_r+0xa8e>
 8008d44:	9907      	ldr	r1, [sp, #28]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	9906      	ldr	r1, [sp, #24]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	d120      	bne.n	8008d90 <_dtoa_r+0xad0>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	dded      	ble.n	8008d2e <_dtoa_r+0xa6e>
 8008d52:	4651      	mov	r1, sl
 8008d54:	2201      	movs	r2, #1
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fbb4 	bl	80094c4 <__lshift>
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4682      	mov	sl, r0
 8008d60:	f000 fc1c 	bl	800959c <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	dc03      	bgt.n	8008d70 <_dtoa_r+0xab0>
 8008d68:	d1e1      	bne.n	8008d2e <_dtoa_r+0xa6e>
 8008d6a:	f019 0f01 	tst.w	r9, #1
 8008d6e:	d0de      	beq.n	8008d2e <_dtoa_r+0xa6e>
 8008d70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d74:	d1d8      	bne.n	8008d28 <_dtoa_r+0xa68>
 8008d76:	9a01      	ldr	r2, [sp, #4]
 8008d78:	2339      	movs	r3, #57	; 0x39
 8008d7a:	7013      	strb	r3, [r2, #0]
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	461d      	mov	r5, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d86:	2a39      	cmp	r2, #57	; 0x39
 8008d88:	d06c      	beq.n	8008e64 <_dtoa_r+0xba4>
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e747      	b.n	8008c20 <_dtoa_r+0x960>
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	dd07      	ble.n	8008da4 <_dtoa_r+0xae4>
 8008d94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d98:	d0ed      	beq.n	8008d76 <_dtoa_r+0xab6>
 8008d9a:	9a01      	ldr	r2, [sp, #4]
 8008d9c:	f109 0301 	add.w	r3, r9, #1
 8008da0:	7013      	strb	r3, [r2, #0]
 8008da2:	e73d      	b.n	8008c20 <_dtoa_r+0x960>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	9a08      	ldr	r2, [sp, #32]
 8008da8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d043      	beq.n	8008e38 <_dtoa_r+0xb78>
 8008db0:	4651      	mov	r1, sl
 8008db2:	2300      	movs	r3, #0
 8008db4:	220a      	movs	r2, #10
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f9d6 	bl	8009168 <__multadd>
 8008dbc:	45b8      	cmp	r8, r7
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	f04f 020a 	mov.w	r2, #10
 8008dc8:	4641      	mov	r1, r8
 8008dca:	4620      	mov	r0, r4
 8008dcc:	d107      	bne.n	8008dde <_dtoa_r+0xb1e>
 8008dce:	f000 f9cb 	bl	8009168 <__multadd>
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	e775      	b.n	8008cca <_dtoa_r+0xa0a>
 8008dde:	f000 f9c3 	bl	8009168 <__multadd>
 8008de2:	4639      	mov	r1, r7
 8008de4:	4680      	mov	r8, r0
 8008de6:	2300      	movs	r3, #0
 8008de8:	220a      	movs	r2, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f9bc 	bl	8009168 <__multadd>
 8008df0:	4607      	mov	r7, r0
 8008df2:	e7f0      	b.n	8008dd6 <_dtoa_r+0xb16>
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	9d00      	ldr	r5, [sp, #0]
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	f7ff f9d6 	bl	80081ae <quorem>
 8008e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e06:	9b00      	ldr	r3, [sp, #0]
 8008e08:	f805 9b01 	strb.w	r9, [r5], #1
 8008e0c:	1aea      	subs	r2, r5, r3
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	dd07      	ble.n	8008e24 <_dtoa_r+0xb64>
 8008e14:	4651      	mov	r1, sl
 8008e16:	2300      	movs	r3, #0
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 f9a4 	bl	8009168 <__multadd>
 8008e20:	4682      	mov	sl, r0
 8008e22:	e7ea      	b.n	8008dfa <_dtoa_r+0xb3a>
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfc8      	it	gt
 8008e2a:	461d      	movgt	r5, r3
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	bfd8      	it	le
 8008e30:	2501      	movle	r5, #1
 8008e32:	441d      	add	r5, r3
 8008e34:	f04f 0800 	mov.w	r8, #0
 8008e38:	4651      	mov	r1, sl
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 fb41 	bl	80094c4 <__lshift>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4682      	mov	sl, r0
 8008e46:	f000 fba9 	bl	800959c <__mcmp>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	dc96      	bgt.n	8008d7c <_dtoa_r+0xabc>
 8008e4e:	d102      	bne.n	8008e56 <_dtoa_r+0xb96>
 8008e50:	f019 0f01 	tst.w	r9, #1
 8008e54:	d192      	bne.n	8008d7c <_dtoa_r+0xabc>
 8008e56:	462b      	mov	r3, r5
 8008e58:	461d      	mov	r5, r3
 8008e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e5e:	2a30      	cmp	r2, #48	; 0x30
 8008e60:	d0fa      	beq.n	8008e58 <_dtoa_r+0xb98>
 8008e62:	e6dd      	b.n	8008c20 <_dtoa_r+0x960>
 8008e64:	9a00      	ldr	r2, [sp, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d189      	bne.n	8008d7e <_dtoa_r+0xabe>
 8008e6a:	f10b 0b01 	add.w	fp, fp, #1
 8008e6e:	2331      	movs	r3, #49	; 0x31
 8008e70:	e796      	b.n	8008da0 <_dtoa_r+0xae0>
 8008e72:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <_dtoa_r+0xbdc>)
 8008e74:	f7ff ba99 	b.w	80083aa <_dtoa_r+0xea>
 8008e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f47f aa6d 	bne.w	800835a <_dtoa_r+0x9a>
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <_dtoa_r+0xbe0>)
 8008e82:	f7ff ba92 	b.w	80083aa <_dtoa_r+0xea>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dcb5      	bgt.n	8008df8 <_dtoa_r+0xb38>
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	f73f aeb1 	bgt.w	8008bf6 <_dtoa_r+0x936>
 8008e94:	e7b0      	b.n	8008df8 <_dtoa_r+0xb38>
 8008e96:	bf00      	nop
 8008e98:	0800a788 	.word	0x0800a788
 8008e9c:	0800a6e8 	.word	0x0800a6e8
 8008ea0:	0800a70c 	.word	0x0800a70c

08008ea4 <_free_r>:
 8008ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d044      	beq.n	8008f34 <_free_r+0x90>
 8008eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eae:	9001      	str	r0, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008eb6:	bfb8      	it	lt
 8008eb8:	18e4      	addlt	r4, r4, r3
 8008eba:	f000 f8e7 	bl	800908c <__malloc_lock>
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <_free_r+0x94>)
 8008ec0:	9801      	ldr	r0, [sp, #4]
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	b933      	cbnz	r3, 8008ed4 <_free_r+0x30>
 8008ec6:	6063      	str	r3, [r4, #4]
 8008ec8:	6014      	str	r4, [r2, #0]
 8008eca:	b003      	add	sp, #12
 8008ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ed0:	f000 b8e2 	b.w	8009098 <__malloc_unlock>
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d908      	bls.n	8008eea <_free_r+0x46>
 8008ed8:	6825      	ldr	r5, [r4, #0]
 8008eda:	1961      	adds	r1, r4, r5
 8008edc:	428b      	cmp	r3, r1
 8008ede:	bf01      	itttt	eq
 8008ee0:	6819      	ldreq	r1, [r3, #0]
 8008ee2:	685b      	ldreq	r3, [r3, #4]
 8008ee4:	1949      	addeq	r1, r1, r5
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	e7ed      	b.n	8008ec6 <_free_r+0x22>
 8008eea:	461a      	mov	r2, r3
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b10b      	cbz	r3, 8008ef4 <_free_r+0x50>
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d9fa      	bls.n	8008eea <_free_r+0x46>
 8008ef4:	6811      	ldr	r1, [r2, #0]
 8008ef6:	1855      	adds	r5, r2, r1
 8008ef8:	42a5      	cmp	r5, r4
 8008efa:	d10b      	bne.n	8008f14 <_free_r+0x70>
 8008efc:	6824      	ldr	r4, [r4, #0]
 8008efe:	4421      	add	r1, r4
 8008f00:	1854      	adds	r4, r2, r1
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	d1e0      	bne.n	8008eca <_free_r+0x26>
 8008f08:	681c      	ldr	r4, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	6053      	str	r3, [r2, #4]
 8008f0e:	440c      	add	r4, r1
 8008f10:	6014      	str	r4, [r2, #0]
 8008f12:	e7da      	b.n	8008eca <_free_r+0x26>
 8008f14:	d902      	bls.n	8008f1c <_free_r+0x78>
 8008f16:	230c      	movs	r3, #12
 8008f18:	6003      	str	r3, [r0, #0]
 8008f1a:	e7d6      	b.n	8008eca <_free_r+0x26>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	1961      	adds	r1, r4, r5
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf04      	itt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	6063      	str	r3, [r4, #4]
 8008f2a:	bf04      	itt	eq
 8008f2c:	1949      	addeq	r1, r1, r5
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	6054      	str	r4, [r2, #4]
 8008f32:	e7ca      	b.n	8008eca <_free_r+0x26>
 8008f34:	b003      	add	sp, #12
 8008f36:	bd30      	pop	{r4, r5, pc}
 8008f38:	2000471c 	.word	0x2000471c

08008f3c <malloc>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <malloc+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f000 b823 	b.w	8008f8c <_malloc_r>
 8008f46:	bf00      	nop
 8008f48:	200000f8 	.word	0x200000f8

08008f4c <sbrk_aligned>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4e0e      	ldr	r6, [pc, #56]	; (8008f88 <sbrk_aligned+0x3c>)
 8008f50:	460c      	mov	r4, r1
 8008f52:	6831      	ldr	r1, [r6, #0]
 8008f54:	4605      	mov	r5, r0
 8008f56:	b911      	cbnz	r1, 8008f5e <sbrk_aligned+0x12>
 8008f58:	f000 fcce 	bl	80098f8 <_sbrk_r>
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 fcc9 	bl	80098f8 <_sbrk_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d00a      	beq.n	8008f80 <sbrk_aligned+0x34>
 8008f6a:	1cc4      	adds	r4, r0, #3
 8008f6c:	f024 0403 	bic.w	r4, r4, #3
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d007      	beq.n	8008f84 <sbrk_aligned+0x38>
 8008f74:	1a21      	subs	r1, r4, r0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 fcbe 	bl	80098f8 <_sbrk_r>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d101      	bne.n	8008f84 <sbrk_aligned+0x38>
 8008f80:	f04f 34ff 	mov.w	r4, #4294967295
 8008f84:	4620      	mov	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	20004720 	.word	0x20004720

08008f8c <_malloc_r>:
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	1ccd      	adds	r5, r1, #3
 8008f92:	f025 0503 	bic.w	r5, r5, #3
 8008f96:	3508      	adds	r5, #8
 8008f98:	2d0c      	cmp	r5, #12
 8008f9a:	bf38      	it	cc
 8008f9c:	250c      	movcc	r5, #12
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	db01      	blt.n	8008fa8 <_malloc_r+0x1c>
 8008fa4:	42a9      	cmp	r1, r5
 8008fa6:	d905      	bls.n	8008fb4 <_malloc_r+0x28>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	2600      	movs	r6, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009088 <_malloc_r+0xfc>
 8008fb8:	f000 f868 	bl	800908c <__malloc_lock>
 8008fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	bb5c      	cbnz	r4, 800901c <_malloc_r+0x90>
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f7ff ffc0 	bl	8008f4c <sbrk_aligned>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	4604      	mov	r4, r0
 8008fd0:	d155      	bne.n	800907e <_malloc_r+0xf2>
 8008fd2:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd6:	4626      	mov	r6, r4
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	d145      	bne.n	8009068 <_malloc_r+0xdc>
 8008fdc:	2c00      	cmp	r4, #0
 8008fde:	d048      	beq.n	8009072 <_malloc_r+0xe6>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	eb04 0903 	add.w	r9, r4, r3
 8008fea:	f000 fc85 	bl	80098f8 <_sbrk_r>
 8008fee:	4581      	cmp	r9, r0
 8008ff0:	d13f      	bne.n	8009072 <_malloc_r+0xe6>
 8008ff2:	6821      	ldr	r1, [r4, #0]
 8008ff4:	1a6d      	subs	r5, r5, r1
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ffa7 	bl	8008f4c <sbrk_aligned>
 8008ffe:	3001      	adds	r0, #1
 8009000:	d037      	beq.n	8009072 <_malloc_r+0xe6>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	442b      	add	r3, r5
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	f8d8 3000 	ldr.w	r3, [r8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d038      	beq.n	8009082 <_malloc_r+0xf6>
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	42a2      	cmp	r2, r4
 8009014:	d12b      	bne.n	800906e <_malloc_r+0xe2>
 8009016:	2200      	movs	r2, #0
 8009018:	605a      	str	r2, [r3, #4]
 800901a:	e00f      	b.n	800903c <_malloc_r+0xb0>
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	1b52      	subs	r2, r2, r5
 8009020:	d41f      	bmi.n	8009062 <_malloc_r+0xd6>
 8009022:	2a0b      	cmp	r2, #11
 8009024:	d917      	bls.n	8009056 <_malloc_r+0xca>
 8009026:	1961      	adds	r1, r4, r5
 8009028:	42a3      	cmp	r3, r4
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	bf18      	it	ne
 800902e:	6059      	strne	r1, [r3, #4]
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	bf08      	it	eq
 8009034:	f8c8 1000 	streq.w	r1, [r8]
 8009038:	5162      	str	r2, [r4, r5]
 800903a:	604b      	str	r3, [r1, #4]
 800903c:	4638      	mov	r0, r7
 800903e:	f104 060b 	add.w	r6, r4, #11
 8009042:	f000 f829 	bl	8009098 <__malloc_unlock>
 8009046:	f026 0607 	bic.w	r6, r6, #7
 800904a:	1d23      	adds	r3, r4, #4
 800904c:	1af2      	subs	r2, r6, r3
 800904e:	d0ae      	beq.n	8008fae <_malloc_r+0x22>
 8009050:	1b9b      	subs	r3, r3, r6
 8009052:	50a3      	str	r3, [r4, r2]
 8009054:	e7ab      	b.n	8008fae <_malloc_r+0x22>
 8009056:	42a3      	cmp	r3, r4
 8009058:	6862      	ldr	r2, [r4, #4]
 800905a:	d1dd      	bne.n	8009018 <_malloc_r+0x8c>
 800905c:	f8c8 2000 	str.w	r2, [r8]
 8009060:	e7ec      	b.n	800903c <_malloc_r+0xb0>
 8009062:	4623      	mov	r3, r4
 8009064:	6864      	ldr	r4, [r4, #4]
 8009066:	e7ac      	b.n	8008fc2 <_malloc_r+0x36>
 8009068:	4634      	mov	r4, r6
 800906a:	6876      	ldr	r6, [r6, #4]
 800906c:	e7b4      	b.n	8008fd8 <_malloc_r+0x4c>
 800906e:	4613      	mov	r3, r2
 8009070:	e7cc      	b.n	800900c <_malloc_r+0x80>
 8009072:	230c      	movs	r3, #12
 8009074:	603b      	str	r3, [r7, #0]
 8009076:	4638      	mov	r0, r7
 8009078:	f000 f80e 	bl	8009098 <__malloc_unlock>
 800907c:	e797      	b.n	8008fae <_malloc_r+0x22>
 800907e:	6025      	str	r5, [r4, #0]
 8009080:	e7dc      	b.n	800903c <_malloc_r+0xb0>
 8009082:	605b      	str	r3, [r3, #4]
 8009084:	deff      	udf	#255	; 0xff
 8009086:	bf00      	nop
 8009088:	2000471c 	.word	0x2000471c

0800908c <__malloc_lock>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__malloc_lock+0x8>)
 800908e:	f7ff b87e 	b.w	800818e <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20004718 	.word	0x20004718

08009098 <__malloc_unlock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_unlock+0x8>)
 800909a:	f7ff b879 	b.w	8008190 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20004718 	.word	0x20004718

080090a4 <_Balloc>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	69c6      	ldr	r6, [r0, #28]
 80090a8:	4604      	mov	r4, r0
 80090aa:	460d      	mov	r5, r1
 80090ac:	b976      	cbnz	r6, 80090cc <_Balloc+0x28>
 80090ae:	2010      	movs	r0, #16
 80090b0:	f7ff ff44 	bl	8008f3c <malloc>
 80090b4:	4602      	mov	r2, r0
 80090b6:	61e0      	str	r0, [r4, #28]
 80090b8:	b920      	cbnz	r0, 80090c4 <_Balloc+0x20>
 80090ba:	4b18      	ldr	r3, [pc, #96]	; (800911c <_Balloc+0x78>)
 80090bc:	4818      	ldr	r0, [pc, #96]	; (8009120 <_Balloc+0x7c>)
 80090be:	216b      	movs	r1, #107	; 0x6b
 80090c0:	f000 fc2a 	bl	8009918 <__assert_func>
 80090c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090c8:	6006      	str	r6, [r0, #0]
 80090ca:	60c6      	str	r6, [r0, #12]
 80090cc:	69e6      	ldr	r6, [r4, #28]
 80090ce:	68f3      	ldr	r3, [r6, #12]
 80090d0:	b183      	cbz	r3, 80090f4 <_Balloc+0x50>
 80090d2:	69e3      	ldr	r3, [r4, #28]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090da:	b9b8      	cbnz	r0, 800910c <_Balloc+0x68>
 80090dc:	2101      	movs	r1, #1
 80090de:	fa01 f605 	lsl.w	r6, r1, r5
 80090e2:	1d72      	adds	r2, r6, #5
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fc34 	bl	8009954 <_calloc_r>
 80090ec:	b160      	cbz	r0, 8009108 <_Balloc+0x64>
 80090ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090f2:	e00e      	b.n	8009112 <_Balloc+0x6e>
 80090f4:	2221      	movs	r2, #33	; 0x21
 80090f6:	2104      	movs	r1, #4
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 fc2b 	bl	8009954 <_calloc_r>
 80090fe:	69e3      	ldr	r3, [r4, #28]
 8009100:	60f0      	str	r0, [r6, #12]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e4      	bne.n	80090d2 <_Balloc+0x2e>
 8009108:	2000      	movs	r0, #0
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	6802      	ldr	r2, [r0, #0]
 800910e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009112:	2300      	movs	r3, #0
 8009114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009118:	e7f7      	b.n	800910a <_Balloc+0x66>
 800911a:	bf00      	nop
 800911c:	0800a719 	.word	0x0800a719
 8009120:	0800a799 	.word	0x0800a799

08009124 <_Bfree>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	69c6      	ldr	r6, [r0, #28]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b976      	cbnz	r6, 800914c <_Bfree+0x28>
 800912e:	2010      	movs	r0, #16
 8009130:	f7ff ff04 	bl	8008f3c <malloc>
 8009134:	4602      	mov	r2, r0
 8009136:	61e8      	str	r0, [r5, #28]
 8009138:	b920      	cbnz	r0, 8009144 <_Bfree+0x20>
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <_Bfree+0x3c>)
 800913c:	4809      	ldr	r0, [pc, #36]	; (8009164 <_Bfree+0x40>)
 800913e:	218f      	movs	r1, #143	; 0x8f
 8009140:	f000 fbea 	bl	8009918 <__assert_func>
 8009144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009148:	6006      	str	r6, [r0, #0]
 800914a:	60c6      	str	r6, [r0, #12]
 800914c:	b13c      	cbz	r4, 800915e <_Bfree+0x3a>
 800914e:	69eb      	ldr	r3, [r5, #28]
 8009150:	6862      	ldr	r2, [r4, #4]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009158:	6021      	str	r1, [r4, #0]
 800915a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	0800a719 	.word	0x0800a719
 8009164:	0800a799 	.word	0x0800a799

08009168 <__multadd>:
 8009168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916c:	690d      	ldr	r5, [r1, #16]
 800916e:	4607      	mov	r7, r0
 8009170:	460c      	mov	r4, r1
 8009172:	461e      	mov	r6, r3
 8009174:	f101 0c14 	add.w	ip, r1, #20
 8009178:	2000      	movs	r0, #0
 800917a:	f8dc 3000 	ldr.w	r3, [ip]
 800917e:	b299      	uxth	r1, r3
 8009180:	fb02 6101 	mla	r1, r2, r1, r6
 8009184:	0c1e      	lsrs	r6, r3, #16
 8009186:	0c0b      	lsrs	r3, r1, #16
 8009188:	fb02 3306 	mla	r3, r2, r6, r3
 800918c:	b289      	uxth	r1, r1
 800918e:	3001      	adds	r0, #1
 8009190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009194:	4285      	cmp	r5, r0
 8009196:	f84c 1b04 	str.w	r1, [ip], #4
 800919a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800919e:	dcec      	bgt.n	800917a <__multadd+0x12>
 80091a0:	b30e      	cbz	r6, 80091e6 <__multadd+0x7e>
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dc19      	bgt.n	80091dc <__multadd+0x74>
 80091a8:	6861      	ldr	r1, [r4, #4]
 80091aa:	4638      	mov	r0, r7
 80091ac:	3101      	adds	r1, #1
 80091ae:	f7ff ff79 	bl	80090a4 <_Balloc>
 80091b2:	4680      	mov	r8, r0
 80091b4:	b928      	cbnz	r0, 80091c2 <__multadd+0x5a>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <__multadd+0x84>)
 80091ba:	480d      	ldr	r0, [pc, #52]	; (80091f0 <__multadd+0x88>)
 80091bc:	21ba      	movs	r1, #186	; 0xba
 80091be:	f000 fbab 	bl	8009918 <__assert_func>
 80091c2:	6922      	ldr	r2, [r4, #16]
 80091c4:	3202      	adds	r2, #2
 80091c6:	f104 010c 	add.w	r1, r4, #12
 80091ca:	0092      	lsls	r2, r2, #2
 80091cc:	300c      	adds	r0, #12
 80091ce:	f7fe ffe0 	bl	8008192 <memcpy>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4638      	mov	r0, r7
 80091d6:	f7ff ffa5 	bl	8009124 <_Bfree>
 80091da:	4644      	mov	r4, r8
 80091dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091e0:	3501      	adds	r5, #1
 80091e2:	615e      	str	r6, [r3, #20]
 80091e4:	6125      	str	r5, [r4, #16]
 80091e6:	4620      	mov	r0, r4
 80091e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ec:	0800a788 	.word	0x0800a788
 80091f0:	0800a799 	.word	0x0800a799

080091f4 <__hi0bits>:
 80091f4:	0c03      	lsrs	r3, r0, #16
 80091f6:	041b      	lsls	r3, r3, #16
 80091f8:	b9d3      	cbnz	r3, 8009230 <__hi0bits+0x3c>
 80091fa:	0400      	lsls	r0, r0, #16
 80091fc:	2310      	movs	r3, #16
 80091fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009202:	bf04      	itt	eq
 8009204:	0200      	lsleq	r0, r0, #8
 8009206:	3308      	addeq	r3, #8
 8009208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800920c:	bf04      	itt	eq
 800920e:	0100      	lsleq	r0, r0, #4
 8009210:	3304      	addeq	r3, #4
 8009212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009216:	bf04      	itt	eq
 8009218:	0080      	lsleq	r0, r0, #2
 800921a:	3302      	addeq	r3, #2
 800921c:	2800      	cmp	r0, #0
 800921e:	db05      	blt.n	800922c <__hi0bits+0x38>
 8009220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009224:	f103 0301 	add.w	r3, r3, #1
 8009228:	bf08      	it	eq
 800922a:	2320      	moveq	r3, #32
 800922c:	4618      	mov	r0, r3
 800922e:	4770      	bx	lr
 8009230:	2300      	movs	r3, #0
 8009232:	e7e4      	b.n	80091fe <__hi0bits+0xa>

08009234 <__lo0bits>:
 8009234:	6803      	ldr	r3, [r0, #0]
 8009236:	f013 0207 	ands.w	r2, r3, #7
 800923a:	d00c      	beq.n	8009256 <__lo0bits+0x22>
 800923c:	07d9      	lsls	r1, r3, #31
 800923e:	d422      	bmi.n	8009286 <__lo0bits+0x52>
 8009240:	079a      	lsls	r2, r3, #30
 8009242:	bf49      	itett	mi
 8009244:	085b      	lsrmi	r3, r3, #1
 8009246:	089b      	lsrpl	r3, r3, #2
 8009248:	6003      	strmi	r3, [r0, #0]
 800924a:	2201      	movmi	r2, #1
 800924c:	bf5c      	itt	pl
 800924e:	6003      	strpl	r3, [r0, #0]
 8009250:	2202      	movpl	r2, #2
 8009252:	4610      	mov	r0, r2
 8009254:	4770      	bx	lr
 8009256:	b299      	uxth	r1, r3
 8009258:	b909      	cbnz	r1, 800925e <__lo0bits+0x2a>
 800925a:	0c1b      	lsrs	r3, r3, #16
 800925c:	2210      	movs	r2, #16
 800925e:	b2d9      	uxtb	r1, r3
 8009260:	b909      	cbnz	r1, 8009266 <__lo0bits+0x32>
 8009262:	3208      	adds	r2, #8
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	0719      	lsls	r1, r3, #28
 8009268:	bf04      	itt	eq
 800926a:	091b      	lsreq	r3, r3, #4
 800926c:	3204      	addeq	r2, #4
 800926e:	0799      	lsls	r1, r3, #30
 8009270:	bf04      	itt	eq
 8009272:	089b      	lsreq	r3, r3, #2
 8009274:	3202      	addeq	r2, #2
 8009276:	07d9      	lsls	r1, r3, #31
 8009278:	d403      	bmi.n	8009282 <__lo0bits+0x4e>
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	f102 0201 	add.w	r2, r2, #1
 8009280:	d003      	beq.n	800928a <__lo0bits+0x56>
 8009282:	6003      	str	r3, [r0, #0]
 8009284:	e7e5      	b.n	8009252 <__lo0bits+0x1e>
 8009286:	2200      	movs	r2, #0
 8009288:	e7e3      	b.n	8009252 <__lo0bits+0x1e>
 800928a:	2220      	movs	r2, #32
 800928c:	e7e1      	b.n	8009252 <__lo0bits+0x1e>
	...

08009290 <__i2b>:
 8009290:	b510      	push	{r4, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	2101      	movs	r1, #1
 8009296:	f7ff ff05 	bl	80090a4 <_Balloc>
 800929a:	4602      	mov	r2, r0
 800929c:	b928      	cbnz	r0, 80092aa <__i2b+0x1a>
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <__i2b+0x24>)
 80092a0:	4805      	ldr	r0, [pc, #20]	; (80092b8 <__i2b+0x28>)
 80092a2:	f240 1145 	movw	r1, #325	; 0x145
 80092a6:	f000 fb37 	bl	8009918 <__assert_func>
 80092aa:	2301      	movs	r3, #1
 80092ac:	6144      	str	r4, [r0, #20]
 80092ae:	6103      	str	r3, [r0, #16]
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	bf00      	nop
 80092b4:	0800a788 	.word	0x0800a788
 80092b8:	0800a799 	.word	0x0800a799

080092bc <__multiply>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	4691      	mov	r9, r2
 80092c2:	690a      	ldr	r2, [r1, #16]
 80092c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	bfb8      	it	lt
 80092cc:	460b      	movlt	r3, r1
 80092ce:	460c      	mov	r4, r1
 80092d0:	bfbc      	itt	lt
 80092d2:	464c      	movlt	r4, r9
 80092d4:	4699      	movlt	r9, r3
 80092d6:	6927      	ldr	r7, [r4, #16]
 80092d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092dc:	68a3      	ldr	r3, [r4, #8]
 80092de:	6861      	ldr	r1, [r4, #4]
 80092e0:	eb07 060a 	add.w	r6, r7, sl
 80092e4:	42b3      	cmp	r3, r6
 80092e6:	b085      	sub	sp, #20
 80092e8:	bfb8      	it	lt
 80092ea:	3101      	addlt	r1, #1
 80092ec:	f7ff feda 	bl	80090a4 <_Balloc>
 80092f0:	b930      	cbnz	r0, 8009300 <__multiply+0x44>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b44      	ldr	r3, [pc, #272]	; (8009408 <__multiply+0x14c>)
 80092f6:	4845      	ldr	r0, [pc, #276]	; (800940c <__multiply+0x150>)
 80092f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80092fc:	f000 fb0c 	bl	8009918 <__assert_func>
 8009300:	f100 0514 	add.w	r5, r0, #20
 8009304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009308:	462b      	mov	r3, r5
 800930a:	2200      	movs	r2, #0
 800930c:	4543      	cmp	r3, r8
 800930e:	d321      	bcc.n	8009354 <__multiply+0x98>
 8009310:	f104 0314 	add.w	r3, r4, #20
 8009314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009318:	f109 0314 	add.w	r3, r9, #20
 800931c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009320:	9202      	str	r2, [sp, #8]
 8009322:	1b3a      	subs	r2, r7, r4
 8009324:	3a15      	subs	r2, #21
 8009326:	f022 0203 	bic.w	r2, r2, #3
 800932a:	3204      	adds	r2, #4
 800932c:	f104 0115 	add.w	r1, r4, #21
 8009330:	428f      	cmp	r7, r1
 8009332:	bf38      	it	cc
 8009334:	2204      	movcc	r2, #4
 8009336:	9201      	str	r2, [sp, #4]
 8009338:	9a02      	ldr	r2, [sp, #8]
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	429a      	cmp	r2, r3
 800933e:	d80c      	bhi.n	800935a <__multiply+0x9e>
 8009340:	2e00      	cmp	r6, #0
 8009342:	dd03      	ble.n	800934c <__multiply+0x90>
 8009344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05b      	beq.n	8009404 <__multiply+0x148>
 800934c:	6106      	str	r6, [r0, #16]
 800934e:	b005      	add	sp, #20
 8009350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	f843 2b04 	str.w	r2, [r3], #4
 8009358:	e7d8      	b.n	800930c <__multiply+0x50>
 800935a:	f8b3 a000 	ldrh.w	sl, [r3]
 800935e:	f1ba 0f00 	cmp.w	sl, #0
 8009362:	d024      	beq.n	80093ae <__multiply+0xf2>
 8009364:	f104 0e14 	add.w	lr, r4, #20
 8009368:	46a9      	mov	r9, r5
 800936a:	f04f 0c00 	mov.w	ip, #0
 800936e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009372:	f8d9 1000 	ldr.w	r1, [r9]
 8009376:	fa1f fb82 	uxth.w	fp, r2
 800937a:	b289      	uxth	r1, r1
 800937c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	4461      	add	r1, ip
 800938a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800938e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009396:	b289      	uxth	r1, r1
 8009398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800939c:	4577      	cmp	r7, lr
 800939e:	f849 1b04 	str.w	r1, [r9], #4
 80093a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093a6:	d8e2      	bhi.n	800936e <__multiply+0xb2>
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	f845 c002 	str.w	ip, [r5, r2]
 80093ae:	9a03      	ldr	r2, [sp, #12]
 80093b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093b4:	3304      	adds	r3, #4
 80093b6:	f1b9 0f00 	cmp.w	r9, #0
 80093ba:	d021      	beq.n	8009400 <__multiply+0x144>
 80093bc:	6829      	ldr	r1, [r5, #0]
 80093be:	f104 0c14 	add.w	ip, r4, #20
 80093c2:	46ae      	mov	lr, r5
 80093c4:	f04f 0a00 	mov.w	sl, #0
 80093c8:	f8bc b000 	ldrh.w	fp, [ip]
 80093cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093d0:	fb09 220b 	mla	r2, r9, fp, r2
 80093d4:	4452      	add	r2, sl
 80093d6:	b289      	uxth	r1, r1
 80093d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093dc:	f84e 1b04 	str.w	r1, [lr], #4
 80093e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093e8:	f8be 1000 	ldrh.w	r1, [lr]
 80093ec:	fb09 110a 	mla	r1, r9, sl, r1
 80093f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093f4:	4567      	cmp	r7, ip
 80093f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093fa:	d8e5      	bhi.n	80093c8 <__multiply+0x10c>
 80093fc:	9a01      	ldr	r2, [sp, #4]
 80093fe:	50a9      	str	r1, [r5, r2]
 8009400:	3504      	adds	r5, #4
 8009402:	e799      	b.n	8009338 <__multiply+0x7c>
 8009404:	3e01      	subs	r6, #1
 8009406:	e79b      	b.n	8009340 <__multiply+0x84>
 8009408:	0800a788 	.word	0x0800a788
 800940c:	0800a799 	.word	0x0800a799

08009410 <__pow5mult>:
 8009410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009414:	4615      	mov	r5, r2
 8009416:	f012 0203 	ands.w	r2, r2, #3
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	d007      	beq.n	8009430 <__pow5mult+0x20>
 8009420:	4c25      	ldr	r4, [pc, #148]	; (80094b8 <__pow5mult+0xa8>)
 8009422:	3a01      	subs	r2, #1
 8009424:	2300      	movs	r3, #0
 8009426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800942a:	f7ff fe9d 	bl	8009168 <__multadd>
 800942e:	4607      	mov	r7, r0
 8009430:	10ad      	asrs	r5, r5, #2
 8009432:	d03d      	beq.n	80094b0 <__pow5mult+0xa0>
 8009434:	69f4      	ldr	r4, [r6, #28]
 8009436:	b97c      	cbnz	r4, 8009458 <__pow5mult+0x48>
 8009438:	2010      	movs	r0, #16
 800943a:	f7ff fd7f 	bl	8008f3c <malloc>
 800943e:	4602      	mov	r2, r0
 8009440:	61f0      	str	r0, [r6, #28]
 8009442:	b928      	cbnz	r0, 8009450 <__pow5mult+0x40>
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <__pow5mult+0xac>)
 8009446:	481e      	ldr	r0, [pc, #120]	; (80094c0 <__pow5mult+0xb0>)
 8009448:	f240 11b3 	movw	r1, #435	; 0x1b3
 800944c:	f000 fa64 	bl	8009918 <__assert_func>
 8009450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009454:	6004      	str	r4, [r0, #0]
 8009456:	60c4      	str	r4, [r0, #12]
 8009458:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800945c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009460:	b94c      	cbnz	r4, 8009476 <__pow5mult+0x66>
 8009462:	f240 2171 	movw	r1, #625	; 0x271
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ff12 	bl	8009290 <__i2b>
 800946c:	2300      	movs	r3, #0
 800946e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009472:	4604      	mov	r4, r0
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	f04f 0900 	mov.w	r9, #0
 800947a:	07eb      	lsls	r3, r5, #31
 800947c:	d50a      	bpl.n	8009494 <__pow5mult+0x84>
 800947e:	4639      	mov	r1, r7
 8009480:	4622      	mov	r2, r4
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ff1a 	bl	80092bc <__multiply>
 8009488:	4639      	mov	r1, r7
 800948a:	4680      	mov	r8, r0
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff fe49 	bl	8009124 <_Bfree>
 8009492:	4647      	mov	r7, r8
 8009494:	106d      	asrs	r5, r5, #1
 8009496:	d00b      	beq.n	80094b0 <__pow5mult+0xa0>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	b938      	cbnz	r0, 80094ac <__pow5mult+0x9c>
 800949c:	4622      	mov	r2, r4
 800949e:	4621      	mov	r1, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff ff0b 	bl	80092bc <__multiply>
 80094a6:	6020      	str	r0, [r4, #0]
 80094a8:	f8c0 9000 	str.w	r9, [r0]
 80094ac:	4604      	mov	r4, r0
 80094ae:	e7e4      	b.n	800947a <__pow5mult+0x6a>
 80094b0:	4638      	mov	r0, r7
 80094b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b6:	bf00      	nop
 80094b8:	0800a8e8 	.word	0x0800a8e8
 80094bc:	0800a719 	.word	0x0800a719
 80094c0:	0800a799 	.word	0x0800a799

080094c4 <__lshift>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	6849      	ldr	r1, [r1, #4]
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	4607      	mov	r7, r0
 80094d6:	4691      	mov	r9, r2
 80094d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094dc:	f108 0601 	add.w	r6, r8, #1
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	db0b      	blt.n	80094fc <__lshift+0x38>
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fddd 	bl	80090a4 <_Balloc>
 80094ea:	4605      	mov	r5, r0
 80094ec:	b948      	cbnz	r0, 8009502 <__lshift+0x3e>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <__lshift+0xd0>)
 80094f2:	4829      	ldr	r0, [pc, #164]	; (8009598 <__lshift+0xd4>)
 80094f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80094f8:	f000 fa0e 	bl	8009918 <__assert_func>
 80094fc:	3101      	adds	r1, #1
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	e7ee      	b.n	80094e0 <__lshift+0x1c>
 8009502:	2300      	movs	r3, #0
 8009504:	f100 0114 	add.w	r1, r0, #20
 8009508:	f100 0210 	add.w	r2, r0, #16
 800950c:	4618      	mov	r0, r3
 800950e:	4553      	cmp	r3, sl
 8009510:	db33      	blt.n	800957a <__lshift+0xb6>
 8009512:	6920      	ldr	r0, [r4, #16]
 8009514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009518:	f104 0314 	add.w	r3, r4, #20
 800951c:	f019 091f 	ands.w	r9, r9, #31
 8009520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009528:	d02b      	beq.n	8009582 <__lshift+0xbe>
 800952a:	f1c9 0e20 	rsb	lr, r9, #32
 800952e:	468a      	mov	sl, r1
 8009530:	2200      	movs	r2, #0
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	fa00 f009 	lsl.w	r0, r0, r9
 8009538:	4310      	orrs	r0, r2
 800953a:	f84a 0b04 	str.w	r0, [sl], #4
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	459c      	cmp	ip, r3
 8009544:	fa22 f20e 	lsr.w	r2, r2, lr
 8009548:	d8f3      	bhi.n	8009532 <__lshift+0x6e>
 800954a:	ebac 0304 	sub.w	r3, ip, r4
 800954e:	3b15      	subs	r3, #21
 8009550:	f023 0303 	bic.w	r3, r3, #3
 8009554:	3304      	adds	r3, #4
 8009556:	f104 0015 	add.w	r0, r4, #21
 800955a:	4584      	cmp	ip, r0
 800955c:	bf38      	it	cc
 800955e:	2304      	movcc	r3, #4
 8009560:	50ca      	str	r2, [r1, r3]
 8009562:	b10a      	cbz	r2, 8009568 <__lshift+0xa4>
 8009564:	f108 0602 	add.w	r6, r8, #2
 8009568:	3e01      	subs	r6, #1
 800956a:	4638      	mov	r0, r7
 800956c:	612e      	str	r6, [r5, #16]
 800956e:	4621      	mov	r1, r4
 8009570:	f7ff fdd8 	bl	8009124 <_Bfree>
 8009574:	4628      	mov	r0, r5
 8009576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957a:	f842 0f04 	str.w	r0, [r2, #4]!
 800957e:	3301      	adds	r3, #1
 8009580:	e7c5      	b.n	800950e <__lshift+0x4a>
 8009582:	3904      	subs	r1, #4
 8009584:	f853 2b04 	ldr.w	r2, [r3], #4
 8009588:	f841 2f04 	str.w	r2, [r1, #4]!
 800958c:	459c      	cmp	ip, r3
 800958e:	d8f9      	bhi.n	8009584 <__lshift+0xc0>
 8009590:	e7ea      	b.n	8009568 <__lshift+0xa4>
 8009592:	bf00      	nop
 8009594:	0800a788 	.word	0x0800a788
 8009598:	0800a799 	.word	0x0800a799

0800959c <__mcmp>:
 800959c:	b530      	push	{r4, r5, lr}
 800959e:	6902      	ldr	r2, [r0, #16]
 80095a0:	690c      	ldr	r4, [r1, #16]
 80095a2:	1b12      	subs	r2, r2, r4
 80095a4:	d10e      	bne.n	80095c4 <__mcmp+0x28>
 80095a6:	f100 0314 	add.w	r3, r0, #20
 80095aa:	3114      	adds	r1, #20
 80095ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095bc:	42a5      	cmp	r5, r4
 80095be:	d003      	beq.n	80095c8 <__mcmp+0x2c>
 80095c0:	d305      	bcc.n	80095ce <__mcmp+0x32>
 80095c2:	2201      	movs	r2, #1
 80095c4:	4610      	mov	r0, r2
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	4283      	cmp	r3, r0
 80095ca:	d3f3      	bcc.n	80095b4 <__mcmp+0x18>
 80095cc:	e7fa      	b.n	80095c4 <__mcmp+0x28>
 80095ce:	f04f 32ff 	mov.w	r2, #4294967295
 80095d2:	e7f7      	b.n	80095c4 <__mcmp+0x28>

080095d4 <__mdiff>:
 80095d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	460c      	mov	r4, r1
 80095da:	4606      	mov	r6, r0
 80095dc:	4611      	mov	r1, r2
 80095de:	4620      	mov	r0, r4
 80095e0:	4690      	mov	r8, r2
 80095e2:	f7ff ffdb 	bl	800959c <__mcmp>
 80095e6:	1e05      	subs	r5, r0, #0
 80095e8:	d110      	bne.n	800960c <__mdiff+0x38>
 80095ea:	4629      	mov	r1, r5
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff fd59 	bl	80090a4 <_Balloc>
 80095f2:	b930      	cbnz	r0, 8009602 <__mdiff+0x2e>
 80095f4:	4b3a      	ldr	r3, [pc, #232]	; (80096e0 <__mdiff+0x10c>)
 80095f6:	4602      	mov	r2, r0
 80095f8:	f240 2137 	movw	r1, #567	; 0x237
 80095fc:	4839      	ldr	r0, [pc, #228]	; (80096e4 <__mdiff+0x110>)
 80095fe:	f000 f98b 	bl	8009918 <__assert_func>
 8009602:	2301      	movs	r3, #1
 8009604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	bfa4      	itt	ge
 800960e:	4643      	movge	r3, r8
 8009610:	46a0      	movge	r8, r4
 8009612:	4630      	mov	r0, r6
 8009614:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009618:	bfa6      	itte	ge
 800961a:	461c      	movge	r4, r3
 800961c:	2500      	movge	r5, #0
 800961e:	2501      	movlt	r5, #1
 8009620:	f7ff fd40 	bl	80090a4 <_Balloc>
 8009624:	b920      	cbnz	r0, 8009630 <__mdiff+0x5c>
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <__mdiff+0x10c>)
 8009628:	4602      	mov	r2, r0
 800962a:	f240 2145 	movw	r1, #581	; 0x245
 800962e:	e7e5      	b.n	80095fc <__mdiff+0x28>
 8009630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009634:	6926      	ldr	r6, [r4, #16]
 8009636:	60c5      	str	r5, [r0, #12]
 8009638:	f104 0914 	add.w	r9, r4, #20
 800963c:	f108 0514 	add.w	r5, r8, #20
 8009640:	f100 0e14 	add.w	lr, r0, #20
 8009644:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009648:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800964c:	f108 0210 	add.w	r2, r8, #16
 8009650:	46f2      	mov	sl, lr
 8009652:	2100      	movs	r1, #0
 8009654:	f859 3b04 	ldr.w	r3, [r9], #4
 8009658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800965c:	fa11 f88b 	uxtah	r8, r1, fp
 8009660:	b299      	uxth	r1, r3
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	eba8 0801 	sub.w	r8, r8, r1
 8009668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800966c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009670:	fa1f f888 	uxth.w	r8, r8
 8009674:	1419      	asrs	r1, r3, #16
 8009676:	454e      	cmp	r6, r9
 8009678:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800967c:	f84a 3b04 	str.w	r3, [sl], #4
 8009680:	d8e8      	bhi.n	8009654 <__mdiff+0x80>
 8009682:	1b33      	subs	r3, r6, r4
 8009684:	3b15      	subs	r3, #21
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	3304      	adds	r3, #4
 800968c:	3415      	adds	r4, #21
 800968e:	42a6      	cmp	r6, r4
 8009690:	bf38      	it	cc
 8009692:	2304      	movcc	r3, #4
 8009694:	441d      	add	r5, r3
 8009696:	4473      	add	r3, lr
 8009698:	469e      	mov	lr, r3
 800969a:	462e      	mov	r6, r5
 800969c:	4566      	cmp	r6, ip
 800969e:	d30e      	bcc.n	80096be <__mdiff+0xea>
 80096a0:	f10c 0203 	add.w	r2, ip, #3
 80096a4:	1b52      	subs	r2, r2, r5
 80096a6:	f022 0203 	bic.w	r2, r2, #3
 80096aa:	3d03      	subs	r5, #3
 80096ac:	45ac      	cmp	ip, r5
 80096ae:	bf38      	it	cc
 80096b0:	2200      	movcc	r2, #0
 80096b2:	4413      	add	r3, r2
 80096b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096b8:	b17a      	cbz	r2, 80096da <__mdiff+0x106>
 80096ba:	6107      	str	r7, [r0, #16]
 80096bc:	e7a4      	b.n	8009608 <__mdiff+0x34>
 80096be:	f856 8b04 	ldr.w	r8, [r6], #4
 80096c2:	fa11 f288 	uxtah	r2, r1, r8
 80096c6:	1414      	asrs	r4, r2, #16
 80096c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096cc:	b292      	uxth	r2, r2
 80096ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096d2:	f84e 2b04 	str.w	r2, [lr], #4
 80096d6:	1421      	asrs	r1, r4, #16
 80096d8:	e7e0      	b.n	800969c <__mdiff+0xc8>
 80096da:	3f01      	subs	r7, #1
 80096dc:	e7ea      	b.n	80096b4 <__mdiff+0xe0>
 80096de:	bf00      	nop
 80096e0:	0800a788 	.word	0x0800a788
 80096e4:	0800a799 	.word	0x0800a799

080096e8 <__d2b>:
 80096e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	460f      	mov	r7, r1
 80096ee:	2101      	movs	r1, #1
 80096f0:	ec59 8b10 	vmov	r8, r9, d0
 80096f4:	4616      	mov	r6, r2
 80096f6:	f7ff fcd5 	bl	80090a4 <_Balloc>
 80096fa:	4604      	mov	r4, r0
 80096fc:	b930      	cbnz	r0, 800970c <__d2b+0x24>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b24      	ldr	r3, [pc, #144]	; (8009794 <__d2b+0xac>)
 8009702:	4825      	ldr	r0, [pc, #148]	; (8009798 <__d2b+0xb0>)
 8009704:	f240 310f 	movw	r1, #783	; 0x30f
 8009708:	f000 f906 	bl	8009918 <__assert_func>
 800970c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009714:	bb2d      	cbnz	r5, 8009762 <__d2b+0x7a>
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	f1b8 0300 	subs.w	r3, r8, #0
 800971c:	d026      	beq.n	800976c <__d2b+0x84>
 800971e:	4668      	mov	r0, sp
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	f7ff fd87 	bl	8009234 <__lo0bits>
 8009726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800972a:	b1e8      	cbz	r0, 8009768 <__d2b+0x80>
 800972c:	f1c0 0320 	rsb	r3, r0, #32
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
 8009734:	430b      	orrs	r3, r1
 8009736:	40c2      	lsrs	r2, r0
 8009738:	6163      	str	r3, [r4, #20]
 800973a:	9201      	str	r2, [sp, #4]
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	61a3      	str	r3, [r4, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bf14      	ite	ne
 8009744:	2202      	movne	r2, #2
 8009746:	2201      	moveq	r2, #1
 8009748:	6122      	str	r2, [r4, #16]
 800974a:	b1bd      	cbz	r5, 800977c <__d2b+0x94>
 800974c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009750:	4405      	add	r5, r0
 8009752:	603d      	str	r5, [r7, #0]
 8009754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009758:	6030      	str	r0, [r6, #0]
 800975a:	4620      	mov	r0, r4
 800975c:	b003      	add	sp, #12
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009766:	e7d6      	b.n	8009716 <__d2b+0x2e>
 8009768:	6161      	str	r1, [r4, #20]
 800976a:	e7e7      	b.n	800973c <__d2b+0x54>
 800976c:	a801      	add	r0, sp, #4
 800976e:	f7ff fd61 	bl	8009234 <__lo0bits>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	6163      	str	r3, [r4, #20]
 8009776:	3020      	adds	r0, #32
 8009778:	2201      	movs	r2, #1
 800977a:	e7e5      	b.n	8009748 <__d2b+0x60>
 800977c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009784:	6038      	str	r0, [r7, #0]
 8009786:	6918      	ldr	r0, [r3, #16]
 8009788:	f7ff fd34 	bl	80091f4 <__hi0bits>
 800978c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009790:	e7e2      	b.n	8009758 <__d2b+0x70>
 8009792:	bf00      	nop
 8009794:	0800a788 	.word	0x0800a788
 8009798:	0800a799 	.word	0x0800a799

0800979c <__sflush_r>:
 800979c:	898a      	ldrh	r2, [r1, #12]
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	0710      	lsls	r0, r2, #28
 80097a6:	460c      	mov	r4, r1
 80097a8:	d458      	bmi.n	800985c <__sflush_r+0xc0>
 80097aa:	684b      	ldr	r3, [r1, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dc05      	bgt.n	80097bc <__sflush_r+0x20>
 80097b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dc02      	bgt.n	80097bc <__sflush_r+0x20>
 80097b6:	2000      	movs	r0, #0
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d0f9      	beq.n	80097b6 <__sflush_r+0x1a>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097c8:	682f      	ldr	r7, [r5, #0]
 80097ca:	6a21      	ldr	r1, [r4, #32]
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	d032      	beq.n	8009836 <__sflush_r+0x9a>
 80097d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	075a      	lsls	r2, r3, #29
 80097d6:	d505      	bpl.n	80097e4 <__sflush_r+0x48>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	1ac0      	subs	r0, r0, r3
 80097dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097de:	b10b      	cbz	r3, 80097e4 <__sflush_r+0x48>
 80097e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e2:	1ac0      	subs	r0, r0, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	4602      	mov	r2, r0
 80097e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ea:	6a21      	ldr	r1, [r4, #32]
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b0      	blx	r6
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	d106      	bne.n	8009804 <__sflush_r+0x68>
 80097f6:	6829      	ldr	r1, [r5, #0]
 80097f8:	291d      	cmp	r1, #29
 80097fa:	d82b      	bhi.n	8009854 <__sflush_r+0xb8>
 80097fc:	4a29      	ldr	r2, [pc, #164]	; (80098a4 <__sflush_r+0x108>)
 80097fe:	410a      	asrs	r2, r1
 8009800:	07d6      	lsls	r6, r2, #31
 8009802:	d427      	bmi.n	8009854 <__sflush_r+0xb8>
 8009804:	2200      	movs	r2, #0
 8009806:	6062      	str	r2, [r4, #4]
 8009808:	04d9      	lsls	r1, r3, #19
 800980a:	6922      	ldr	r2, [r4, #16]
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	d504      	bpl.n	800981a <__sflush_r+0x7e>
 8009810:	1c42      	adds	r2, r0, #1
 8009812:	d101      	bne.n	8009818 <__sflush_r+0x7c>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b903      	cbnz	r3, 800981a <__sflush_r+0x7e>
 8009818:	6560      	str	r0, [r4, #84]	; 0x54
 800981a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981c:	602f      	str	r7, [r5, #0]
 800981e:	2900      	cmp	r1, #0
 8009820:	d0c9      	beq.n	80097b6 <__sflush_r+0x1a>
 8009822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009826:	4299      	cmp	r1, r3
 8009828:	d002      	beq.n	8009830 <__sflush_r+0x94>
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff fb3a 	bl	8008ea4 <_free_r>
 8009830:	2000      	movs	r0, #0
 8009832:	6360      	str	r0, [r4, #52]	; 0x34
 8009834:	e7c0      	b.n	80097b8 <__sflush_r+0x1c>
 8009836:	2301      	movs	r3, #1
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	1c41      	adds	r1, r0, #1
 800983e:	d1c8      	bne.n	80097d2 <__sflush_r+0x36>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c5      	beq.n	80097d2 <__sflush_r+0x36>
 8009846:	2b1d      	cmp	r3, #29
 8009848:	d001      	beq.n	800984e <__sflush_r+0xb2>
 800984a:	2b16      	cmp	r3, #22
 800984c:	d101      	bne.n	8009852 <__sflush_r+0xb6>
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	e7b1      	b.n	80097b6 <__sflush_r+0x1a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	e7ad      	b.n	80097b8 <__sflush_r+0x1c>
 800985c:	690f      	ldr	r7, [r1, #16]
 800985e:	2f00      	cmp	r7, #0
 8009860:	d0a9      	beq.n	80097b6 <__sflush_r+0x1a>
 8009862:	0793      	lsls	r3, r2, #30
 8009864:	680e      	ldr	r6, [r1, #0]
 8009866:	bf08      	it	eq
 8009868:	694b      	ldreq	r3, [r1, #20]
 800986a:	600f      	str	r7, [r1, #0]
 800986c:	bf18      	it	ne
 800986e:	2300      	movne	r3, #0
 8009870:	eba6 0807 	sub.w	r8, r6, r7
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	dd9c      	ble.n	80097b6 <__sflush_r+0x1a>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009880:	4643      	mov	r3, r8
 8009882:	463a      	mov	r2, r7
 8009884:	4628      	mov	r0, r5
 8009886:	47b0      	blx	r6
 8009888:	2800      	cmp	r0, #0
 800988a:	dc06      	bgt.n	800989a <__sflush_r+0xfe>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e78e      	b.n	80097b8 <__sflush_r+0x1c>
 800989a:	4407      	add	r7, r0
 800989c:	eba8 0800 	sub.w	r8, r8, r0
 80098a0:	e7e9      	b.n	8009876 <__sflush_r+0xda>
 80098a2:	bf00      	nop
 80098a4:	dfbffffe 	.word	0xdfbffffe

080098a8 <_fflush_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	690b      	ldr	r3, [r1, #16]
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	b913      	cbnz	r3, 80098b8 <_fflush_r+0x10>
 80098b2:	2500      	movs	r5, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	b118      	cbz	r0, 80098c2 <_fflush_r+0x1a>
 80098ba:	6a03      	ldr	r3, [r0, #32]
 80098bc:	b90b      	cbnz	r3, 80098c2 <_fflush_r+0x1a>
 80098be:	f7fe fb6f 	bl	8007fa0 <__sinit>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f3      	beq.n	80098b2 <_fflush_r+0xa>
 80098ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098cc:	07d0      	lsls	r0, r2, #31
 80098ce:	d404      	bmi.n	80098da <_fflush_r+0x32>
 80098d0:	0599      	lsls	r1, r3, #22
 80098d2:	d402      	bmi.n	80098da <_fflush_r+0x32>
 80098d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d6:	f7fe fc5a 	bl	800818e <__retarget_lock_acquire_recursive>
 80098da:	4628      	mov	r0, r5
 80098dc:	4621      	mov	r1, r4
 80098de:	f7ff ff5d 	bl	800979c <__sflush_r>
 80098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	4605      	mov	r5, r0
 80098e8:	d4e4      	bmi.n	80098b4 <_fflush_r+0xc>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	059b      	lsls	r3, r3, #22
 80098ee:	d4e1      	bmi.n	80098b4 <_fflush_r+0xc>
 80098f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f2:	f7fe fc4d 	bl	8008190 <__retarget_lock_release_recursive>
 80098f6:	e7dd      	b.n	80098b4 <_fflush_r+0xc>

080098f8 <_sbrk_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_sbrk_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f9 fc00 	bl	8003108 <_sbrk>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_sbrk_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_sbrk_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	20004714 	.word	0x20004714

08009918 <__assert_func>:
 8009918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800991a:	4614      	mov	r4, r2
 800991c:	461a      	mov	r2, r3
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <__assert_func+0x2c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4605      	mov	r5, r0
 8009924:	68d8      	ldr	r0, [r3, #12]
 8009926:	b14c      	cbz	r4, 800993c <__assert_func+0x24>
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <__assert_func+0x30>)
 800992a:	9100      	str	r1, [sp, #0]
 800992c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009930:	4906      	ldr	r1, [pc, #24]	; (800994c <__assert_func+0x34>)
 8009932:	462b      	mov	r3, r5
 8009934:	f000 f844 	bl	80099c0 <fiprintf>
 8009938:	f000 f854 	bl	80099e4 <abort>
 800993c:	4b04      	ldr	r3, [pc, #16]	; (8009950 <__assert_func+0x38>)
 800993e:	461c      	mov	r4, r3
 8009940:	e7f3      	b.n	800992a <__assert_func+0x12>
 8009942:	bf00      	nop
 8009944:	200000f8 	.word	0x200000f8
 8009948:	0800a8fe 	.word	0x0800a8fe
 800994c:	0800a90b 	.word	0x0800a90b
 8009950:	0800a939 	.word	0x0800a939

08009954 <_calloc_r>:
 8009954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009956:	fba1 2402 	umull	r2, r4, r1, r2
 800995a:	b94c      	cbnz	r4, 8009970 <_calloc_r+0x1c>
 800995c:	4611      	mov	r1, r2
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	f7ff fb14 	bl	8008f8c <_malloc_r>
 8009964:	9a01      	ldr	r2, [sp, #4]
 8009966:	4605      	mov	r5, r0
 8009968:	b930      	cbnz	r0, 8009978 <_calloc_r+0x24>
 800996a:	4628      	mov	r0, r5
 800996c:	b003      	add	sp, #12
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	220c      	movs	r2, #12
 8009972:	6002      	str	r2, [r0, #0]
 8009974:	2500      	movs	r5, #0
 8009976:	e7f8      	b.n	800996a <_calloc_r+0x16>
 8009978:	4621      	mov	r1, r4
 800997a:	f7fe fb8a 	bl	8008092 <memset>
 800997e:	e7f4      	b.n	800996a <_calloc_r+0x16>

08009980 <__ascii_mbtowc>:
 8009980:	b082      	sub	sp, #8
 8009982:	b901      	cbnz	r1, 8009986 <__ascii_mbtowc+0x6>
 8009984:	a901      	add	r1, sp, #4
 8009986:	b142      	cbz	r2, 800999a <__ascii_mbtowc+0x1a>
 8009988:	b14b      	cbz	r3, 800999e <__ascii_mbtowc+0x1e>
 800998a:	7813      	ldrb	r3, [r2, #0]
 800998c:	600b      	str	r3, [r1, #0]
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	1e10      	subs	r0, r2, #0
 8009992:	bf18      	it	ne
 8009994:	2001      	movne	r0, #1
 8009996:	b002      	add	sp, #8
 8009998:	4770      	bx	lr
 800999a:	4610      	mov	r0, r2
 800999c:	e7fb      	b.n	8009996 <__ascii_mbtowc+0x16>
 800999e:	f06f 0001 	mvn.w	r0, #1
 80099a2:	e7f8      	b.n	8009996 <__ascii_mbtowc+0x16>

080099a4 <__ascii_wctomb>:
 80099a4:	b149      	cbz	r1, 80099ba <__ascii_wctomb+0x16>
 80099a6:	2aff      	cmp	r2, #255	; 0xff
 80099a8:	bf85      	ittet	hi
 80099aa:	238a      	movhi	r3, #138	; 0x8a
 80099ac:	6003      	strhi	r3, [r0, #0]
 80099ae:	700a      	strbls	r2, [r1, #0]
 80099b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80099b4:	bf98      	it	ls
 80099b6:	2001      	movls	r0, #1
 80099b8:	4770      	bx	lr
 80099ba:	4608      	mov	r0, r1
 80099bc:	4770      	bx	lr
	...

080099c0 <fiprintf>:
 80099c0:	b40e      	push	{r1, r2, r3}
 80099c2:	b503      	push	{r0, r1, lr}
 80099c4:	4601      	mov	r1, r0
 80099c6:	ab03      	add	r3, sp, #12
 80099c8:	4805      	ldr	r0, [pc, #20]	; (80099e0 <fiprintf+0x20>)
 80099ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ce:	6800      	ldr	r0, [r0, #0]
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	f000 f837 	bl	8009a44 <_vfiprintf_r>
 80099d6:	b002      	add	sp, #8
 80099d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099dc:	b003      	add	sp, #12
 80099de:	4770      	bx	lr
 80099e0:	200000f8 	.word	0x200000f8

080099e4 <abort>:
 80099e4:	b508      	push	{r3, lr}
 80099e6:	2006      	movs	r0, #6
 80099e8:	f000 fa04 	bl	8009df4 <raise>
 80099ec:	2001      	movs	r0, #1
 80099ee:	f7f9 fb13 	bl	8003018 <_exit>

080099f2 <__sfputc_r>:
 80099f2:	6893      	ldr	r3, [r2, #8]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	b410      	push	{r4}
 80099fa:	6093      	str	r3, [r2, #8]
 80099fc:	da08      	bge.n	8009a10 <__sfputc_r+0x1e>
 80099fe:	6994      	ldr	r4, [r2, #24]
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	db01      	blt.n	8009a08 <__sfputc_r+0x16>
 8009a04:	290a      	cmp	r1, #10
 8009a06:	d103      	bne.n	8009a10 <__sfputc_r+0x1e>
 8009a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0c:	f000 b934 	b.w	8009c78 <__swbuf_r>
 8009a10:	6813      	ldr	r3, [r2, #0]
 8009a12:	1c58      	adds	r0, r3, #1
 8009a14:	6010      	str	r0, [r2, #0]
 8009a16:	7019      	strb	r1, [r3, #0]
 8009a18:	4608      	mov	r0, r1
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <__sfputs_r>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	4614      	mov	r4, r2
 8009a28:	18d5      	adds	r5, r2, r3
 8009a2a:	42ac      	cmp	r4, r5
 8009a2c:	d101      	bne.n	8009a32 <__sfputs_r+0x12>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e007      	b.n	8009a42 <__sfputs_r+0x22>
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	463a      	mov	r2, r7
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffda 	bl	80099f2 <__sfputc_r>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	d1f3      	bne.n	8009a2a <__sfputs_r+0xa>
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a44 <_vfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	460d      	mov	r5, r1
 8009a4a:	b09d      	sub	sp, #116	; 0x74
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	4698      	mov	r8, r3
 8009a50:	4606      	mov	r6, r0
 8009a52:	b118      	cbz	r0, 8009a5c <_vfiprintf_r+0x18>
 8009a54:	6a03      	ldr	r3, [r0, #32]
 8009a56:	b90b      	cbnz	r3, 8009a5c <_vfiprintf_r+0x18>
 8009a58:	f7fe faa2 	bl	8007fa0 <__sinit>
 8009a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a5e:	07d9      	lsls	r1, r3, #31
 8009a60:	d405      	bmi.n	8009a6e <_vfiprintf_r+0x2a>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	059a      	lsls	r2, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_vfiprintf_r+0x2a>
 8009a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a6a:	f7fe fb90 	bl	800818e <__retarget_lock_acquire_recursive>
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	071b      	lsls	r3, r3, #28
 8009a72:	d501      	bpl.n	8009a78 <_vfiprintf_r+0x34>
 8009a74:	692b      	ldr	r3, [r5, #16]
 8009a76:	b99b      	cbnz	r3, 8009aa0 <_vfiprintf_r+0x5c>
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 f93a 	bl	8009cf4 <__swsetup_r>
 8009a80:	b170      	cbz	r0, 8009aa0 <_vfiprintf_r+0x5c>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a84:	07dc      	lsls	r4, r3, #31
 8009a86:	d504      	bpl.n	8009a92 <_vfiprintf_r+0x4e>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	b01d      	add	sp, #116	; 0x74
 8009a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	0598      	lsls	r0, r3, #22
 8009a96:	d4f7      	bmi.n	8009a88 <_vfiprintf_r+0x44>
 8009a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a9a:	f7fe fb79 	bl	8008190 <__retarget_lock_release_recursive>
 8009a9e:	e7f3      	b.n	8009a88 <_vfiprintf_r+0x44>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aae:	2330      	movs	r3, #48	; 0x30
 8009ab0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c64 <_vfiprintf_r+0x220>
 8009ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab8:	f04f 0901 	mov.w	r9, #1
 8009abc:	4623      	mov	r3, r4
 8009abe:	469a      	mov	sl, r3
 8009ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac4:	b10a      	cbz	r2, 8009aca <_vfiprintf_r+0x86>
 8009ac6:	2a25      	cmp	r2, #37	; 0x25
 8009ac8:	d1f9      	bne.n	8009abe <_vfiprintf_r+0x7a>
 8009aca:	ebba 0b04 	subs.w	fp, sl, r4
 8009ace:	d00b      	beq.n	8009ae8 <_vfiprintf_r+0xa4>
 8009ad0:	465b      	mov	r3, fp
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ffa2 	bl	8009a20 <__sfputs_r>
 8009adc:	3001      	adds	r0, #1
 8009ade:	f000 80a9 	beq.w	8009c34 <_vfiprintf_r+0x1f0>
 8009ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae4:	445a      	add	r2, fp
 8009ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80a1 	beq.w	8009c34 <_vfiprintf_r+0x1f0>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afc:	f10a 0a01 	add.w	sl, sl, #1
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b08:	931a      	str	r3, [sp, #104]	; 0x68
 8009b0a:	4654      	mov	r4, sl
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	4854      	ldr	r0, [pc, #336]	; (8009c64 <_vfiprintf_r+0x220>)
 8009b14:	f7f6 fb5c 	bl	80001d0 <memchr>
 8009b18:	9a04      	ldr	r2, [sp, #16]
 8009b1a:	b9d8      	cbnz	r0, 8009b54 <_vfiprintf_r+0x110>
 8009b1c:	06d1      	lsls	r1, r2, #27
 8009b1e:	bf44      	itt	mi
 8009b20:	2320      	movmi	r3, #32
 8009b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b26:	0713      	lsls	r3, r2, #28
 8009b28:	bf44      	itt	mi
 8009b2a:	232b      	movmi	r3, #43	; 0x2b
 8009b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b30:	f89a 3000 	ldrb.w	r3, [sl]
 8009b34:	2b2a      	cmp	r3, #42	; 0x2a
 8009b36:	d015      	beq.n	8009b64 <_vfiprintf_r+0x120>
 8009b38:	9a07      	ldr	r2, [sp, #28]
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f04f 0c0a 	mov.w	ip, #10
 8009b42:	4621      	mov	r1, r4
 8009b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b48:	3b30      	subs	r3, #48	; 0x30
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d94d      	bls.n	8009bea <_vfiprintf_r+0x1a6>
 8009b4e:	b1b0      	cbz	r0, 8009b7e <_vfiprintf_r+0x13a>
 8009b50:	9207      	str	r2, [sp, #28]
 8009b52:	e014      	b.n	8009b7e <_vfiprintf_r+0x13a>
 8009b54:	eba0 0308 	sub.w	r3, r0, r8
 8009b58:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	9304      	str	r3, [sp, #16]
 8009b60:	46a2      	mov	sl, r4
 8009b62:	e7d2      	b.n	8009b0a <_vfiprintf_r+0xc6>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d19      	adds	r1, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9103      	str	r1, [sp, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbb      	ittet	lt
 8009b70:	425b      	neglt	r3, r3
 8009b72:	f042 0202 	orrlt.w	r2, r2, #2
 8009b76:	9307      	strge	r3, [sp, #28]
 8009b78:	9307      	strlt	r3, [sp, #28]
 8009b7a:	bfb8      	it	lt
 8009b7c:	9204      	strlt	r2, [sp, #16]
 8009b7e:	7823      	ldrb	r3, [r4, #0]
 8009b80:	2b2e      	cmp	r3, #46	; 0x2e
 8009b82:	d10c      	bne.n	8009b9e <_vfiprintf_r+0x15a>
 8009b84:	7863      	ldrb	r3, [r4, #1]
 8009b86:	2b2a      	cmp	r3, #42	; 0x2a
 8009b88:	d134      	bne.n	8009bf4 <_vfiprintf_r+0x1b0>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	9203      	str	r2, [sp, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bfb8      	it	lt
 8009b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b9a:	3402      	adds	r4, #2
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c74 <_vfiprintf_r+0x230>
 8009ba2:	7821      	ldrb	r1, [r4, #0]
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	f7f6 fb12 	bl	80001d0 <memchr>
 8009bac:	b138      	cbz	r0, 8009bbe <_vfiprintf_r+0x17a>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	eba0 000a 	sub.w	r0, r0, sl
 8009bb4:	2240      	movs	r2, #64	; 0x40
 8009bb6:	4082      	lsls	r2, r0
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	3401      	adds	r4, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc2:	4829      	ldr	r0, [pc, #164]	; (8009c68 <_vfiprintf_r+0x224>)
 8009bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc8:	2206      	movs	r2, #6
 8009bca:	f7f6 fb01 	bl	80001d0 <memchr>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d03f      	beq.n	8009c52 <_vfiprintf_r+0x20e>
 8009bd2:	4b26      	ldr	r3, [pc, #152]	; (8009c6c <_vfiprintf_r+0x228>)
 8009bd4:	bb1b      	cbnz	r3, 8009c1e <_vfiprintf_r+0x1da>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	3308      	adds	r3, #8
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be4:	443b      	add	r3, r7
 8009be6:	9309      	str	r3, [sp, #36]	; 0x24
 8009be8:	e768      	b.n	8009abc <_vfiprintf_r+0x78>
 8009bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e7a6      	b.n	8009b42 <_vfiprintf_r+0xfe>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f04f 0c0a 	mov.w	ip, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c06:	3a30      	subs	r2, #48	; 0x30
 8009c08:	2a09      	cmp	r2, #9
 8009c0a:	d903      	bls.n	8009c14 <_vfiprintf_r+0x1d0>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0c6      	beq.n	8009b9e <_vfiprintf_r+0x15a>
 8009c10:	9105      	str	r1, [sp, #20]
 8009c12:	e7c4      	b.n	8009b9e <_vfiprintf_r+0x15a>
 8009c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f0      	b.n	8009c00 <_vfiprintf_r+0x1bc>
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	462a      	mov	r2, r5
 8009c24:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <_vfiprintf_r+0x22c>)
 8009c26:	a904      	add	r1, sp, #16
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7fd fd67 	bl	80076fc <_printf_float>
 8009c2e:	4607      	mov	r7, r0
 8009c30:	1c78      	adds	r0, r7, #1
 8009c32:	d1d6      	bne.n	8009be2 <_vfiprintf_r+0x19e>
 8009c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c36:	07d9      	lsls	r1, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_vfiprintf_r+0x202>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	059a      	lsls	r2, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_vfiprintf_r+0x202>
 8009c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c42:	f7fe faa5 	bl	8008190 <__retarget_lock_release_recursive>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	065b      	lsls	r3, r3, #25
 8009c4a:	f53f af1d 	bmi.w	8009a88 <_vfiprintf_r+0x44>
 8009c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c50:	e71c      	b.n	8009a8c <_vfiprintf_r+0x48>
 8009c52:	ab03      	add	r3, sp, #12
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <_vfiprintf_r+0x22c>)
 8009c5a:	a904      	add	r1, sp, #16
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7fd fff1 	bl	8007c44 <_printf_i>
 8009c62:	e7e4      	b.n	8009c2e <_vfiprintf_r+0x1ea>
 8009c64:	0800aa3b 	.word	0x0800aa3b
 8009c68:	0800aa45 	.word	0x0800aa45
 8009c6c:	080076fd 	.word	0x080076fd
 8009c70:	08009a21 	.word	0x08009a21
 8009c74:	0800aa41 	.word	0x0800aa41

08009c78 <__swbuf_r>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	460e      	mov	r6, r1
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	4605      	mov	r5, r0
 8009c80:	b118      	cbz	r0, 8009c8a <__swbuf_r+0x12>
 8009c82:	6a03      	ldr	r3, [r0, #32]
 8009c84:	b90b      	cbnz	r3, 8009c8a <__swbuf_r+0x12>
 8009c86:	f7fe f98b 	bl	8007fa0 <__sinit>
 8009c8a:	69a3      	ldr	r3, [r4, #24]
 8009c8c:	60a3      	str	r3, [r4, #8]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	071a      	lsls	r2, r3, #28
 8009c92:	d525      	bpl.n	8009ce0 <__swbuf_r+0x68>
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	b31b      	cbz	r3, 8009ce0 <__swbuf_r+0x68>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	6922      	ldr	r2, [r4, #16]
 8009c9c:	1a98      	subs	r0, r3, r2
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	b2f6      	uxtb	r6, r6
 8009ca2:	4283      	cmp	r3, r0
 8009ca4:	4637      	mov	r7, r6
 8009ca6:	dc04      	bgt.n	8009cb2 <__swbuf_r+0x3a>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	f7ff fdfc 	bl	80098a8 <_fflush_r>
 8009cb0:	b9e0      	cbnz	r0, 8009cec <__swbuf_r+0x74>
 8009cb2:	68a3      	ldr	r3, [r4, #8]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	60a3      	str	r3, [r4, #8]
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	701e      	strb	r6, [r3, #0]
 8009cc0:	6962      	ldr	r2, [r4, #20]
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d004      	beq.n	8009cd2 <__swbuf_r+0x5a>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	07db      	lsls	r3, r3, #31
 8009ccc:	d506      	bpl.n	8009cdc <__swbuf_r+0x64>
 8009cce:	2e0a      	cmp	r6, #10
 8009cd0:	d104      	bne.n	8009cdc <__swbuf_r+0x64>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f7ff fde7 	bl	80098a8 <_fflush_r>
 8009cda:	b938      	cbnz	r0, 8009cec <__swbuf_r+0x74>
 8009cdc:	4638      	mov	r0, r7
 8009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 f806 	bl	8009cf4 <__swsetup_r>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d0d5      	beq.n	8009c98 <__swbuf_r+0x20>
 8009cec:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf0:	e7f4      	b.n	8009cdc <__swbuf_r+0x64>
	...

08009cf4 <__swsetup_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <__swsetup_r+0xac>)
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	b118      	cbz	r0, 8009d08 <__swsetup_r+0x14>
 8009d00:	6a03      	ldr	r3, [r0, #32]
 8009d02:	b90b      	cbnz	r3, 8009d08 <__swsetup_r+0x14>
 8009d04:	f7fe f94c 	bl	8007fa0 <__sinit>
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d0e:	0718      	lsls	r0, r3, #28
 8009d10:	d422      	bmi.n	8009d58 <__swsetup_r+0x64>
 8009d12:	06d9      	lsls	r1, r3, #27
 8009d14:	d407      	bmi.n	8009d26 <__swsetup_r+0x32>
 8009d16:	2309      	movs	r3, #9
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e034      	b.n	8009d90 <__swsetup_r+0x9c>
 8009d26:	0758      	lsls	r0, r3, #29
 8009d28:	d512      	bpl.n	8009d50 <__swsetup_r+0x5c>
 8009d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2c:	b141      	cbz	r1, 8009d40 <__swsetup_r+0x4c>
 8009d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d32:	4299      	cmp	r1, r3
 8009d34:	d002      	beq.n	8009d3c <__swsetup_r+0x48>
 8009d36:	4628      	mov	r0, r5
 8009d38:	f7ff f8b4 	bl	8008ea4 <_free_r>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6363      	str	r3, [r4, #52]	; 0x34
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	f043 0308 	orr.w	r3, r3, #8
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	b94b      	cbnz	r3, 8009d70 <__swsetup_r+0x7c>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d66:	d003      	beq.n	8009d70 <__swsetup_r+0x7c>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f884 	bl	8009e78 <__smakebuf_r>
 8009d70:	89a0      	ldrh	r0, [r4, #12]
 8009d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d76:	f010 0301 	ands.w	r3, r0, #1
 8009d7a:	d00a      	beq.n	8009d92 <__swsetup_r+0x9e>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60a3      	str	r3, [r4, #8]
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	425b      	negs	r3, r3
 8009d84:	61a3      	str	r3, [r4, #24]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	b943      	cbnz	r3, 8009d9c <__swsetup_r+0xa8>
 8009d8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d8e:	d1c4      	bne.n	8009d1a <__swsetup_r+0x26>
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	0781      	lsls	r1, r0, #30
 8009d94:	bf58      	it	pl
 8009d96:	6963      	ldrpl	r3, [r4, #20]
 8009d98:	60a3      	str	r3, [r4, #8]
 8009d9a:	e7f4      	b.n	8009d86 <__swsetup_r+0x92>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7f7      	b.n	8009d90 <__swsetup_r+0x9c>
 8009da0:	200000f8 	.word	0x200000f8

08009da4 <_raise_r>:
 8009da4:	291f      	cmp	r1, #31
 8009da6:	b538      	push	{r3, r4, r5, lr}
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	d904      	bls.n	8009db8 <_raise_r+0x14>
 8009dae:	2316      	movs	r3, #22
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009dba:	b112      	cbz	r2, 8009dc2 <_raise_r+0x1e>
 8009dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dc0:	b94b      	cbnz	r3, 8009dd6 <_raise_r+0x32>
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 f830 	bl	8009e28 <_getpid_r>
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4620      	mov	r0, r4
 8009dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_kill_r>
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d00a      	beq.n	8009df0 <_raise_r+0x4c>
 8009dda:	1c59      	adds	r1, r3, #1
 8009ddc:	d103      	bne.n	8009de6 <_raise_r+0x42>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	2001      	movs	r0, #1
 8009de4:	e7e7      	b.n	8009db6 <_raise_r+0x12>
 8009de6:	2400      	movs	r4, #0
 8009de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dec:	4628      	mov	r0, r5
 8009dee:	4798      	blx	r3
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7e0      	b.n	8009db6 <_raise_r+0x12>

08009df4 <raise>:
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <raise+0xc>)
 8009df6:	4601      	mov	r1, r0
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	f7ff bfd3 	b.w	8009da4 <_raise_r>
 8009dfe:	bf00      	nop
 8009e00:	200000f8 	.word	0x200000f8

08009e04 <_kill_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_kill_r+0x20>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	4611      	mov	r1, r2
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f7f9 f8f1 	bl	8002ff8 <_kill>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d102      	bne.n	8009e20 <_kill_r+0x1c>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b103      	cbz	r3, 8009e20 <_kill_r+0x1c>
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	20004714 	.word	0x20004714

08009e28 <_getpid_r>:
 8009e28:	f7f9 b8de 	b.w	8002fe8 <_getpid>

08009e2c <__swhatbuf_r>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	b096      	sub	sp, #88	; 0x58
 8009e38:	4615      	mov	r5, r2
 8009e3a:	461e      	mov	r6, r3
 8009e3c:	da0d      	bge.n	8009e5a <__swhatbuf_r+0x2e>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	bf0c      	ite	eq
 8009e4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e4e:	2340      	movne	r3, #64	; 0x40
 8009e50:	2000      	movs	r0, #0
 8009e52:	6031      	str	r1, [r6, #0]
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	b016      	add	sp, #88	; 0x58
 8009e58:	bd70      	pop	{r4, r5, r6, pc}
 8009e5a:	466a      	mov	r2, sp
 8009e5c:	f000 f848 	bl	8009ef0 <_fstat_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dbec      	blt.n	8009e3e <__swhatbuf_r+0x12>
 8009e64:	9901      	ldr	r1, [sp, #4]
 8009e66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e6e:	4259      	negs	r1, r3
 8009e70:	4159      	adcs	r1, r3
 8009e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e76:	e7eb      	b.n	8009e50 <__swhatbuf_r+0x24>

08009e78 <__smakebuf_r>:
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e7c:	079d      	lsls	r5, r3, #30
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	d507      	bpl.n	8009e94 <__smakebuf_r+0x1c>
 8009e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	6163      	str	r3, [r4, #20]
 8009e90:	b002      	add	sp, #8
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	ab01      	add	r3, sp, #4
 8009e96:	466a      	mov	r2, sp
 8009e98:	f7ff ffc8 	bl	8009e2c <__swhatbuf_r>
 8009e9c:	9900      	ldr	r1, [sp, #0]
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff f873 	bl	8008f8c <_malloc_r>
 8009ea6:	b948      	cbnz	r0, 8009ebc <__smakebuf_r+0x44>
 8009ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d4ef      	bmi.n	8009e90 <__smakebuf_r+0x18>
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	f043 0302 	orr.w	r3, r3, #2
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	e7e3      	b.n	8009e84 <__smakebuf_r+0xc>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	6020      	str	r0, [r4, #0]
 8009ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	9b00      	ldr	r3, [sp, #0]
 8009ec8:	6163      	str	r3, [r4, #20]
 8009eca:	9b01      	ldr	r3, [sp, #4]
 8009ecc:	6120      	str	r0, [r4, #16]
 8009ece:	b15b      	cbz	r3, 8009ee8 <__smakebuf_r+0x70>
 8009ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 f81d 	bl	8009f14 <_isatty_r>
 8009eda:	b128      	cbz	r0, 8009ee8 <__smakebuf_r+0x70>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	431d      	orrs	r5, r3
 8009eec:	81a5      	strh	r5, [r4, #12]
 8009eee:	e7cf      	b.n	8009e90 <__smakebuf_r+0x18>

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_fstat_r+0x20>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7f9 f8da 	bl	80030b6 <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	20004714 	.word	0x20004714

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_isatty_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f9 f8d9 	bl	80030d6 <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20004714 	.word	0x20004714

08009f34 <atan2>:
 8009f34:	f000 bab0 	b.w	800a498 <__ieee754_atan2>

08009f38 <sqrt>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	ed2d 8b02 	vpush	{d8}
 8009f3e:	ec55 4b10 	vmov	r4, r5, d0
 8009f42:	f000 f9cf 	bl	800a2e4 <__ieee754_sqrt>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f52:	eef0 8a60 	vmov.f32	s17, s1
 8009f56:	f7f6 fde9 	bl	8000b2c <__aeabi_dcmpun>
 8009f5a:	b990      	cbnz	r0, 8009f82 <sqrt+0x4a>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 fdba 	bl	8000adc <__aeabi_dcmplt>
 8009f68:	b158      	cbz	r0, 8009f82 <sqrt+0x4a>
 8009f6a:	f7fe f8e5 	bl	8008138 <__errno>
 8009f6e:	2321      	movs	r3, #33	; 0x21
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	4610      	mov	r0, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7f6 fc67 	bl	800084c <__aeabi_ddiv>
 8009f7e:	ec41 0b18 	vmov	d8, r0, r1
 8009f82:	eeb0 0a48 	vmov.f32	s0, s16
 8009f86:	eef0 0a68 	vmov.f32	s1, s17
 8009f8a:	ecbd 8b02 	vpop	{d8}
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}

08009f90 <atan>:
 8009f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	ec55 4b10 	vmov	r4, r5, d0
 8009f98:	4bc3      	ldr	r3, [pc, #780]	; (800a2a8 <atan+0x318>)
 8009f9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f9e:	429e      	cmp	r6, r3
 8009fa0:	46ab      	mov	fp, r5
 8009fa2:	dd18      	ble.n	8009fd6 <atan+0x46>
 8009fa4:	4bc1      	ldr	r3, [pc, #772]	; (800a2ac <atan+0x31c>)
 8009fa6:	429e      	cmp	r6, r3
 8009fa8:	dc01      	bgt.n	8009fae <atan+0x1e>
 8009faa:	d109      	bne.n	8009fc0 <atan+0x30>
 8009fac:	b144      	cbz	r4, 8009fc0 <atan+0x30>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 f969 	bl	800028c <__adddf3>
 8009fba:	4604      	mov	r4, r0
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	e006      	b.n	8009fce <atan+0x3e>
 8009fc0:	f1bb 0f00 	cmp.w	fp, #0
 8009fc4:	f300 8131 	bgt.w	800a22a <atan+0x29a>
 8009fc8:	a59b      	add	r5, pc, #620	; (adr r5, 800a238 <atan+0x2a8>)
 8009fca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fce:	ec45 4b10 	vmov	d0, r4, r5
 8009fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	4bb6      	ldr	r3, [pc, #728]	; (800a2b0 <atan+0x320>)
 8009fd8:	429e      	cmp	r6, r3
 8009fda:	dc14      	bgt.n	800a006 <atan+0x76>
 8009fdc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009fe0:	429e      	cmp	r6, r3
 8009fe2:	dc0d      	bgt.n	800a000 <atan+0x70>
 8009fe4:	a396      	add	r3, pc, #600	; (adr r3, 800a240 <atan+0x2b0>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	ee10 0a10 	vmov	r0, s0
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 f94c 	bl	800028c <__adddf3>
 8009ff4:	4baf      	ldr	r3, [pc, #700]	; (800a2b4 <atan+0x324>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f7f6 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d1e6      	bne.n	8009fce <atan+0x3e>
 800a000:	f04f 3aff 	mov.w	sl, #4294967295
 800a004:	e02b      	b.n	800a05e <atan+0xce>
 800a006:	f000 f963 	bl	800a2d0 <fabs>
 800a00a:	4bab      	ldr	r3, [pc, #684]	; (800a2b8 <atan+0x328>)
 800a00c:	429e      	cmp	r6, r3
 800a00e:	ec55 4b10 	vmov	r4, r5, d0
 800a012:	f300 80bf 	bgt.w	800a194 <atan+0x204>
 800a016:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a01a:	429e      	cmp	r6, r3
 800a01c:	f300 80a0 	bgt.w	800a160 <atan+0x1d0>
 800a020:	ee10 2a10 	vmov	r2, s0
 800a024:	ee10 0a10 	vmov	r0, s0
 800a028:	462b      	mov	r3, r5
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7f6 f92e 	bl	800028c <__adddf3>
 800a030:	4ba0      	ldr	r3, [pc, #640]	; (800a2b4 <atan+0x324>)
 800a032:	2200      	movs	r2, #0
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	2200      	movs	r2, #0
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a042:	4620      	mov	r0, r4
 800a044:	4629      	mov	r1, r5
 800a046:	f7f6 f921 	bl	800028c <__adddf3>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4630      	mov	r0, r6
 800a050:	4639      	mov	r1, r7
 800a052:	f7f6 fbfb 	bl	800084c <__aeabi_ddiv>
 800a056:	f04f 0a00 	mov.w	sl, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	460d      	mov	r5, r1
 800a05e:	4622      	mov	r2, r4
 800a060:	462b      	mov	r3, r5
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fac7 	bl	80005f8 <__aeabi_dmul>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4680      	mov	r8, r0
 800a070:	4689      	mov	r9, r1
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	a374      	add	r3, pc, #464	; (adr r3, 800a248 <atan+0x2b8>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	4606      	mov	r6, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	f7f6 faba 	bl	80005f8 <__aeabi_dmul>
 800a084:	a372      	add	r3, pc, #456	; (adr r3, 800a250 <atan+0x2c0>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	f7f6 f8ff 	bl	800028c <__adddf3>
 800a08e:	4632      	mov	r2, r6
 800a090:	463b      	mov	r3, r7
 800a092:	f7f6 fab1 	bl	80005f8 <__aeabi_dmul>
 800a096:	a370      	add	r3, pc, #448	; (adr r3, 800a258 <atan+0x2c8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 f8f6 	bl	800028c <__adddf3>
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	f7f6 faa8 	bl	80005f8 <__aeabi_dmul>
 800a0a8:	a36d      	add	r3, pc, #436	; (adr r3, 800a260 <atan+0x2d0>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f8ed 	bl	800028c <__adddf3>
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	a36b      	add	r3, pc, #428	; (adr r3, 800a268 <atan+0x2d8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 f8e4 	bl	800028c <__adddf3>
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	f7f6 fa96 	bl	80005f8 <__aeabi_dmul>
 800a0cc:	a368      	add	r3, pc, #416	; (adr r3, 800a270 <atan+0x2e0>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 f8db 	bl	800028c <__adddf3>
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	464b      	mov	r3, r9
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	a366      	add	r3, pc, #408	; (adr r3, 800a278 <atan+0x2e8>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	a363      	add	r3, pc, #396	; (adr r3, 800a280 <atan+0x2f0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	f7f6 fa7b 	bl	80005f8 <__aeabi_dmul>
 800a102:	a361      	add	r3, pc, #388	; (adr r3, 800a288 <atan+0x2f8>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f7f6 f8be 	bl	8000288 <__aeabi_dsub>
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	f7f6 fa72 	bl	80005f8 <__aeabi_dmul>
 800a114:	a35e      	add	r3, pc, #376	; (adr r3, 800a290 <atan+0x300>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 f8b5 	bl	8000288 <__aeabi_dsub>
 800a11e:	4632      	mov	r2, r6
 800a120:	463b      	mov	r3, r7
 800a122:	f7f6 fa69 	bl	80005f8 <__aeabi_dmul>
 800a126:	a35c      	add	r3, pc, #368	; (adr r3, 800a298 <atan+0x308>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	4632      	mov	r2, r6
 800a132:	463b      	mov	r3, r7
 800a134:	f7f6 fa60 	bl	80005f8 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 f8a4 	bl	800028c <__adddf3>
 800a144:	4622      	mov	r2, r4
 800a146:	462b      	mov	r3, r5
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	d14b      	bne.n	800a1ee <atan+0x25e>
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	e72c      	b.n	8009fba <atan+0x2a>
 800a160:	ee10 0a10 	vmov	r0, s0
 800a164:	4b53      	ldr	r3, [pc, #332]	; (800a2b4 <atan+0x324>)
 800a166:	2200      	movs	r2, #0
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 f88d 	bl	8000288 <__aeabi_dsub>
 800a16e:	4b51      	ldr	r3, [pc, #324]	; (800a2b4 <atan+0x324>)
 800a170:	4606      	mov	r6, r0
 800a172:	460f      	mov	r7, r1
 800a174:	2200      	movs	r2, #0
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 f887 	bl	800028c <__adddf3>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 fb61 	bl	800084c <__aeabi_ddiv>
 800a18a:	f04f 0a01 	mov.w	sl, #1
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	e764      	b.n	800a05e <atan+0xce>
 800a194:	4b49      	ldr	r3, [pc, #292]	; (800a2bc <atan+0x32c>)
 800a196:	429e      	cmp	r6, r3
 800a198:	da1d      	bge.n	800a1d6 <atan+0x246>
 800a19a:	ee10 0a10 	vmov	r0, s0
 800a19e:	4b48      	ldr	r3, [pc, #288]	; (800a2c0 <atan+0x330>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f7f6 f870 	bl	8000288 <__aeabi_dsub>
 800a1a8:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <atan+0x330>)
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 fa20 	bl	80005f8 <__aeabi_dmul>
 800a1b8:	4b3e      	ldr	r3, [pc, #248]	; (800a2b4 <atan+0x324>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f7f6 f866 	bl	800028c <__adddf3>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 fb40 	bl	800084c <__aeabi_ddiv>
 800a1cc:	f04f 0a02 	mov.w	sl, #2
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	e743      	b.n	800a05e <atan+0xce>
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	ee10 2a10 	vmov	r2, s0
 800a1dc:	4939      	ldr	r1, [pc, #228]	; (800a2c4 <atan+0x334>)
 800a1de:	2000      	movs	r0, #0
 800a1e0:	f7f6 fb34 	bl	800084c <__aeabi_ddiv>
 800a1e4:	f04f 0a03 	mov.w	sl, #3
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	e737      	b.n	800a05e <atan+0xce>
 800a1ee:	4b36      	ldr	r3, [pc, #216]	; (800a2c8 <atan+0x338>)
 800a1f0:	4e36      	ldr	r6, [pc, #216]	; (800a2cc <atan+0x33c>)
 800a1f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	f7f6 f845 	bl	8000288 <__aeabi_dsub>
 800a1fe:	4622      	mov	r2, r4
 800a200:	462b      	mov	r3, r5
 800a202:	f7f6 f841 	bl	8000288 <__aeabi_dsub>
 800a206:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a212:	f7f6 f839 	bl	8000288 <__aeabi_dsub>
 800a216:	f1bb 0f00 	cmp.w	fp, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	460d      	mov	r5, r1
 800a21e:	f6bf aed6 	bge.w	8009fce <atan+0x3e>
 800a222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a226:	461d      	mov	r5, r3
 800a228:	e6d1      	b.n	8009fce <atan+0x3e>
 800a22a:	a51d      	add	r5, pc, #116	; (adr r5, 800a2a0 <atan+0x310>)
 800a22c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a230:	e6cd      	b.n	8009fce <atan+0x3e>
 800a232:	bf00      	nop
 800a234:	f3af 8000 	nop.w
 800a238:	54442d18 	.word	0x54442d18
 800a23c:	bff921fb 	.word	0xbff921fb
 800a240:	8800759c 	.word	0x8800759c
 800a244:	7e37e43c 	.word	0x7e37e43c
 800a248:	e322da11 	.word	0xe322da11
 800a24c:	3f90ad3a 	.word	0x3f90ad3a
 800a250:	24760deb 	.word	0x24760deb
 800a254:	3fa97b4b 	.word	0x3fa97b4b
 800a258:	a0d03d51 	.word	0xa0d03d51
 800a25c:	3fb10d66 	.word	0x3fb10d66
 800a260:	c54c206e 	.word	0xc54c206e
 800a264:	3fb745cd 	.word	0x3fb745cd
 800a268:	920083ff 	.word	0x920083ff
 800a26c:	3fc24924 	.word	0x3fc24924
 800a270:	5555550d 	.word	0x5555550d
 800a274:	3fd55555 	.word	0x3fd55555
 800a278:	2c6a6c2f 	.word	0x2c6a6c2f
 800a27c:	bfa2b444 	.word	0xbfa2b444
 800a280:	52defd9a 	.word	0x52defd9a
 800a284:	3fadde2d 	.word	0x3fadde2d
 800a288:	af749a6d 	.word	0xaf749a6d
 800a28c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a290:	fe231671 	.word	0xfe231671
 800a294:	3fbc71c6 	.word	0x3fbc71c6
 800a298:	9998ebc4 	.word	0x9998ebc4
 800a29c:	3fc99999 	.word	0x3fc99999
 800a2a0:	54442d18 	.word	0x54442d18
 800a2a4:	3ff921fb 	.word	0x3ff921fb
 800a2a8:	440fffff 	.word	0x440fffff
 800a2ac:	7ff00000 	.word	0x7ff00000
 800a2b0:	3fdbffff 	.word	0x3fdbffff
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	3ff2ffff 	.word	0x3ff2ffff
 800a2bc:	40038000 	.word	0x40038000
 800a2c0:	3ff80000 	.word	0x3ff80000
 800a2c4:	bff00000 	.word	0xbff00000
 800a2c8:	0800aa70 	.word	0x0800aa70
 800a2cc:	0800aa50 	.word	0x0800aa50

0800a2d0 <fabs>:
 800a2d0:	ec51 0b10 	vmov	r0, r1, d0
 800a2d4:	ee10 2a10 	vmov	r2, s0
 800a2d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2dc:	ec43 2b10 	vmov	d0, r2, r3
 800a2e0:	4770      	bx	lr
	...

0800a2e4 <__ieee754_sqrt>:
 800a2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	ec55 4b10 	vmov	r4, r5, d0
 800a2ec:	4e67      	ldr	r6, [pc, #412]	; (800a48c <__ieee754_sqrt+0x1a8>)
 800a2ee:	43ae      	bics	r6, r5
 800a2f0:	ee10 0a10 	vmov	r0, s0
 800a2f4:	ee10 2a10 	vmov	r2, s0
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	d10d      	bne.n	800a31a <__ieee754_sqrt+0x36>
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f5 ffbf 	bl	800028c <__adddf3>
 800a30e:	4604      	mov	r4, r0
 800a310:	460d      	mov	r5, r1
 800a312:	ec45 4b10 	vmov	d0, r4, r5
 800a316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	2d00      	cmp	r5, #0
 800a31c:	dc0b      	bgt.n	800a336 <__ieee754_sqrt+0x52>
 800a31e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a322:	4326      	orrs	r6, r4
 800a324:	d0f5      	beq.n	800a312 <__ieee754_sqrt+0x2e>
 800a326:	b135      	cbz	r5, 800a336 <__ieee754_sqrt+0x52>
 800a328:	f7f5 ffae 	bl	8000288 <__aeabi_dsub>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	f7f6 fa8c 	bl	800084c <__aeabi_ddiv>
 800a334:	e7eb      	b.n	800a30e <__ieee754_sqrt+0x2a>
 800a336:	1509      	asrs	r1, r1, #20
 800a338:	f000 808d 	beq.w	800a456 <__ieee754_sqrt+0x172>
 800a33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a340:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a348:	07c9      	lsls	r1, r1, #31
 800a34a:	bf5c      	itt	pl
 800a34c:	005b      	lslpl	r3, r3, #1
 800a34e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a352:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a356:	bf58      	it	pl
 800a358:	0052      	lslpl	r2, r2, #1
 800a35a:	2500      	movs	r5, #0
 800a35c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a360:	1076      	asrs	r6, r6, #1
 800a362:	0052      	lsls	r2, r2, #1
 800a364:	f04f 0e16 	mov.w	lr, #22
 800a368:	46ac      	mov	ip, r5
 800a36a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a36e:	eb0c 0001 	add.w	r0, ip, r1
 800a372:	4298      	cmp	r0, r3
 800a374:	bfde      	ittt	le
 800a376:	1a1b      	suble	r3, r3, r0
 800a378:	eb00 0c01 	addle.w	ip, r0, r1
 800a37c:	186d      	addle	r5, r5, r1
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	f1be 0e01 	subs.w	lr, lr, #1
 800a384:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a388:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a38c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a390:	d1ed      	bne.n	800a36e <__ieee754_sqrt+0x8a>
 800a392:	4674      	mov	r4, lr
 800a394:	2720      	movs	r7, #32
 800a396:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a39a:	4563      	cmp	r3, ip
 800a39c:	eb01 000e 	add.w	r0, r1, lr
 800a3a0:	dc02      	bgt.n	800a3a8 <__ieee754_sqrt+0xc4>
 800a3a2:	d113      	bne.n	800a3cc <__ieee754_sqrt+0xe8>
 800a3a4:	4290      	cmp	r0, r2
 800a3a6:	d811      	bhi.n	800a3cc <__ieee754_sqrt+0xe8>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	eb00 0e01 	add.w	lr, r0, r1
 800a3ae:	da57      	bge.n	800a460 <__ieee754_sqrt+0x17c>
 800a3b0:	f1be 0f00 	cmp.w	lr, #0
 800a3b4:	db54      	blt.n	800a460 <__ieee754_sqrt+0x17c>
 800a3b6:	f10c 0801 	add.w	r8, ip, #1
 800a3ba:	eba3 030c 	sub.w	r3, r3, ip
 800a3be:	4290      	cmp	r0, r2
 800a3c0:	bf88      	it	hi
 800a3c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a3c6:	1a12      	subs	r2, r2, r0
 800a3c8:	440c      	add	r4, r1
 800a3ca:	46c4      	mov	ip, r8
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	3f01      	subs	r7, #1
 800a3d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a3d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a3d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a3dc:	d1dd      	bne.n	800a39a <__ieee754_sqrt+0xb6>
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	d01b      	beq.n	800a41a <__ieee754_sqrt+0x136>
 800a3e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a490 <__ieee754_sqrt+0x1ac>
 800a3e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a494 <__ieee754_sqrt+0x1b0>
 800a3ea:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3ee:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3f2:	f7f5 ff49 	bl	8000288 <__aeabi_dsub>
 800a3f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f6 fb75 	bl	8000af0 <__aeabi_dcmple>
 800a406:	b140      	cbz	r0, 800a41a <__ieee754_sqrt+0x136>
 800a408:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a40c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a410:	e9db 2300 	ldrd	r2, r3, [fp]
 800a414:	d126      	bne.n	800a464 <__ieee754_sqrt+0x180>
 800a416:	3501      	adds	r5, #1
 800a418:	463c      	mov	r4, r7
 800a41a:	106a      	asrs	r2, r5, #1
 800a41c:	0863      	lsrs	r3, r4, #1
 800a41e:	07e9      	lsls	r1, r5, #31
 800a420:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a424:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a428:	bf48      	it	mi
 800a42a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a42e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a432:	461c      	mov	r4, r3
 800a434:	e76d      	b.n	800a312 <__ieee754_sqrt+0x2e>
 800a436:	0ad3      	lsrs	r3, r2, #11
 800a438:	3815      	subs	r0, #21
 800a43a:	0552      	lsls	r2, r2, #21
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0fa      	beq.n	800a436 <__ieee754_sqrt+0x152>
 800a440:	02dc      	lsls	r4, r3, #11
 800a442:	d50a      	bpl.n	800a45a <__ieee754_sqrt+0x176>
 800a444:	f1c1 0420 	rsb	r4, r1, #32
 800a448:	fa22 f404 	lsr.w	r4, r2, r4
 800a44c:	1e4d      	subs	r5, r1, #1
 800a44e:	408a      	lsls	r2, r1
 800a450:	4323      	orrs	r3, r4
 800a452:	1b41      	subs	r1, r0, r5
 800a454:	e772      	b.n	800a33c <__ieee754_sqrt+0x58>
 800a456:	4608      	mov	r0, r1
 800a458:	e7f0      	b.n	800a43c <__ieee754_sqrt+0x158>
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	3101      	adds	r1, #1
 800a45e:	e7ef      	b.n	800a440 <__ieee754_sqrt+0x15c>
 800a460:	46e0      	mov	r8, ip
 800a462:	e7aa      	b.n	800a3ba <__ieee754_sqrt+0xd6>
 800a464:	f7f5 ff12 	bl	800028c <__adddf3>
 800a468:	e9da 8900 	ldrd	r8, r9, [sl]
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4640      	mov	r0, r8
 800a472:	4649      	mov	r1, r9
 800a474:	f7f6 fb32 	bl	8000adc <__aeabi_dcmplt>
 800a478:	b120      	cbz	r0, 800a484 <__ieee754_sqrt+0x1a0>
 800a47a:	1ca0      	adds	r0, r4, #2
 800a47c:	bf08      	it	eq
 800a47e:	3501      	addeq	r5, #1
 800a480:	3402      	adds	r4, #2
 800a482:	e7ca      	b.n	800a41a <__ieee754_sqrt+0x136>
 800a484:	3401      	adds	r4, #1
 800a486:	f024 0401 	bic.w	r4, r4, #1
 800a48a:	e7c6      	b.n	800a41a <__ieee754_sqrt+0x136>
 800a48c:	7ff00000 	.word	0x7ff00000
 800a490:	20000268 	.word	0x20000268
 800a494:	20000270 	.word	0x20000270

0800a498 <__ieee754_atan2>:
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	ec57 6b11 	vmov	r6, r7, d1
 800a4a0:	4273      	negs	r3, r6
 800a4a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a620 <__ieee754_atan2+0x188>
 800a4a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a4aa:	4333      	orrs	r3, r6
 800a4ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a4b0:	4543      	cmp	r3, r8
 800a4b2:	ec51 0b10 	vmov	r0, r1, d0
 800a4b6:	ee11 5a10 	vmov	r5, s2
 800a4ba:	d80a      	bhi.n	800a4d2 <__ieee754_atan2+0x3a>
 800a4bc:	4244      	negs	r4, r0
 800a4be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a4c2:	4304      	orrs	r4, r0
 800a4c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a4c8:	4544      	cmp	r4, r8
 800a4ca:	ee10 9a10 	vmov	r9, s0
 800a4ce:	468e      	mov	lr, r1
 800a4d0:	d907      	bls.n	800a4e2 <__ieee754_atan2+0x4a>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f5 fed9 	bl	800028c <__adddf3>
 800a4da:	ec41 0b10 	vmov	d0, r0, r1
 800a4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a4e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a4ea:	4334      	orrs	r4, r6
 800a4ec:	d103      	bne.n	800a4f6 <__ieee754_atan2+0x5e>
 800a4ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f2:	f7ff bd4d 	b.w	8009f90 <atan>
 800a4f6:	17bc      	asrs	r4, r7, #30
 800a4f8:	f004 0402 	and.w	r4, r4, #2
 800a4fc:	ea53 0909 	orrs.w	r9, r3, r9
 800a500:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a504:	d107      	bne.n	800a516 <__ieee754_atan2+0x7e>
 800a506:	2c02      	cmp	r4, #2
 800a508:	d05f      	beq.n	800a5ca <__ieee754_atan2+0x132>
 800a50a:	2c03      	cmp	r4, #3
 800a50c:	d1e5      	bne.n	800a4da <__ieee754_atan2+0x42>
 800a50e:	a140      	add	r1, pc, #256	; (adr r1, 800a610 <__ieee754_atan2+0x178>)
 800a510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a514:	e7e1      	b.n	800a4da <__ieee754_atan2+0x42>
 800a516:	4315      	orrs	r5, r2
 800a518:	d106      	bne.n	800a528 <__ieee754_atan2+0x90>
 800a51a:	f1be 0f00 	cmp.w	lr, #0
 800a51e:	da5f      	bge.n	800a5e0 <__ieee754_atan2+0x148>
 800a520:	a13d      	add	r1, pc, #244	; (adr r1, 800a618 <__ieee754_atan2+0x180>)
 800a522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a526:	e7d8      	b.n	800a4da <__ieee754_atan2+0x42>
 800a528:	4542      	cmp	r2, r8
 800a52a:	d10f      	bne.n	800a54c <__ieee754_atan2+0xb4>
 800a52c:	4293      	cmp	r3, r2
 800a52e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a532:	d107      	bne.n	800a544 <__ieee754_atan2+0xac>
 800a534:	2c02      	cmp	r4, #2
 800a536:	d84c      	bhi.n	800a5d2 <__ieee754_atan2+0x13a>
 800a538:	4b33      	ldr	r3, [pc, #204]	; (800a608 <__ieee754_atan2+0x170>)
 800a53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a53e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a542:	e7ca      	b.n	800a4da <__ieee754_atan2+0x42>
 800a544:	2c02      	cmp	r4, #2
 800a546:	d848      	bhi.n	800a5da <__ieee754_atan2+0x142>
 800a548:	4b30      	ldr	r3, [pc, #192]	; (800a60c <__ieee754_atan2+0x174>)
 800a54a:	e7f6      	b.n	800a53a <__ieee754_atan2+0xa2>
 800a54c:	4543      	cmp	r3, r8
 800a54e:	d0e4      	beq.n	800a51a <__ieee754_atan2+0x82>
 800a550:	1a9b      	subs	r3, r3, r2
 800a552:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a556:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a55a:	da1e      	bge.n	800a59a <__ieee754_atan2+0x102>
 800a55c:	2f00      	cmp	r7, #0
 800a55e:	da01      	bge.n	800a564 <__ieee754_atan2+0xcc>
 800a560:	323c      	adds	r2, #60	; 0x3c
 800a562:	db1e      	blt.n	800a5a2 <__ieee754_atan2+0x10a>
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	f7f6 f970 	bl	800084c <__aeabi_ddiv>
 800a56c:	ec41 0b10 	vmov	d0, r0, r1
 800a570:	f7ff feae 	bl	800a2d0 <fabs>
 800a574:	f7ff fd0c 	bl	8009f90 <atan>
 800a578:	ec51 0b10 	vmov	r0, r1, d0
 800a57c:	2c01      	cmp	r4, #1
 800a57e:	d013      	beq.n	800a5a8 <__ieee754_atan2+0x110>
 800a580:	2c02      	cmp	r4, #2
 800a582:	d015      	beq.n	800a5b0 <__ieee754_atan2+0x118>
 800a584:	2c00      	cmp	r4, #0
 800a586:	d0a8      	beq.n	800a4da <__ieee754_atan2+0x42>
 800a588:	a317      	add	r3, pc, #92	; (adr r3, 800a5e8 <__ieee754_atan2+0x150>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f5 fe7b 	bl	8000288 <__aeabi_dsub>
 800a592:	a317      	add	r3, pc, #92	; (adr r3, 800a5f0 <__ieee754_atan2+0x158>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	e014      	b.n	800a5c4 <__ieee754_atan2+0x12c>
 800a59a:	a117      	add	r1, pc, #92	; (adr r1, 800a5f8 <__ieee754_atan2+0x160>)
 800a59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a0:	e7ec      	b.n	800a57c <__ieee754_atan2+0xe4>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	e7e9      	b.n	800a57c <__ieee754_atan2+0xe4>
 800a5a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	e794      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5b0:	a30d      	add	r3, pc, #52	; (adr r3, 800a5e8 <__ieee754_atan2+0x150>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe67 	bl	8000288 <__aeabi_dsub>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	a10c      	add	r1, pc, #48	; (adr r1, 800a5f0 <__ieee754_atan2+0x158>)
 800a5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c4:	f7f5 fe60 	bl	8000288 <__aeabi_dsub>
 800a5c8:	e787      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5ca:	a109      	add	r1, pc, #36	; (adr r1, 800a5f0 <__ieee754_atan2+0x158>)
 800a5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d0:	e783      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5d2:	a10b      	add	r1, pc, #44	; (adr r1, 800a600 <__ieee754_atan2+0x168>)
 800a5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d8:	e77f      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	2100      	movs	r1, #0
 800a5de:	e77c      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5e0:	a105      	add	r1, pc, #20	; (adr r1, 800a5f8 <__ieee754_atan2+0x160>)
 800a5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5e6:	e778      	b.n	800a4da <__ieee754_atan2+0x42>
 800a5e8:	33145c07 	.word	0x33145c07
 800a5ec:	3ca1a626 	.word	0x3ca1a626
 800a5f0:	54442d18 	.word	0x54442d18
 800a5f4:	400921fb 	.word	0x400921fb
 800a5f8:	54442d18 	.word	0x54442d18
 800a5fc:	3ff921fb 	.word	0x3ff921fb
 800a600:	54442d18 	.word	0x54442d18
 800a604:	3fe921fb 	.word	0x3fe921fb
 800a608:	0800aa90 	.word	0x0800aa90
 800a60c:	0800aaa8 	.word	0x0800aaa8
 800a610:	54442d18 	.word	0x54442d18
 800a614:	c00921fb 	.word	0xc00921fb
 800a618:	54442d18 	.word	0x54442d18
 800a61c:	bff921fb 	.word	0xbff921fb
 800a620:	7ff00000 	.word	0x7ff00000

0800a624 <_init>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	bf00      	nop
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr

0800a630 <_fini>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	bf00      	nop
 800a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a636:	bc08      	pop	{r3}
 800a638:	469e      	mov	lr, r3
 800a63a:	4770      	bx	lr
